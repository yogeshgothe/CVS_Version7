Option Explicit On
Imports FMValveApplication_standard.Declarations
Imports System.Data
Imports System.IO
Imports System.Linq
Imports System.Data.OleDb
Imports System.Data.SqlClient
Imports Oracle.ManagedDataAccess.Client
Imports Oracle.ManagedDataAccess.Types
Imports System.Deployment.Application

'Imports System.Data.OracleClient
'Imports System.Data.Odbc
'Imports Systsem.Data.OracleClient
'Imports System.Data.OracleCommand

Public Class frmValveSizing

    Dim col() As String = {"GSN", "LSN", "Item_No", "Sheet_No", "Branch", "column6", "column7", "column8", "column9", "column10", "column11", "Customer", "Project", "OfferNo", "RevNo", "TagNo", "Qty", "Date", "Time", "UnitsType", "Fluid", "FluidType", "Model", "Medium", "Flowunits", "Flow1", "Flow2", "Flow3", "TempUnits", "Temp1", "Temp2", "Temp3", "PressUnit", "IPress1", "IPress2", "IPress3", "OPress1", "OPress2", "OPress3", "DPPress1", "DPPress2", "DPPress3", "ChkMol", "DensUnits", "MolWgt", "Dens1", "Dens2", "Dens3", "ChkVisc", "ViscUnits", "Visc1", "Visc2", "Visc3", "ToutPress1", "ToutPress2", "ToutPress3", "ToutsatPress1", "ToutsatPress2", "ToutsatPress3", "CriticalPressUnits", "CriticalPress1", "CriticalPress2", "CriticalPress3", "VapourPressUnits", "VapourPress1", "VapourPress2", "VapourPress3", "Zcase1", "Zcase2", "Zcase3", "Xcase1", "Xcase2", "Xcase3", "Kcase1", "Kcase2", "Kcase3", "DryFract1", "DryFrac2", "DryFrac3", "TsatInletPress1", "TsatInletPress2", "TsatInletPress3", "SelectP2orDP", "SelectQorW", "SalesEngg", "CustomerRef", "column87", "column88", "column89", "column90", "column91", "column92", "MOC", "DesignPress", "DesignTemp", "SuggRating", "cmbSuggRating", "FinalRating", "Areaunits", "InletPipe", "lblSuggPipeSize", "PipeDia", "lblFinalOutletPipe", "OSch", "ISch", "Noise_ValveID", "Noise_ID", "Noise_Schedule", "Noise_OutletPipeDia", "InletPipeSize", "InletPipeID", "TrimStyle", "cmbVelocityRule", "FlowDirection", "Charachterstics", "Trim", "SuggMaxKv", "SuggValveSiz", "KvOverride", "ValveSizeOverride", "lblKvMaxValue", "lblFinalValveSize", "Bonnet", "EndConn", "FinalDesignTemperatureInlet", "column126", "column127", "column128", "column129", "column130", "column131", "column132", "column133", "column134", "ActuatorType", "Balancing", "AirFail", "Leakage", "Packing", "Sealing", "DPShutoff", "AirPressUnits", "AirPress", "SeatDia", "FinalForce", "HandWheel", "SuggActuator", "SelActuator", "FinalActuator", "InitialSpringRange", "FinalSpringRange", "NoofSprings", "MKSActuator", "MKSInitialSpringRange", "MKSFinalSpringRange", "SelectedForce", "SuggestedForce", "column158", "column159", "column160", "column161", "BodyMaterial", "Plug", "Seat", "TopMaterials", "Gasket", "Painting", "Positioner", "Sov", "AFR", "ALR", "LimitSwitch", "VolBooster", "PosnTrans", "VTank", "Roborter", "ItoP", "QEV", "Certification", "Tubing", "Guiding", "PositionerMake", "AFRMake", "ALRMake", "SOVMake", "VBMake", "LimitSwitchMake", "QEVMake", "PaintingACC", "InitialCvCase1", "InitialCvCase2", "InitialCvCase3", "InitialKvCase1", "InitialKvCase2", "InitialKvCase3", "FinalCvCase1", "FinalCvCase2", "FinalCVCase3", "FinalKvCase1", "FinalKvCase2", "FinalKvcase3", "StrokeCase1", "StrokeCase2", "StrokeCase3", "FlowtypeCase1", "FlowtypeCase2", "FlowtypeCase3", "SeverityCase1", "SeverityCase2", "SeverityCase3", "VelocityValveInletCase1", "VelocityValveInletCase2", "VelocityValveInletCase3", "VelocityValveOutletCase1", "VelocityValveOutletCase2", "VelocityValveOutletCase3", "VelocityInletPipeCase1", "VelocityInletPipeCase2", "VelocityInletPipeCase3", "VelocityOutletPipeCase1", "VelocityOutletPipeCase2", "VelocityOutletPipeCase3", "column223", "column224", "column225", "column226", "column227", "column228", "column229", "column230", "column231", "column232", "NoiseCase1", "NoiseCase2", "NoiseCase3", "chkNoiseAttenuation", "AttenuatedNoiseCase1", "AttenuatedNoiseCase2", "AttenuatedNoiseCase3", "chkInsulation", "AttnPressDropCase1", "AttnPressDropCase2", "AttnPressDropCase3", "MachNoVavleOutCase1", "MachNoVavleOutCase2", "MachNoVavleOutCase3", "MachNoPipeOutCase1", "MachNoPipeOutCase2", "MachNoPipeOutCase3", "FLCase1", "FLCase2", "FLCase3", "XTCase1", "XTCase2", "XTCase3", "FP", "Valve_Model", "FinalValveSize", "FinalKVCase1_2", "FinalKVCase2_2", "FinalKVCase3_2", "FinalKVmax_ValveSize", "FDCase1", "FDCase2", "FDCase3", "SeatDia2", "User_Notes1", "User_Notes2", "User_Notes3", "KvCage", "PrBl_SeatDia", "FPKvCase1", "FPKvCase2", "FPKvCase3", "BaffleKvCase1", "BaffleKvCase2", "BaffleKvCase3", "Stages", "WaterPressureText", "WaterTemperature", "WaterFlowCase1Text", "WaterFlowCase1Text2", "WaterFlowCase1Text3", "P2OutWCase1Text", "P2OutWCase2Text", "P2OutWCase3Text", "WaterFlowRateCase1", "WaterFlowRateCase2", "WaterFlowRateCase3", "OutletWaterPressureCase1", "OutletWaterPressureCase2", "OutletWaterPressureCase3", "column293", "column294", "column295", "column296", "column297", "column298", "column299", "column300", "column301", "column302", "FlowrateForPipeDiaCalcCase1", "FlowrateForPipeDiaCalcCase2", "FlowrateForPipeDiaCalcCase3", "FluidVelocityCase1", "FluidVelocityCase2", "FluidVelocityCase3", "SoundVelocityCase1", "SoundVelocityCase2", "SoundVelocityCase3", "PRDS_IP_FlowrateForPipeDiaCase1", "PRDS_IP_FlowrateForPipeDiaCase2", "PRDS_IP_FlowrateForPipeDiaCase3", "PRDS_OP_FlowrateForPipeDiaCase1", "PRDS_OP_FlowrateForPipeDiaCase2", "PRDS_OP_FlowrateForPipeDiaCase3", "VelocityRuleFlag", "FinalInletPressureCase1", "FinalInletPressureCase2", "FinalInletPressureCase3", "FinalOutletPressureCase1", "FinalOutletPressureCase2", "FinaloutletPressureCase3", "FinalPressureDropCase1", "FinalPressureDropCase2", "FinalPressureDropCase3", "FinalInletTemperatureCase1", "FinalInletTemperatureCase2", "FinalInletTemperatureCase3", "FinalVapourPressureCase1", "FinalVapourPressureCase2", "FinalVapourPressureCase3", "FinalCriticalPressureCase1", "FinalCriticalPressureCase2", "FinalCriticalPressureCase3", "FinalViscosityCase1", "FinalViscosityCase2", "FinalViscosityCase3", "FinalDensityCase1", "FinalDensityCase2", "FinalDensityCase3", "FinalFlowrateCase1", "FinalFlowrateCase2", "FinalFlowrateCase3", "SupplyAirPressure", "DPShutoff2", "Tubing_Make", "Tubing_Size", "Tubing_MOC"}
    Dim updateQuery As String


    Public Sub OpenOfficeWriteDatasheetData()

        'Dim DATASheetApp As New excel.Application
        Dim CHECKMOLECULAR, CHECKNOISEATTN, CHECKINSULATION, CHECKBAFFLE As Boolean
        Dim Rowno, Columnno As Integer
        Dim UNITSTYPE, FLUIDTYPE, FLUID, MODEL, MEDIUM As String
        'Dim formatRange As excel.Range

        Dim Datasheet_Rowno As Integer
        'Dim shape As excel.Shape
        Dim Database_Columnno As Integer

        'Dim TempArray(,) As Object 'currently 269 used
        Try
            lblFileName.Text = "FileName: " & FileName
            If XMLFilename = "" Then
                MsgBox("Please Load Project File")
                'Exit Sub
            End If


            lblDatasheetPrinting.Visible = True
            lblPrintRecordNo.Visible = True


            For i = 1 To dt_OpenOffice.Rows.Count - 1 Step 1
                Datasheet_Rowno = i

                '' Dim dttemp As DataTable = ds_OpenOfficePrint.Tables(CInt(Database_Rowno - 1))


                With ds_OpenOfficePrint.Tables(i - 1)



                    ' *************************************************START SHOWING DATA **********************************

                    .Rows(0)(8) = "CONTROL VALVE DATASHEET"

                    .Rows(2)(8) = "Calculation Std.:"
                    .Rows(3)(8) = "Customer Name:"
                    .Rows(4)(8) = "Project:"
                    .Rows(5)(8) = "Tag No.:"
                    .Rows(1)(8) = "Size Valve"
                    .Rows(9)(1) = " Field Parameters"



                    Database_Columnno = DataSection1_Field
                    .Rows(2)(13) = "ISA 75.01.01"
                    .Rows(3)(13) = dt_OpenOffice.Rows(Datasheet_Rowno)(Database_Columnno + 1) 'Customer

                    .Rows(4)(13) = dt_OpenOffice.Rows(Datasheet_Rowno)(Database_Columnno + 2) 'Project 

                    ' Temp_TagName = dt_OpenOffice(Datasheet_Rowno)(DataSection1_Field + 5) 'Tag No.
                    Temp_TagName = If(IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection1_Field + 5)), String.Empty, dt_OpenOffice(Datasheet_Rowno)(DataSection1_Field + 5))
                    If Temp_TagName = "" Then
                        Temp_TagName = "Tag" & i
                    End If
                    .Rows(5)(13) = Temp_TagName
                    .TableName = Temp_TagName


                    .Rows(0)(23) = "Offer No.:"
                    .Rows(1)(23) = "Item Sr.No.:"
                    .Rows(2)(23) = "Sheet"
                    .Rows(3)(23) = "Customer Ref.:"
                    .Rows(4)(23) = "Revision:"
                    .Rows(5)(23) = "Quantity:"
                    .Rows(6)(23) = "Date:"
                    .Rows(7)(23) = "Sales Engg.:  "

                    .Rows(0)(27) = dt_OpenOffice.Rows(Datasheet_Rowno)(Database_Columnno + 3)   'Offer no.
                    .Rows(1)(27) = dt_OpenOffice.Rows(Datasheet_Rowno)(2)       'Serial No in the Database
                    .Rows(2)(27) = dt_OpenOffice.Rows(Datasheet_Rowno)(3)                                             ' Sheet No
                    .Rows(3)(27) = dt_OpenOffice.Rows(Datasheet_Rowno)(Database_Columnno + 75) 'Customer Ref
                    .Rows(4)(27) = dt_OpenOffice.Rows(Datasheet_Rowno)(Database_Columnno + 4)  'Revision No 
                    .Rows(5)(27) = dt_OpenOffice.Rows(Datasheet_Rowno)(Database_Columnno + 6) 'Quantity
                    .Rows(6)(27) = DateTime.Now.ToString("d")
                    .Rows(7)(27) = dt_OpenOffice.Rows(Datasheet_Rowno)(Database_Columnno + 74) 'Sales Engineer



                    UNITSTYPE = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 11)
                    FLUIDTYPE = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 9)
                    FLUID = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 10)
                    MODEL = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 12)
                    ' MEDIUM = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 13)



                    ''Initial Important Values

                    .Rows(8)(1) = " MEDIUM"

                    .Rows(8)(4) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 13)

                    .Rows(8)(8) = "PCritcal"

                    If FLUIDTYPE = "InCompressible" Then
                        .Rows(8)(12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 50) & "  " & dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 49) 'units'Critical Pressure
                    End If

                    .Rows(8)(18) = "Mol.Weight"

                    .Rows(8)(21) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 34)
                    .Rows(8)(24) = "kg/kmol"


                    .Rows(9)(8) = "Unit"
                    .Rows(9)(12) = "Min Flow"
                    .Rows(9)(16) = "Avg Flow"
                    .Rows(9)(20) = "Max Flow"

                    Rowno = 9
                    Columnno = 0
                    ''  TempArray(Database_Rowno, Database_Columnno + 1)()
                    .Rows(Rowno + 1)(Columnno + 1) = " Flowrate"


                    .Rows(Rowno + 1)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 14)
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 15)) Then
                        .Rows(Rowno + 1)(Columnno + 12) = If(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 15) = 0, "", dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 15))
                    Else
                        .Rows(Rowno + 1)(Columnno + 12) = ""
                    End If
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 16)) Then
                        .Rows(Rowno + 1)(Columnno + 16) = If(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 16) = 0, "", dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 16))
                    Else
                        .Rows(Rowno + 1)(Columnno + 16) = ""
                    End If
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 17)) Then
                        .Rows(Rowno + 1)(Columnno + 20) = If(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 17) = 0, "", dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 17))
                    Else
                        .Rows(Rowno + 1)(Columnno + 20) = ""
                    End If


                    .Rows(Rowno + 2)(Columnno + 1) = " Inlet Pressure(P1)"
                    .Rows(Rowno + 2)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 22)
                    .Rows(Rowno + 2)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 23)
                    .Rows(Rowno + 2)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 24)
                    .Rows(Rowno + 2)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 25)

                    .Rows(Rowno + 3)(Columnno + 1) = " Outlet Pressure(P2)"
                    .Rows(Rowno + 3)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 22)
                    .Rows(Rowno + 3)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 26)
                    .Rows(Rowno + 3)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 27)
                    .Rows(Rowno + 3)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 28)


                    .Rows(Rowno + 4)(Columnno + 1) = " Pressure Drop"
                    .Rows(Rowno + 4)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 22)
                    .Rows(Rowno + 4)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 29)
                    .Rows(Rowno + 4)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 30)
                    .Rows(Rowno + 4)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 31)


                    .Rows(Rowno + 5)(Columnno + 1) = " Temperature (T1)"
                    .Rows(Rowno + 5)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 18)
                    .Rows(Rowno + 5)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 19)
                    .Rows(Rowno + 5)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 20)
                    .Rows(Rowno + 5)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 21)


                    CHECKMOLECULAR = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 32)
                    If CHECKMOLECULAR = False Then
                        .Rows(Rowno + 6)(Columnno + 1) = " Density/Sp.Gravity"
                        If FLUIDTYPE = "InCompressible" And FLUID = "Water" Then
                            .Rows(Rowno + 6)(Columnno + 1) = "Sp.Gravity"
                        ElseIf FLUIDTYPE = "Compressible" And FLUID = "Steam" Then
                            If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
                                .Rows(Rowno + 6)(Columnno + 8) = "kg/m3"
                            Else
                                .Rows(Rowno + 6)(Columnno + 8) = "lb/ft3"
                            End If

                        Else
                            .Rows(Rowno + 6)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 33)
                        End If
                        .Rows(Rowno + 6)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 35)
                        .Rows(Rowno + 6)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 36)
                        .Rows(Rowno + 6)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 37)
                    Else
                        ''.Rows(Rowno + 6)(Columnno) = " Mol. Weight"
                        ''.Rows(Rowno + 6)(Columnno + 1) = dt_OpenOffice(Database_Rowno)(Database_Columnno + 34)
                    End If

                    .Rows(Rowno + 7)(Columnno + 1) = " Vapour Pressure"
                    '   If chkViscosity.Checked = True Then
                    .Rows(Rowno + 7)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 53)

                    'If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 54) = 0 Then .Rows(Rowno + 7)(Columnno + 12) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 54)), 2) Else .Rows(Rowno + 7)(Columnno + 12) = ""
                    'If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 55) = 0 Then .Rows(Rowno + 7)(Columnno + 16) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 55)), 2) Else .Rows(Rowno + 7)(Columnno + 16) = ""
                    'If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 56) = 0 Then .Rows(Rowno + 7)(Columnno + 20) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 56)), 2) Else .Rows(Rowno + 7)(Columnno + 20) = ""

                    .Rows(Rowno + 7)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 54)
                    .Rows(Rowno + 7)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 55)
                    .Rows(Rowno + 7)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 56)


                    .Rows(Rowno + 8)(Columnno + 1) = " Viscosity"
                    '.Rows(Rowno + 8)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 39)
                    '.Rows(Rowno + 8)(Columnno + 12) = Format((dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 40)), "0.00E-00")
                    '.Rows(Rowno + 8)(Columnno + 16) = Format((dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 41)), "0.00E-00")
                    '.Rows(Rowno + 8)(Columnno + 20) = Format((dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 42)), "0.00E-00")

                    .Rows(Rowno + 8)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 40)
                    .Rows(Rowno + 8)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 41)
                    .Rows(Rowno + 8)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 42)



                    .Rows(Rowno + 9)(Columnno + 1) = " Isentropic Expansion (K)"
                    If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 63) = 0 Then .Rows(Rowno + 9)(Columnno + 12) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 63)), 2) Else .Rows(Rowno + 9)(Columnno + 12) = ""
                    If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 64) = 0 Then .Rows(Rowno + 9)(Columnno + 16) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 64)), 2) Else .Rows(Rowno + 9)(Columnno + 16) = ""
                    If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 65) = 0 Then .Rows(Rowno + 9)(Columnno + 20) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 65)), 2) Else .Rows(Rowno + 9)(Columnno + 20) = ""

                    .Rows(Rowno + 10)(Columnno + 1) = " Compressibility (Z)"
                    If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 57) = 0 Then .Rows(Rowno + 10)(Columnno + 12) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 57)), 2) Else .Rows(Rowno + 10)(Columnno + 12) = ""
                    If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 58) = 0 Then .Rows(Rowno + 10)(Columnno + 16) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 58)), 2) Else .Rows(Rowno + 10)(Columnno + 16) = ""
                    If Not dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 59) = 0 Then .Rows(Rowno + 10)(Columnno + 20) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 59)), 2) Else .Rows(Rowno + 10)(Columnno + 20) = ""



                    ''   If cmbFluidType.Text = "Compressible" And cmbFluid.Text = "Steam" Then
                    ' '  Change Row  Numbers for TsatInletPressure

                    .Rows(Rowno + 11)(Columnno + 1) = " Tsat at InletPress."
                    .Rows(Rowno + 11)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 18) ' Temp Units

                    .Rows(Rowno + 11)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 69)
                    .Rows(Rowno + 11)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 70)
                    .Rows(Rowno + 11)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 71)
                


                    .Rows(Rowno + 12)(Columnno + 1) = " Tsat at OutletPress."
                    .Rows(Rowno + 12)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 18) 'Temp units
                    .Rows(Rowno + 12)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 46)
                    .Rows(Rowno + 12)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 47)
                    .Rows(Rowno + 12)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 48)
                 

                    .Rows(Rowno + 13)(Columnno + 1) = " T at OutletPress.(T2)"
                    .Rows(Rowno + 13)(Columnno + 8) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 18) 'Temp units
                    .Rows(Rowno + 13)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 43)
                    .Rows(Rowno + 13)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 44)
                    .Rows(Rowno + 13)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 45)



                    ''     End If

                    If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
                        .Rows(Rowno + 14)(Columnno + 1) = " Calculated Kv"
                        .Rows(Rowno + 14)(Columnno + 8) = "m3/h"
                        If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 10)) Then
                            If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 10) = "0" Then .Rows(Rowno + 14)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 10) Else .Rows(Rowno + 14)(Columnno + 12) = ""
                        Else
                            .Rows(Rowno + 14)(Columnno + 12) = ""
                        End If
                        If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 11)) Then
                            If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 11) = "0" Then .Rows(Rowno + 14)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 11) Else .Rows(Rowno + 14)(Columnno + 16) = ""
                        Else
                            .Rows(Rowno + 14)(Columnno + 16) = ""
                        End If
                        If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 12)) Then
                            If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 12) = "0" Then .Rows(Rowno + 14)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 12) Else .Rows(Rowno + 14)(Columnno + 20) = ""
                        Else
                            .Rows(Rowno + 14)(Columnno + 20) = ""
                        End If
                    Else    'FPS
                        .Rows(Rowno + 14)(Columnno + 1) = " Calculated Cv"
                        .Rows(Rowno + 14)(Columnno + 8) = "gpm"
                        If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 7)) Then
                            If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 7) = "0" Then .Rows(Rowno + 14)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 7) Else .Rows(Rowno + 14)(Columnno + 12) = ""
                        Else
                            .Rows(Rowno + 14)(Columnno + 12) = ""
                        End If
                        If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 8)) Then
                            If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 8) = "0" Then .Rows(Rowno + 14)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 8) Else .Rows(Rowno + 14)(Columnno + 16) = ""
                        Else
                            .Rows(Rowno + 14)(Columnno + 16) = ""
                        End If
                        If Not IsDBNull(.Rows(Rowno + 14)(Columnno + 20)) Then
                            If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 9) = "0" Then .Rows(Rowno + 14)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 9) Else .Rows(Rowno + 14)(Columnno + 20) = ""
                        Else
                            .Rows(Rowno + 14)(Columnno + 20) = ""
                        End If
                    End If

                    .Rows(Rowno + 15)(Columnno + 1) = " Stroke"
                    .Rows(Rowno + 15)(Columnno + 8) = "%"
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 13)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 13) = "0" Then .Rows(Rowno + 15)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 13) Else .Rows(Rowno + 15)(Columnno + 12) = ""
                    Else
                        .Rows(Rowno + 15)(Columnno + 12) = ""
                    End If
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 14)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 14) = "0" Then .Rows(Rowno + 15)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 14) Else .Rows(Rowno + 15)(Columnno + 16) = ""
                    Else
                        .Rows(Rowno + 15)(Columnno + 16) = ""
                    End If

                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 15)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 15) = "0" Then .Rows(Rowno + 15)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 15) Else .Rows(Rowno + 15)(Columnno + 20) = ""
                    Else
                        .Rows(Rowno + 15)(Columnno + 20) = ""
                    End If


                    .Rows(Rowno + 16)(Columnno + 1) = " Flow Severity"
                    .Rows(Rowno + 16)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 19)
                    .Rows(Rowno + 16)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 20)
                    .Rows(Rowno + 16)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 21)

                    '.Rows(Rowno + 16)(Columnno + 1) = "Flashing"
                    '.Rows(Rowno + 16)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 66)
                    '.Rows(Rowno + 16)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 67)
                    '.Rows(Rowno + 16)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 68)

                    CHECKNOISEATTN = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 4)
                    CHECKBAFFLE = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 36)
                    CHECKINSULATION = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 8)

                    Dim printNoise As Object
                    If CHECKNOISEATTN = False And CHECKBAFFLE = False Then
                        .Rows(Rowno + 17)(Columnno + 1) = " Predicted Noise"
                        .Rows(Rowno + 17)(Columnno + 8) = "dB(A)"
                        printNoise = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 1)
                        If IsDBNull(printNoise) Then
                            .Rows(Rowno + 17)(Columnno + 12) = ""
                        Else
                            .Rows(Rowno + 17)(Columnno + 12) = If(printNoise < 60, "<60", printNoise)
                        End If

                        printNoise = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 2)
                        If IsDBNull(printNoise) Then
                            .Rows(Rowno + 17)(Columnno + 16) = ""
                        Else
                            .Rows(Rowno + 17)(Columnno + 16) = If(printNoise < 60, "<60", printNoise)
                        End If
                        printNoise = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 3)
                        If IsDBNull(printNoise) Then
                            .Rows(Rowno + 17)(Columnno + 20) = ""
                        Else
                            .Rows(Rowno + 17)(Columnno + 20) = If(printNoise < 60, "<60", printNoise)
                        End If



                    Else
                        .Rows(Rowno + 17)(Columnno + 1) = " Predicted Noise"
                        .Rows(Rowno + 17)(Columnno + 8) = "dB(A) Attenuated"

                        printNoise = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 5)
                        If IsDBNull(printNoise) Then
                            .Rows(Rowno + 17)(Columnno + 12) = ""
                        Else
                            .Rows(Rowno + 17)(Columnno + 12) = If(printNoise < 60, "<60", printNoise)
                        End If
                        printNoise = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 6)
                        If IsDBNull(printNoise) Then
                            .Rows(Rowno + 17)(Columnno + 16) = ""
                        Else
                            .Rows(Rowno + 17)(Columnno + 16) = If(printNoise < 60, "<60", printNoise)
                        End If
                        printNoise = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 7)
                        If IsDBNull(printNoise) Then
                            .Rows(Rowno + 17)(Columnno + 20) = ""
                        Else
                            .Rows(Rowno + 17)(Columnno + 20) = If(dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 7) < 60, "<60", dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 7))
                        End If

                    End If

                    'Inlet velocites

                    .Rows(Rowno + 18)(Columnno + 1) = " Velocity ValveIn/PipeIn"
                    If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
                        .Rows(Rowno + 18)(Columnno + 8) = "m/s"
                    Else
                        .Rows(Rowno + 18)(Columnno + 8) = "ft/s"
                    End If
                    'valve Inlet
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 22)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 22) = "0" Then .Rows(Rowno + 18)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 22) Else .Rows(Rowno + 18)(Columnno + 12) = ""
                    Else
                        .Rows(Rowno + 18)(Columnno + 12) = ""
                    End If

                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 23)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 23) = "0" Then .Rows(Rowno + 18)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 23) Else .Rows(Rowno + 18)(Columnno + 16) = ""
                    Else
                        .Rows(Rowno + 18)(Columnno + 16) = ""
                    End If
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 24)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 24) = "0" Then .Rows(Rowno + 18)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 24) Else .Rows(Rowno + 18)(Columnno + 20) = ""
                    Else
                        .Rows(Rowno + 18)(Columnno + 20) = ""
                    End If



                    'Pipe Inlet
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 28)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 28) = "0" Then .Rows(Rowno + 18)(Columnno + 14) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 28) Else .Rows(Rowno + 18)(Columnno + 14) = ""
                    Else
                        .Rows(Rowno + 18)(Columnno + 14) = ""
                    End If
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 29)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 29) = "0" Then .Rows(Rowno + 18)(Columnno + 18) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 29) Else .Rows(Rowno + 18)(Columnno + 18) = ""
                    Else
                        .Rows(Rowno + 18)(Columnno + 18) = ""
                    End If
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 30)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 30) = "0" Then .Rows(Rowno + 18)(Columnno + 22) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 30) Else .Rows(Rowno + 18)(Columnno + 22) = ""
                    Else
                        .Rows(Rowno + 18)(Columnno + 22) = ""
                    End If

                    'Outlet Velocities
                    .Rows(Rowno + 19)(Columnno + 1) = " Velocity ValveOut/PipeOut"
                    If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
                        .Rows(Rowno + 19)(Columnno + 8) = "m/s"
                    Else
                        .Rows(Rowno + 19)(Columnno + 8) = "ft/s"
                    End If

                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 25)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 25) = "0" Then .Rows(Rowno + 19)(Columnno + 12) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 25) Else .Rows(Rowno + 19)(Columnno + 12) = ""
                    Else
                        .Rows(Rowno + 19)(Columnno + 12) = ""
                    End If
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 26)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 26) = "0" Then .Rows(Rowno + 19)(Columnno + 16) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 26) Else .Rows(Rowno + 19)(Columnno + 16) = ""
                    Else
                        .Rows(Rowno + 19)(Columnno + 16) = ""
                    End If
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 27)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 27) = "0" Then .Rows(Rowno + 19)(Columnno + 20) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 27) Else .Rows(Rowno + 19)(Columnno + 20) = ""
                    Else
                        .Rows(Rowno + 19)(Columnno + 20) = ""
                    End If

                    '' Pipe Out
                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 31)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 31) = "0" Then .Rows(Rowno + 19)(Columnno + 14) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 31) Else .Rows(Rowno + 19)(Columnno + 14) = ""
                    Else
                        .Rows(Rowno + 19)(Columnno + 14) = ""
                    End If

                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 32)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 32) = "0" Then .Rows(Rowno + 19)(Columnno + 18) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 32) Else .Rows(Rowno + 19)(Columnno + 18) = ""
                    Else
                        .Rows(Rowno + 19)(Columnno + 18) = ""
                    End If

                    If Not IsDBNull(dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 33)) Then
                        If Not dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 33) = "0" Then .Rows(Rowno + 19)(Columnno + 22) = dt_OpenOffice(Datasheet_Rowno)(DataSection5_Output1 + 33) Else .Rows(Rowno + 19)(Columnno + 22) = ""
                    Else
                        .Rows(Rowno + 19)(Columnno + 22) = ""
                    End If


                    '        '***********************************************************************************************************************

                    .Rows(29)(1) = "LINE"

                    .Rows(30)(1) = " Pipe Size&Sch"


                    .Rows(30)(6) = "In"
                    .Rows(31)(6) = "Out"
                    .Rows(32)(1) = " Pipe Insulation dBA"
                    Rowno = 30
                    'Inlet Pipe and area units
                    .Rows(30)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 8) & " " & dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 7)
                    .Rows(30)(12) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 13) 'Outlet Schedule

                    .Rows(31)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 10) & " " & dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 7)
                    .Rows(31)(12) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 12) ' Outlet Schedule



                    If CHECKINSULATION = True Then
                        .Rows(32)(8) = "4 inch Thickness(-12dBA)"
                    Else
                        .Rows(32)(8) = "No"
                    End If

                    .Rows(33)(1) = "VALVE BODY/BONNET"
                    '        '*************************************************************************************

                    .Rows(34)(1) = " Design. Press/Temp"

                    .Rows(34)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 2)  'design Pressure

                    .Rows(34)(10) = dt_OpenOffice(Datasheet_Rowno)(DataSection1_Field + 22) ' Pressure UNITS

                    .Rows(34)(12) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 3) 'design temperature

                    .Rows(34)(14) = dt_OpenOffice(Datasheet_Rowno)(DataSection1_Field + 18)

                    .Rows(35)(1) = " Model Code & Type"
                    .Rows(35)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 25) & " Globe"
                    .Rows(36)(1) = " Size & Rating"
                    .Rows(36)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 30) 'final valve size
                    .Rows(36)(10) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 7)  'Area Units
                    .Rows(36)(12) = "#" & dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 6) 'Final Ratings
                    .Rows(37)(1) = " Bonnet Type"

                    .Rows(37)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 31)

                    .Rows(38)(1) = " Inlet Connection"

                    .Rows(38)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 32)
                    .Rows(39)(1) = " Outlet Connection"

                    .Rows(39)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 32)
                    .Rows(40)(1) = " Body Material"

                    .Rows(40)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 1)
                    .Rows(41)(1) = " Body Bonnet Gasket "
                    .Rows(41)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 5)
                    .Rows(42)(1) = " Painting "
                    .Rows(42)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 6)
                    '        '*****************************************************************************************************

                    .Rows(43)(1) = "TRIM/INTERNALS"

                    .Rows(44)(1) = " Plug Material"
                    .Rows(45)(1) = " Seat Material"
                    .Rows(46)(1) = " Trim Style"
                    .Rows(47)(1) = " Kv Characterstics"
                    .Rows(48)(1) = " Noise Attenuation Stage"
                    .Rows(49)(1) = " LeakCI/Bal"
                    .Rows(50)(1) = " Sealing"
                    .Rows(51)(1) = " Seat Diameter"
                    .Rows(52)(1) = " Packing/Gasket"
                    .Rows(53)(1) = " Force to open valve"

                    .Rows(54)(1) = " Test & Certification"
                    .Rows(56)(1) = " "

                    '        .Range("I43:P43").Merge()
                    .Rows(44)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 2)  'Plug  Material
                    '        .Range("I44:P44").Merge()
                    .Rows(45)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 3) 'Seat Material

                    '        .Range("I45:P45").Merge()
                    .Rows(46)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 35) & "  " & dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 22)
                    .Rows(47)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 29) & " " & dt_OpenOffice(Datasheet_Rowno)(DataSection2_MOC + 23)    'Max Kv/Cv selected
                    '    .Rows(47)(12) =     'Characterstics
                    If (dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 4)) = True Then
                        .Rows(48)(8) = "YES"
                    Else
                        .Rows(48)(8) = "NO"
                    End If


                    .Rows(49)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 4) & " / " & dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 2) 'Leak CI / Balancing

                    .Rows(50)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 6)   'Sealing

                    .Rows(51)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 10)

                    If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
                        .Rows(51)(12) = "mm"  'Seat diameter  Units 
                    Else
                        .Rows(51)(12) = "inch"
                    End If


                    .Rows(52)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 5) & "/" & dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 5)   'Packing / Gasket


                    Dim forceunit, springunit As String
                    If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
                        forceunit = "kgf"
                        springunit = "kg/cm2"
                    Else
                        forceunit = "lbs"
                        springunit = "psiG"
                    End If

                    .Rows(53)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 11) & " " & forceunit 'Force

                    .Rows(54)(8) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 18)


                    '        'First Column complete  
                    '        '**********************************************************************************************************************

                    '        '*************************************************************************************************

                    .Rows(29)(17) = "ACTUATOR"
                    .Rows(30)(17) = " Shutoff Pressure"
                    .Rows(30)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 7) & " " & dt_OpenOffice(Datasheet_Rowno)(DataSection1_Field + 22) ' Shutoff Pressure + units
                    .Rows(31)(17) = " Type"
                    .Rows(31)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 1) 'Actuator  type 
                    .Rows(32)(17) = " Model"
                    .Rows(32)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 15) 'Model
                    .Rows(33)(17) = " Air Fail Mode"
                    .Rows(33)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 3) 'FailurePosition
                    .Rows(34)(17) = " Max Allow.Air Pressure"

                    If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
                        .Rows(34)(23) = "6 barg "  'Max Pressure
                    Else
                        .Rows(34)(23) = "90 psiG" 'Max Pressure
                    End If

                    .Rows(35)(17) = " Air Supply Pressure"
                    '        .Range("X35:AE35").Merge()
                    .Rows(35)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 9) & " " & dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 8)
                    .Rows(36)(17) = " Spring Range"
                    .Rows(36)(23) = Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 16)), 2) & " to " & Math.Round(CSng(dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 17)), 2) & " " & springunit
                    .Rows(37)(17) = " Orientation"
                    .Rows(37)(23) = "Vertical"                      '11102020
                    .Rows(38)(17) = " Handwheel Type"
                    .Rows(38)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection3_Actuator + 12)
                    .Rows(39)(17) = " Painting"
                    .Rows(39)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 28)

                    .Rows(40)(17) = "POSITIONER"
                    .Rows(41)(17) = " Type"
                    .Rows(41)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 21)
                    .Rows(42)(17) = " Model"
                    .Rows(42)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 7)
                    .Rows(43)(17) = " Input&Output Signal"
                    .Rows(43)(23) = ""
                    .Rows(44)(17) = "AIRSET"
                    .Rows(45)(17) = " Make"
                    .Rows(45)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 22) 'AFR 
                    .Rows(46)(17) = " Model"
                    .Rows(46)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 9) 'AFR 
                    .Rows(47)(17) = " Gauges provided"
                    .Rows(47)(23) = "YES"

                    .Rows(48)(17) = " SWITCHES"
                    .Rows(49)(17) = " Make"
                    .Rows(49)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 26)
                    .Rows(50)(17) = " Model"
                    .Rows(50)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 11)

                    .Rows(51)(17) = "SOV"

                    .Rows(52)(17) = " Make"
                    .Rows(52)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 24)
                    .Rows(53)(17) = " Model"
                    .Rows(53)(23) = dt_OpenOffice(Datasheet_Rowno)(DataSection4_Materials + 8)

                    .Rows(54)(17) = "ACCESSORIES"

                    .Rows(58)(1) = "NOTES"
                    .Rows(59)(1) = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 35)
                    .Rows(61)(1) = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 36)
                    .Rows(63)(1) = dt_OpenOffice(Datasheet_Rowno)(DataSection6_Output2 + 37)

                    '   frmDataGrid.DataGridView1.DataSource = dttemp
                End With
            Next
        Catch ex As Exception
            MsgBox("OpenOfficeWriteDatasheet :   " & ex.Message)
        End Try
    End Sub


    Public Function DefaultFormloads()

        Me.cmbFluidType.SelectedIndex = 1
        Me.cmbFluid.SelectedIndex = 0
        cmbUnitsType.SelectedIndex = 2
        frmCustomerDetails.txtCustomer.Text = "FM"
        frmCustomerDetails.txtProject.Text = "JET"
        frmCustomerDetails.txtOffferNo.Text = "2"
        frmCustomerDetails.txtRevNo.Text = "1.0"
        frmCustomerDetails.txtTagNo.Text = "121A"
        frmCustomerDetails.txtQty.Text = "2"
        ''Pressure Units
        cmbFlowrate.SelectedIndex = 0

        Me.cmbPressureUnits.SelectedIndex = 1
        Me.cmbAirPressureUnits.SelectedIndex = 1



        Me.cmbTemperatureUnits.SelectedIndex = 0


        Me.cmbMOC.SelectedIndex = 0
        'Me.cmbDesignPressure.SelectedIndex = 1




        Me.cmbAreaunits.SelectedIndex = 0

        txtInletPressureCase1.Text = 50
        txtInletPressureCase2.Text = 40
        txtInletPressureCase3.Text = 30

        txtOutletPressure1.Text = 0.5
        txtOutletPressure2.Text = 0.5
        txtOutletPressure3.Text = 0.5

        txtInletTemperatureCase1.Text = 370
        txtInletTemperatureCase2.Text = 370
        txtInletTemperatureCase3.Text = 370

        txtFlowrateCase1.Text = 3000
        txtFlowrateCase2.Text = 6000
        txtFlowrateCase3.Text = 7000
        txtDesignPressureInlet.Text = 50
        txtDesignTemperatureInlet.Text = 370
        ''txtViscosityCase1.Text = 0.000001
        ''txtViscosityCase2.Text = 0.000001
        ''txtViscosityCase3.Text = 0.000001

        ''txtK_Case1.Text = 1.4
        ''txtK_Case2.Text = 1.4
        ''txtK_Case3.Text = 1.4

        ''txtZ_Case1.Text = 1
        ''txtZ_Case2.Text = 1
        ''txtZ_Case3.Text = 1

        Return Nothing

    End Function

    Public Function ConvertCSV(ByVal mFile As String, ByVal mTablename As String, ByVal delimiter As String) As DataSet
        Try
            ' The dataset to return
            Dim ds As New DataSet

            ' Open the file with a stream reader
            Dim sr As New StreamReader(mFile)

            ' Split the first line into the fields and add to string array called columns
            Dim columns As String() = sr.ReadLine().Split(delimiter.ToCharArray())

            ' Add the new Datatable to the DataSet
            ds.Tables.Add(mTablename)

            ' Cylcle the columns, adding those that do not exist yet and sequencing the ones that do
            For Each col As String In columns
                Dim added As Boolean = False
                Dim _next As String = ""
                Dim i As Integer = 0

                While Not added
                    ' Build the column name and remove any unwanted characters
                    Dim columnname As String = col + _next
                    'columnname = columnname.Replace("#", "")
                    'columnname = columnname.Replace("'", "")
                    'columnname = columnname.Replace("&", "")
                    'columnname = columnname.Replace("""", "")

                    ' See if the column already exists
                    If Not ds.Tables(mTablename).Columns.Contains(columnname) Then
                        ds.Tables(mTablename).Columns.Add(columnname)
                        added = True
                    Else
                        ' If it did exist then we increment the sequencer and try again
                        i = i + 1
                        _next = "_" + i.ToString()
                    End If
                End While
            Next


            ' Read the rest of the data in the file
            Dim allData As String = sr.ReadToEnd()

            ' Split off each row at the Carriage Return / Line Feed
            ' Default line ending in most windows exports
            ' You may have to edit this to match your particular file
            ' This will work for Excel, Access etc default exports.
            Dim rows As String() = allData.Split(vbCr.ToCharArray)

            ' Add each row to the Dataset
            For Each rowValue As String In rows

                ' Remove quotation field markers
                Dim row As String = rowValue.ToString().Replace("""", "")

                ' Split the row at the delimiter
                Dim items As String() = row.Split(delimiter.ToCharArray())


                ' Add the item to the dataset
                ds.Tables(mTablename).Rows.Add(items)

            Next

            ' Cleanup - Release StreamReader Resources
            sr.Close()
            sr.Dispose()
            ' Return the imported data
            Return ds
        Catch ex As Exception
            MsgBox("ConvertCSV: " & ex.Message, , "Control Valve Sizing Software: Alert")
            Return Nothing
        End Try
    End Function

    Private Sub txtInletPressureCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtWaterTemperature.KeyPress, txtInletPressureCase2.KeyPress, txtInletPressureCase3.KeyPress, txtOutletPressure1.KeyPress, txtOutletPressure2.KeyPress, txtOutletPressure3.KeyPress, txtPressureDropCase1.KeyPress, txtPressureDropCase2.KeyPress, txtPressureDropCase3.KeyPress, txtBaffleKVCase1.KeyPress, txtBaffleKVCase2.KeyPress, txtBaffleKVCase3.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("-0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "-" And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = "-") > 0) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                'MsgBox("Please enter integers only")
                e.Handled = True
                Exit Sub
            End If
        Catch ex As Exception
            MsgBox("Inlet Presssure KeyPress:   " & ex.Source & "  " & ex.Message)
        End Try
    End Sub

    Private Sub cmbPressureUnits_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbPressureUnits.SelectionChangeCommitted
        Try
            If LoadingForm = True Then
                cmbPressureUnits.Text = cmbPressureUnits.SelectedItem
                AllPressureConversions()

                lblDesignPressure.Text = cmbPressureUnits.Text
                lblDPShutoffUnits.Text = cmbPressureUnits.Text
                cmbAirPressureUnits.Text = cmbPressureUnits.Text
                cmbAirPressureUnits.SelectedIndex = cmbAirPressureUnits.FindString(cmbAirPressureUnits.Text)
                lblPwUnits.Text = cmbPressureUnits.Text
               
            End If
        Catch ex As Exception
            MsgBox("Pressure Units:  " & ex.Message)
        End Try

    End Sub

    'Private Sub cmbPressureUnits_TextChanged(sender As Object, e As EventArgs) Handles cmbPressureUnits.TextChanged

    'End Sub

    Private Sub txtInletPressureCase1_Validated(sender As Object, e As EventArgs) Handles txtInletPressureCase1.Validated, txtInletPressureCase2.Validated, txtInletPressureCase3.Validated, txtOutletPressure1.Validated, txtOutletPressure2.Validated, txtOutletPressure3.Validated, txtPressureDropCase1.Validated, txtPressureDropCase2.Validated, txtPressureDropCase3.Validated
        Try
            If Not cmbPressureUnits.Text = "--Select--" Then
                AllPressureConversions()
                'If FinalKVCase1 <> 0 Then
                '    lblApproxCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                '    lblKVCase1.Text = Math.Round(FinalKVCase1, 2)
                'Else
                '    lblApproxCVCase1.Text = ""
                '    lblKVCase1.Text = ""
                'End If
                'If FinalKVCase2 <> 0 Then
                '    lblApproxCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                '    lblKVCase2.Text = Math.Round(FinalKVCase2, 2)
                'Else
                '    lblApproxCVCase2.Text = ""
                '    lblKVCase2.Text = ""
                'End If
                'If FinalKVCase3 <> 0 Then
                '    lblApproxCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                '    lblKVCase3.Text = Math.Round(FinalKVCase3, 2)
                'Else
                '    lblApproxCVCase3.Text = ""
                '    lblKVCase3.Text = ""
                'End If
                If SelectP2orDP = False Then
                    'If sender Is txtOutletPressure1 Then
                    If Not txtOutletPressure1.Text = "" Then
                        FinalPressureDropCase1 = FinalInletPressureCase1 - FinalOutletPressureCase1
                        If FinalPressureDropCase1 < 0 Then
                            ToolTip1.Show("Pressure drop cannot be negative", txtInletPressureCase1, 2)
                            ToolTip1.Show("Pressure drop cannot be negative", txtInletPressureCase1, 2000)
                        Else
                            txtPressureDropCase1.Text = Math.Round((txtInletPressureCase1.Text - txtOutletPressure1.Text), 2)
                        End If
                    Else
                        txtPressureDropCase1.Text = ""
                    End If
                    'End If

                    'If sender Is txtOutletPressure2 Then
                    If Not txtOutletPressure2.Text = "" Then
                        FinalPressureDropCase2 = FinalInletPressureCase2 - FinalOutletPressureCase2
                        If FinalPressureDropCase2 < 0 Then
                            ToolTip1.Show("Pressure drop cannot be negative", txtInletPressureCase1, 2)
                            ToolTip1.Show("Pressure drop cannot be negative", txtInletPressureCase1, 2000)
                        Else
                            txtPressureDropCase2.Text = Math.Round((txtInletPressureCase2.Text - txtOutletPressure2.Text), 2)
                        End If
                    Else
                        txtPressureDropCase2.Text = ""
                    End If
                    'End If
                    'If sender Is txtOutletPressure3 Then
                    If Not txtOutletPressure3.Text = "" Then
                        FinalPressureDropCase3 = FinalInletPressureCase3 - FinaloutletPressureCase3
                        If FinalPressureDropCase3 < 0 Then
                            ToolTip1.Show("Pressure drop cannot be negative", txtInletPressureCase1, 2)
                            ToolTip1.Show("Pressure drop cannot be negative", txtInletPressureCase1, 2000)
                        Else
                            txtPressureDropCase3.Text = Math.Round((txtInletPressureCase3.Text - txtOutletPressure3.Text), 2)
                        End If
                    Else

                        txtPressureDropCase3.Text = ""
                        'End If
                    End If
                Else
                    'If sender Is txtPressureDropCase1 And Not txtPressureDropCase1.Text = "" Then
                    If Not txtPressureDropCase1.Text = "" And Not txtInletPressureCase1.Text = "" Then
                        FinalOutletPressureCase1 = FinalInletPressureCase1 - FinalPressureDropCase1
                        txtOutletPressure1.Text = Math.Round((txtInletPressureCase1.Text - txtPressureDropCase1.Text), 2)
                    End If
                    '  If sender Is txtPressureDropCase2 And Not txtPressureDropCase2.Text = "" Then
                    If Not txtPressureDropCase2.Text = "" And Not txtInletPressureCase2.Text = "" Then
                        FinalOutletPressureCase2 = FinalInletPressureCase2 - FinalPressureDropCase2
                        txtOutletPressure2.Text = Math.Round((txtInletPressureCase2.Text - txtPressureDropCase2.Text), 2)
                    End If
                    '  If sender Is txtPressureDropCase3 And Not txtPressureDropCase3.Text = "" Then
                    If Not txtPressureDropCase3.Text = "" And Not txtInletPressureCase3.Text = "" Then
                        FinaloutletPressureCase3 = FinalInletPressureCase3 - FinalPressureDropCase3
                        txtOutletPressure3.Text = Math.Round((txtInletPressureCase3.Text - txtPressureDropCase3.Text), 2)
                    End If
                End If
                Call TsatPressure()

                Call CalculateMaxPressTemp()
                If (txtDesignPressureInlet.Text = "") Then
                    txtDesignPressureInlet.Text = MaxPressure
                Else
                    If (txtDesignPressureInlet.Text < MaxPressure) Then
                        txtDesignPressureInlet.Text = MaxPressure
                    End If
                    'Dont change if max inlet pressure is same or less than entered design pressure
                End If

                If (txtDesignTemperatureInlet.Text = "") Then
                    txtDesignTemperatureInlet.Text = MaxTemperature
                Else
                    If (txtDesignTemperatureInlet.Text < MaxTemperature) Then
                        txtDesignTemperatureInlet.Text = MaxPressure
                    End If

                End If

                'Call AllCalculations()
                'If cmbFluidType.Text = "InCompressible" Then
                '    FL = 0.64
                'Else
                '    FL = 0.7
                'End If

                'Call CalculateDensity()
                'Call Chokedflow(FL, FL, FL)
                'Call CalculateKVCV()
            Else

                MsgBox("Please select pressure units first")
                cmbPressureUnits.Focus()

                Exit Sub

            End If
        Catch ex As Exception
            MsgBox("Inlet Pressure Validated  " & ex.Message)
        End Try
    End Sub

    Private Sub txtInletTemperatureCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtInletTemperatureCase1.KeyPress, txtInletTemperatureCase3.KeyPress, txtInletTemperatureCase3.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("-0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "-" And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = "-") > 0) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                MsgBox("Please enter integers only")
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("InlettTemp KeyPress:  " & ex.Message)
        End Try
    End Sub


    Private Sub txtInletTemperatureCase1_Validated(sender As Object, e As EventArgs) Handles txtInletTemperatureCase1.Validated, txtInletTemperatureCase2.Validated, txtInletTemperatureCase3.Validated
        Try
            If Not cmbTemperatureUnits.Text = "--Select--" Then
                AllTemperatureConversions(sender)
            Else
                If Not CType(sender, TextBox).Text = "" Then
                    MsgBox("Please select Temperature units first")
                    cmbTemperatureUnits.Focus()
                End If
                Exit Sub

            End If
        Catch ex As Exception
            MsgBox("Inlet Temperature Validate " & ex.Message)
        End Try
    End Sub

    Private Sub cmbTemperatureUnits_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbTemperatureUnits.SelectionChangeCommitted
        If LoadingForm = True Then
            cmbTemperatureUnits.Text = cmbTemperatureUnits.SelectedItem
            Call ToutPressureConversion(sender)
            Call AllTemperatureConversions(sender)
            lblDesignTemperature.Text = cmbTemperatureUnits.Text
            lblTwUnit.Text = cmbTemperatureUnits.Text
        End If
    End Sub

    Public Function convertPressure(txtPressure As TextBox, ByRef FinalPressure As Single, cmb As ComboBox)
        Dim selection As String
        Try
            If Not txtPressure.Text = "" Then
                selection = cmb.Text
                Select Case selection
                    Case "barA"
                        FinalPressure = CSng(txtPressure.Text)
                    Case "barg"
                        FinalPressure = (CSng(txtPressure.Text) * 1) + 1.013
                    Case"psiA"
                        FinalPressure = (CSng(txtPressure.Text) * 0.0689475)
                    Case "psig"
                        FinalPressure = (CSng(txtPressure.Text) * 0.0689475) + 1.013
                    Case "kg/cm2A"
                        FinalPressure = (CSng(txtPressure.Text) * 0.98135426889107)
                    Case "kg/cm2g"
                        FinalPressure = (CSng(txtPressure.Text) * 0.98135426889107) + 1.013
                    Case "kPaA"
                        FinalPressure = (CSng(txtPressure.Text) * 0.01)
                    Case "kPag"
                        FinalPressure = (CSng(txtPressure.Text) * 0.01) + 1.013
                    Case "MPaA"
                        FinalPressure = (CSng(txtPressure.Text) * 10)
                    Case "MPag"
                        FinalPressure = (CSng(txtPressure.Text) * 10) + 1.013
                    Case "Pascal"
                        FinalPressure = (CSng(txtPressure.Text) * 0.00001) + 1.013
                    Case "lb/ft2A"
                        FinalPressure = (CSng(txtPressure.Text) * 0.0004788025)
                    Case "lb/ft2g"
                        FinalPressure = (CSng(txtPressure.Text) * 0.0004788025) + 1.013
                End Select
                If cmbFluid.Text = "Steam" Then
                    If FinalPressure > 215.9 Then
                        ToolTip1.Show("Steam pressure should be below 215.9 barA or 3131.36 psiA", cmbPressureUnits, 2)
                        ToolTip1.Show("Steam pressure should be below 215.9 barA or 3131.36 psiA", cmbPressureUnits, 2000)
                    End If
                End If

            Else
                FinalPressure = 0
            End If
        Catch ex As Exception
            MsgBox("Convert Pressure:  " & ex.Message)
        End Try
        Return Nothing

    End Function
    Public Function converttemperature(txttemperature As TextBox, ByRef FinalTemperature As Single, ByVal cmb As ComboBox)
        Dim selection As String
        Try
            If Not txttemperature.Text = "" Then
                selection = cmb.Text
                Select Case selection
                    Case "°C"
                        FinalTemperature = CSng(txttemperature.Text)
                    Case "°K"
                        FinalTemperature = CSng(txttemperature.Text) - 273.15
                    Case "°R"
                        FinalTemperature = (CSng(txttemperature.Text) - 491.67) * 0.55555555555
                    Case "°F"
                        FinalTemperature = (CSng(txttemperature.Text) - 32) * 0.55555555555
                End Select
            End If
        Catch ex As Exception
            MsgBox("Convert Temperature:  " & ex.Message)
        End Try

        Return Nothing

    End Function
    Public Function RE_converttemperature(ByVal temperature As Single, ByVal cmb As ComboBox)

        Dim selection As String
        Try
            selection = cmb.Text
            Select Case selection
                Case "°C"
                    RE_converttemperature = temperature
                Case "°K"
                    RE_converttemperature = temperature + 273.15
                Case "°R"
                    RE_converttemperature = (temperature + 273.15) * 1.8
                Case "°F"
                    RE_converttemperature = temperature * 1.8 + 32
            End Select
        Catch ex As Exception
            MsgBox("Re-convert Temperature:  " & ex.Message)
        End Try
        Return RE_converttemperature
    End Function

    Public Function convertDensity(txt As TextBox, ByRef Final1 As Single, cmb As ComboBox, ByVal finaltemperature As Single, ByVal finalpressure As Single)
        Dim selection As String
        Try
            If Not txt.Text = "" Then
                selection = cmb.Text
                If cmbFluidType.Text = "InCompressible" Then
                    Select Case selection
                        Case "Sp.Gravity"             '------------Base unit for liquids---------------
                            Final1 = CSng(txt.Text)
                        Case "kg/m3"
                            Final1 = CSng(txt.Text) * 0.001
                        Case "kg/l"
                            Final1 = CSng(txt.Text)
                        Case "g/cm3"
                            Final1 = CSng(txt.Text)
                        Case "grain/ft3"
                            Final1 = (CSng(txt.Text) * 0.002288352) / 1000
                        Case "lb/ft3"
                            Final1 = CSng(txt.Text) * 0.016018463
                        Case "lb/in3"
                            Final1 = CSng(txt.Text) * 27.679904710191
                        Case "lb/gal(US)"
                            Final1 = CSng(txt.Text) * 0.119826427317
                        Case "lb/gal(UK)"
                            Final1 = CSng(txt.Text) * 0.099776372663
                        Case "oz/in3"
                            Final1 = CSng(txt.Text) * 1.729994044
                        Case "oz/gal(US)"
                            Final1 = CSng(txt.Text) * 0.007489152
                        Case "oz/gal(UK)"
                            Final1 = CSng(txt.Text) * 0.006236023
                        Case "Slug/ft3"
                            Final1 = CSng(txt.Text) * 0.016018463
                            'Case "tonl/yd3"
                            '    Final1 = CSng(txt.Text) * 1.328939184
                            'Case "tons/yd3"
                            '    Final1 = CSng(txt.Text) * 1.186552843
                    End Select

                Else
                    If chkMolecularWeight.Checked = False Then

                        Select Case selection
                            Case "kg/m3"            'Base unit for steam and gas
                                Final1 = CSng(txt.Text)
                            Case "kg/l"
                                Final1 = CSng(txt.Text) * 1000
                            Case "g/cm3"
                                Final1 = CSng(txt.Text) * 1000
                            Case "grain/ft3"
                                Final1 = CSng(txt.Text) * 0.002288352
                            Case "lb/ft3"
                                Final1 = CSng(txt.Text) * 16.01846337
                            Case "lb/in3"
                                Final1 = CSng(txt.Text) * 27679.90471
                            Case "lb/gal(US)"
                                Final1 = CSng(txt.Text) * 119.8264273
                            Case "lb/gal(UK)"
                                Final1 = CSng(txt.Text) * 99.77637266
                            Case "oz/in3"
                                Final1 = CSng(txt.Text) * 1729.994044
                            Case "oz/gal(US)"
                                Final1 = CSng(txt.Text) * 7.489151707
                            Case "oz/gal(UK)"
                                Final1 = CSng(txt.Text) * 6.236023291
                            Case "Slug/ft3"
                                Final1 = CSng(txt.Text) * 515.3788184
                                'Case "tonl/yd3"
                                '    Final1 = CSng(txt.Text) * 1328.939184
                                'Case "tons/yd3"
                                '    Final1 = CSng(txt.Text) * 1186.552843
                            Case "kg/m3(0°C)"
                                Final1 = (CSng(txt.Text)) * (finalpressure * 273.15) / (1.013 * (finaltemperature + 273.15)) 'std Temp at 0 deg C
                            Case "kg/m3(15°C)"
                                Final1 = (CSng(txt.Text)) * (finalpressure * 288.15) / (1.013 * (finaltemperature + 273.15))  'std Temp at 15 deg C
                        End Select
                    End If

                End If
                If Single.IsInfinity(Final1) = True Then Final1 = 0

            End If

        Catch ex As Exception
            MsgBox("Convert Density:  " & ex.Message)
        End Try
        Return Nothing

    End Function
    Public Function convertViscosity(txt As TextBox, ByRef Final1 As Single, cmb As ComboBox, FinalDensity As Single)
        Dim selection As String
        Dim multiplier As Long
        Try
            If Not txt.Text = "" Then

                If cmbFluidType.Text = "InCompressible" Then
                    multiplier = 1000
                Else
                    multiplier = 1
                End If

                selection = cmb.Text
                Select Case selection
                    Case "m2/s"
                        Final1 = CSng(txt.Text)
                    Case "mPa s"
                        '(1/(C24 x 1000000))
                        If Not FinalDensity = 0 Then
                            Final1 = CSng(txt.Text) * (1 / (FinalDensity * 1000 * multiplier))
                        Else
                            MsgBox("Enter Density first, Density cannot be 0")
                            'cmbDensityUnits.Focus()
                        End If
                    Case "cP"
                        If Not FinalDensity = 0 Then
                            Final1 = CSng(txt.Text) * (1 / (FinalDensity * 1000 * multiplier))
                        Else
                            MsgBox("Enter Density first, Density cannot be 0")
                            'cmbDensityUnits.Focus()
                        End If
                    Case "cSt"
                        Final1 = CSng(txt.Text) * (1 / 1000000)
                    Case "lbfs/ft2"
                        If Not FinalDensity = 0 Then
                            Final1 = CSng(txt.Text) * 47.88026 / (FinalDensity * multiplier)
                        Else
                            MsgBox("Enter Density first, Density cannot be 0")
                        End If
                    Case "lbfh/ft2"
                        If Not FinalDensity = 0 Then
                            Final1 = CSng(txt.Text) * 172369 / (FinalDensity * multiplier)
                        Else
                            MsgBox("Enter Density first, Density cannot be 0")
                        End If
                    Case "ft2/s"
                        Final1 = CSng(txt.Text) * 0.092903
                End Select
            End If
            If Single.IsInfinity(Final1) = True Then Final1 = 0
        Catch ex As Exception
            MsgBox("convertViscosity  " & ex.TargetSite.ToString & ex.Message)
        End Try

        Return Nothing

    End Function
    Public Function convertFlowrate(txt As TextBox, ByRef Final1 As Single, cmb As ComboBox, ByVal FinalDensity As Single, ByVal finaltemperature As Single, ByVal finalpressure As Single)
        Dim selection As String

        Try
            If Not txt.Text = "" Then
                selection = cmb.Text
                If cmbFluidType.Text = "InCompressible" Then
                    FinalDensity = FinalDensity * 1000


                    Select Case selection
                        Case "m3/hr"
                            '-----------------this is base unit---------------------------
                            Final1 = CSng(txt.Text)
                        Case "m3/day"
                            Final1 = CSng(txt.Text) * 0.04167
                        Case "m3/s"
                            Final1 = CSng(txt.Text) * 3600
                        Case "l/h"
                            Final1 = CSng(txt.Text) * 0.001
                        Case "l/m"
                            Final1 = CSng(txt.Text) * 0.06
                        Case "l/s"
                            Final1 = CSng(txt.Text) * 3.6
                        Case "cf/h"
                            Final1 = CSng(txt.Text) * 0.02833
                        Case "cf/m"
                            Final1 = CSng(txt.Text) * 1.699
                        Case "GPM(US)"
                            Final1 = CSng(txt.Text) * 0.2271
                        Case "GPS(US)"
                            Final1 = CSng(txt.Text) * 13.63
                        Case "GPH(US)"
                            Final1 = CSng(txt.Text) * 0.003785
                        Case "gal/day(US)"
                            Final1 = CSng(txt.Text) * 0.0001577
                        Case "gal/year(US)"
                            Final1 = CSng(txt.Text) * 0.0000004318
                        Case "GPM(UK)"
                            Final1 = CSng(txt.Text) * 0.2728
                        Case "GPS(UK)"
                            Final1 = CSng(txt.Text) * 16.37
                        Case "GPH(UK)"
                            Final1 = CSng(txt.Text) * 0.004546
                        Case "gal/day(UK)"
                            Final1 = CSng(txt.Text) * 0.0001894
                        Case "gal/year(UK)"
                            Final1 = CSng(txt.Text) * 0.0000005186
                        Case "bbl/day(US)"
                            Final1 = CSng(txt.Text) * 0.006624471
                        Case "dm3/h"
                            Final1 = CSng(txt.Text) * 0.001
                        Case "Nm3/h(0°C)"
                            Final1 = ((1.013 * CSng(txt.Text) * (finaltemperature + 273.15)) / (finalpressure * 273.15)) * FinalDensity
                        Case "Nm3/h(15°C)"
                            Final1 = Final1 = ((1.013 * CSng(txt.Text) * (finaltemperature + 273.15)) / (finalpressure * 288.15)) * FinalDensity
                        Case "Nm3/h(25°C)"
                            Final1 = Final1 = ((1.013 * CSng(txt.Text) * (finaltemperature + 273.15)) / (finalpressure * 298.15)) * FinalDensity
                        Case "MMSCFD(0°C)"
                            Final1 = Final1 = CSng(txt.Text) * 1241.82
                            Final1 = (Final1 * 1.013 * (finaltemperature + 273.15)) / (finalpressure * 273.15)
                            Final1 = Final1 * FinalDensity
                        Case "MMSCFH"
                            Final1 = Final1 = CSng(txt.Text) * 29803.68
                            Final1 = (Final1 * 1.013 * (finaltemperature + 273.15)) / (finalpressure * 273.15)
                            Final1 = Final1 * FinalDensity
                        Case "SCFD"
                            Final1 = Final1 = CSng(txt.Text) * 0.001241816605
                            Final1 = (Final1 * 1.013 * (finaltemperature + 273.15)) / (finalpressure * 273.15)
                            Final1 = Final1 * FinalDensity
                        Case "SCFM"
                            Final1 = Final1 = CSng(txt.Text) * 1.7882
                            Final1 = (Final1 * 1.013 * (finaltemperature + 273.15)) / (finalpressure * 273.15)
                            Final1 = Final1 * FinalDensity
                            'Mass Flow
                        Case "kg/hr"
                            Final1 = CSng(txt.Text) / FinalDensity
                        Case "kg/s"
                            Final1 = CSng(txt.Text) * 3600 / FinalDensity
                        Case "kg/min"
                            Final1 = CSng(txt.Text) * 60 / FinalDensity
                        Case "g/s"
                            Final1 = CSng(txt.Text) * 3.6 / FinalDensity
                        Case "g/min"
                            Final1 = CSng(txt.Text) * 0.06 / FinalDensity
                        Case "t/h"
                            Final1 = CSng(txt.Text) * 1000 / FinalDensity
                        Case "t/d"
                            Final1 = CSng(txt.Text) * 41.67 / FinalDensity
                        Case "lbs/h"
                            Final1 = CSng(txt.Text) * 0.4536 / FinalDensity
                        Case "lbs/s"
                            Final1 = CSng(txt.Text) * 1633 / FinalDensity
                        Case "t/h(US)"
                            Final1 = CSng(txt.Text) * 907.2 / FinalDensity
                        Case "t/d(US)"
                            Final1 = CSng(txt.Text) * 37.8 / FinalDensity
                        Case "t/m(US)"
                            Final1 = CSng(txt.Text) * 54430 / FinalDensity
                        Case "t/s(US)"
                            Final1 = CSng(txt.Text) * 3266000 / FinalDensity
                        Case "t/h(UK)"
                            Final1 = CSng(txt.Text) * 1016 / FinalDensity
                        Case "t/d(UK)"
                            Final1 = CSng(txt.Text) * 42.34 / FinalDensity
                        Case "t/m(UK)"
                            Final1 = CSng(txt.Text) * 60960 / FinalDensity
                        Case "t/s(UK)"
                            Final1 = CSng(txt.Text) * 3658000 / FinalDensity
                    End Select



                Else        'For Compressible flow
                    '' FinalDensity = FinalDensity * 1000   'convert from specific gravity to m3/hr

                    ' If cmbFluid.Text = "Steam" Then

                    Select Case selection
                        Case "m3/hr"
                            '-----------------this is base unit---------------------------
                            Final1 = CSng(txt.Text) * FinalDensity
                        Case "m3/day"
                            Final1 = CSng(txt.Text) * 0.04167 * FinalDensity
                        Case "m3/s"
                            Final1 = CSng(txt.Text) * 3600 * FinalDensity
                        Case "l/h"
                            Final1 = CSng(txt.Text) * 0.001 * FinalDensity
                        Case "l/m"
                            Final1 = CSng(txt.Text) * 0.06 * FinalDensity
                        Case "l/s"
                            Final1 = CSng(txt.Text) * 3.6 * FinalDensity
                        Case "cf/h"
                            Final1 = CSng(txt.Text) * 0.02833 * FinalDensity
                        Case "cf/m"
                            Final1 = CSng(txt.Text) * 1.699 * FinalDensity
                        Case "GPM(US)"
                            Final1 = CSng(txt.Text) * 0.2271 * FinalDensity
                        Case "GPS(US)"
                            Final1 = CSng(txt.Text) * 13.63 * FinalDensity
                        Case "GPH(US)"
                            Final1 = CSng(txt.Text) * 0.003785 * FinalDensity
                        Case "gal/day(US)"
                            Final1 = CSng(txt.Text) * 0.0001577 * FinalDensity
                        Case "gal/year(US)"
                            Final1 = CSng(txt.Text) * 0.0000004318 * FinalDensity
                        Case "GPM(UK)"
                            Final1 = CSng(txt.Text) * 0.2728 * FinalDensity
                        Case "GPS(UK)"
                            Final1 = CSng(txt.Text) * 16.37 * FinalDensity
                        Case "GPH(UK)"
                            Final1 = CSng(txt.Text) * 0.004546 * FinalDensity
                        Case "gal/day(UK)"
                            Final1 = CSng(txt.Text) * 0.0001894 * FinalDensity
                        Case "gal/year(UK)"
                            Final1 = CSng(txt.Text) * 0.0000005186 * FinalDensity
                        Case "bbl/day(US)"
                            Final1 = CSng(txt.Text) * 0.006624471 * FinalDensity
                        Case "dm3/h"
                            Final1 = CSng(txt.Text) * 0.001 * FinalDensity
                        Case "Nm3/h(0°C)"
                            Final1 = ((1.013 * CSng(txt.Text) * (finaltemperature + 273.15)) / (finalpressure * 273.15)) * FinalDensity
                        Case "Nm3/h(15°C)"
                            Final1 = ((1.013 * CSng(txt.Text) * (finaltemperature + 273.15)) / (finalpressure * 288.15)) * FinalDensity
                        Case "Nm3/h(25°C)"
                            Final1 = ((1.013 * CSng(txt.Text) * (finaltemperature + 273.15)) / (finalpressure * 298.15)) * FinalDensity
                        Case "MMSCFD"
                            Final1 = CSng(txt.Text) * 1241.82
                            Final1 = (Final1 * 1.013 * (finaltemperature + 273.15)) / (finalpressure * 273.15)
                            Final1 = Final1 * FinalDensity
                        Case "MMSCFH"
                            Final1 = CSng(txt.Text) * 29803.68
                            Final1 = (Final1 * 1.013 * (finaltemperature + 273.15)) / (finalpressure * 273.15)
                            Final1 = Final1 * FinalDensity
                        Case "SCFD"
                            Final1 = CSng(txt.Text) * 0.001241816605
                            Final1 = (Final1 * 1.013 * (finaltemperature + 273.15)) / (finalpressure * 273.15)
                            Final1 = Final1 * FinalDensity
                        Case "SCFM"
                            Final1 = CSng(txt.Text) * 1.7882
                            Final1 = (Final1 * 1.013 * (finaltemperature + 273.15)) / (finalpressure * 273.15)
                            Final1 = Final1 * FinalDensity
                            'Mass Flow
                        Case "kg/hr"
                            Final1 = CSng(txt.Text)
                        Case "kg/s"
                            Final1 = CSng(txt.Text) * 3600
                        Case "kg/min"
                            Final1 = CSng(txt.Text) * 60
                        Case "g/s"
                            Final1 = CSng(txt.Text) * 3.6
                        Case "g/min"
                            Final1 = CSng(txt.Text) * 0.06
                        Case "t/h"
                            Final1 = CSng(txt.Text) * 1000
                        Case "t/d"
                            Final1 = CSng(txt.Text) * 41.67
                        Case "lbs/h"
                            Final1 = CSng(txt.Text) * 0.4536
                        Case "lbs/s"
                            Final1 = CSng(txt.Text) * 1633
                        Case "t/h(US)"
                            Final1 = CSng(txt.Text) * 907.2
                        Case "t/d(US)"
                            Final1 = CSng(txt.Text) * 37.8
                        Case "t/m(US)"
                            Final1 = CSng(txt.Text) * 54430
                        Case "t/s(US)"
                            Final1 = CSng(txt.Text) * 3266000
                        Case "t/h(UK)"
                            Final1 = CSng(txt.Text) * 1016
                        Case "t/d(UK)"
                            Final1 = CSng(txt.Text) * 42.34
                        Case "t/m(UK)"
                            Final1 = CSng(txt.Text) * 60960
                        Case "t/s(UK)"
                            Final1 = CSng(txt.Text) * 3658000
                    End Select

                    '  End If
                End If
            End If
            If (Single.IsInfinity(Final1)) = True Then Final1 = 0

        Catch ex As Exception
            MsgBox("Convert Flowrate:  " & ex.TargetSite.ToString & " " & ex.Message)
        End Try
        Return Nothing

    End Function

    Public Function AllTemperatureConversions(sender As Object)
        Try
            If LoadingForm = True Then
                '20170615
                ' If (sender Is cmbTemperatureUnits) Then
                Call TsatPressure()
                'End If

                If (Not (txtInletTemperatureCase1.Text) = "") And (sender Is txtInletTemperatureCase1 Or sender Is cmbTemperatureUnits) Then


                    Call converttemperature(txtInletTemperatureCase1, FinalInletTemperatureCase1, cmbTemperatureUnits)

                    If cmbFluid.SelectedIndex = 0 Then
                        If cmbFluidType.Text = "InCompressible" Then
                            ' Bypass  20160928 CalculateFromTable(FinalInletTemperatureCase1, FinalVapourPressureCase1, FinalCriticalPressureCase1, FinalDensityCase1, FinalViscosityCase1)

                            'Vapour pressure is same as Saturation pressure in water case
                            FinalVapourPressureCase1 = psat_T(FinalInletTemperatureCase1)
                            FinalDensityCase1 = (rhoL_T(FinalInletTemperatureCase1)) / 1000   'convert to Sp. Gravity from kg/m3
                            cmbDensityUnits.SelectedIndex = 0

                            cmbViscosityUnits.SelectedIndex = 0
                            cmbCriticalPressureUnits.SelectedIndex = 0
                            cmbVapourPressureUnits.SelectedIndex = 0
                            FinalViscosityCase1 = (my_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)) / (FinalDensityCase1 * 1000)
                            FinalCriticalPressureCase1 = 220.4
                            txtVapourPressureCase1.Text = Math.Round(FinalVapourPressureCase1, 3)
                            txtCriticalPressureCase1.Text = Math.Round(FinalCriticalPressureCase1, 3)
                            txtViscosityCase1.Text = Format(FinalViscosityCase1, "0.00E-00")
                            If cmbUnitsType.SelectedIndex = 1 Then  'FPS
                                txtVapourPressureCase1.Text = Math.Round((FinalVapourPressureCase1 * 14.5037738007), 2)
                                txtCriticalPressureCase1.Text = Math.Round((FinalCriticalPressureCase1 * 14.5037738007), 2)
                                txtViscosityCase1.Text = Format((FinalViscosityCase1 * 10.764), "0.00E-00")
                            End If

                            txtDensityCase1.Text = Math.Round(FinalDensityCase1, 3)
                            ' Bypass  20160928  Call convertDensity(txtDensityCase1, FinalDensityCase1, cmbDensityUnits, FinalInletTemperatureCase1, FinalInletPressureCase1)


                            Temperatureflag = True

                            txtCriticalPressureCase1.ReadOnly = True

                            txtVapourPressureCase1.ReadOnly = True
                            txtDensityCase1.ReadOnly = True
                            txtViscosityCase1.ReadOnly = True

                            If FinalVapourPressureCase1 > FinalInletPressureCase1 Then
                                ToolTip1.Show("Case 1 : Vapour pressure more than Inlet Pressure", txtVapourPressureCase1, 2)
                                ToolTip1.Show("Case 1 : Vapour pressure more than Inlet Pressure", txtVapourPressureCase1, 2000)
                                'txtInletTemperatureCase1.Focus()
                            End If
                        Else
                            'or steam

                            TsatCase1 = Tsat_p(FinalInletPressureCase1)
                            If TsatCase1 > FinalInletTemperatureCase1 Then
                                ToolTip1.Show("Case 1 : Fluid is not steam", txtInletTemperatureCase1, 2)
                                ToolTip1.Show("Case 1 : Fluid is not steam", txtInletTemperatureCase1, 2000)
                                txtInletTemperatureCase1.Focus()
                            Else
                                ' aDDED 0.1:  WHEN TOUTPRESSURE = TSATOURPRESSURE SOFTWARE CANNOT CALCULATE Z,DENSITY AND SOUND VELOCITY
                                'ToutPressureCase1 = Math.Round(RE_converttemperature(T_ph(FinalOutletPressureCase1, h_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)), cmbTemperatureUnits), 2)
                                If Model < 4 Then
                                    ToutPressureCase1 = T_ph(FinalOutletPressureCase1, h_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)) + 0.1
                                    txtTOutPressureCase1.Text = Math.Round(RE_converttemperature(ToutPressureCase1, cmbTemperatureUnits), 2)
                                End If
                                FinalDensityCase1 = rho_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)
                                cmbDensityUnits.SelectedIndex = 0
                                FinalViscosityCase1 = (my_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)) / FinalDensityCase1
                                cmbViscosityUnits.SelectedIndex = 0
                                If cmbUnitsType.SelectedIndex = 1 Then   'FPS
                                    txtDensityCase1.Text = Math.Round(FinalDensityCase1 * 0.0624, 2)
                                    txtViscosityCase1.Text = Format(FinalViscosityCase1 * 10.764, "0.00E-00")
                                Else
                                    txtDensityCase1.Text = Math.Round(FinalDensityCase1, 2)
                                    txtViscosityCase1.Text = Format(FinalViscosityCase1, "0.00E-00")
                                End If



                                txtTsatInletCase1.Text = Math.Round(RE_converttemperature(TsatCase1, cmbTemperatureUnits), 2)


                                If Not txtInletPressureCase1.Text = "" Then
                                    Kcase1 = Cp_pT(FinalInletPressureCase1, FinalInletTemperatureCase1) / Cv_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)
                                    txtK_Case1.Text = Math.Round(Kcase1, 2)
                                    Xcase1 = (FinalPressureDropCase1 / FinalInletPressureCase1)
                                    txtX_Case1.Text = Math.Round(Xcase1, 2)
                                    Zcase1 = (FinalInletPressureCase1 * Math.Pow(10, 5)) / (FinalDensityCase1 * 461.8 * (FinalInletTemperatureCase1 + 273.15))
                                    txtZ_Case1.Text = Math.Round(Zcase1, 2)
                                Else
                                    Kcase1 = 0
                                    txtK_Case1.Text = ""
                                    Xcase1 = 0
                                    txtX_Case1.Text = ""
                                    Zcase1 = 0
                                    txtZ_Case1.Text = ""

                                End If
                                End If
                        End If
                    Else
                    End If
                End If



                If (Not (txtInletTemperatureCase2.Text) = "") And (sender Is txtInletTemperatureCase2 Or sender Is cmbTemperatureUnits) Then
                    Call converttemperature(txtInletTemperatureCase2, FinalInletTemperatureCase2, cmbTemperatureUnits)
                    'C21.Text = FinalInletTemperatureCase2
                    If cmbFluid.SelectedIndex = 0 Then
                        If cmbFluidType.Text = "InCompressible" Then
                            ' Bypass  20160928 CalculateFromTable(FinalInletTemperatureCase2, FinalVapourPressureCase2, FinalCriticalPressureCase2, FinalDensityCase2, FinalViscosityCase2)
                            'Vapour pressure is same as Saturation pressure in water case
                            FinalVapourPressureCase2 = psat_T(FinalInletTemperatureCase2)
                            FinalDensityCase2 = (rhoL_T(FinalInletTemperatureCase2)) / 1000   'convert to Sp. Gravity from kg/m3
                            cmbDensityUnits.SelectedIndex = 0
                            cmbViscosityUnits.SelectedIndex = 0
                            cmbCriticalPressureUnits.SelectedIndex = 0
                            cmbVapourPressureUnits.SelectedIndex = 0
                            FinalViscosityCase2 = (my_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)) / (FinalDensityCase2 * 1000)
                            FinalCriticalPressureCase2 = 220.4

                            txtVapourPressureCase2.Text = Math.Round(FinalVapourPressureCase2, 3)
                            txtCriticalPressureCase2.Text = Math.Round(FinalCriticalPressureCase2, 3)
                            txtViscosityCase2.Text = Format(FinalViscosityCase2, "0.00E-00")
                            If cmbUnitsType.SelectedIndex = 1 Then  'FPS
                                txtVapourPressureCase2.Text = Math.Round((FinalVapourPressureCase2 * 14.5037738007), 2)
                                txtCriticalPressureCase2.Text = Math.Round((FinalCriticalPressureCase2 * 14.5037738007), 2)
                                txtViscosityCase2.Text = Format(FinalViscosityCase2 * 10.764, "0.00E-00")
                            End If

                            txtDensityCase2.Text = Math.Round(FinalDensityCase2, 3)
                            'Bypasss on 20160928 Call convertDensity(txtDensityCase2, FinalDensityCase2, cmbDensityUnits, FinalInletTemperatureCase2, FinalInletPressureCase2)


                            If FinalVapourPressureCase2 > FinalInletPressureCase2 Then
                                ToolTip1.Show("Case 2 : Vapour pressure more than Inlet Pressure", txtVapourPressureCase2, 2)
                                ToolTip1.Show("Case 2 : Vapour pressure more than Inlet Pressure", txtVapourPressureCase2, 2000)
                                ' txtInletTemperatureCase2.Focus()       'Focus on Case 1 
                            End If
                        Else

                            'or steam 
                            TsatCase2 = Tsat_p(FinalInletPressureCase2)
                            If TsatCase2 > FinalInletTemperatureCase2 Then
                                ToolTip1.Show("Case 2 : Fluid is not steam", txtInletTemperatureCase2, 2)
                                ToolTip1.Show("Case 2 : Fluid is not steam", txtInletTemperatureCase2, 2000)
                                txtInletTemperatureCase2.Focus()
                            Else
                                txtTsatInletCase2.Text = Math.Round(RE_converttemperature(TsatCase2, cmbTemperatureUnits), 2)
                                'ToutPressureCase2 = Math.Round(RE_converttemperature(T_ph(FinalOutletPressureCase2, h_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)), cmbTemperatureUnits), 2)
                                If Model < 4 Then
                                    ToutPressureCase2 = T_ph(FinalOutletPressureCase2, h_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)) + 0.1
                                    txtTOutPressureCase2.Text = Math.Round(RE_converttemperature(ToutPressureCase2, cmbTemperatureUnits), 2)
                                End If

                                FinalDensityCase2 = rho_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)
                                cmbDensityUnits.SelectedIndex = 0
                                FinalViscosityCase2 = (my_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)) / FinalDensityCase2
                                cmbViscosityUnits.SelectedIndex = 0
                                If cmbUnitsType.SelectedIndex = 1 Then   'FPS
                                    txtDensityCase2.Text = Math.Round(FinalDensityCase2 * 0.0624, 2)
                                    txtViscosityCase2.Text = Format(FinalViscosityCase2 * 10.764, "0.00E-00")
                                Else
                                    txtDensityCase2.Text = Math.Round(FinalDensityCase2, 2)
                                    txtViscosityCase2.Text = Format(FinalViscosityCase2, "0.00E-00")
                                End If
                                If Not txtInletPressureCase2.Text = "" Then
                                    Kcase2 = Cp_pT(FinalInletPressureCase2, FinalInletTemperatureCase2) / Cv_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)
                                    txtK_Case2.Text = Math.Round(Kcase2, 2)
                                    Xcase2 = (FinalPressureDropCase2 / FinalInletPressureCase2)
                                    txtX_Case2.Text = Math.Round(Xcase2, 2)
                                    Zcase2 = (FinalInletPressureCase2 * Math.Pow(10, 5)) / (FinalDensityCase2 * 461.8 * (FinalInletTemperatureCase2 + 273.15))
                                    txtZ_Case2.Text = Math.Round(Zcase2, 2)
                                Else
                                    Kcase2 = 0
                                    txtK_Case2.Text = ""
                                    Xcase2 = 0
                                    txtX_Case2.Text = ""
                                    Zcase2 = 0
                                    txtZ_Case2.Text = ""

                                End If
                                End If
                        End If
                    Else
                      
                    End If
                End If
                If (Not (txtInletTemperatureCase3.Text) = "") And (sender Is txtInletTemperatureCase3 Or sender Is cmbTemperatureUnits) Then
                    Call converttemperature(txtInletTemperatureCase3, FinalInletTemperatureCase3, cmbTemperatureUnits)
                    If cmbFluid.SelectedIndex = 0 Then
                        If cmbFluidType.Text = "InCompressible" Then
                            ' Bypass  20160928  CalculateFromTable(FinalInletTemperatureCase3, FinalVapourPressureCase3, FinalCriticalPressureCase3, FinalDensityCase3, FinalViscosityCase3)
                            'Vapour pressure is same as Saturation pressure in water case
                            FinalVapourPressureCase3 = psat_T(FinalInletTemperatureCase3)
                            FinalDensityCase3 = (rhoL_T(FinalInletTemperatureCase3)) / 1000   'convert to Sp. Gravity from kg/m3
                            cmbDensityUnits.SelectedIndex = 0
                            cmbViscosityUnits.SelectedIndex = 0
                            cmbCriticalPressureUnits.SelectedIndex = 0
                            cmbVapourPressureUnits.SelectedIndex = 0
                            FinalViscosityCase3 = (my_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)) / (FinalDensityCase3 * 1000)
                            FinalCriticalPressureCase3 = 220.4

                            txtVapourPressureCase3.Text = Math.Round(FinalVapourPressureCase3, 3)
                            txtCriticalPressureCase3.Text = Math.Round(FinalCriticalPressureCase3, 3)
                            txtViscosityCase3.Text = Format(FinalViscosityCase3, "0.00E-00")
                            If cmbUnitsType.SelectedIndex = 1 Then  'FPS
                                txtVapourPressureCase3.Text = Math.Round((FinalVapourPressureCase3 * 14.5037738007), 2)
                                txtCriticalPressureCase3.Text = Math.Round((FinalCriticalPressureCase3 * 14.5037738007), 2)
                                txtViscosityCase3.Text = Format(FinalViscosityCase3 * 10.764, "0.00E-00")
                            End If

                            txtDensityCase3.Text = Math.Round(FinalDensityCase3, 3)
                            'Bypassed on  20160928 Call convertDensity(txtDensityCase3, FinalDensityCase3, cmbDensityUnits, FinalInletTemperatureCase3, FinalInletPressureCase3)


                            If FinalVapourPressureCase3 > FinalInletPressureCase3 Then
                                ToolTip1.Show("Case 3 : Vapour pressure more than Inlet Pressure", txtVapourPressureCase3, 2)
                                ToolTip1.Show("Case 3 : Vapour pressure more than Inlet Pressure", txtVapourPressureCase3, 2000)
                                'txtInletTemperatureCase3.Focus()
                            End If
                        Else

                            TsatCase3 = Tsat_p(FinalInletPressureCase3)
                            If TsatCase3 > FinalInletTemperatureCase3 Then
                                ToolTip1.Show("Case 3 : Fluid is not steam", txtInletTemperatureCase3, 2)
                                ToolTip1.Show("Case 3 : Fluid is not steam", txtInletTemperatureCase3, 2000)
                                txtInletTemperatureCase3.Focus()
                            Else
                                txtTsatInletCase3.Text = Math.Round(RE_converttemperature(TsatCase3, cmbTemperatureUnits), 2)
                                'ToutPressureCase3 = Math.Round(RE_converttemperature(T_ph(FinaloutletPressureCase3, h_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)), cmbTemperatureUnits), 2)
                                If Model < 4 Then
                                    ToutPressureCase3 = T_ph(FinaloutletPressureCase3, h_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)) + 0.1
                                    txtTOutPressureCase3.Text = Math.Round(RE_converttemperature(ToutPressureCase3, cmbTemperatureUnits), 2)
                                End If
                                FinalDensityCase3 = rho_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)
                                cmbDensityUnits.SelectedIndex = 0

                                FinalViscosityCase3 = (my_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)) / FinalDensityCase3
                                cmbViscosityUnits.SelectedIndex = 0
                                If cmbUnitsType.SelectedIndex = 1 Then   'FPS
                                    txtDensityCase3.Text = Math.Round(FinalDensityCase3 * 0.0624, 2)
                                    txtViscosityCase3.Text = Format(FinalViscosityCase3 * 10.764, "0.00E-00")
                                Else
                                    txtDensityCase3.Text = Math.Round(FinalDensityCase3, 2)
                                    txtViscosityCase3.Text = Format(FinalViscosityCase3, "0.00E-00")
                                End If




                                If Not txtInletPressureCase3.Text = "" Then
                                    Kcase3 = Cp_pT(FinalInletPressureCase3, FinalInletTemperatureCase3) / Cv_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)
                                    txtK_Case3.Text = Math.Round(Kcase3, 2)
                                    Xcase3 = (FinalPressureDropCase3 / FinalInletPressureCase3)
                                    txtX_Case3.Text = Math.Round(Xcase3, 2)
                                    Zcase3 = (FinalInletPressureCase3 * Math.Pow(10, 5)) / (FinalDensityCase3 * 461.8 * (FinalInletTemperatureCase3 + 273.15))
                                    txtZ_Case3.Text = Math.Round(Zcase3, 2)
                                Else
                                    Kcase3 = 0
                                    txtK_Case3.Text = ""
                                    Xcase3 = 0
                                    txtX_Case3.Text = ""
                                    Zcase3 = 0
                                    txtZ_Case3.Text = ""
                                End If
                                End If
                        End If
                    Else
                    End If

                End If
                If cmbFluidType.Text = "InCompressible" Then
                    If FinalVapourPressureCase1 > FinalOutletPressureCase1 Then
                        FlashingCase1 = True
                        lblSeverityCase1.Text = " Flashing"
                    Else
                        FlashingCase1 = False
                        lblSeverityCase1.Text = ""
                    End If
                    If FinalVapourPressureCase2 > FinalOutletPressureCase2 Then
                        FlashingCase2 = True
                        lblSeverityCase2.Text = " Flashing"
                    Else
                        FlashingCase2 = False
                        lblSeverityCase2.Text = ""
                    End If
                    If FinalVapourPressureCase3 > FinaloutletPressureCase3 Then
                        FlashingCase3 = True
                        lblSeverityCase3.Text = " Flashing"
                    Else
                        FlashingCase3 = False
                        lblSeverityCase3.Text = ""
                    End If
                End If
                Call CalculateMaxPressTemp()
                ' txtDesignTemperatureInlet.Text = MaxTemperature
                Call AllCalculations()
            End If
        Catch ex As Exception
            MsgBox("AllTemperatureConversions:  " & ex.TargetSite.ToString & " " & ex.Message)
        End Try
        Return Nothing
    End Function
    Public Function TsatPressure()
        Dim Tsatout1, Tsatout2, Tsatout3 As Single
        If cmbFluid.Text = "Steam" Then
            If Not txtOutletPressure1.Text = "" Then
                Tsatout1 = RE_converttemperature(Tsat_p(FinalOutletPressureCase1), cmbTemperatureUnits)
                txtTsatoutPressureCase1.Text = Math.Round(RE_converttemperature(Tsat_p(FinalOutletPressureCase1), cmbTemperatureUnits), 2)
            End If
            If Not txtOutletPressure2.Text = "" Then
                Tsatout2 = RE_converttemperature(Tsat_p(FinalOutletPressureCase2), cmbTemperatureUnits)
                txtTsatoutPressureCase2.Text = Math.Round(RE_converttemperature(Tsat_p(FinalOutletPressureCase2), cmbTemperatureUnits), 2)

            End If
            If Not txtOutletPressure3.Text = "" Then
                Tsatout3 = RE_converttemperature(Tsat_p(FinaloutletPressureCase3), cmbTemperatureUnits)
                txtTsatoutPressureCase3.Text = Math.Round(RE_converttemperature(Tsat_p(FinaloutletPressureCase3), cmbTemperatureUnits), 2)

            End If

            If Not cmbPressureUnits.Text = "--Select--" Then
                If Not txtInletPressureCase1.Text = "" Then
                    TsatCase1 = Tsat_p(FinalInletPressureCase1)
                    txtTsatInletCase1.Text = Math.Round(RE_converttemperature(TsatCase1, cmbTemperatureUnits), 2)
                End If
                If Not txtInletPressureCase2.Text = "" Then
                    TsatCase2 = Tsat_p(FinalInletPressureCase2)
                    txtTsatInletCase2.Text = Math.Round(RE_converttemperature(TsatCase2, cmbTemperatureUnits), 2)
                End If
                If Not txtInletPressureCase3.Text = "" Then
                    TsatCase3 = Tsat_p(FinalInletPressureCase3)
                    txtTsatInletCase3.Text = Math.Round(RE_converttemperature(TsatCase3, cmbTemperatureUnits), 2)
                End If
            End If
        End If
        Return Nothing
    End Function
    Public Function AllPressureConversions()
        Try
            If LoadingForm = True Then

                Call convertPressure(txtInletPressureCase1, FinalInletPressureCase1, cmbPressureUnits)
                Call convertPressure(txtInletPressureCase2, FinalInletPressureCase2, cmbPressureUnits)
                Call convertPressure(txtInletPressureCase3, FinalInletPressureCase3, cmbPressureUnits)
                Call convertPressure(txtOutletPressure1, FinalOutletPressureCase1, cmbPressureUnits)
                Call convertPressure(txtOutletPressure2, FinalOutletPressureCase2, cmbPressureUnits)
                Call convertPressure(txtOutletPressure3, FinaloutletPressureCase3, cmbPressureUnits)
                Call convertPressure(txtWaterPressure, InletWaterPressure, cmbPressureUnits)
                If SelectP2orDP = True Then 'Only if Pressure Drop is selected 
                    If Not txtPressureDropCase1.Text = "" And Not txtInletPressureCase1.Text = "" Then 'No blank 
                        txtOutletPressure1.Text = txtInletPressureCase1.Text - txtPressureDropCase1.Text
                        Call convertPressure(txtOutletPressure1, FinalOutletPressureCase1, cmbPressureUnits)
                    End If
                    If Not txtPressureDropCase2.Text = "" And Not txtInletPressureCase2.Text = "" Then
                        txtOutletPressure2.Text = txtInletPressureCase2.Text - txtPressureDropCase2.Text
                        Call convertPressure(txtOutletPressure2, FinalOutletPressureCase2, cmbPressureUnits)
                    End If
                    If Not txtPressureDropCase3.Text = "" And Not txtInletPressureCase3.Text = "" Then
                        txtOutletPressure3.Text = txtInletPressureCase3.Text - txtPressureDropCase3.Text
                        Call convertPressure(txtOutletPressure3, FinaloutletPressureCase3, cmbPressureUnits)
                    End If
                    ''Call convertPressure(txtPressureDropCase2, FinalPressureDropCase2, cmbPressureUnits)
                    'If Not txtPressureDropCase2.Text = "" Then FinalPressureDropCase2 = CSng(txtPressureDropCase2.Text)
                    'FinalOutletPressureCase2 = FinalInletPressureCase2 - FinalPressureDropCase2
                    ''Call convertPressure(txtPressureDropCase3, FinalPressureDropCase3, cmbPressureUnits)
                    'If Not txtPressureDropCase3.Text = "" Then FinalPressureDropCase3 = CSng(txtPressureDropCase3.Text)
                    'FinaloutletPressureCase3 = FinalInletPressureCase3 - FinalPressureDropCase3
                End If


                FinalPressureDropCase1 = FinalInletPressureCase1 - FinalOutletPressureCase1
                If FinalPressureDropCase1 < 0 Then
                    FinalPressureDropCase1 = 0
                End If
                FinalPressureDropCase2 = FinalInletPressureCase2 - FinalOutletPressureCase2
                If FinalPressureDropCase2 < 0 Then
                    FinalPressureDropCase2 = 0
                End If
                FinalPressureDropCase3 = FinalInletPressureCase3 - FinaloutletPressureCase3
                If FinalPressureDropCase3 < 0 Then
                    FinalPressureDropCase3 = 0
                End If

                'End If
                If cmbFluid.Text = "Gas" Then
                    If Not txtInletPressureCase1.Text = "" Then
                        Xcase1 = (FinalInletPressureCase1 - FinalOutletPressureCase1) / FinalInletPressureCase1
                        txtX_Case1.Text = Math.Round(Xcase1, 2)
                    Else
                        Kcase1 = 0
                        txtK_Case1.Text = ""
                        Xcase1 = 0
                        txtX_Case1.Text = ""
                        Zcase1 = 0
                        txtZ_Case1.Text = ""
                    End If
                    If Not txtInletPressureCase2.Text = "" Then
                        Xcase2 = (FinalInletPressureCase2 - FinalOutletPressureCase2) / FinalInletPressureCase2
                        txtX_Case2.Text = Math.Round(Xcase2, 2)
                    Else
                        Kcase2 = 0
                        txtK_Case2.Text = ""
                        Xcase2 = 0
                        txtX_Case2.Text = ""
                        Zcase2 = 0
                        txtZ_Case2.Text = ""
                    End If
                    If Not txtInletPressureCase3.Text = "" Then
                        Xcase3 = (FinalInletPressureCase3 - FinaloutletPressureCase3) / FinalInletPressureCase3
                        txtX_Case3.Text = Math.Round(Xcase3, 2)
                    Else
                        Kcase3 = 0
                        txtK_Case3.Text = ""
                        Xcase3 = 0
                        txtX_Case3.Text = ""
                        Zcase3 = 0
                        txtZ_Case3.Text = ""
                    End If

                End If

                Call AllTemperatureConversions(cmbTemperatureUnits)

            End If
        Catch ex As Exception
            MsgBox("AllPressureConversions: " & ex.TargetSite.ToString & " " & ex.Message)
        End Try
        Return Nothing
    End Function

    Private Sub txtCriticalPressureCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtCriticalPressureCase1.KeyPress, txtCriticalPressureCase2.KeyPress, txtCriticalPressureCase3.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                '    MsgBox("Please enter integers only")
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox(" txtCriticalPressureCase1_KeyPress" & ex.Message)
        End Try
    End Sub

    Private Sub txtCriticalPressureCase1_Validated(sender As Object, e As EventArgs) Handles txtCriticalPressureCase1.Validated, txtCriticalPressureCase2.Validated, txtCriticalPressureCase3.Validated
        Try
            If Not cmbCriticalPressureUnits.Text = "--Select--" Then
                Call convertPressure(txtCriticalPressureCase1, FinalCriticalPressureCase1, cmbCriticalPressureUnits)
                'C32.Text = FinalCriticalPressureCase1
                Call convertPressure(txtCriticalPressureCase2, FinalCriticalPressureCase2, cmbCriticalPressureUnits)
                'C33.Text = FinalCriticalPressureCase2
                Call convertPressure(txtCriticalPressureCase3, FinalCriticalPressureCase3, cmbCriticalPressureUnits)
                'C34.Text = FinalCriticalPressureCase3

                Call AllCalculations()
                'If cmbFluidType.Text = "InCompressible" Then
                '    FL = 0.64
                'Else
                '    FL = 0.7
                'End If
                'Call Chokedflow(FL, FL, FL)
                'Call CalculateKVCV()
                'If FinalKVCase1 <> 0 Then
                '    lblApproxCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                '    lblKVCase1.Text = Math.Round(FinalKVCase1, 2)
                'Else
                '    lblApproxCVCase1.Text = ""
                '    lblKVCase1.Text = ""
                'End If
                'If FinalKVCase2 <> 0 Then
                '    lblApproxCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                '    lblKVCase2.Text = Math.Round(FinalKVCase2, 2)
                'Else
                '    lblApproxCVCase2.Text = ""
                '    lblKVCase2.Text = ""
                'End If
                'If FinalKVCase3 <> 0 Then
                '    lblApproxCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                '    lblKVCase3.Text = Math.Round(FinalKVCase3, 2)
                'Else
                '    lblApproxCVCase3.Text = ""
                '    lblKVCase3.Text = ""
                'End If
            Else

                MsgBox("Please select critical pressure units first")
                cmbCriticalPressureUnits.Focus()
                Exit Sub

            End If
        Catch ex As Exception
            MsgBox("txtCriticalPressureCase1_Validated " & ex.Message)
        End Try
    End Sub

    

    Private Sub frmValveSizing_FormClosing(sender As Object, e As FormClosingEventArgs) Handles Me.FormClosing
        ' If XMLFilename = "" Then
        If AbandonSoftware = False Then
            If CLoseSoftware = False Then
                If MsgBox("Do you want to save the Project file?", MsgBoxStyle.YesNo, "File Not Saved!") = MsgBoxResult.Yes Then
                    Call SaveToolStripMenuItem_Click(sender, e)

                End If
                StopBaffleCalc = 1
            End If
            HScrollBar_Records.Maximum = Nothing
            ' Me.Visible = False
            'End If
            'If Not CLoseSoftware And e.CloseReason = CloseReason.UserClosing Then
            '    '    Me.Hide()
            '    Me.WindowState = FormWindowState.Minimized
            '    frmRecordsGrid.WindowState = FormWindowState.Normal
            '    e.Cancel = True

            'End If
            ' ''If MsgBox("Do you want to exit?", MsgBoxStyle.OkCancel, "Exit") = MsgBoxResult.Cancel Then
            '    e.Cancel = True
            'End If
        End If
    End Sub


    Public Function FindLastRow(ByVal DT As DataTable, ByVal index As Integer) As Long
        Try
            Dim i As Long
            Dim temp As String

            For i = 0 To DT.Rows.Count - 2
                temp = DT.Rows(i).Item(index)

                If temp = "" & vbLf & "" Or temp = "" Then
                    Exit For
                End If
            Next
            FindLastRow = i - 1
        Catch ex As Exception
            MsgBox("FindLastRow   :  " & ex.Message, MsgBoxStyle.Exclamation, "Control Valve Sizing Software")
            Return Nothing
        End Try
    End Function

    Public Sub SQL_DATALOAD()
        Try
            'Connection to Server and Database
            Dim constr As String = "Data Source=.\SQLEXPRESS;Initial Catalog=FinalDB;Integrated Security=true"
            Dim con As SqlConnection
            Dim command As SqlCommand
            Dim adapter As New SqlDataAdapter

            'Accessories ---> Makes and Models
            Dim first As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from topbonnettype ORDER BY NAME;" 'To be mapped
            Dim second As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from endconnection ORDER BY NAME;" 'To be mapped
            Dim eight As String = "select * from AAPAINT_BODY ORDER BY PARAMETER_VALUE;"
            Dim nine As String = "select * from AApositioner ORDER BY PARAMETER_VALUE;"
            Dim ten As String = "select * from AAsov ORDER BY PARAMETER_VALUE;"
            Dim eleven As String = "select * from Aafr ORDER BY PARAMETER_VALUE;"
            Dim twelve As String = "select * from Aalr ORDER BY PARAMETER_VALUE;"
            Dim thirteen As String = "select * from AAlimitswitch ORDER BY PARAMETER_VALUE;"
            Dim fourteen As String = "select * from AAvolbooster ORDER BY PARAMETER_VALUE;"
            Dim fifteen As String = "select * from AApostrans ORDER BY PARAMETER_VALUE;"
            Dim sixteen As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from vtank ORDER BY NAME;"
            Dim seventeen As String = "select * from AArobotor ORDER BY PARAMETER_VALUE;"
            Dim eighteen As String = "select * from AAitop ORDER BY PARAMETER_VALUE;"
            Dim nineteen As String = "select * from AAqev ORDER BY PARAMETER_VALUE;"
            Dim twenty As String = "select * from AAcertification ORDER BY PARAMETER_VALUE;"
            Dim twoone As String = "select * from AAhandwheel ORDER BY PARAMETER_VALUE;"
            Dim twothree As String = "select * from AAguiding ORDER BY PARAMETER_VALUE;"
            Dim twofour As String = "SELECT * FROM AAPositionerMake ORDER BY PARAMETER_VALUE; ;"
            Dim twofive As String = "SELECT * FROM AAfrMake ORDER BY PARAMETER_VALUE; ;"
            Dim twosix As String = "SELECT * FROM AAlrMake ORDER BY PARAMETER_VALUE; ;"
            Dim twoseven As String = "SELECT * FROM AASovMake ORDER BY PARAMETER_VALUE; ;"
            Dim twoeight As String = "SELECT * FROM AAVolboosterMake ORDER BY PARAMETER_VALUE; ;"
            Dim twonine As String = "SELECT * FROM AAlimitswitchmake ORDER BY PARAMETER_VALUE; ;"
            Dim thirty As String = "SELECT * FROM AAqevmake ORDER BY PARAMETER_VALUE;"
            Dim fortysix As String = "select * from AATUBING ORDER BY PARAMETER_VALUE;"
            Dim fortyseven As String = "SELECT * FROM AATUBINGMAKE ORDER BY PARAMETER_VALUE;"
            Dim fortyeight As String = "SELECT * FROM AATUBING_SIZE ORDER BY PARAMETER_VALUE;"
            Dim fortynine As String = "SELECT * FROM AATUBING_MOC ORDER BY PARAMETER_VALUE;"
            Dim fifty As String = "SELECT * FROM AAIRFAIL ORDER BY PARAMETER_VALUE;"

            '----MATERIALS----

            'ECOTROL
            Dim third As String = "select * from AABODYMAT ORDER BY PARAMETER_VALUE;"
            Dim four As String = "select * from AAPLUG ORDER BY PARAMETER_VALUE;"
            Dim five As String = "select * from AASEAT ORDER BY PARAMETER_VALUE;"
            Dim six As String = "select * from AATOPMAT ORDER BY PARAMETER_VALUE;"
            Dim seven As String = "select * from AAGASKETMAT ORDER BY PARAMETER_VALUE;"

            'FMCV
            Dim threeone As String = "SELECT * FROM AABODYMAT_FMCV ORDER BY PARAMETER_VALUE"
            Dim threetwo As String = "SELECT * FROM AATOPMAT_FMCV ORDER BY PARAMETER_VALUE"
            Dim threethree As String = "SELECT * FROM AAPLUG_FMCV ORDER BY PARAMETER_VALUE"
            Dim threefour As String = "SELECT * FROM AASEAT_FMCV ORDER BY PARAMETER_VALUE"
            Dim threefive As String = "SELECT * FROM AAGASKETMAT_FMCV ORDER BY PARAMETER_VALUE"

            '3WAY
            Dim threesix As String = "SELECT * FROM AABODYMAT_3WAY ORDER BY PARAMETER_VALUE"
            Dim threeseven As String = "SELECT * FROM AATOPMAT_3WAY ORDER BY PARAMETER_VALUE"
            Dim threeeight As String = "SELECT * FROM AAPLUG_3WAY ORDER BY PARAMETER_VALUE"
            Dim threenine As String = "SELECT * FROM AASEAT_3WAY ORDER BY PARAMETER_VALUE"
            Dim forty As String = "SELECT * FROM AAGASKETMAT_3WAY ORDER BY PARAMETER_VALUE"

            'PRDS
            Dim fortyone As String = "SELECT * FROM AABODYMAT_PRDS ORDER BY PARAMETER_VALUE"
            Dim fortytwo As String = "SELECT * FROM AATOPMAT_PRDS ORDER BY PARAMETER_VALUE"
            Dim fortythree As String = "SELECT * FROM AAPLUG_PRDS ORDER BY PARAMETER_VALUE"
            Dim fortyfour As String = "SELECT * FROM AASEAT_PRDS ORDER BY PARAMETER_VALUE"
            Dim fortyfive As String = "SELECT * FROM AAGASKETMAT_PRDS ORDER BY PARAMETER_VALUE"

            'Dim threeone As String = "SELECT * FROM AARobotorMake ORDER BY PARAMETER_VALUE ;"
            'Dim threetwo As String = "SELECT * FROM AAPostransMake ORDER BY PARAMETER_VALUE ;"
            'Dim threethree As String = "select * from AAitopMake ORDER BY PARAMETER_VALUE;"
            'Dim threeone As String = "select distinct actuator_name_model, dense_rank() over (order by (select null)) as Sr_Nos from actuator ;"
            'Dim threetwo As String = "select distinct valvesize_inches, dense_rank() over (order by (select null)) as Sr_Nos from ps1_ps3 ;"
            'Dim threethree As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from fr ;"
            'Dim threefour As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from fl ;"
            'Dim threefive As String = "select distinct valve_size_inches, dense_rank() over (order by (select null)) as Sr_Nos from threewayvalve ;"
            'Dim threesix As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from pipeschedule1 ;"
            'Dim threeseven As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from pipeschedule2 ;"
            'Dim threeeight As String = "select distinct valve_size_inches, dense_rank() over (order by (select null)) as Sr_Nos from kvforcage ;"
            'Dim threenine As String = "select distinct valvesize, dense_rank() over (order by (select null)) as Sr_Nos from prtable ;"
            'Dim forty As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from ratingclass ;"
            'Dim fourone As String = "select ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS Sr_Nos,* from outputrecords ;"
            'Dim fourtwo As String = "select * from storagerecords_gap ;"
            con = New SqlConnection(constr)

            con.Open()

            'Table 1
            command = New SqlCommand(first, con)
            adapter.SelectCommand = command
            adapter.Fill(ds_AccessoriesMat, "topbonnettype")

            'Table 2
            adapter.SelectCommand.CommandText = second
            adapter.Fill(ds_AccessoriesMat, "endconnection")

            'Table 3
            adapter.SelectCommand.CommandText = third
            adapter.Fill(ds_AccessoriesMat, "bodymat")

            'Table 4
            adapter.SelectCommand.CommandText = four
            adapter.Fill(ds_AccessoriesMat, "plug")

            'Table 5
            adapter.SelectCommand.CommandText = five
            adapter.Fill(ds_AccessoriesMat, "seat")

            'Table 6
            adapter.SelectCommand.CommandText = six
            adapter.Fill(ds_AccessoriesMat, "topmat")

            'Table 7
            adapter.SelectCommand.CommandText = seven
            adapter.Fill(ds_AccessoriesMat, "gasketmat")

            ' Table 8
            adapter.SelectCommand.CommandText = eight
            adapter.Fill(ds_AccessoriesMat, "painting")

            'Table 9
            adapter.SelectCommand.CommandText = nine
            adapter.Fill(ds_AccessoriesMat, "positioner")

            'Table 10
            adapter.SelectCommand.CommandText = ten
            adapter.Fill(ds_AccessoriesMat, "sov")

            'Table 11
            adapter.SelectCommand.CommandText = eleven
            adapter.Fill(ds_AccessoriesMat, "afr")

            'Table 12
            adapter.SelectCommand.CommandText = twelve
            adapter.Fill(ds_AccessoriesMat, "alr")

            'Table 13
            adapter.SelectCommand.CommandText = thirteen
            adapter.Fill(ds_AccessoriesMat, "limitswitchbox")

            'Table 14
            adapter.SelectCommand.CommandText = fourteen
            adapter.Fill(ds_AccessoriesMat, "volbooster")

            'Table 15
            adapter.SelectCommand.CommandText = fifteen
            adapter.Fill(ds_AccessoriesMat, "postrans")

            'Table 16
            adapter.SelectCommand.CommandText = sixteen
            adapter.Fill(ds_AccessoriesMat, "vtank")

            'Table 17
            adapter.SelectCommand.CommandText = seventeen
            adapter.Fill(ds_AccessoriesMat, "robotor")

            'Table 18
            adapter.SelectCommand.CommandText = eighteen
            adapter.Fill(ds_AccessoriesMat, "itop")

            'Table 19
            adapter.SelectCommand.CommandText = nineteen
            adapter.Fill(ds_AccessoriesMat, "qev")

            'Table 20
            adapter.SelectCommand.CommandText = twenty
            adapter.Fill(ds_AccessoriesMat, "certification")

            'Table 21
            adapter.SelectCommand.CommandText = twoone
            adapter.Fill(ds_AccessoriesMat, "handwheel")

            'Table 22
            adapter.SelectCommand.CommandText = fortysix
            adapter.Fill(ds_AccessoriesMat, "tubing")

            'Table 23
            adapter.SelectCommand.CommandText = twothree
            adapter.Fill(ds_AccessoriesMat, "guiding")

            'Table 24
            adapter.SelectCommand.CommandText = twofour
            adapter.Fill(ds_AccessoriesMat, "positionermake")

            'Table 25
            adapter.SelectCommand.CommandText = twofive
            adapter.Fill(ds_AccessoriesMat, "afrmake")

            'Table 26
            adapter.SelectCommand.CommandText = twosix
            adapter.Fill(ds_AccessoriesMat, "alrmake")

            'Table 27
            adapter.SelectCommand.CommandText = twoseven
            adapter.Fill(ds_AccessoriesMat, "sovmake")

            'Table 28
            adapter.SelectCommand.CommandText = twoeight
            adapter.Fill(ds_AccessoriesMat, "vbmake")

            'Table 29
            adapter.SelectCommand.CommandText = twonine
            adapter.Fill(ds_AccessoriesMat, "limitswitchmake")

            'Table 30
            adapter.SelectCommand.CommandText = thirty
            adapter.Fill(ds_AccessoriesMat, "qevmake")

            'Table 31
            adapter.SelectCommand.CommandText = threeone
            adapter.Fill(ds_AccessoriesMat, "bodymat_fmcv")

            'Table 32
            adapter.SelectCommand.CommandText = threetwo
            adapter.Fill(ds_AccessoriesMat, "topmat_fmcv")

            'Table 33
            adapter.SelectCommand.CommandText = threethree
            adapter.Fill(ds_AccessoriesMat, "plug_fmcv")

            'Table 34
            adapter.SelectCommand.CommandText = threefour
            adapter.Fill(ds_AccessoriesMat, "seat_fmcv")

            'Table 35
            adapter.SelectCommand.CommandText = threefive
            adapter.Fill(ds_AccessoriesMat, "gasketmat_fmcv")

            'Table 36
            adapter.SelectCommand.CommandText = threesix
            adapter.Fill(ds_AccessoriesMat, "bodymat_3way")

            'Table 37
            adapter.SelectCommand.CommandText = threeseven
            adapter.Fill(ds_AccessoriesMat, "topmat_3way")

            'Table 38
            adapter.SelectCommand.CommandText = threeeight
            adapter.Fill(ds_AccessoriesMat, "plug_3way")

            'Table 39
            adapter.SelectCommand.CommandText = threenine
            adapter.Fill(ds_AccessoriesMat, "seat_3way")

            'Table 40
            adapter.SelectCommand.CommandText = forty
            adapter.Fill(ds_AccessoriesMat, "gasketmat_3way")

            'Table 41
            adapter.SelectCommand.CommandText = fortyone
            adapter.Fill(ds_AccessoriesMat, "bodymat_prds")

            'Table 42
            adapter.SelectCommand.CommandText = fortytwo
            adapter.Fill(ds_AccessoriesMat, "topmat_prds")

            'Table 43
            adapter.SelectCommand.CommandText = fortythree
            adapter.Fill(ds_AccessoriesMat, "plug_prds")

            'Table 44
            adapter.SelectCommand.CommandText = fortyfour
            adapter.Fill(ds_AccessoriesMat, "seat_prds")

            'Table 45
            adapter.SelectCommand.CommandText = fortyfive
            adapter.Fill(ds_AccessoriesMat, "gasketmat_prds")

            'Table 46
            adapter.SelectCommand.CommandText = fortyseven
            adapter.Fill(ds_AccessoriesMat, "AATUBINGMAKE")

            'Table 47
            adapter.SelectCommand.CommandText = fortyeight
            adapter.Fill(ds_AccessoriesMat, "AATUBING_SIZE")

            'Table 48
            adapter.SelectCommand.CommandText = fortynine
            adapter.Fill(ds_AccessoriesMat, "AATUBING_MOC")

            'Table 49
            adapter.SelectCommand.CommandText = fifty
            adapter.Fill(ds_AccessoriesMat, "AAIRFAIL")

            ''Table 36
            'adapter.SelectCommand.CommandText = threeone
            'adapter.Fill(ds_AccessoriesMat, "actuator")

            ''Table 37
            'adapter.SelectCommand.CommandText = threetwo
            'adapter.Fill(ds_AccessoriesMat, "pr1_pr3")

            ''Table 38
            'adapter.SelectCommand.CommandText = threethree
            'adapter.Fill(ds_AccessoriesMat, "fr")

            ''Table 39
            'adapter.SelectCommand.CommandText = threefour
            'adapter.Fill(ds_AccessoriesMat, "fl")

            ''Table 40
            'adapter.SelectCommand.CommandText = threefive
            'adapter.Fill(ds_AccessoriesMat, "threewayvalve")

            ''Table 41
            'adapter.SelectCommand.CommandText = threesix
            'adapter.Fill(ds_AccessoriesMat, "pipeschedule1")

            ''Table 42
            'adapter.SelectCommand.CommandText = threeseven
            'adapter.Fill(ds_AccessoriesMat, "pipeschedule2")

            ''Table 43
            'adapter.SelectCommand.CommandText = threeeight
            'adapter.Fill(ds_AccessoriesMat, "kvforcage")

            ''Table 44
            'adapter.SelectCommand.CommandText = threenine
            'adapter.Fill(ds_AccessoriesMat, "prtable")

            ''Table 45
            'adapter.SelectCommand.CommandText = forty
            'adapter.Fill(ds_AccessoriesMat, "ratingclass")

            ''Table 46
            'adapter.SelectCommand.CommandText = fourone
            'adapter.Fill(ds_AccessoriesMat, "outputrecords")

            ''Table 47
            'adapter.SelectCommand.CommandText = fourtwo
            'adapter.Fill(ds_AccessoriesMat, "storagerecords")

            'Configuring the ComboBoxes
            cmbBonnetType.DataSource = ds_AccessoriesMat.Tables(0)
            cmbBonnetType.ValueMember = "Sr_Nos"
            cmbBonnetType.DisplayMember = "Name"
            cmbBonnetType.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            cmbBonnetType.AutoCompleteSource = AutoCompleteSource.ListItems

            cmbEndConnection.DataSource = ds_AccessoriesMat.Tables(1)
            cmbEndConnection.ValueMember = "Sr_Nos"
            cmbEndConnection.DisplayMember = "Name"
            cmbEndConnection.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            cmbEndConnection.AutoCompleteSource = AutoCompleteSource.ListItems

            'ComboBox8.DataSource = ds.Tables(7)
            'ComboBox8.ValueMember = "Sr_Nos"
            'ComboBox8.DisplayMember = "Name"
            'ComboBox8.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            'ComboBox8.AutoCompleteSource = AutoCompleteSource.ListItems

            ''ComboBox9.ValueMember = "Sr_Nos"
            ''ComboBox9.DisplayMember = "Name"
            ''ComboBox9.DataSource = ds.Tables(8)
            ''ComboBox9.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            ''ComboBox9.AutoCompleteSource = AutoCompleteSource.ListItems
            ''DataGridView1.DataSource = ds.Tables(8)

            ''ComboBox10.DataSource = ds.Tables(9)
            ''ComboBox10.ValueMember = "Sr_Nos"
            ''ComboBox10.DisplayMember = "Name"
            ''ComboBox10.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            ''ComboBox10.AutoCompleteSource = AutoCompleteSource.ListItems

            ''ComboBox11.DataSource = ds.Tables(10)
            ''ComboBox11.ValueMember = "Sr_Nos"
            ''ComboBox11.DisplayMember = "Name"
            ''ComboBox11.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            ''ComboBox11.AutoCompleteSource = AutoCompleteSource.ListItems

            ''ComboBox12.DataSource = ds.Tables(11)
            ''ComboBox12.ValueMember = "Sr_Nos"
            ''ComboBox12.DisplayMember = "Name"
            ''ComboBox12.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            ''ComboBox12.AutoCompleteSource = AutoCompleteSource.ListItems

            ''ComboBox13.DataSource = ds.Tables(12)
            ''ComboBox13.ValueMember = "Sr_Nos"
            ''ComboBox13.DisplayMember = "Name"
            ''ComboBox13.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            ''ComboBox13.AutoCompleteSource = AutoCompleteSource.ListItems

            ''ComboBox14.DataSource = ds.Tables(13)
            ''ComboBox14.ValueMember = "Sr_Nos"
            ''ComboBox14.DisplayMember = "Name"
            ''ComboBox14.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            ''ComboBox14.AutoCompleteSource = AutoCompleteSource.ListItems

            'ComboBox15.DataSource = ds.Tables(14)
            'ComboBox15.ValueMember = "Sr_Nos"
            'ComboBox15.DisplayMember = "Name"
            'ComboBox15.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            'ComboBox15.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbItoP.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbItoP.ValueMember = "Sr_No"
            frmAccessories.cmbItoP.DataSource = ds_AccessoriesMat.Tables(17)
            frmAccessories.cmbItoP.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbItoP.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbPosnTrans.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbPosnTrans.ValueMember = "Sr_No"
            frmAccessories.cmbPosnTrans.DataSource = ds_AccessoriesMat.Tables(14)
            frmAccessories.cmbPosnTrans.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbPosnTrans.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbRobotor.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbRobotor.ValueMember = "Sr_No"
            frmAccessories.cmbRobotor.DataSource = ds_AccessoriesMat.Tables(16)
            frmAccessories.cmbRobotor.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbRobotor.AutoCompleteSource = AutoCompleteSource.ListItems

            ''ComboBox19.DataSource = ds.Tables(18)
            ''ComboBox19.ValueMember = "Sr_Nos"
            ''ComboBox19.DisplayMember = "Name"
            ''ComboBox19.AutoCompleteSource = AutoCompleteSource.ListItems
            ''ComboBox19.AutoCompleteMode = AutoCompleteMode.SuggestAppend

            frmAccessories.cmbCertification.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbCertification.ValueMember = "Sr_No"
            frmAccessories.cmbCertification.DataSource = ds_AccessoriesMat.Tables(19)
            frmAccessories.cmbCertification.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbCertification.AutoCompleteSource = AutoCompleteSource.ListItems

            cmbHandwheel.DisplayMember = "PARAMETER_VALUE"
            cmbHandwheel.ValueMember = "Sr_No"
            cmbHandwheel.DataSource = ds_AccessoriesMat.Tables(20)
            cmbHandwheel.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            cmbHandwheel.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbTubing.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbTubing.ValueMember = "Sr_No"
            frmAccessories.cmbTubing.DataSource = ds_AccessoriesMat.Tables(21)
            frmAccessories.cmbTubing.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbTubing.AutoCompleteSource = AutoCompleteSource.ListItems

            'frmMaterials.cmbGuiding.DataSource = ds_AccessoriesMat.Tables(22)
            'frmMaterials.cmbGuiding.ValueMember = "Sr_No"
            'frmMaterials.cmbGuiding.DisplayMember = "PARAMETER_VALUE"
            'frmMaterials.cmbGuiding.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            'frmMaterials.cmbGuiding.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbPositionerMake.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbPositionerMake.ValueMember = "Sr_No"
            frmAccessories.cmbPositionerMake.DataSource = ds_AccessoriesMat.Tables(23)
            frmAccessories.cmbPositionerMake.AutoCompleteSource = AutoCompleteSource.ListItems
            frmAccessories.cmbPositionerMake.AutoCompleteMode = AutoCompleteMode.SuggestAppend

            frmAccessories.cmbAFRMake.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbAFRMake.ValueMember = "Sr_No"
            frmAccessories.cmbAFRMake.DataSource = ds_AccessoriesMat.Tables(24)
            frmAccessories.cmbAFRMake.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbAFRMake.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbALRMake.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbALRMake.ValueMember = "Sr_No"
            frmAccessories.cmbALRMake.DataSource = ds_AccessoriesMat.Tables(25)
            frmAccessories.cmbALRMake.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbALRMake.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbSOVMake.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbSOVMake.ValueMember = "Sr_No"
            frmAccessories.cmbSOVMake.DataSource = ds_AccessoriesMat.Tables(26)
            frmAccessories.cmbSOVMake.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbSOVMake.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbLimitSwitchMake.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbLimitSwitchMake.ValueMember = "Sr_No"
            frmAccessories.cmbLimitSwitchMake.DataSource = ds_AccessoriesMat.Tables(28)
            frmAccessories.cmbLimitSwitchMake.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbLimitSwitchMake.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbVBMake.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbVBMake.ValueMember = "Sr_No"
            frmAccessories.cmbVBMake.DataSource = ds_AccessoriesMat.Tables(27)
            frmAccessories.cmbVBMake.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbVBMake.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbQEVMake.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbQEVMake.ValueMember = "Sr_No"
            frmAccessories.cmbQEVMake.DataSource = ds_AccessoriesMat.Tables(29)
            frmAccessories.cmbQEVMake.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbQEVMake.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbTubingMake.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbTubingMake.ValueMember = "Sr_No"
            frmAccessories.cmbTubingMake.DataSource = ds_AccessoriesMat.Tables(45)
            frmAccessories.cmbTubingMake.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbTubingMake.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbTubingSize.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbTubingSize.ValueMember = "Sr_No"
            frmAccessories.cmbTubingSize.DataSource = ds_AccessoriesMat.Tables(46)
            frmAccessories.cmbTubingSize.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbTubingSize.AutoCompleteSource = AutoCompleteSource.ListItems

            frmAccessories.cmbTubingMOC.DisplayMember = "PARAMETER_VALUE"
            frmAccessories.cmbTubingMOC.ValueMember = "Sr_No"
            frmAccessories.cmbTubingMOC.DataSource = ds_AccessoriesMat.Tables(47)
            frmAccessories.cmbTubingMOC.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            frmAccessories.cmbTubingMOC.AutoCompleteSource = AutoCompleteSource.ListItems

            cmbAirFailure.DisplayMember = "PARAMETER_VALUE"
            cmbAirFailure.ValueMember = "Sr_No"
            cmbAirFailure.DataSource = ds_AccessoriesMat.Tables(48)
            cmbAirFailure.AutoCompleteMode = AutoCompleteMode.SuggestAppend
            cmbAirFailure.AutoCompleteSource = AutoCompleteSource.ListItems

            'ComboBox32.DataSource = ds.Tables(31)
            'ComboBox32.ValueMember = "Sr_Nos"
            'ComboBox32.DisplayMember = "valvesize_inches"

            'ComboBox33.DataSource = ds.Tables(32)
            'ComboBox33.ValueMember = "Sr_Nos"
            'ComboBox33.DisplayMember = "renoyld_no"

            'ComboBox34.DataSource = ds.Tables(33)
            'ComboBox34.ValueMember = "Sr_Nos"
            'ComboBox34.DisplayMember = "fl"

            'ComboBox35.DataSource = ds.Tables(34)
            'ComboBox35.ValueMember = "Sr_Nos"
            'ComboBox35.DisplayMember = "valve_size_inches"

            'ComboBox36.DataSource = ds.Tables(35)
            'ComboBox36.ValueMember = "Sr_Nos"
            'ComboBox36.DisplayMember = "pipe_size_inches"

            'ComboBox37.DataSource = ds.Tables(36)
            'ComboBox37.ValueMember = "Sr_Nos"
            'ComboBox37.DisplayMember = "valve_size_in_mm"

            'ComboBox38.DataSource = ds.Tables(37)
            'ComboBox38.ValueMember = "Sr_Nos"
            'ComboBox38.DisplayMember = "valve_size_inches"

            'ComboBox39.DataSource = ds.Tables(38)
            'ComboBox39.ValueMember = "Sr_Nos"
            'ComboBox39.DisplayMember = "valvesize"

            'ComboBox40.DataSource = ds.Tables(39)
            'ComboBox40.ValueMember = "Sr_Nos"
            'ComboBox40.DisplayMember = "temperature"

            adapter.Dispose()
            command.Dispose()
            con.Dispose()
        Catch ex As Exception
            MsgBox("SQL_DATALOAD: ", ex.Message + ex.StackTrace)
        End Try
    End Sub

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        'LoadingForm = False
        ''Dim rowno As Byte
        ''Dim RemoveLineFeed As String
        'Try
        '    '  frmWelcome.ShowDialog()
        '    'Call UpdateTables()
        '    '  lblVersion.Text = "Version No: V6.2.0 04 April 2023"
        '    If My.Application.IsNetworkDeployed Then
        '        lblVersion.Text = ApplicationDeployment.CurrentDeployment.CurrentVersion.ToString & VersionDate
        '    Else
        '        lblVersion.Text = VersionNo & "  " & VersionDate
        '    End If

        '    If Database_Rowno > 0 Then
        '        lblDatabaseRowNo.Text = Database_Rowno - 1 & "/" & Database_LastRow - 1
        '        txtJumpToRecord.Text = Database_Rowno - 1
        '    Else

        '        lblDatabaseRowNo.Text = 1 & "/ 1"
        '        txtJumpToRecord.Text = 1
        '    End If

        '    'For Database and Datasheet change column nos indexing here.
        '    DataSection1_Field = 10
        '    DataSection2_MOC = 91
        '    DataSection3_Actuator = 133
        '    DataSection4_Materials = 160
        '    DataSection5_Output1 = 188
        '    DataSection6_Output2 = 231          ' Till 60 
        '    DataSection7_CalcValues = 301
        '    LastColumn_Values = 400

        '    '-------------------------------


        '    ChangingUnitsType = False

        '    lblToutPressure.Visible = False
        '    txtTOutPressureCase1.Visible = False
        '    txtTOutPressureCase2.Visible = False
        '    txtTOutPressureCase3.Visible = False

        '    lblTsatoutPressure.Visible = False
        '    txtTsatoutPressureCase1.Visible = False
        '    txtTsatoutPressureCase2.Visible = False
        '    txtTsatoutPressureCase3.Visible = False

        '    ToutsatPressureCase1 = 0
        '    ToutsatPressureCase2 = 0
        '    ToutsatPressureCase3 = 0


        '    lblK.Visible = False
        '    txtK_Case1.Visible = False
        '    txtK_Case2.Visible = False
        '    txtK_Case3.Visible = False

        '    lblZ.Visible = False
        '    txtZ_Case1.Visible = False
        '    txtZ_Case2.Visible = False
        '    txtZ_Case3.Visible = False

        '    lblX.Visible = False
        '    txtX_Case1.Visible = False
        '    txtX_Case2.Visible = False
        '    txtX_Case3.Visible = False

        '    '   lblKVerrordueToValve.Visible = False

        '    Me.cmbFluidType.Items.Add("InCompressible")
        '    Me.cmbFluidType.Items.Add("Compressible")


        '    Me.cmbFluid.Items.Add("Standard Water")
        '    Me.cmbFluid.Items.Add("Other Liquid")

        '    cmbUnitsType.Items.Add("MKS&SI")
        '    cmbUnitsType.Items.Add("FPS")
        '    cmbUnitsType.Items.Add("ALL")

        '    'GLOBE
        '    '   3-WAY MIX
        '    '   3-WAY SEP
        '    ' GLOBE -FORBES

        '    cmbModel.Items.Add("GLOBE-FORBES")
        '    cmbModel.Items.Add("GLOBE")
        '    cmbModel.Items.Add("3-WAY MIX ")
        '    cmbModel.Items.Add("3-WAY SEP")
        '    cmbModel.Items.Add("T.E. PRDS Perforated")
        '    cmbModel.Items.Add("B.E. PRDS Perforated")
        '    cmbModel.Items.Add("B.E. PRDS Parabolic")

        '    cmbQW.Items.Add("Q")
        '    cmbQW.Items.Add("W")

        '    'Flow Units 

        '    Me.cmbFlowrate.Items.Add("m3/h")
        '    Me.cmbFlowrate.Items.Add("l/h")
        '    Me.cmbFlowrate.Items.Add("l/m")




        '    Me.cmbPressureUnits.Items.Add("barA")
        '    Me.cmbPressureUnits.Items.Add("barg")
        '    Me.cmbPressureUnits.Items.Add("kg/cm2A")
        '    Me.cmbPressureUnits.Items.Add("kg/cm2g")
        '    Me.cmbPressureUnits.Items.Add("Pascal")



        '    Me.cmbAirPressureUnits.Items.Add("barg")
        '    Me.cmbAirPressureUnits.Items.Add("barA")
        '    Me.cmbAirPressureUnits.Items.Add("kg/cm2A")
        '    Me.cmbAirPressureUnits.Items.Add("kg/cm2g")
        '    Me.cmbAirPressureUnits.Items.Add("Pascal")

        '    Me.cmbCriticalPressureUnits.Items.Add("barA")
        '    Me.cmbCriticalPressureUnits.Items.Add("barg")
        '    Me.cmbCriticalPressureUnits.Items.Add("kg/cm2A")
        '    Me.cmbCriticalPressureUnits.Items.Add("kg/cm2g")
        '    Me.cmbCriticalPressureUnits.Items.Add("Pascal")



        '    Me.cmbVapourPressureUnits.Items.Add("barA")
        '    Me.cmbVapourPressureUnits.Items.Add("barg")
        '    Me.cmbVapourPressureUnits.Items.Add("kg/cm2A")
        '    Me.cmbVapourPressureUnits.Items.Add("kg/cm2g")
        '    Me.cmbVapourPressureUnits.Items.Add("Pascal")

        '    Me.cmbTemperatureUnits.Items.Add("°K")
        '    Me.cmbTemperatureUnits.Items.Add("°C")

        '    Me.cmbDensityUnits.Items.Add("Sp.Gravity")
        '    Me.cmbDensityUnits.Items.Add("kg/m3")
        '    Me.cmbDensityUnits.Items.Add("kg/l")

        '    Me.cmbViscosityUnits.Items.Add("m2/s")
        '    Me.cmbViscosityUnits.Items.Add("mPa s")
        '    Me.cmbViscosityUnits.Items.Add("cP")
        '    Me.cmbViscosityUnits.Items.Add("cSt")


        '    Me.cmbMOC.Items.Add("A216WCB")
        '    Me.cmbMOC.Items.Add("A217WC6")
        '    Me.cmbMOC.Items.Add("A351CF8M")
        '    Me.cmbMOC.Items.Add("A216WCC")
        '    Me.cmbMOC.Items.Add("A351 CF3")
        '    Me.cmbMOC.Items.Add("A351CF3M")
        '    Me.cmbMOC.Items.Add("A217WC9")
        '    Me.cmbMOC.Items.Add("A351 CF8")
        '    Me.cmbMOC.Items.Add("A352LCB")
        '    Me.cmbMOC.Items.Add("A217 C5")
        '    Me.cmbMOC.Items.Add("A351 Gr.CD4MCu")
        '    Me.cmbMOC.Items.Add("A217 C12A")
        '    Me.cmbMOC.Items.Add("A351 CN7M")
        '    Me.cmbMOC.Items.Add("A494 Gr.CW-12MW")
        '    Me.cmbMOC.Items.Add("A105")
        '    Me.cmbMOC.Items.Add("A350 Gr.LF2")



        '    cmbInletPipeSize.Text = "--Select--"
        '    cmbInletPipeSchedule.Text = "-Select-"

        '    'Me.cmbDesignPressure.Items.Add("barA")
        '    'Me.cmbDesignPressure.Items.Add("barG")
        '    'Me.cmbDesignPressure.Items.Add("psiA")
        '    'Me.cmbDesignPressure.Items.Add("psiG")
        '    'Me.cmbDesignPressure.Items.Add("kg/cm2A")
        '    'Me.cmbDesignPressure.Items.Add("kg/cm2G")
        '    'Me.cmbDesignPressure.Items.Add("kPaA")
        '    'Me.cmbDesignPressure.Items.Add("kPaG")
        '    'Me.cmbDesignPressure.Items.Add("MPaA")
        '    'Me.cmbDesignPressure.Items.Add("MPaG")


        '    'Me.cmbDesignTemperature.Items.Add("°C")
        '    'Me.cmbDesignTemperature.Items.Add("°K")
        '    'Me.cmbDesignTemperature.Items.Add("°R")
        '    'Me.cmbDesignTemperature.Items.Add("°F")

        '    Me.cmbVelocityRule.Items.Add("6 m/s")
        '    Me.cmbVelocityRule.Items.Add("8 m/s")

        '    Me.cmbAreaunits.Items.Add("NB")
        '    Me.cmbAreaunits.Items.Add("inch")

        '    Me.cmbKVseries.Items.Add("50% S")
        '    Me.cmbKVseries.Items.Add("60% S")
        '    Me.cmbKVseries.Items.Add("70% S")
        '    Me.cmbKVseries.Items.Add("80% S")
        '    Me.cmbKVseries.Items.Add("90% S")
        '    Me.cmbKVseries.Items.Add("95% S")
        '    Me.cmbKVseries.Items.Add("100% S")

        '    Me.cmbCharacterstics.Items.Add("LINEAR")
        '    Me.cmbCharacterstics.Items.Add("EQUAL %")
        '    Me.cmbCharacterstics.Items.Add("ON-OFF")

        '    'cmbSelectedTrim.Items.Add("PS1")
        '    'cmbSelectedTrim.Items.Add("PS3")
        '    'cmbSelectedTrim.Items.Add("PR1")
        '    'cmbSelectedTrim.Items.Add("PR2")
        '    'cmbSelectedTrim.Items.Add("PR3")
        '    cmbSelectedTrim.Items.Add("P1")             'changes 20102020
        '    cmbSelectedTrim.Items.Add("P3")
        '    cmbSelectedTrim.Items.Add("L1")
        '    cmbSelectedTrim.Items.Add("L2")
        '    cmbSelectedTrim.Items.Add("L3")

        '    cmbFlowDirection.Items.Add("FTO")
        '    cmbFlowDirection.Items.Add("FTC")

        '    'Actuator
        '    cmbActuatorType.Items.Add("SINGLE SPRING")
        '    cmbActuatorType.Items.Add("MULTI SPRING")
        '    cmbActuatorType.Items.Add("NA")
        '    cmbActuatorType.Items.Add("Manual")
        '    cmbActuatorType.Items.Add("Electrical")
        '    cmbActuatorType.Items.Add("PNEUMATIC")
        '    cmbActuatorType.Items.Add("811PNEUMATIC")

        '    cmbActuatorType.SelectedIndex = 0

        '    cmbAirFailure.Items.Add("Open")
        '    cmbAirFailure.Items.Add("Close")
        '    cmbAirFailure.SelectedIndex = 1


        '    'cmbLeakage.Items.Add("Class 1")
        '    'cmbLeakage.Items.Add("Class 2")
        '    'cmbLeakage.Items.Add("Class 3")
        '    cmbLeakage.Items.Add("CLASS IV")
        '    cmbLeakage.Items.Add("CLASS V")
        '    cmbLeakage.Items.Add("CLASS VI")
        '    'cmbLeakage.Items.Add("Class 7")
        '    '    cmbLeakage.SelectedIndex = 0

        '    cmbBalancing.Items.Add("Non Pr.Bal")
        '    cmbBalancing.Items.Add("Q-Ring EPDM")
        '    cmbBalancing.Items.Add("Q-Ring VITON")
        '    cmbBalancing.Items.Add("Piston-Ring")
        '    'cmbBalancing.Items.Add("PTFE VARI")
        '    'cmbBalancing.Items.Add("Graphite")
        '    cmbBalancing.SelectedIndex = 0


        '    '  cmbSealing.Items.Add("Metal")
        '    'cmbSealing.Items.Add("PTFE/EPDM 140Grd")
        '    'cmbSealing.Items.Add("PTFE/VITON 180Grd")
        '    'cmbSealing.Items.Add("PTFE-Trapez 200Grd")
        '    'cmbSealing.Items.Add("PEEK 250Grd")
        '    'cmbSealing.Items.Add("PEEK/plug")
        '    '  cmbSealing.SelectedIndex = 0

        '    cmbPacking.Items.Add("PTFE V-Ring+EPDM")
        '    cmbPacking.Items.Add("PTFE V-Ring+VITON")
        '    cmbPacking.Items.Add("PTFE braided")
        '    cmbPacking.Items.Add("Pure Graphite")

        '    'cmbPacking.Items.Add("Carbon/INCONEL")
        '    'cmbPacking.Items.Add("PureGraphite+EPDM")
        '    'cmbPacking.Items.Add("PureGraphite+VITON")
        '    'cmbPacking.Items.Add("TA-Luft")
        '    'cmbPacking.Items.Add("Chesterton477")
        '    'cmbPacking.Items.Add("Chesterton324")
        '    'cmbPacking.Items.Add("ChesteronLL")
        '    'cmbPacking.Items.Add("T-L")
        '    'cmbPacking.Items.Add("T-GP")
        '    'cmbPacking.Items.Add("QV")
        '    'cmbPacking.Items.Add("QE")
        '    cmbPacking.SelectedIndex = 0

        '    cmbSuggestedRating.Items.Add("150")
        '    cmbSuggestedRating.Items.Add("300")
        '    cmbSuggestedRating.Items.Add("600")
        '    cmbSuggestedRating.Items.Add("900")
        '    cmbSuggestedRating.Items.Add("1500")
        '    cmbSuggestedRating.Items.Add("2500")
        '    'cmbSuggestedRating.Items.Add("4500")

        '    Call SQL_DATALOAD()
        '    'Reading Database files into Datasets 
        '    'ds_AccessoriesMat = ConvertCSV(AppPath & "\Database\Accessories_Materials.csv", "Accessories_Materials", ",")
        '    ds_AFOSingleSpring = ConvertCSV(AppPath & "\bin\Debug\Database\AFOSingleSpringModel.csv", "AFOSingleSpringModel", ",")
        '    ds_AFCSingleSpring = ConvertCSV(AppPath & "\bin\Debug\Database\AFCSingleSpringModel.csv", "AFCSingleSpringModel", ",")
        '    ds_AFOMultiSpring = ConvertCSV(AppPath & "\bin\Debug\Database\AFOMultiSpringModel.csv", "AFOMultiSpringModel", ",")
        '    ds_AFCMultiSpring = ConvertCSV(AppPath & "\bin\Debug\Database\AFCMultiSpringModel.csv", "AFCMultiSpringModel", ",")
        '    ds_SealingForce150300 = ConvertCSV(AppPath & "\bin\Debug\Database\SealingForce150300.csv", "SealingForce150300", ",")
        '    ds_SealingForce6001500 = ConvertCSV(AppPath & "\bin\Debug\Database\SealingForce6001500.csv", "SealingForce6001500", ",")
        '    ds_SeatingForceLC6150300 = ConvertCSV(AppPath & "\bin\Debug\Database\SeatingForceLC6150300.csv", "SeatingForceLC6150300 ", ",")
        '    ds_SeatingForceLC66001500 = ConvertCSV(AppPath & "\bin\Debug\Database\SeatingForceLC66001500.csv", "SeatingForceLC66001500 ", ",")
        '    ds_FrictionForce150300 = ConvertCSV(AppPath & "\bin\Debug\Database\FrictionForce150300.csv", "FrictionForce150300 ", ",")
        '    ds_FrictionForce6001500 = ConvertCSV(AppPath & "\bin\Debug\Database\FrictionForce6001500.csv", "FrictionForce6001500 ", ",")
        '    ds_Travel150300 = ConvertCSV(AppPath & "\bin\Debug\Database\Travel150300.csv", "Travel150300 ", ",")
        '    ds_Travel6001500 = ConvertCSV(AppPath & "\bin\Debug\Database\Travel6001500.csv", "Travel6001500 ", ",")

        '    ds_FL = ConvertCSV(AppPath & "\bin\Debug\Database\FL.csv", "FL", ",")
        '    ds_FR = ConvertCSV(AppPath & "\bin\Debug\Database\FR.csv", "FR", ",")
        '    ds_PipeSchedule1 = ConvertCSV(AppPath & "\bin\Debug\Database\PipeSchedule1.csv", "PipeSchedule1", ",")
        '    ds_PipeSchedule2 = ConvertCSV(AppPath & "\bin\Debug\Database\PipeSchedule2.csv", "PipeSchedule2", ",")
        '    ds_RatingClass_150300 = ConvertCSV(AppPath & "\bin\Debug\Database\RatingClass_150300.csv", "RatingClass_150300", ",")
        '    ds_RatingClass_600900 = ConvertCSV(AppPath & "\bin\Debug\Database\RatingClass_600900.csv", "RatingClass_600900", ",")
        '    ds_KvforCage150300 = ConvertCSV(AppPath & "\bin\Debug\Database\KVforCAGE150300.csv", "KVforCAGE150300", ",")
        '    ds_KvforCage600900 = ConvertCSV(AppPath & "\bin\Debug\Database\KVforCAGE600900.csv", "KVforCAGE600900", ",")
        '    ds_Water_Temp_Properties = ConvertCSV(AppPath & "\bin\Debug\Database\Water_Temp_Properties.csv", "Water_Temp_Properties", ",")


        '    ds_A216GrWCB = ConvertCSV(AppPath & "\bin\Debug\Database\A216 Gr.WCB.csv", "A216 Gr.WCB", ",")
        '    ds_A217GrWC6 = ConvertCSV(AppPath & "\bin\Debug\Database\A217 Gr.WC6.csv", "A217 Gr.WC6", ",")
        '    ds_A351GrCF8M = ConvertCSV(AppPath & "\bin\Debug\Database\A351 Gr.CF8M.csv", "A351 Gr.CF8M", ",")
        '    ds_A216GrWCC = ConvertCSV(AppPath & "\bin\Debug\Database\A216 Gr.WCC.csv", "A216 Gr.WCC", ",")
        '    ds_A351GrCF3 = ConvertCSV(AppPath & "\bin\Debug\Database\A351 Gr.CF3.csv", "A351 Gr.CF3", ",")
        '    ds_A351GrCF3M = ConvertCSV(AppPath & "\bin\Debug\Database\A351 Gr.CF3M.csv", "A351 Gr.CF3M", ",")
        '    ds_A217GrWC9 = ConvertCSV(AppPath & "\bin\Debug\Database\A217 Gr.WC9.csv", "A217 Gr.WC9", ",")
        '    ds_A351GrCF8C = ConvertCSV(AppPath & "\bin\Debug\Database\A351 Gr.CF8C.csv", "A351 Gr.CF8C", ",")
        '    ds_A352GrLCB = ConvertCSV(AppPath & "\bin\Debug\Database\A352 Gr.LCB.csv", "A352 Gr.LCB", ",")
        '    ds_A217GrC5 = ConvertCSV(AppPath & "\bin\Debug\Database\A217 Gr.C5.csv", "A217 Gr.C5", ",")
        '    ds_A351GrCD4MCu = ConvertCSV(AppPath & "\bin\Debug\Database\A351 Gr.CD4MCu.csv", "A351 Gr.CD4MCu", ",")
        '    ds_A217GrC12A = ConvertCSV(AppPath & "\bin\Debug\Database\A217 Gr.C12A.csv", "A217 Gr.C12A", ",")
        '    ds_A351GrCN7M = ConvertCSV(AppPath & "\bin\Debug\Database\A351 Gr.CN7M.csv", "A351 Gr.CN7M", ",")
        '    ds_A494GrCW12MW = ConvertCSV(AppPath & "\bin\Debug\Database\A494 Gr.CW-12MW.csv", "A494 Gr.CW-12MW", ",")



        '    DT_AccessoriesMat = New System.Data.DataTable
        '    DT_AFOSingleSpring = New System.Data.DataTable
        '    DT_AFCSingleSpring = New System.Data.DataTable
        '    DT_AFOMultiSpring = New System.Data.DataTable
        '    DT_AFCMultiSpring = New System.Data.DataTable
        '    DT_SealingForce150300 = New System.Data.DataTable
        '    DT_SealingForce6001500 = New System.Data.DataTable
        '    DT_SeatingForceLC6150300 = New System.Data.DataTable
        '    DT_SeatingForceLC66001500 = New System.Data.DataTable
        '    DT_FrictionForce150300 = New System.Data.DataTable
        '    DT_FrictionForce6001500 = New System.Data.DataTable
        '    DT_Travel150300 = New System.Data.DataTable
        '    DT_Travel6001500 = New System.Data.DataTable
        '    DT_Travel2500 = New System.Data.DataTable
        '    DT_FL = New System.Data.DataTable
        '    DT_FR = New System.Data.DataTable
        '    DT_PipeSchedule1 = New System.Data.DataTable
        '    DT_PipeSchedule2 = New System.Data.DataTable
        '    DT_RatingClass_150300 = New System.Data.DataTable
        '    DT_RatingClass_600900 = New System.Data.DataTable

        '    DT_A216GrWCB = New System.Data.DataTable
        '    DT_A217GrWC6 = New System.Data.DataTable
        '    DT_A351GrCF8M = New System.Data.DataTable
        '    DT_A216GrWCC = New System.Data.DataTable
        '    DT_A351GrCF3 = New System.Data.DataTable
        '    DT_A351GrCF3M = New System.Data.DataTable
        '    DT_A217GrWC9 = New System.Data.DataTable
        '    DT_A351GrCF8C = New System.Data.DataTable
        '    DT_A352GrLCB = New System.Data.DataTable
        '    DT_A217GrC5 = New System.Data.DataTable
        '    DT_A351GrCD4MCu = New System.Data.DataTable
        '    DT_A217GrC12A = New System.Data.DataTable
        '    DT_A351GrCN7M = New System.Data.DataTable
        '    DT_A494GrCW12MW = New System.Data.DataTable


        '    'PERFORATION
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR1150300KV.csv", "PR1150300KV", ",")
        '    DT_PR1150300KV = New System.Data.DataTable
        '    DT_PR1150300KV = ds_Perforated.Tables(0)
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR2150300KV.csv", "PR2150300KV", ",")
        '    DT_PR2150300KV = New System.Data.DataTable
        '    DT_PR2150300KV = ds_Perforated.Tables(0)
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR3150300KV.csv", "PR3150300KV", ",")
        '    DT_PR3150300KV = New System.Data.DataTable
        '    DT_PR3150300KV = ds_Perforated.Tables(0)
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR1600900KV.csv", "PR1600900KV", ",")
        '    DT_PR1600900KV = New System.Data.DataTable
        '    DT_PR1600900KV = ds_Perforated.Tables(0)
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR2600900KV.csv", "PR2600900KV", ",")
        '    DT_PR2600900KV = New System.Data.DataTable
        '    DT_PR2600900KV = ds_Perforated.Tables(0)
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR3600900KV.csv", "PR3600900KV", ",")
        '    DT_PR3600900KV = New System.Data.DataTable
        '    DT_PR3600900KV = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR12500KV.csv", "PR12500KV", ",")
        '    DT_PR12500KV = New System.Data.DataTable
        '    DT_PR12500KV = ds_Perforated.Tables(0)
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR22500KV.csv", "PR22500KV", ",")
        '    DT_PR22500KV = New System.Data.DataTable
        '    DT_PR22500KV = ds_Perforated.Tables(0)
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PR32500KV.csv", "PR32500KV", ",")
        '    DT_PR32500KV = New System.Data.DataTable
        '    DT_PR32500KV = ds_Perforated.Tables(0)



        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PS3_RatingClass_150300.csv", "PS3_RatingClass_150300", ",")
        '    DT_PS3150300KV = New System.Data.DataTable
        '    DT_PS3150300KV = ds_Perforated.Tables(0)
        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\PS3_RatingClass_600900.csv", "PS3_RatingClass_600900", ",")
        '    DT_PS3600900KV = New System.Data.DataTable
        '    DT_PS3600900KV = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\TEPRDSL2150300.csv", "TEPRDSL2150300", ",")
        '    DT_TEPRDSL2150300 = New System.Data.DataTable
        '    DT_TEPRDSL2150300 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\TEPRDSL2600900.csv", "TEPRDSL2600900", ",")
        '    DT_TEPRDSL2600900 = New System.Data.DataTable
        '    DT_TEPRDSL2600900 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\TEPRDSL3150300.csv", "TEPRDSL3150300", ",")
        '    DT_TEPRDSL3150300 = New System.Data.DataTable
        '    DT_TEPRDSL3150300 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\TEPRDSPR3600900.csv", "TEPRDSPR3600900", ",")
        '    DT_TEPRDSPR3600900 = New System.Data.DataTable
        '    DT_TEPRDSPR3600900 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\BEPRDSP1150300.csv", "BEPRDSP1150300", ",")
        '    DT_BEPRDSP1150300 = New System.Data.DataTable
        '    DT_BEPRDSP1150300 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\BEPRDSP1600900.csv", "BEPRDSP1600900", ",")
        '    DT_BEPRDSP1600900 = New System.Data.DataTable
        '    DT_BEPRDSP1600900 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\BEPRDSL2150300.csv", "BEPRDSL2150300", ",")
        '    DT_BEPRDSL2150300 = New System.Data.DataTable
        '    DT_BEPRDSL2150300 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\BEPRDSL2600900.csv", "BEPRDSL2600900", ",")
        '    DT_BEPRDSL2600900 = New System.Data.DataTable
        '    DT_BEPRDSL2600900 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\BEPRDSL3150300.csv", "BEPRDSL3150300", ",")
        '    DT_BEPRDSL3150300 = New System.Data.DataTable
        '    DT_BEPRDSL3150300 = ds_Perforated.Tables(0)

        '    ds_Perforated = ConvertCSV(AppPath & "\bin\Debug\Database\BEPRDSL3600900.csv", "BEPRDSL3600900", ",")
        '    DT_BEPRDSL3600900 = New System.Data.DataTable
        '    DT_BEPRDSL3600900 = ds_Perforated.Tables(0)


        '    DT_KvforCage150300 = New System.Data.DataTable
        '    DT_KvforCage600900 = New System.Data.DataTable
        '    DT_Water_Temp_Properties = New System.Data.DataTable

        '    DT_AccessoriesMat = ds_AccessoriesMat.Tables(0)
        '    DT_AFOSingleSpring = ds_AFOSingleSpring.Tables(0)
        '    DT_AFCSingleSpring = ds_AFCSingleSpring.Tables(0)
        '    DT_AFOMultiSpring = ds_AFOMultiSpring.Tables(0)
        '    DT_AFCMultiSpring = ds_AFCMultiSpring.Tables(0)
        '    DT_SealingForce150300 = ds_SealingForce150300.Tables(0)
        '    DT_SealingForce6001500 = ds_SealingForce6001500.Tables(0)
        '    DT_SeatingForceLC6150300 = ds_SeatingForceLC6150300.Tables(0)
        '    DT_SeatingForceLC66001500 = ds_SeatingForceLC66001500.Tables(0)
        '    DT_FrictionForce150300 = ds_FrictionForce150300.Tables(0)
        '    DT_FrictionForce6001500 = ds_FrictionForce6001500.Tables(0)
        '    DT_Travel150300 = ds_Travel150300.Tables(0)
        '    DT_Travel6001500 = ds_Travel6001500.Tables(0)
        '    ds_Travel6001500 = ConvertCSV(AppPath & "\bin\Debug\Database\Travel2500.csv", "Travel2500", ",")
        '    DT_Travel2500 = ds_Travel6001500.Tables(0)

        '    DT_FL = ds_FL.Tables(0)
        '    DT_FR = ds_FR.Tables(0)
        '    DT_PipeSchedule1 = ds_PipeSchedule1.Tables(0)
        '    DT_PipeSchedule2 = ds_PipeSchedule2.Tables(0)
        '    DT_RatingClass_150300 = ds_RatingClass_150300.Tables(0)
        '    DT_RatingClass_600900 = ds_RatingClass_600900.Tables(0)
        '    ds_RatingClass_600900 = ConvertCSV(AppPath & "\bin\Debug\Database\3-WAY_300.csv", "3-WAY_300", ",")
        '    DT_3WAY_300 = ds_RatingClass_600900.Tables(0)

        '    DT_A216GrWCB = ds_A216GrWCB.Tables(0)
        '    DT_A217GrWC6 = ds_A217GrWC6.Tables(0)
        '    DT_A351GrCF8M = ds_A351GrCF8M.Tables(0)
        '    DT_A216GrWCC = ds_A216GrWCC.Tables(0)
        '    DT_A351GrCF3 = ds_A351GrCF3.Tables(0)
        '    DT_A351GrCF3M = ds_A351GrCF3M.Tables(0)
        '    DT_A217GrWC9 = ds_A217GrWC9.Tables(0)
        '    DT_A351GrCF8C = ds_A351GrCF8C.Tables(0)
        '    DT_A352GrLCB = ds_A352GrLCB.Tables(0)
        '    DT_A217GrC5 = ds_A217GrC5.Tables(0)
        '    DT_A351GrCD4MCu = ds_A351GrCD4MCu.Tables(0)
        '    DT_A217GrC12A = ds_A217GrC12A.Tables(0)
        '    DT_A351GrCN7M = ds_A351GrCN7M.Tables(0)
        '    DT_A494GrCW12MW = ds_A494GrCW12MW.Tables(0)
        '    DT_KvforCage150300 = ds_KvforCage150300.Tables(0)
        '    DT_KvforCage600900 = ds_KvforCage600900.Tables(0)
        '    DT_Water_Temp_Properties = ds_Water_Temp_Properties.Tables(0)

        '    'ACtuator List for Ecotrol
        '    ds_AFOSingleSpring = ConvertCSV(AppPath & "\bin\Debug\Database\AFOSingleSpringModelE.csv", "AFOSingleSpringModelE", ",")
        '    DT_AFOSingleSpringE = New System.Data.DataTable
        '    DT_AFOSingleSpringE = ds_AFOSingleSpring.Tables(0)
        '    ds_AFOSingleSpring = ConvertCSV(AppPath & "\bin\Debug\Database\AFCSingleSpringModelE.csv", "AFCSingleSpringModelE", ",")
        '    DT_AFCSingleSpringE = New System.Data.DataTable
        '    DT_AFCSingleSpringE = ds_AFOSingleSpring.Tables(0)
        '    ds_AFOSingleSpring = ConvertCSV(AppPath & "\bin\Debug\Database\AFOMultiSpringModelE.csv", "AFOMultiSpringModelE", ",")
        '    DT_AFOMultiSpringE = New System.Data.DataTable
        '    DT_AFOMultiSpringE = ds_AFOSingleSpring.Tables(0)
        '    ds_AFOSingleSpring = ConvertCSV(AppPath & "\bin\Debug\Database\AFCMultiSpringModelE.csv", "AFCMultiSpringModelE", ",")
        '    DT_AFCMultiSpringE = New System.Data.DataTable
        '    DT_AFCMultiSpringE = ds_AFOSingleSpring.Tables(0)

        '    'With DT_AccessoriesMat
        '    '    LastRow = FindLastRow(DT_AccessoriesMat, 0)
        '    '    For rowno = 0 To LastRow
        '    '        RemoveLineFeed = .Rows(rowno).Item(0)
        '    '        RemoveLineFeed = RemoveLineFeed.Replace(vbLf, "")
        '    '        cmbBonnetType.Items.Add(.Rows(rowno).Item(0))
        '    '    Next
        '    '    LastRow = FindLastRow(DT_AccessoriesMat, 1)
        '    '    For rowno = 0 To LastRow
        '    '        cmbEndConnection.Items.Add(.Rows(rowno).Item(1))
        '    '    Next
        '    '    LastRow = FindLastRow(DT_AccessoriesMat, 20)
        '    '    For rowno = 0 To LastRow
        '    '        cmbHandwheel.Items.Add(.Rows(rowno).Item(20))
        '    '    Next
        '    'End With

        '    txtPressureDropCase1.ReadOnly = True
        '    txtPressureDropCase2.ReadOnly = True
        '    txtPressureDropCase3.ReadOnly = True
        '    chkViscosity.Checked = False

        '    frmMaterials.cmbGuiding.Items.Add("Single")
        '    frmMaterials.cmbGuiding.Items.Add("Double")




        '    Noise_DensityAir = 1.293  'kg/m3
        '    Noise_DensityPipe = 7.8 'kg/m3  
        '    Noise_SoundVelocityLiquid = 1400  'm/s
        '    Noise_SoundVelocityAir = 343  'm/s  

        '    cmbFluidType.SelectedIndex = 0
        '    cmbFluid.SelectedIndex = 0

        '    cmbUnitsType.SelectedIndex = 0  'Default MKS
        '    cmbModel.SelectedIndex = 1  'Default Ecotrol  
        '    cmbQW.SelectedIndex = 1 'Default  W
        '    cmbFlowrate.SelectedIndex = 0 'Default m3/hr
        '    cmbTemperatureUnits.SelectedIndex = 0 'deg c
        '    cmbPressureUnits.SelectedIndex = 1  ' bar g
        '    cmbAirPressureUnits.SelectedIndex = 1 'bar g
        '    lblDesignPressure.Text = cmbPressureUnits.SelectedItem
        '    cmbCriticalPressureUnits.SelectedIndex = 0 ' bar A
        '    cmbVapourPressureUnits.SelectedIndex = 0 ' bar A
        '    lblTwUnit.Text = cmbPressureUnits.SelectedItem
        '    cmbPressureUnits.Text = cmbPressureUnits.SelectedItem

        '    'Call DefaultFormloads()


        '    NoiseAttenuationFlag = False

        '    ' PipeSchedule_workbook = APP.Workbooks.Open(AppPath & "\Database\PipeSchedule.xlsx", , True)

        '    ' APP.Windows(1).Visible = False


        '    ' RatingClass_workbook = APP.Workbooks.Open(AppPath & "\Database\RatingClass.xlsx", , True)
        '    ' RatingClass_worksheet = RatingClass_workbook.Worksheets("Class150300")
        '    With DT_RatingClass_150300
        '        For i = 0 To .Rows.Count - 2
        '            MaxKV150_FromSheet(i) = .Rows(i).Item(4)
        '            SeatDia150_FromSheet(i) = .Rows(i).Item(2)
        '            PrBl_SeatDia150_FromSheet(i) = .Rows(i).Item(3)
        '            Valve150_FromSheet(i) = .Rows(i).Item(0)
        '            TrimType150_Sheet(i) = CStr(.Rows(i).Item(7))
        '        Next
        '    End With

        '    'RatingClass_worksheet = RatingClass_workbook.Worksheets("Class600900")
        '    With DT_RatingClass_600900
        '        For i = 0 To .Rows.Count - 2
        '            MaxKV600_FromSheet(i) = CSng(.Rows(i).Item(4))
        '            SeatDia600_FromSheet(i) = CSng(.Rows(i).Item(2))
        '            PrBl_SeatDia600_FromSheet(i) = CSng(.Rows(i).Item(3))
        '            Valve600_FromSheet(i) = CSng(.Rows(i).Item(0))
        '            TrimType600_Sheet(i) = CStr(.Rows(i).Item(7))
        '        Next
        '    End With

        '    '''''''''''''''''''FOR PS3''''''''''''''''''''''''''''''''
        '    With DT_PS3150300KV
        '        For i = 0 To .Rows.Count - 2
        '            PS3_MaxKV150_FromSheet(i) = CSng(.Rows(i).Item(4))
        '            PS3_SeatDia150_FromSheet(i) = CSng(.Rows(i).Item(2))
        '            PS3_Valve150_FromSheet(i) = CSng(.Rows(i).Item(0))
        '            PS3_TrimType150_Sheet(i) = CStr(.Rows(i).Item(6))
        '        Next
        '    End With

        '    'RatingClass_worksheet = RatingClass_workbook.Worksheets("Class600900")
        '    With DT_PS3600900KV
        '        For i = 0 To .Rows.Count - 2
        '            PS3_MaxKV600_FromSheet(i) = CSng(.Rows(i).Item(4))
        '            PS3_SeatDia600_FromSheet(i) = CSng(.Rows(i).Item(2))
        '            PS3_Valve600_FromSheet(i) = CSng(.Rows(i).Item(0))
        '            PS3_TrimType600_Sheet(i) = CStr(.Rows(i).Item(6))
        '        Next
        '    End With

        '    With DT_3WAY_300
        '        For i = 0 To .Rows.Count - 2
        '            TW_MaxKV150_FromSheet(i) = CSng(.Rows(i).Item(4))
        '            TW_PrBl_SeatDia150_FromSheet(i) = CSng(.Rows(i).Item(3))
        '            TW_SeatDia150_FromSheet(i) = CSng(.Rows(i).Item(2))
        '            TW_Valve150_FromSheet(i) = CSng(.Rows(i).Item(0))
        '            TW_TrimType150_FromSheet(i) = CStr(.Rows(i).Item(7))

        '        Next
        '    End With
        '    With DT_BEPRDSP1150300
        '        For i = 0 To .Rows.Count - 2
        '            BEPRDS_MaxKV150_FromSheet(i) = CSng(.Rows(i).Item(4))
        '            BEPRDS_PrBl_SeatDia150_FromSheet(i) = CSng(.Rows(i).Item(3))
        '            BEPRDS_SeatDia150_FromSheet(i) = CSng(.Rows(i).Item(2))
        '            BEPRDS_Valve150_FromSheet(i) = CSng(.Rows(i).Item(0))
        '            BEPRDS_TrimType150_FromSheet(i) = CStr(.Rows(i).Item(7))
        '        Next
        '    End With

        '    With DT_BEPRDSP1600900
        '        For i = 0 To .Rows.Count - 2
        '            BEPRDS_MaxKV600_FromSheet(i) = CSng(.Rows(i).Item(4))
        '            BEPRDS_PrBl_SeatDia600_FromSheet(i) = CSng(.Rows(i).Item(3))
        '            BEPRDS_SeatDia600_FromSheet(i) = CSng(.Rows(i).Item(2))
        '            BEPRDS_Valve600_FromSheet(i) = CSng(.Rows(i).Item(0))
        '            BEPRDS_TrimType600_FromSheet(i) = CStr(.Rows(i).Item(7))
        '        Next
        '    End With




        '    'APP.Windows(1).Visible = False

        '    '  FL_workbook = APP.Workbooks.Open(AppPath & "\Database\FL.xlsx")
        '    ' FL_worksheet = FL_workbook.Worksheets("SHEET1")
        '    'Fill array for FL
        '    With DT_FL
        '        '   LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row

        '        For i = 0 To .Rows.Count - 2
        '            FL_Column1array(i) = .Rows(i).Item(0)
        '            FL_Column2array(i) = .Rows(i).Item(1)
        '            FL_Column5array(i) = .Rows(i).Item(4)

        '        Next
        '    End With

        '    'FR_workbook = APP.Workbooks.Open(AppPath & "\Database\FR.xlsx")
        '    'FR_worksheet = FR_workbook.Worksheets("SHEET1")


        '    With DT_FR
        '        For i = 0 To .Rows.Count - 2
        '            FR_Column1array(i) = .Rows(i).Item(0)
        '            FR_Column2array(i) = .Rows(i).Item(1)
        '        Next
        '    End With

        '    'PipeSheet1_worksheet = PipeSchedule_workbook.Worksheets("sheet1")
        '    '   If cmbAreaunits.SelectedIndex = 0 Then
        '    With DT_PipeSchedule1
        '        'LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
        '        For i = 0 To .Rows.Count - 2
        '            NB_PipeDIa(i) = .Rows(i).Item(1)  ' in mm
        '            INCH_PipeDia(i) = .Rows(i).Item(3)   ' in inch 
        '            PipeOutletSize(i) = CSng(.Rows(i).Item(2))          'Changes 20201028
        '            PipeInletSizeArray(i) = .Rows(i).Item(3) '.Cells(i, 4).Value
        '            PipeInletODArray(i) = .Rows(i).Item(2) '.Cells(i, 3).Value
        '        Next
        '    End With

        '    '  PipeSheet2_worksheet = PipeSchedule_workbook.Worksheets("sheet2")
        '    dtb.Columns.Add("TrimType", GetType(Byte))
        '    dtb.Columns.Add("TrimVelocity", GetType(Single))
        '    dtb.Columns.Add("Cavitation", GetType(Byte))

        '    dtb.Columns.Add("KvCase1", GetType(Single))
        '    dtb.Columns.Add("KvCase2", GetType(Single))
        '    dtb.Columns.Add("KvCase3", GetType(Single))
        '    dtb.Columns.Add("TrimName", GetType(String))

        '    DT_FLtable = New DataTable
        '    DT_FLtable.Columns.Add("PS1", GetType(Single))
        '    DT_FLtable.Columns.Add("PS3", GetType(Single))
        '    DT_FLtable.Columns.Add("PR1", GetType(Single))
        '    DT_FLtable.Columns.Add("PR2", GetType(Single))
        '    DT_FLtable.Columns.Add("PR3", GetType(Single))

        '    DT_FLtable.Rows.Add(0.9374, 0.96, 0.93, 0.95, 0.975)    'Case1
        '    DT_FLtable.Rows.Add(0.9374, 0.96, 0.93, 0.95, 0.975)    'Case2
        '    DT_FLtable.Rows.Add(0.9374, 0.96, 0.93, 0.95, 0.975)    'Case3

        '    Dt_NoisePrStages = New DataTable
        '    Dt_NoisePrStages.Columns.Add("Case1", GetType(Single))
        '    Dt_NoisePrStages.Columns.Add("Case2", GetType(Single))
        '    Dt_NoisePrStages.Columns.Add("Case3", GetType(Single))

        '    Dt_NoisePrStages.Rows.Add(0, 0, 0)
        '    Dt_NoisePrStages.Rows.Add(0, 0, 0)
        '    Dt_NoisePrStages.Rows.Add(0, 0, 0)
        '    Dt_NoisePrStages.Rows.Add(0, 0, 0)
        '    Dt_NoisePrStages.Rows.Add(0, 0, 0)
        '    Dt_NoisePrStages.Rows.Add(0, 0, 0)

        '    DT_NoiseAttenuation = New System.Data.DataTable
        '    ' Columns - NoiseCase1,NoiseCase2,NoiseCase3,
        '    DT_NoiseAttenuation.Columns.Add("Case1", GetType(Single))
        '    DT_NoiseAttenuation.Columns.Add("Case2", GetType(Single))
        '    DT_NoiseAttenuation.Columns.Add("Case3", GetType(Single))
        '    DT_NoiseAttenuation.Columns.Add("Name", GetType(String))
        '    DT_NoiseAttenuation.Rows.Add(0, 0, 0, "Baffle3")       'for BaffleKVCase3
        '    DT_NoiseAttenuation.Rows.Add(0, 0, 0, "Baffle2")        'for BaffleKVCase2
        '    DT_NoiseAttenuation.Rows.Add(0, 0, 0, "Baffle1")         'for BaffleKVCase1
        '    DT_NoiseAttenuation.Rows.Add(0, 0, 0, "LN")          'for NoiseAttenuation
        '    DT_NoiseAttenuation.Rows.Add(0, 0, 0, "Normal")       'for Normal Noise

        '    'For Inlet and Outlet Pressure Storage  
        '    DT_Baffles = New System.Data.DataTable
        '    'Columns -  InletPressureCase1,2,3,OutletPressure Case 1,2,3
        '    DT_Baffles.Columns.Add("InletPressCase1", GetType(Single))
        '    DT_Baffles.Columns.Add("InletPressCase2", GetType(Single))
        '    DT_Baffles.Columns.Add("InletPressCase3", GetType(Single))
        '    DT_Baffles.Columns.Add("OutletPressCase1", GetType(Single))
        '    DT_Baffles.Columns.Add("OutletPressCase2", GetType(Single))
        '    DT_Baffles.Columns.Add("OutletPressCase3", GetType(Single))

        '    DT_Baffles.Rows.Add(0, 0, 0, 0, 0, 0)       'Baffle 3
        '    DT_Baffles.Rows.Add(0, 0, 0, 0, 0, 0)       'Baffle 2    
        '    DT_Baffles.Rows.Add(0, 0, 0, 0, 0, 0)       'Baffle 1


        '    DT_StageWiseNoise = New System.Data.DataTable
        '    DT_StageWiseNoise.Columns.Add("Case1", GetType(Single))
        '    DT_StageWiseNoise.Columns.Add("Case2", GetType(Single))
        '    DT_StageWiseNoise.Columns.Add("Case3", GetType(Single))
        '    DT_StageWiseNoise.Columns.Add("Name", GetType(String))

        '    DT_StageWiseNoise.Rows.Add(0, 0, 0, "Stage1")
        '    DT_StageWiseNoise.Rows.Add(0, 0, 0, "Stage2")
        '    DT_StageWiseNoise.Rows.Add(0, 0, 0, "Stage3")

        '    DT_ActuatorInfo = New System.Data.DataTable

        '    ' Columns - Data,Value,Unit,
        '    DT_ActuatorInfo.Columns.Add("Name", GetType(String))
        '    DT_ActuatorInfo.Columns.Add("Value", GetType(String))
        '    DT_ActuatorInfo.Columns.Add("Unit", GetType(String))

        '    DT_ActuatorInfo.Rows.Add("Valve Model", 0, " ")  '0
        '    DT_ActuatorInfo.Rows.Add("ValueSize", 0, " ")    '1
        '    DT_ActuatorInfo.Rows.Add("Travel", 0, " ")       '2
        '    DT_ActuatorInfo.Rows.Add("Rating ", 0, " ")     '3
        '    DT_ActuatorInfo.Rows.Add("FlowDir", 0, " ")     '4
        '    DT_ActuatorInfo.Rows.Add("TrimType", 0, " ")    '5
        '    DT_ActuatorInfo.Rows.Add("Seat Dia", 0, " ")    '6
        '    DT_ActuatorInfo.Rows.Add("Stem Dia", 0, " ")    '7
        '    DT_ActuatorInfo.Rows.Add("Balancing", 0, " ")   '8
        '    DT_ActuatorInfo.Rows.Add("AirFail", 0, " ")     '9
        '    DT_ActuatorInfo.Rows.Add("PackingFric Force", 0, "kgf") '10
        '    DT_ActuatorInfo.Rows.Add("Seating Force", 0, "kgf ")    '11
        '    DT_ActuatorInfo.Rows.Add("Fluid Force", 0, "kgf")       '12
        '    DT_ActuatorInfo.Rows.Add("Sealing Force", 0, "kgf")       '13

        '    DT_Flowtype = New System.Data.DataTable
        '    DT_Flowtype.Columns.Add("Name", GetType(String))
        '    DT_Flowtype.Columns.Add("Case1", GetType(String))
        '    DT_Flowtype.Columns.Add("Case2", GetType(String))
        '    DT_Flowtype.Columns.Add("Case3", GetType(String))
        '    DT_Flowtype.Rows.Add("Ln", "", "", "")
        '    DT_Flowtype.Rows.Add("Stage1", "", "", "")
        '    DT_Flowtype.Rows.Add("Stage2", "", "", "")
        '    DT_Flowtype.Rows.Add("Stage3", "", "", "")
        '    DT_Flowtype.Rows.Add("Baffle1", "", "", "")
        '    DT_Flowtype.Rows.Add("Baffle2", "", "", "")
        '    DT_Flowtype.Rows.Add("Baffle3", "", "", "")

        '    DT_ActuatorSelect = New System.Data.DataTable
        '    DT_ActuatorSelect.Columns.Add("", GetType(String))                  '0
        '    DT_ActuatorSelect.Columns.Add("Act. Model No", GetType(String))     '1   
        '    DT_ActuatorSelect.Columns.Add("Force @ 0% Open", GetType(Single))   '2
        '    DT_ActuatorSelect.Columns.Add("Force @ 100% Open", GetType(Single)) '3

        '    DT_ActuatorSelect.Rows.Add("Required", "", 0, 0)                '0
        '    DT_ActuatorSelect.Rows.Add("Suggested Actuator", "", 0, 0)      '1
        '    DT_ActuatorSelect.Rows.Add("Selected Actuator", "", 0, 0)      '2


        '    LoadingForm = True
        '    HScrollBar_Records.LargeChange = 1
        '    HScrollBar_Records.SmallChange = 1

        'Catch ex As Exception
        '    MsgBox("Form Load:  " & "  " & ex.Message, , "Alert!")
        '    MsgBox("Closing Software!", , "Control Valve Sizing Software")
        '    AbandonSoftware = True
        '    Me.Close()
        'End Try
    End Sub

    Private Sub txtVapourPressureCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtVapourPressureCase1.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                '    MsgBox("Please enter integers only")
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("txtVapourPressureCase1_KeyPress:  " & ex.Message)
        End Try
    End Sub

    Private Sub txtVapourPressureCase1_Validated(sender As Object, e As EventArgs) Handles txtVapourPressureCase1.Validated, txtVapourPressureCase2.Validated, txtVapourPressureCase3.Validated, cmbVapourPressureUnits.Validated
        Try
            If Not cmbVapourPressureUnits.Text = "--Select--" Then
                Call convertPressure(txtVapourPressureCase1, FinalVapourPressureCase1, cmbVapourPressureUnits)
                'C36.Text = FinalVapourPressureCase1
                Call convertPressure(txtVapourPressureCase2, FinalVapourPressureCase2, cmbVapourPressureUnits)
                'C37.Text = FinalVapourPressureCase2
                Call convertPressure(txtVapourPressureCase3, FinalVapourPressureCase3, cmbVapourPressureUnits)
                'C38.Text = FinalVapourPressureCase3
                'If cmbFluidType.Text = "InCompressible" Then
                '    FL = 0.64
                'Else
                '    FL = 0.7
                'End If

                ' THIS check is only FOR OTHER LIQUIDS 
                If cmbFluidType.Text = "InCompressible" And Not cmbFluid.SelectedIndex = 0 Then
                    If sender Is txtVapourPressureCase1 Then
                        If FinalVapourPressureCase1 > FinalOutletPressureCase1 Then
                            chkMolecularWeight.Visible = True
                            txtMolecularWeight.Visible = True
                            lblMolecularUnit.Visible = True
                            txtFlashingPercentageCase1.Visible = True
                            lblFlashingPercentage.Visible = True
                        Else

                            txtFlashingPercentageCase1.Visible = False
                        End If
                    End If
                    If sender Is txtVapourPressureCase2 Then
                        If FinalVapourPressureCase2 > FinalOutletPressureCase2 Then
                            chkMolecularWeight.Visible = True
                            txtFlashingPercentageCase2.Visible = True
                            lblMolecularUnit.Visible = True
                            lblFlashingPercentage.Visible = True
                            txtMolecularWeight.Visible = True
                        Else
                            txtFlashingPercentageCase2.Visible = False
                        End If
                    End If
                    If sender Is txtVapourPressureCase3 Then
                        If FinalVapourPressureCase3 > FinaloutletPressureCase3 Then
                            chkMolecularWeight.Visible = True
                            txtFlashingPercentageCase3.Visible = True
                            lblMolecularUnit.Visible = True
                            lblFlashingPercentage.Visible = True
                            txtMolecularWeight.Visible = True
                        Else
                            txtFlashingPercentageCase3.Visible = False
                        End If
                    End If
                    If FinalVapourPressureCase1 <= FinalOutletPressureCase1 And FinalVapourPressureCase2 <= FinalOutletPressureCase2 And FinalVapourPressureCase3 <= FinaloutletPressureCase3 Then
                        chkMolecularWeight.Visible = False
                        lblMolecularUnit.Visible = False
                        txtMolecularWeight.Visible = False
                        lblFlashingPercentage.Visible = False
                    End If

                End If

                Call AllCalculations()

                'Call Chokedflow(FL, FL, FL)
                'Call CalculateKVCV()
                'If FinalKVCase1 <> 0 Then
                '    lblApproxCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                '    lblKVCase1.Text = Math.Round(FinalKVCase1, 2)
                'Else
                '    lblApproxCVCase1.Text = ""
                '    lblKVCase1.Text = ""
                'End If
                'If FinalKVCase2 <> 0 Then
                '    lblApproxCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                '    lblKVCase2.Text = Math.Round(FinalKVCase2, 2)
                'Else
                '    lblApproxCVCase2.Text = ""
                '    lblKVCase2.Text = ""
                'End If
                'If FinalKVCase3 <> 0 Then
                '    lblApproxCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                '    lblKVCase3.Text = Math.Round(FinalKVCase3, 2)
                'Else
                '    lblApproxCVCase3.Text = ""
                '    lblKVCase3.Text = ""
                'End If
            Else
                If Not CType(sender, TextBox).Text = "" Then
                    MsgBox("Please select Vapour pressure units first")
                    cmbVapourPressureUnits.Focus()
                End If
                Exit Sub

            End If
        Catch ex As Exception
            MsgBox("txtVapourPressureCase1_KeyPress:  " & ex.Message)
        End Try
    End Sub

    Private Sub cmbCriticalPressureUnits_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbCriticalPressureUnits.KeyPress
        e.Handled = True
    End Sub
    Private Sub cmbCriticalPressureUnits_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbCriticalPressureUnits.SelectionChangeCommitted
        Try
            If LoadingForm = True Then
                cmbCriticalPressureUnits.Text = cmbCriticalPressureUnits.SelectedItem
                Call convertPressure(txtCriticalPressureCase1, FinalCriticalPressureCase1, cmbCriticalPressureUnits)
                Call convertPressure(txtCriticalPressureCase2, FinalCriticalPressureCase2, cmbCriticalPressureUnits)
                Call convertPressure(txtCriticalPressureCase3, FinalCriticalPressureCase3, cmbCriticalPressureUnits)

                Call AllCalculations()
            End If
        Catch ex As Exception
            MsgBox("cmbCriticalPressureUnits_SelectionChangeCommitted:  " & ex.Message)
        End Try
    End Sub

    Private Sub cmbVapourPressureUnits_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbVapourPressureUnits.SelectionChangeCommitted
        Try
            If LoadingForm = True Then
                cmbVapourPressureUnits.Text = cmbVapourPressureUnits.SelectedItem
                Call convertPressure(txtVapourPressureCase1, FinalVapourPressureCase1, cmbVapourPressureUnits)
                'C36.Text = FinalVapourPressureCase1
                Call convertPressure(txtVapourPressureCase2, FinalVapourPressureCase2, cmbVapourPressureUnits)
                'C37.Text = FinalVapourPressureCase2
                Call convertPressure(txtVapourPressureCase3, FinalVapourPressureCase3, cmbVapourPressureUnits)
                'C38.Text = FinalVapourPressureCase3

                Call AllCalculations()
            End If
        Catch ex As Exception
            MsgBox("cmbVapourPressureUnits_TextChanged:  " & ex.Message)
        End Try
    End Sub

    Private Sub txtDensityCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtDensityCase1.KeyPress, txtDensityCase2.KeyPress, txtDensityCase3.KeyPress, txtMolecularWeight.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                '    MsgBox("Please enter integers only")
                e.Handled = True
            End If
        Catch ex As Exception
            MsgBox("txtDensityCase1_KeyPress:  " & ex.Message)
        End Try
    End Sub

    Private Sub txtDensityCase1_Validated(sender As Object, e As EventArgs) Handles txtDensityCase1.Validated, txtDensityCase2.Validated, txtDensityCase3.Validated
        Try
            If Not cmbDensityUnits.Text = "--Select--" Then
                Call CalculateDensity()

                'Çalculate Viscosity again as it is dependent on the Density
                If Not cmbViscosityUnits.Text = "--Select--" Then
                    convertViscosity(txtViscosityCase1, FinalViscosityCase1, cmbViscosityUnits, FinalDensityCase1)
                    'C28.Text = FinalViscosityCase1
                    convertViscosity(txtViscosityCase2, FinalViscosityCase2, cmbViscosityUnits, FinalDensityCase2)
                    'C29.Text = FinalViscosityCase2
                    convertViscosity(txtViscosityCase3, FinalViscosityCase3, cmbViscosityUnits, FinalDensityCase3)
                    'C30.Text = FinalViscosityCase3
                End If

                Call AllCalculations()

                'If cmbFluidType.Text = "InCompressible" Then
                '    FL = 0.64
                'Else
                '    FL = 0.7
                'End If
                'Call Chokedflow(FL, FL, FL)
                'Call CalculateKVCV()
                'If FinalKVCase1 <> 0 Then
                '    lblApproxCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                '    lblKVCase1.Text = Math.Round(FinalKVCase1, 2)
                'Else
                '    lblApproxCVCase1.Text = ""
                '    lblKVCase1.Text = ""
                'End If
                'If FinalKVCase2 <> 0 Then
                '    lblApproxCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                '    lblKVCase2.Text = Math.Round(FinalKVCase2, 2)
                'Else
                '    lblApproxCVCase2.Text = ""
                '    lblKVCase2.Text = ""
                'End If
                'If FinalKVCase3 <> 0 Then
                '    lblApproxCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                '    lblKVCase3.Text = Math.Round(FinalKVCase3, 2)
                'Else
                '    lblApproxCVCase3.Text = ""
                '    lblKVCase3.Text = ""
                'End If
            Else
                If Not CType(sender, TextBox).Text = "" Then
                    MsgBox("Please select Density units")
                    cmbDensityUnits.Focus()
                End If
                Exit Sub
            End If

        Catch ex As Exception
            MsgBox("txtDensityCase1_Validated:  " & ex.Message)
        End Try
    End Sub

    Private Sub cmbDensityUnits_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbDensityUnits.SelectionChangeCommitted
        Try
            If LoadingForm = True Then
                cmbDensityUnits.Text = cmbDensityUnits.SelectedItem
                convertDensity(txtDensityCase1, FinalDensityCase1, cmbDensityUnits, FinalInletTemperatureCase1, FinalInletPressureCase1)

                convertDensity(txtDensityCase2, FinalDensityCase2, cmbDensityUnits, FinalInletTemperatureCase2, FinalInletPressureCase2)

                convertDensity(txtDensityCase3, FinalDensityCase3, cmbDensityUnits, FinalInletTemperatureCase3, FinalInletPressureCase3)
            End If

            
        Catch ex As Exception
            MsgBox("cmbDensityUnits_TextChanged:  " & ex.Message)
        End Try
    End Sub

    Private Sub txtViscosityCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtViscosityCase1.KeyPress, txtViscosityCase2.KeyPress, txtViscosityCase3.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                '    MsgBox("Please enter integers only")
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("txtViscosityCase1_KeyPress:  " & ex.Message)
        End Try
    End Sub

    Private Sub cmbViscosityUnits_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbViscosityUnits.SelectionChangeCommitted
        Try
            If LoadingForm = True Then
                cmbViscosityUnits.Text = cmbViscosityUnits.SelectedItem
                convertViscosity(txtViscosityCase1, FinalViscosityCase1, cmbViscosityUnits, FinalDensityCase1)
                'C28.Text = FinalViscosityCase1
                convertViscosity(txtViscosityCase2, FinalViscosityCase2, cmbViscosityUnits, FinalDensityCase2)
                'C28.Text = FinalViscosityCase2
                convertViscosity(txtViscosityCase3, FinalViscosityCase3, cmbViscosityUnits, FinalDensityCase3)
                'C28.Text = FinalViscosityCase3

                Call AllCalculations()

            End If
        Catch ex As Exception
            MsgBox("cmbViscosityUnits_TextChanged:  " & ex.Message)
        End Try

    End Sub

    Private Sub txtViscosityCase1_Validating(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles txtViscosityCase1.Validating, txtViscosityCase2.Validating, txtViscosityCase3.Validating
        Try
            If Not cmbViscosityUnits.Text = "--Select--" Then
                convertViscosity(txtViscosityCase1, FinalViscosityCase1, cmbViscosityUnits, FinalDensityCase1)
                'C28.Text = FinalViscosityCase1
                convertViscosity(txtViscosityCase2, FinalViscosityCase2, cmbViscosityUnits, FinalDensityCase2)
                'C29.Text = FinalViscosityCase2
                convertViscosity(txtViscosityCase3, FinalViscosityCase3, cmbViscosityUnits, FinalDensityCase3)
                'C30.Text = FinalViscosityCase3
                'Call CalculateKVCV()

                Call AllCalculations()

                'If FinalKVCase1 <> 0 Then
                '    lblApproxCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                '    lblKVCase1.Text = Math.Round(FinalKVCase1, 2)
                'Else
                '    lblApproxCVCase1.Text = ""
                '    lblKVCase1.Text = ""
                'End If
                'If FinalKVCase2 <> 0 Then
                '    lblApproxCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                '    lblKVCase2.Text = Math.Round(FinalKVCase2, 2)
                'Else
                '    lblApproxCVCase2.Text = ""
                '    lblKVCase2.Text = ""
                'End If
                'If FinalKVCase3 <> 0 Then
                '    lblApproxCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                '    lblKVCase3.Text = Math.Round(FinalKVCase3, 2)
                'Else
                '    lblApproxCVCase3.Text = ""
                '    lblKVCase3.Text = ""
                'End If

            Else
                If Not CType(sender, TextBox).Text = "" Then
                    MsgBox("Please select Viscosity units")
                    cmbViscosityUnits.Focus()
                End If
                Exit Sub
            End If
        Catch ex As Exception
            MsgBox("txtViscosityCase1_Validating:  " & ex.Message)
        End Try
    End Sub

    Private Sub txtFlowrateCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtFlowrateCase1.KeyPress, txtFlowrateCase2.KeyPress, txtFlowrateCase3.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("Flowrate keypres:" & "  " & ex.Message)
        End Try
    End Sub

    Private Sub txtFlowrateCase1_Validated(sender As Object, e As EventArgs) Handles txtFlowrateCase1.Validated, txtFlowrateCase2.Validated, txtFlowrateCase3.Validated
        Try
            If Not cmbFlowrate.Text = "--Select--" Then
                ''convertFlowrate(txtFlowrateCase1, FinalFlowrateCase1, cmbFlowrate, FinalDensityCase1, FinalInletTemperatureCase1, FinalInletPressureCase1)
                ''C5.Text = FinalFlowrateCase1
                ''convertFlowrate(txtFlowrateCase2, FinalFlowrateCase2, cmbFlowrate, FinalDensityCase2, FinalInletTemperatureCase2, FinalInletPressureCase2)
                ''C6.Text = FinalFlowrateCase2
                ''convertFlowrate(txtFlowrateCase3, FinalFlowrateCase3, cmbFlowrate, FinalDensityCase3, FinalInletTemperatureCase3, FinalInletPressureCase3)
                ''C7.Text = FinalFlowrateCase3
                'If sender Is txtFlowrateCase1 Or sender Is txtFlowrateCase2 Then
                '    If Not txtFlowrateCase1.Text = "" Then
                '        If Not txtFlowrateCase2.Text = "" Then
                '            If CSng(txtFlowrateCase1.Text) > CSng(txtFlowrateCase2.Text) Then
                '                MsgBox("Minimum flow should not be more than average flow")
                '                txtFlowrateCase2.Focus()
                '                Exit Sub
                '            End If
                '        End If
                '    End If

                'End If
                'If sender Is txtFlowrateCase3 Or sender Is txtFlowrateCase2 Then
                '    If Not txtFlowrateCase2.Text = "" Then
                '        If Not txtFlowrateCase3.Text = "" Then
                '            If CSng(txtFlowrateCase3.Text) < CSng(txtFlowrateCase2.Text) Then
                '                MsgBox("Max flow should not be less than average flow")
                '                txtFlowrateCase3.Focus()
                '                Exit Sub
                '            End If
                '        End If
                '    End If
                'End If
                'If sender Is txtFlowrateCase3 Or sender Is txtFlowrateCase1 Then
                '    If Not txtFlowrateCase3.Text = "" Then
                '        If Not txtFlowrateCase1.Text = "" Then
                '            If CSng(txtFlowrateCase3.Text) < CSng(txtFlowrateCase1.Text) Then
                '                MsgBox("Max flow should not be less than minimum flow")
                '                txtFlowrateCase3.Focus()
                '                Exit Sub
                '            End If
                '        End If
                '    End If
                'End If
                Call AllCalculations()
                'Call CalculateDensity()
                'If cmbFluidType.Text = "InCompressible" Then
                '    FL = 0.64
                'Else
                '    FL = 0.7
                'End If
                'Call Chokedflow(FL, FL, FL)
                'Call CalculateKVCV()
                'If FinalKVCase1 <> 0 Then
                '    lblApproxCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                '    lblKVCase1.Text = Math.Round(FinalKVCase1, 2)
                'Else
                '    lblApproxCVCase1.Text = ""
                '    lblKVCase1.Text = ""
                'End If
                'If FinalKVCase2 <> 0 Then
                '    lblApproxCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                '    lblKVCase2.Text = Math.Round(FinalKVCase2, 2)
                'Else
                '    lblApproxCVCase2.Text = ""
                '    lblKVCase2.Text = ""
                'End If
                'If FinalKVCase3 <> 0 Then
                '    lblApproxCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                '    lblKVCase3.Text = Math.Round(FinalKVCase3, 2)
                'Else
                '    lblApproxCVCase3.Text = ""
                '    lblKVCase3.Text = ""
                'End If

            Else
                If Not CType(sender, TextBox).Text = "" Then
                    MsgBox("Please select Flowrate units")
                    cmbFlowrate.Focus()
                End If
                Exit Sub
            End If
        Catch ex As Exception
            MsgBox("txtFlowrateCase1_Validated:  " & ex.Message)
        End Try
    End Sub
    Private Sub cmbFlowrate_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbFlowrate.SelectionChangeCommitted
        Try
            If LoadingForm = True Then
                cmbFlowrate.Text = cmbFlowrate.SelectedItem
                ''Call SelectFlowUnits()
                Call AllCalculations()
            End If
        Catch ex As Exception
            MsgBox("cmbFlowrate_SelectionChangeCommitted: " & ex.Message)
        End Try
    End Sub

    Public Sub CalculateFromTable(ByRef InletTemperature As Single, ByRef VP As Single, ByRef CP As Single, ByRef Dn As Single, ByRef Vis As Single)
        Dim i As Integer
        Dim Temperaturevalue1, Temperaturevalue2 As Single
        Try
            'Water_Temp_Properties_workbook = APP.Workbooks.Open(AppPath & "\Database\Water_Temp_Properties.xlsx")
            'Water_Temp_Properties_worksheet = Water_Temp_Properties_workbook.Worksheets("sheet1")

            'With Water_Temp_Properties_worksheet
            With DT_Water_Temp_Properties
                LastRow = .Rows.Count - 2 '.Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                LastColumn = .Columns.Count - 1 '.Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column

                For i = 2 To LastRow - 1
                    Temperaturevalue1 = CSng(.Rows(i).Item(0)) '.Cells(i, 1).Value)
                    Temperaturevalue2 = CSng(.Rows(i + 1).Item(0)) '.Cells(i + 1, 1).Value)
                    If InletTemperature >= Temperaturevalue1 And InletTemperature < Temperaturevalue2 Then
                        Exit For
                    End If
                Next i
                VP = CSng(.Rows(i).Item(1)) '(.Cells(i, 2).value)
                CP = CSng(.Rows(i).Item(2)) '(.Cells(i, 3).value)
                Dn = CSng(.Rows(i).Item(4)) '(.Cells(i, 4).value)
                Vis = CSng(.Rows(i).Item(10)) '(.Cells(i, 11).value)

                '  MsgBox(i & "  " & "  " & .Cells(i, 2).value & "  " & .Cells(i, 2).value & "  " & .Cells(i, 3).value & "  " & .Cells(i, 4).value & "  " & .Cells(i, 5).value)
            End With
        Catch ex As Exception
            MsgBox("CalculateFromTable: " & ex.Message)
        End Try
        'Return Nothing
    End Sub

    Public Sub Chokedflow(ByVal flchocked1 As Single, ByVal flchocked2 As Single, ByVal flchocked3 As Single)
        '        INLET PR	barA	C9	C10	C11
        '       OUTLET PR		C12	C13	C14
        '       PRESSURE DROP	bar	C16	C17	C18
        '        PR.CRITICL	barA	C32	C33	C34
        '       PR.VAP	barA	C36	C37	C38


        Try
            If cmbFluidType.Text = "InCompressible" Then
                If Not (txtInletPressureCase1.Text = "") Then
                    If Not FinalVapourPressureCase1 = 0 And Not FinalCriticalPressureCase1 = 0 Then
                        FinalChokedPressureCase1 = (FinalInletPressureCase1 - ((0.96 - (((FinalVapourPressureCase1 / FinalCriticalPressureCase1) ^ 0.5) * 0.28)) * FinalVapourPressureCase1)) * flchocked1
                    Else
                        FinalChokedPressureCase1 = 0
                    End If


                End If
                If Not (txtInletPressureCase2.Text = "") Then
                    If Not FinalVapourPressureCase2 = 0 And Not FinalCriticalPressureCase2 = 0 Then
                        FinalChokedPressureCase2 = (FinalInletPressureCase2 - ((0.96 - (((FinalVapourPressureCase2 / FinalCriticalPressureCase2) ^ 0.5) * 0.28)) * FinalVapourPressureCase2)) * flchocked2
                    Else
                        FinalChokedPressureCase2 = 0
                    End If


                End If
                If Not (txtInletPressureCase3.Text = "") Then

                    If Not FinalVapourPressureCase3 = 0 And Not FinalCriticalPressureCase3 = 0 Then
                        FinalChokedPressureCase3 = (FinalInletPressureCase3 - ((0.96 - (((FinalVapourPressureCase3 / FinalCriticalPressureCase3) ^ 0.5) * 0.28)) * FinalVapourPressureCase3)) * flchocked3
                    Else
                        FinalChokedPressureCase3 = 0
                    End If
                End If
                'CHKFLOW1.Text = FinalChokedPressureCase1
                'CHKFLOW2.Text = FinalChokedPressureCase2
                'CHKFLOW3.Text = FinalChokedPressureCase3
            Else
                If Not Kcase1 = 0 Then

                    If ((Kcase1 / 1.4) * flchocked1) <= Xcase1 Then
                        'flow is choked
                        CompressibleChocked_Case1 = 1
                        XChokecase1 = (Kcase1 / 1.4) * flchocked1
                        YChokecase1 = 0.667
                    Else
                        CompressibleChocked_Case1 = 0
                        Xcase1 = (FinalPressureDropCase1 / FinalInletPressureCase1)
                        Ycase1 = 1 - ((Xcase1 * 1.4) / (3 * Kcase1 * flchocked1))
                    End If
                Else
                    lblSeverityCase1.Text = ""
                End If

                If Not Kcase2 = 0 Then
                    If ((Kcase2 / 1.4) * flchocked2) <= Xcase2 And Not Kcase2 = 0 Then
                        'flow is choked
                        CompressibleChocked_Case2 = 1
                        XChokecase2 = (Kcase2 / 1.4) * flchocked2
                        YChokecase2 = 0.667
                    Else
                        CompressibleChocked_Case2 = 0
                        Xcase2 = (FinalPressureDropCase2 / FinalInletPressureCase2)
                        Ycase2 = 1 - ((Xcase2 * 1.4) / (3 * Kcase2 * flchocked2))
                    End If
                Else
                    lblSeverityCase2.Text = ""
                End If
                If Not Kcase3 = 0 Then
                    If ((Kcase3 / 1.4) * flchocked3) <= Xcase3 Then
                        'flow is choked
                        CompressibleChocked_Case3 = 1
                        XChokecase3 = (Kcase3 / 1.4) * flchocked3
                        YChokecase3 = 0.667
                    Else
                        CompressibleChocked_Case3 = 0
                        Xcase3 = (FinalPressureDropCase3 / FinalInletPressureCase3)
                        Ycase3 = 1 - ((Xcase3 * 1.4) / (3 * Kcase3 * flchocked3))
                    End If
                Else
                    lblSeverityCase3.Text = ""
                End If
            End If
        Catch ex As Exception
            MsgBox("Chokedflow: " & ex.Message)
        End Try
        'Return Nothing
    End Sub

    Private Sub cmbFluid_TextChanged(sender As Object, e As EventArgs) Handles cmbFluid.TextChanged
        Dim sel_index As Int16
        Try
            sel_index = cmbFlowrate.SelectedIndex
            txtMedium.BackColor = Color.Gold
            '  cmbFluid.Text = cmbFluid.SelectedItem
            ' If LoadingForm = True Then
            LoadingForm = False
            If cmbFluidType.Text = "InCompressible" Then


                If cmbFluid.SelectedIndex = 0 And cmbFluid.Text = "Standard Water" Then
                    txtCriticalPressureCase1.ReadOnly = True
                    txtVapourPressureCase1.ReadOnly = True
                    txtDensityCase1.ReadOnly = True
                    txtViscosityCase1.ReadOnly = True

                    txtCriticalPressureCase2.ReadOnly = True
                    txtVapourPressureCase2.ReadOnly = True
                    txtDensityCase2.ReadOnly = True
                    txtViscosityCase2.ReadOnly = True

                    txtCriticalPressureCase3.ReadOnly = True
                    txtVapourPressureCase3.ReadOnly = True
                    txtDensityCase3.ReadOnly = True
                    txtViscosityCase3.ReadOnly = True

                    txtMedium.ReadOnly = True

                    cmbVapourPressureUnits.SelectedIndex = 0
                    cmbCriticalPressureUnits.SelectedIndex = 0
                    cmbDensityUnits.SelectedIndex = 0
                    cmbViscosityUnits.SelectedIndex = 0

                    cmbVapourPressureUnits.Enabled = False
                    cmbCriticalPressureUnits.Enabled = False
                    cmbDensityUnits.Enabled = False
                    cmbViscosityUnits.Enabled = False
                    cmbSelectedTrim.Enabled = False
                    chkViscosity.Checked = False
                    chkViscosity.Visible = True
                    chkViscosity.Enabled = False
                    lblViscosity.Visible = True
                    chkMolecularWeight.Checked = False
                    chkMolecularWeight.Visible = False
                    lblMolecularUnit.Visible = False
                    txtFlashingPercentageCase1.Visible = False
                    lblTsatoutPressure.Visible = False
                    txtTsatoutPressureCase1.Visible = False
                    txtTsatoutPressureCase2.Visible = False
                    txtTsatoutPressureCase3.Visible = False
                    LoadingForm = True
                    If LoadingProjectFile = False Then                  ' 20210219   When new record selected not needed popups
                        Call AllPressureConversions()
                    End If
                    'Call AllTemperatureConversions(txtInletTemperatureCase1)


                Else

                    chkViscosity.Enabled = True
                    chkViscosity.Visible = True
                    ' lblViscosity.Visible = False
                    txtCriticalPressureCase1.ReadOnly = False
                    txtVapourPressureCase1.ReadOnly = False
                    txtDensityCase1.ReadOnly = False
                    txtViscosityCase1.ReadOnly = True

                    txtCriticalPressureCase2.ReadOnly = False
                    txtVapourPressureCase2.ReadOnly = False
                    txtDensityCase2.ReadOnly = False
                    txtViscosityCase2.ReadOnly = True

                    txtCriticalPressureCase3.ReadOnly = False
                    txtVapourPressureCase3.ReadOnly = False
                    txtDensityCase3.ReadOnly = False
                    txtViscosityCase3.ReadOnly = True

                    cmbVapourPressureUnits.Enabled = True
                    cmbCriticalPressureUnits.Enabled = True
                    cmbDensityUnits.Enabled = True
                    cmbViscosityUnits.Enabled = True
                    cmbSelectedTrim.Enabled = True
                    txtMedium.ReadOnly = False

                    cmbVapourPressureUnits.SelectedIndex = 0
                    cmbCriticalPressureUnits.SelectedIndex = 0
                    cmbDensityUnits.SelectedIndex = 0
                    cmbViscosityUnits.SelectedIndex = 0
                End If
            Else

                If cmbFluid.Text = "Steam" Then

                    lblTsatInletPress.Visible = True
                    txtTsatInletCase1.Visible = True
                    txtTsatInletCase2.Visible = True
                    txtTsatInletCase3.Visible = True

                    lblToutPressure.Visible = True
                    txtTOutPressureCase1.Visible = True
                    txtTOutPressureCase2.Visible = True
                    txtTOutPressureCase3.Visible = True

                    lblTsatoutPressure.Visible = True
                    txtTsatoutPressureCase1.Visible = True
                    txtTsatoutPressureCase2.Visible = True
                    txtTsatoutPressureCase3.Visible = True

                    chkMolecularWeight.Visible = False
                    txtMolecularWeight.Visible = False
                    chkViscosity.Checked = False
                    chkViscosity.Visible = False
                    lblViscosity.Visible = True
                    chkMolecularWeight.Checked = False
                    chkMolecularWeight.Visible = False
                    lblMolecularUnit.Visible = False
                    cmbVapourPressureUnits.Enabled = False
                    cmbCriticalPressureUnits.Enabled = False
                    cmbDensityUnits.Enabled = False
                    cmbViscosityUnits.Enabled = False
                    cmbSelectedTrim.Enabled = False
                    txtDensityCase1.ReadOnly = True
                    txtDensityCase2.ReadOnly = True
                    txtDensityCase3.ReadOnly = True
                    txtK_Case1.ReadOnly = True
                    txtX_Case1.ReadOnly = True
                    txtZ_Case1.ReadOnly = True
                    txtK_Case2.ReadOnly = True
                    txtX_Case2.ReadOnly = True
                    txtZ_Case2.ReadOnly = True
                    txtK_Case3.ReadOnly = True
                    txtX_Case3.ReadOnly = True
                    txtZ_Case3.ReadOnly = True

                    txtMedium.ReadOnly = False
                    LoadingForm = True
                    If LoadingProjectFile = False Then                  ' 20210219   When new record selected not needed popups
                        Call AllPressureConversions()
                    End If


                Else  'íf Fluid is gas
                    lblTsatInletPress.Visible = False
                    txtTsatInletCase1.Visible = False
                    txtTsatInletCase2.Visible = False
                    txtTsatInletCase3.Visible = False



                    lblToutPressure.Visible = False
                    txtTOutPressureCase1.Visible = False
                    txtTOutPressureCase2.Visible = False
                    txtTOutPressureCase3.Visible = False

                    lblTsatoutPressure.Visible = False
                    txtTsatoutPressureCase1.Visible = False
                    txtTsatoutPressureCase2.Visible = False
                    txtTsatoutPressureCase3.Visible = False

                    txtDensityCase1.ReadOnly = False
                    txtDensityCase2.ReadOnly = False
                    txtDensityCase3.ReadOnly = False
                    chkMolecularWeight.Visible = True
                    chkMolecularWeight.Checked = False
                    lblMolecularUnit.Visible = True

                    chkViscosity.Visible = True
                    lblViscosity.Visible = False

                    cmbVapourPressureUnits.Enabled = True
                    cmbCriticalPressureUnits.Enabled = True
                    cmbDensityUnits.Enabled = True
                    cmbViscosityUnits.Enabled = True
                    cmbSelectedTrim.Enabled = True
                    lblK.Visible = True
                    lblZ.Visible = True
                    lblX.Visible = True
                    txtK_Case1.Visible = True
                    txtX_Case1.Visible = True
                    txtZ_Case1.Visible = True
                    txtK_Case2.Visible = True
                    txtX_Case2.Visible = True
                    txtZ_Case2.Visible = True
                    txtK_Case3.Visible = True
                    txtX_Case3.Visible = True
                    txtZ_Case3.Visible = True

                    txtK_Case1.ReadOnly = False
                    txtX_Case1.ReadOnly = True
                    txtZ_Case1.ReadOnly = False
                    txtK_Case2.ReadOnly = False
                    txtX_Case2.ReadOnly = True
                    txtZ_Case2.ReadOnly = False
                    txtK_Case3.ReadOnly = False
                    txtX_Case3.ReadOnly = True
                    txtZ_Case3.ReadOnly = False

                    txtMedium.ReadOnly = False



                End If
                txtFlashingPercentageCase1.Visible = False
                txtFlashingPercentageCase2.Visible = False
                txtFlashingPercentageCase3.Visible = False
                End If

            cmbFlowrate.SelectedIndex = sel_index
            Call SelectFlowUnits()

            LoadingForm = True
            txtMedium.Text = cmbFluid.Text
            'End If
        Catch ex As Exception
            MsgBox("cmbFluid: " & "  " & ex.Message)
        End Try
    End Sub

    Public Sub CalculateKVCV()
        'Dim Y, TempFlowCase1, TempFlowCase2, TempFlowCase3 As Single
        'Flowrate x (Density/Presure Drop)^0.5	IF Pressure drop > Chocked flow THEN TAKE Choked FLow FOR CALCULATION
        'Kv = 0.865 · Cv
        Try
            If cmbFluidType.Text = "InCompressible" Then
                'case 1
                If Not FinalPressureDropCase1 > FinalChokedPressureCase1 Then
                    If Not FinalPressureDropCase1 = 0 Then
                        FinalKVCase1 = (FinalDensityCase1 / FinalPressureDropCase1)
                        FinalKVCase1 = FinalKVCase1 ^ 0.5
                        FinalKVCase1 = FinalFlowrateCase1 * FinalKVCase1
                    Else
                        FinalKVCase1 = 0
                    End If
                Else
                    If Not FinalChokedPressureCase1 = 0 Then
                        FinalKVCase1 = FinalFlowrateCase1 * ((FinalDensityCase1 / FinalChokedPressureCase1) ^ 0.5)
                    Else
                        FinalKVCase1 = 0
                    End If
                End If

                'Case 2
                If Not FinalPressureDropCase2 > FinalChokedPressureCase2 Then
                    If Not FinalPressureDropCase2 = 0 Then
                        FinalKVCase2 = FinalFlowrateCase2 * ((FinalDensityCase2 / FinalPressureDropCase2) ^ 0.5)
                    Else
                        FinalKVCase2 = 0
                    End If
                Else
                    If Not FinalChokedPressureCase2 = 0 Then
                        FinalKVCase2 = FinalFlowrateCase2 * ((FinalDensityCase2 / FinalChokedPressureCase2) ^ 0.5)
                    Else
                        FinalKVCase2 = 0
                    End If
                End If

                'Case 3
                If Not FinalPressureDropCase3 > FinalChokedPressureCase3 Then
                    If Not FinalPressureDropCase3 = 0 Then
                        FinalKVCase3 = FinalFlowrateCase3 * ((FinalDensityCase3 / FinalPressureDropCase3) ^ 0.5)
                    Else
                        FinalKVCase3 = 0
                    End If
                Else
                    If Not FinalChokedPressureCase3 = 0 Then
                        FinalKVCase3 = FinalFlowrateCase3 * ((FinalDensityCase3 / FinalChokedPressureCase3) ^ 0.5)
                    Else
                        FinalKVCase3 = 0
                    End If
                End If

            Else   'Steam or gas
                ' Call CalculateDensity()
                If Model = 4 Or Model = 5 Or Model = 6 Then

                    FinalFlowrateCase1 = TempFlowrateCase1 + WaterFlowRateCase1
                    FinalFlowrateCase2 = TempFlowrateCase2 + WaterFlowRateCase2
                    FinalFlowrateCase3 = TempFlowrateCase3 + WaterFlowRateCase3

                End If
                If Not Zcase1 = 0 And Not Kcase1 = 0 Then
                    If CompressibleChocked_Case1 = 0 Then
                        FinalKVCase1 = (FinalFlowrateCase1 / (110 * FinalInletPressureCase1 * Ycase1)) * (Math.Sqrt(((FinalInletTemperatureCase1 + 273.15) * Zcase1) / (Xcase1 * MolecularWeightCase1)))
                    Else
                        FinalKVCase1 = (FinalFlowrateCase1 / (110 * FinalInletPressureCase1 * YChokecase1)) * (Math.Sqrt(((FinalInletTemperatureCase1 + 273.15) * Zcase1) / (XChokecase1 * MolecularWeightCase1)))
                    End If

                End If
                If Not Zcase2 = 0 And Not Kcase2 = 0 Then
                    If CompressibleChocked_Case2 = 0 Then
                        FinalKVCase2 = (FinalFlowrateCase2 / (110 * FinalInletPressureCase2 * Ycase2)) * (Math.Sqrt(((FinalInletTemperatureCase2 + 273.15) * Zcase2) / (Xcase2 * MolecularWeightCase2)))
                    Else
                        FinalKVCase2 = (FinalFlowrateCase2 / (110 * FinalInletPressureCase2 * YChokecase2)) * (Math.Sqrt(((FinalInletTemperatureCase2 + 273.15) * Zcase2) / (XChokecase2 * MolecularWeightCase2)))
                    End If
                End If
                If Not Zcase3 = 0 And Not Kcase3 = 0 Then
                    If CompressibleChocked_Case3 = 0 Then
                        FinalKVCase3 = (FinalFlowrateCase3 / (110 * FinalInletPressureCase3 * Ycase3)) * (Math.Sqrt(((FinalInletTemperatureCase3 + 273.15) * Zcase3) / (Xcase3 * MolecularWeightCase3)))
                    Else
                        FinalKVCase3 = (FinalFlowrateCase3 / (110 * FinalInletPressureCase3 * YChokecase3)) * (Math.Sqrt(((FinalInletTemperatureCase3 + 273.15) * Zcase3) / (XChokecase3 * MolecularWeightCase3)))
                    End If

                End If

            End If
        Catch ex As Exception
            MsgBox("CalculateKvCv: " & ex.Message)
        End Try
        'Return Nothing
    End Sub

    '--------------------------------------------------------------------------------------------------------------------------------------------------
    'Stage 2 
    '--------------------------------------------------------------------------------------------------------------------------------------------------

    Private Sub txtDesignPressureInlet_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtDesignPressureInlet.KeyPress, txtDesignTemperatureInlet.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("txtDesignPressureInlet_KeyPress:  " & ex.Message)
        End Try

    End Sub


    'Public Function convertDesignPressure(txtPressure As TextBox, ByRef FinalPressure As Single, cmb As ComboBox)
    '    Dim selection As Byte
    '    Try
    '        If Not txtPressure.Text = "" Then
    '            selection = cmb.SelectedIndex
    '            Select Case selection
    '                Case 0
    '                    FinalPressure = CSng(txtPressure.Text) - 1.013
    '                Case 1
    '                    'BarG

    '                    FinalPressure = (CSng(txtPressure.Text) * 1)


    '                Case 2
    '                    'psiA

    '                    FinalPressure = (CSng(txtPressure.Text) * 0.0689475) - 1.013


    '                Case 3
    '                    'psiG

    '                    FinalPressure = (CSng(txtPressure.Text) * 0.0689475)


    '                Case 4
    '                    'kg/cm2A

    '                    FinalPressure = (CSng(txtPressure.Text) * 0.98135426889107) - 1.013


    '                Case 5
    '                    'kg/cm2G

    '                    FinalPressure = (CSng(txtPressure.Text) * 0.98135426889107)


    '                Case 6
    '                    'kPaA

    '                    FinalPressure = (CSng(txtPressure.Text) * 0.01) - 1.013


    '                Case 7
    '                    'kPaG

    '                    FinalPressure = (CSng(txtPressure.Text) * 0.01)


    '                Case 8
    '                    'MPaA

    '                    FinalPressure = (CSng(txtPressure.Text) * 10) - 1.013


    '                Case 9
    '                    'MPaG

    '                    FinalPressure = (CSng(txtPressure.Text) * 10)




    '            End Select
    '        End If

    '    Catch ex As Exception
    '        MsgBox(ex.Source & "  " & ex.Message)
    '    End Try
    '    Return Nothing
    'End Function

    Public Sub CalculateMaxPressTemp()
        Dim Pressure1, Pressure2, Pressure3, Temperature1, Temperature2, Temperature3 As Single
        If txtInletPressureCase1.Text = "" Then
            Pressure1 = 0
        Else
            Pressure1 = CSng(txtInletPressureCase1.Text)
        End If
        If txtInletPressureCase2.Text = "" Then
            Pressure2 = 0
        Else
            Pressure2 = CSng(txtInletPressureCase2.Text)
        End If
        If txtInletPressureCase3.Text = "" Then
            Pressure3 = 0
        Else
            Pressure3 = CSng(txtInletPressureCase3.Text)
        End If

        If txtInletTemperatureCase1.Text = "" Then
            Temperature1 = 0
        Else
            Temperature1 = CSng(txtInletTemperatureCase1.Text)
        End If
        If txtInletTemperatureCase2.Text = "" Then
            Temperature2 = 0
        Else
            Temperature2 = CSng(txtInletTemperatureCase2.Text)
        End If
        If txtInletTemperatureCase3.Text = "" Then
            Temperature3 = 0
        Else
            Temperature3 = CSng(txtInletTemperatureCase3.Text)
        End If


        Dim InletPressureArray = New Single() {Pressure1, Pressure2, Pressure3}
        MaxPressure = InletPressureArray.Max
        If txtDesignPressureInlet.Text = "" Then
            txtDPShutoff.Text = MaxPressure                         'If design pressure is blank
        Else
            txtDPShutoff.Text = txtDesignPressureInlet.Text         'The DP shutoff should always be equivalent to maximum pressure or design pressure
        End If
        Dim InlettemperatureArray = New Single() {Temperature1, Temperature2, Temperature3}
        MaxTemperature = InlettemperatureArray.Max


    End Sub

    Public Sub CalculateRatings()

        Try
            If LoadingForm = True Then
                If Not txtPressureDropCase1.Text = "" Or Not txtPressureDropCase2.Text = "" Or Not txtPressureDropCase3.Text = "" Then
                    If Not cmbMOC.Text = "--Select--" Then
                        Call CalculateMaxPressTemp()

                        If txtDesignTemperatureInlet.Text = "" Then
                            txtDesignTemperatureInlet.Text = MaxTemperature
                        Else
                            If MaxTemperature >= CSng(txtDesignTemperatureInlet.Text) Then
                                txtDesignTemperatureInlet.Text = MaxTemperature
                            End If
                        End If
                        'If sender Is cmbMOC Then
                        If txtDesignPressureInlet.Text = "" Then
                            txtDesignPressureInlet.Text = MaxPressure
                        Else
                            If MaxPressure >= CSng(txtDesignPressureInlet.Text) Then
                                txtDesignPressureInlet.Text = MaxPressure
                            End If
                        End If

                        Call converttemperature(txtDesignTemperatureInlet, FinalDesignTemperatureInlet, cmbTemperatureUnits)

                        Call convertPressure(txtDesignPressureInlet, FinalDesignPressureInlet, cmbPressureUnits)
                        FinalDesignPressureInlet = FinalDesignPressureInlet - 1.013
                        '20170621
                        '   Call SuggestRatingFromTable(cmbMOC.Text, FinalDesignPressureInlet, FinalDesignTemperatureInlet)

                        '  ElseIf sender Is txtDesignPressureInlet Then
                        '   Call convertPressure(txtDesignPressureInlet, FinalDesignPressureInlet, cmbPressureUnits)
                        '    FinalDesignPressureInlet = FinalDesignPressureInlet - 1.013
                        ' Else
                        ''    Call converttemperature(txtDesignTemperatureInlet, FinalDesignTemperatureInlet, cmbTemperatureUnits)

                        ''End If

                        If Not SuggestRatingFromTable(cmbMOC.Text, FinalDesignPressureInlet, FinalDesignTemperatureInlet) Then
                            ' MsgBox("No matching rating class found for given Temperature and Pressure")
                            txtErrors.Text = "No matching rating class found for given Temperature and Pressure"
                        Else
                            '  lblFinalRating.Text = ""
                            txtErrors.Text = ""
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox("Ratings :  " & "  " & ex.Message)
        End Try
    End Sub

    Private Sub txtDesignTemperatureInlet_Validated(sender As Object, e As EventArgs) Handles txtDesignTemperatureInlet.Validated, cmbMOC.TextChanged, txtDesignPressureInlet.Validated
        Try
            If LoadingForm = True Then
                If LoadingProjectFile = False Then
                    If sender Is txtDesignPressureInlet Then
                        If txtDesignPressureInlet.Text = "" And LoadingForm = True Then
                            txtDesignPressureInlet.Text = MaxPressure
                        End If
                        If Not txtDesignPressureInlet.Text = "" And Not LoadingForm = False Then
                            If CSng(txtDesignPressureInlet.Text) < MaxPressure Then
                                MsgBox("Enter higher value")
                                txtDesignPressureInlet.Focus()
                            Else
                                txtDPShutoff.Text = txtDesignPressureInlet.Text
                            End If
                        End If
                    End If
                    If sender Is txtDesignTemperatureInlet Then
                        If txtDesignTemperatureInlet.Text = "" And LoadingForm = True Then
                            txtDesignTemperatureInlet.Text = MaxTemperature
                        End If
                        If Not txtDesignTemperatureInlet.Text = "" And Not LoadingForm = False Then
                            If CSng(txtDesignTemperatureInlet.Text) < MaxTemperature Then
                                MsgBox("Enter higher value")
                                txtDesignTemperatureInlet.Focus()
                            End If
                        End If
                    End If

                    Call AllCalculations()      '17 May 2023 

                    'Call CalculateRatings()
                    'Call ConfirmRating()
                    'If lblFinalOutletPipe.Text = "" Then
                    '    Call PipeSelection("Schedule")

                    'End If
                End If
            End If
        Catch ex As Exception
            MsgBox("RatingEntryData:  " & ex.Message)
        End Try
    End Sub

    Public Function SuggestRatingFromTable(ByVal MOC As String, ByVal Pressure As Single, ByVal Temperature As Single) As Boolean
        Dim i, j, k, count As Integer
        Dim Temperaturevalue1, Pressurevalue, tempPressure As Single
        Dim Ratings As Single
        Dim RatingMaterial_worksheet As DataTable
        Dim TempSelectedItem As String = ""
        Dim OldFlag As Boolean = False
        Try

            RatingFlag = False              'this is for not entering Textchange function

            'RatingsMaterial_workbook = APP.Workbooks.Open(AppPath & "\Database\Materials_B16_34.xlsx")
            'RatingMaterial_worksheet = RatingsMaterial_workbook.Worksheets("A216 Gr.WCB")
            RatingMaterial_worksheet = DT_A216GrWCB
            If MOC = "A216WCB" Then                         'A216WCB
                RatingMaterial_worksheet = DT_A216GrWCB             '
            ElseIf MOC = "A217WC6" Then                     'A217WC6
                RatingMaterial_worksheet = DT_A217GrWC6
            ElseIf MOC = "A351CF8M" Then                    'A351CF8M
                RatingMaterial_worksheet = DT_A351GrCF8M
            ElseIf MOC = "A216WCC" Then                     'A216WCC
                RatingMaterial_worksheet = DT_A216GrWCC
            ElseIf MOC = "A351 CF3" Then                     'A351 CF3
                RatingMaterial_worksheet = DT_A351GrCF3
            ElseIf MOC = "A351CF3M" Then                   'A351CF3M
                RatingMaterial_worksheet = DT_A351GrCF3M
            ElseIf MOC = "A217WC9" Then                     'A217WC9
                RatingMaterial_worksheet = DT_A217GrWC9
            ElseIf MOC = "A351 CF8" Then                    'A351 CF8
                RatingMaterial_worksheet = DT_A351GrCF8C
            ElseIf MOC = "A352LCB" Then                     'A352LCB
                RatingMaterial_worksheet = DT_A352GrLCB
            ElseIf MOC = "A217 C5" Then                      'A217 C5
                RatingMaterial_worksheet = DT_A217GrC5
            ElseIf MOC = "A351 Gr.CD4MCu" Then
                RatingMaterial_worksheet = DT_A351GrCD4MCu
            ElseIf MOC = "A217 C12A" Then                    'A217 C12A
                RatingMaterial_worksheet = DT_A217GrC12A
            ElseIf MOC = "A351 CN7M" Then                    'A351 CN7M
                RatingMaterial_worksheet = DT_A351GrCN7M
            ElseIf MOC = "A494 Gr.CW-12MW" Then
                RatingMaterial_worksheet = DT_A494GrCW12MW
            ElseIf MOC = "A105" Then
                RatingMaterial_worksheet = DT_A216GrWCB
            ElseIf MOC = "A351CF8M" Then                    'A351CF8M
                RatingMaterial_worksheet = DT_A216GrWCB
            End If

            With RatingMaterial_worksheet
                LastRow = .Rows.Count - 2 '.Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                LastColumn = .Columns.Count - 1 '.Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column

                For i = 0 To LastRow
                    Temperaturevalue1 = .Rows(i).Item(0) 'CSng(.Cells(i, 1).Value)
                    If Temperaturevalue1 >= Temperature Then
                        For j = 1 To LastColumn
                            Pressurevalue = .Rows(i).Item(j) 'CSng(.Cells(i, j).Value)
                            'If Pressurevalue >= Pressure Then
                            'changed on 12 -9 - 2016 for interpolation
                            If Not i = 0 Then
                                'tempPressure = Interpolation(Temperature, CSng(.Cells(i - 1, 1).Value), CSng(.Cells(i, 1).Value), CSng(.Cells(i - 1, j).Value), CSng(.Cells(i, j).Value))
                                tempPressure = Interpolation(Temperature, .Rows(i - 1).Item(0), .Rows(i).Item(0), .Rows(i - 1).Item(j), .Rows(i).Item(j))
                                'SuggestedRating = CSng(worksheet.Cells(1, j).value
                            Else
                                tempPressure = Pressurevalue
                            End If
                            If tempPressure > Pressure Then
                                SuggestedRating = .Columns(j).ColumnName.ToString() 'CSng(.Cells(1, j).value)
                                lblSuggestedRating.Text = SuggestedRating
                                'this is selected by the software 
                                count = 0
                                If cmbSuggestedRating.SelectedIndex >= 0 Then  'to be done only at start of sizing, once overidden then no change 
                                    TempSelectedItem = cmbSuggestedRating.Text
                                    OldFlag = True
                                End If

                                cmbSuggestedRating.Items.Clear()
                                For k = j To LastColumn                     'To provide all possible options of rating calss to the user to select. 
                                    Ratings = .Columns(k).ColumnName.ToString() '.Cells(1, k).Value()
                                    cmbSuggestedRating.Items.Add(Ratings)
                                    SuggestedRatingArray(count) = Ratings
                                    count = count + 1
                                Next

                                If OldFlag = True Then
                                    cmbSuggestedRating.SelectedIndex = cmbSuggestedRating.FindStringExact(TempSelectedItem)
                                Else
                                    cmbSuggestedRating.SelectedIndex = 0
                                End If
                                SuggestedRating = cmbSuggestedRating.SelectedItem
                                lblFinalRating.Text = SuggestedRating
                                ' End If

                                RatingFlag = True 'this is for not entering Textchange function
                                SuggestRatingFromTable = True
                                Exit For
                            Else
                                SuggestRatingFromTable = False

                            End If
                            ' End If
                        Next j
                        Exit For
                    End If
                Next i
                '  MsgBox(i & "  " & "  " & .Cells(i, 2).value & "  " & .Cells(i, 2).value & "  " & .Cells(i, 3).value & "  " & .Cells(i, 4).value & "  " & .Cells(i, 5).value)
            End With
        Catch ex As Exception
            MsgBox("SuggestRatingFromTable " & ex.Message)
        End Try
        Return SuggestRatingFromTable
    End Function

    Public Sub ConfirmRating()
        Try
            If LoadingForm = True Then
                If Not txtPressureDropCase1.Text = "" Or Not txtPressureDropCase2.Text = "" Or Not txtPressureDropCase3.Text = "" Then
                    If Not lblSuggestedRating.Text = "" Then
                        cmbAreaunits.Enabled = True
                        cmbVelocityRule.Enabled = True
                        cmbPipeDia.Enabled = True
                        cmbSchedule.Enabled = True
                        cmbInletPipeSize.Enabled = True
                        cmbInletPipeSchedule.Enabled = True
                        btnAcceptVelocityRule.Enabled = True
                        cmbSelectedTrim.Enabled = True
                        '20220127 SuggestedRating = CSng(lblSuggestedRating.Text)
                        SuggestedRating = If(lblFinalRating.Text = "", 0, CSng(lblFinalRating.Text))
                        '  lblFinalRating.Text = SuggestedRating
                        If cmbPipeDia.Text = "--Select--" Then
                            Areaunitschange = True
                        End If
                        '------------------------------Now directly calculate pipe outlet.--------------------------------------------
                        If Not cmbAreaunits.Items.Count = 0 Then 'taking care for startup of software
                            If LoadingForm = True Then
                                'lblFinalSizeUnits.Text = CStr(cmbAreaunits.Text)
                                'lblFinalSizeUnits1.Text = CStr(cmbAreaunits.Text)
                                Call CalculateFlowVelocity()
                                Call CalculatePipeDia()

                                VelocityRuleFlag = False
                            End If
                        End If
                        Areaunitschange = False

                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox("btnOverrideRating_Click " & ex.Message)
        End Try
    End Sub

    Private Sub btnOverrideRating_Click(sender As Object, e As EventArgs) Handles btnOverrideRating.Click
        Call ConfirmRating()
    End Sub

    Private Sub cmbSuggestedRating_Click(sender As Object, e As EventArgs) Handles cmbSuggestedRating.Click
        cmbSuggestedRating.BackColor = Color.White
    End Sub

    Private Sub cmbSuggestedRating_TextChanged(sender As Object, e As EventArgs) Handles cmbSuggestedRating.TextChanged
        Try
            If LoadingForm = True Then
                If RatingFlag = True Then
                    cmbAreaunits.Enabled = True
                    cmbVelocityRule.Enabled = True
                    cmbPipeDia.Enabled = True
                    cmbSchedule.Enabled = True
                    cmbInletPipeSize.Enabled = True
                    cmbInletPipeSchedule.Enabled = True
                    btnAcceptVelocityRule.Enabled = True
                    cmbSelectedTrim.Enabled = True
                    If Not cmbSuggestedRating.Text = "" Or Not cmbSuggestedRating.Text = "--Select--" Then
                        SuggestedRating = (cmbSuggestedRating.Text)
                    Else
                        SuggestedRating = 0
                    End If
                    lblFinalRating.Text = SuggestedRating
                    If cmbPipeDia.Text = "--Select--" Then
                        Areaunitschange = True
                    End If

                    '================ Calculate Pipe Outlet directly==========================
                    If Not cmbAreaunits.Items.Count = 0 Then 'taking care for startup of software
                        If LoadingForm = True Then
                            'lblFinalSizeUnits.Text = CStr(cmbAreaunits.Text)
                            'lblFinalSizeUnits1.Text = CStr(cmbAreaunits.Text)
                            Call CalculateFlowVelocity()

                            Call CalculatePipeDia()
                            VelocityRuleFlag = False
                            If (FinalPressureDropCase1 > 0 Or FinalPressureDropCase2 > 0 Or FinalPressureDropCase3 > 0) Then   ' Changes 20201028 Added for one change all change
                                Call RECalculate()

                                If Not txtAirPressure.Text = "" And Not cmbAirPressureUnits.SelectedIndex = -1 Then
                                    Call ValveActuator()
                                End If
                                If InitialKVCase1 <> 0 And Not IsDBNull(InitialKVCase1) And Not Double.IsInfinity(InitialKVCase1) Then
                                    lblApproxCVCase1.Text = Math.Round((InitialKVCase1 * 1.17), 2)
                                    lblKVCase1.Text = Math.Round(InitialKVCase1, 2)
                                Else
                                    lblApproxCVCase1.Text = ""
                                    lblKVCase1.Text = ""
                                End If
                                If InitialKVCase2 <> 0 And Not IsDBNull(InitialKVCase2) And Not Double.IsInfinity(InitialKVCase2) Then
                                    lblApproxCVCase2.Text = Math.Round((InitialKVCase2 * 1.17), 2)
                                    lblKVCase2.Text = Math.Round(InitialKVCase2, 2)
                                Else
                                    lblApproxCVCase2.Text = ""
                                    lblKVCase2.Text = ""
                                End If
                                If InitialKVCase3 <> 0 And Not IsDBNull(InitialKVCase3) And Not Double.IsInfinity(InitialKVCase3) Then
                                    lblApproxCVCase3.Text = Math.Round((InitialKVCase3 * 1.17), 2)
                                    lblKVCase3.Text = Math.Round(InitialKVCase3, 2)
                                Else
                                    lblApproxCVCase3.Text = ""
                                    lblKVCase3.Text = ""
                                End If


                            End If

                        End If
                    End If
                    Areaunitschange = False
                End If
            End If
        Catch ex As Exception
            MsgBox("cmbSuggestedRating_TextChanged:  " & ex.Message)
        End Try
    End Sub


    '-------------------------------------------------------------------------
    'Velocity Rules
    '-------------------------------------------------------------------------

    Public Sub CalculatePipeDia()
        Dim DiameterCase1, DiameterCase2, DiameterCase3, tempvalvesize, tempvalvesize1, TempOutletPipeSize As Single
        Dim match As Boolean
        Dim i, j, x, m, n, count, InletPipeIndex, OutletPipeIndex As Integer
        Dim OD, Schedule As Single
        'Dim APP As New excel.Application

        Try
            If LoadingForm = True Then

                If LoadingProjectFile = False Then
                    If FinalPressureDropCase1 > 0 Or FinalPressureDropCase2 > 0 Or FinalPressureDropCase3 > 0 Then
                        If LoadingForm = True Then
                            If Not cmbAreaunits.Text = "--Select--" Then

                                Dim Diaarray = New Single() {4}

                                If cmbFluidType.Text = "InCompressible" Then
                                    DiameterCase1 = Math.Sqrt(((FinalFlowrateCase1 / 3600) / PipeVelocity) * 4 / Math.PI)
                                    DiameterCase2 = Math.Sqrt(((FinalFlowrateCase2 / 3600) / PipeVelocity) * 4 / Math.PI)
                                    DiameterCase3 = Math.Sqrt(((FinalFlowrateCase3 / 3600) / PipeVelocity) * 4 / Math.PI)
                                    Diaarray = {DiameterCase1, DiameterCase2, DiameterCase3} ', Maxdia 19 04 2023
                                    Maxdia = Diaarray.Max
                                Else
                                    If Model = 4 Or Model = 5 Or Model = 6 Then
                                        DiameterCase1 = Math.Sqrt(((PRDS_OP_FlowrateForPipeDiaCase1 / 3600) / FluidVelocityCase1) * 4 / Math.PI)
                                        DiameterCase2 = Math.Sqrt(((PRDS_OP_FlowrateForPipeDiaCase2 / 3600) / FluidVelocityCase2) * 4 / Math.PI)
                                        DiameterCase3 = Math.Sqrt(((PRDS_OP_FlowrateForPipeDiaCase3 / 3600) / FluidVelocityCase3) * 4 / Math.PI)
                                        Diaarray = {DiameterCase1, DiameterCase2, DiameterCase3}
                                        Maxdia = Diaarray.Max

                                    Else

                                        DiameterCase1 = Math.Sqrt(((FlowrateForPipeDiaCalcCase1 / 3600) / FluidVelocityCase1) * 4 / Math.PI)
                                        DiameterCase2 = Math.Sqrt(((FlowrateForPipeDiaCalcCase2 / 3600) / FluidVelocityCase2) * 4 / Math.PI)
                                        DiameterCase3 = Math.Sqrt(((FlowrateForPipeDiaCalcCase3 / 3600) / FluidVelocityCase3) * 4 / Math.PI)
                                        Diaarray = {DiameterCase1, DiameterCase2, DiameterCase3}
                                        Maxdia = Diaarray.Max

                                    End If

                                End If



                                Maxdia = Maxdia * 39.370007 'Meters to  inches 


                                'Search OD and schedule from table and list them in combobox


                                'PipeSchedule_workbook = APP.Workbooks.Open(AppPath & "\Database\PipeSchedule.xlsx")

                                ' PipeSheet1_worksheet = PipeSchedule_workbook.Worksheets("sheet1")


                                With DT_PipeSchedule1 ' PipeSheet1_worksheet
                                    LastRow = .Rows.Count - 2     '.Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                                    LastColumn = .Columns.Count - 1        '  .Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column

                                    If Areaunitschange = True Then   ' Only if Areaunits are changed change the inletpipesize combobox data

                                        ' Inlet pipe combo box is loaded as per the unit type, also related arrays are updated
                                        'm and n are column nos, 1 is in NB or 3 is in inches.
                                        InletPipeIndex = cmbInletPipeSize.SelectedIndex 'change in area units should not change combobox index
                                        cmbInletPipeSize.Items.Clear()
                                        OutletPipeIndex = cmbPipeDia.SelectedIndex  'change in area units should not change combobox index
                                        cmbPipeDia.Items.Clear()

                                        For i = 0 To LastRow
                                            If cmbAreaunits.SelectedIndex = 0 Then
                                                m = 3
                                                n = 1
                                                cmbInletPipeSize.Items.Add(NB_PipeDIa(i))
                                                PipeOutletSize(i) = CSng(.Rows(i).Item(2))   'CSng(.Cells((count), 4).Value) 'value for calculation
                                                cmbPipeDia.Items.Add(NB_PipeDIa(i))              'value to display
                                            Else
                                                m = 1
                                                n = 3
                                                cmbInletPipeSize.Items.Add(INCH_PipeDia(i))
                                                PipeOutletSize(i) = CSng(.Rows(i).Item(2)) '(.Cells((count), 4).Value)
                                                cmbPipeDia.Items.Add(INCH_PipeDia(i))
                                            End If
                                            PipeInletSizeArray(i) = .Rows(i).Item(3) '.Cells(i, 4).Value
                                            PipeInletODArray(i) = .Rows(i).Item(2) '.Cells(i, 3).Value
                                        Next

                                        'Change Calculated Valve Size Units only if Area units are changed

                                        'change suggested valve size as per units 
                                        If Not txtSuggestedValveSize.Text = "" Then
                                            For i = 0 To LastRow
                                                If CSng(txtSuggestedValveSize.Text) = CSng(.Rows(i)(m).ToString()) Then
                                                    tempvalvesize1 = .Rows(i)(n).ToString()
                                                    txtSuggestedValveSize.Text = tempvalvesize1
                                                End If
                                            Next
                                        End If

                                        'change Valve Size Combobox as per units
                                        If Not cmbValveSizeOverride.Text = "--Select--" And cmbValveSizeOverride.Items.Count > 0 Then
                                            For j = 0 To ValveSizeArray.Length - 1
                                                For i = 0 To LastRow
                                                    If ValveSizeArray(j) = .Rows(i).Item(m) Then 'CSng(.Cells(i, m).value) Then
                                                        tempvalvesize = .Rows(i).Item(n) 'CSng(.Cells(i, n).value)
                                                        ValveSizeArray(j) = tempvalvesize
                                                        If (cmbValveSizeOverride.Items.Count - 1) < j Then
                                                            Exit For
                                                        Else
                                                            cmbValveSizeOverride.Items(j) = (CStr(tempvalvesize))
                                                        End If

                                                        Exit For
                                                    End If
                                                Next
                                            Next
                                            FinalValveSize = CSng(cmbValveSizeOverride.Text)

                                        End If
                                    End If
                                    For i = 0 To LastRow

                                        OD = CSng(.Rows(i).Item(2)) 'CSng(.Cells(i, 3).Value)


                                        'For j = 4 To LastColumn
                                        Schedule = CSng(.Rows(i).Item(10))     'Sch 40

                                        If Schedule = 0 Then
                                            Schedule = CSng(.Rows(i).Item(11)) ' Sch STD 
                                            If Schedule = 0 Then
                                                Schedule = CSng(.Rows(i).Item(15)) ' Sch XS
                                            End If
                                        End If
                                        ID = OD - (2 * Schedule)

                                        If Maxdia <= ID And Not Schedule = 0 Then 'selected OD and pipe schedule is more than or equal to suggested pipe ID. 
                                            Noise_Schedule = Schedule * 25.4 / 1000 ' Meters

                                            Noise_ID = ID * 25.4 / 1000     ' meters
                                            match = True
                                            'Exit For
                                        End If

                                        'Next j
                                        If match = True Then
                                            Exit For
                                        End If
                                    Next i
                                    If i > LastRow Then
                                        'MsgBox("No pipe Available for this flowrate")
                                        txtErrors.Text = txtErrors.Text & vbNewLine & "No pipe Available for this flowrate"
                                    Else
                                        txtErrors.Text = ""
                                        If match = True And Maxdia > 0 Then
                                            Noise_OutletPipeDia = CSng(.Rows(i).Item(3)) '(.Cells(i, 4).Value)
                                            Temp_Noise_OutletPipeDia = Noise_OutletPipeDia


                                            ' NOW SHOW PIPE IN DROPDOWN AND LABEL AS PER SELECTED AREA UNIS
                                            If cmbAreaunits.SelectedIndex = 0 Then


                                                FinalPipeOutletSize = CSng(.Rows(i).Item(1))   'CSng(.Cells(i, 2).Value)
                                                lblSuggPipeSize.Text = FinalPipeOutletSize
                                                'If Areaunitschange = True Then   ' Only if Area units is changed change the items in pipe dia and inlet pipe size
                                                '    OutletPipeIndex = cmbPipeDia.SelectedIndex 'change in area units should not change combobox index
                                                '    cmbPipeDia.Items.Clear()
                                                '    For count = 0 To LastRow                    ' in mm
                                                '        PipeOutletSize(count) = CSng(.Rows(count).Item(3))   'CSng(.Cells((count), 4).Value) 'value for calculation
                                                '        ' cmbPipeDia.Items.Add(.Cells((count), 2).Value)              'value to display
                                                '        cmbPipeDia.Items.Add(NB_PipeDIa(count))              'value to display

                                                '    Next
                                                'End If


                                            Else


                                                Noise_OutletPipeDia = CSng(.Rows(i).Item(3)) '(.Cells(i, 4).Value)
                                                FinalPipeOutletSize = CSng(.Rows(i).Item(3))     ' (.Cells(i, 4).Value)
                                                lblSuggPipeSize.Text = FinalPipeOutletSize
                                                'If Areaunitschange = True Then   ' Only if Area units is changed change the items in pipe dia and inlet pipe size
                                                '    OutletPipeIndex = cmbPipeDia.SelectedIndex 'change in area units should not change combobox index
                                                '    cmbPipeDia.Items.Clear()
                                                '    For count = 0 To LastRow                     ' in inches
                                                '        PipeOutletSize(count) = CSng(.Rows(count).Item(3)) '(.Cells((count), 4).Value)
                                                '        cmbPipeDia.Items.Add(INCH_PipeDia(count))
                                                '    Next
                                                'End If
                                            End If


                                            If (cmbPipeDia.Text = "--Select--" Or cmbPipeDia.SelectedIndex < 0) Then


                                                cmbSchedule.Items.Clear()
                                                count = 0
                                                For x = 5 To LastColumn

                                                    'If (CSng(.Cells(i, x).Value)) > 0 Then
                                                    If (CSng(.Rows(i).Item(x))) > 0 Then
                                                        'cmbSchedule.Items.Add(.Rows(0).Item(x)) '.Cells(1, x).Value)
                                                        cmbSchedule.Items.Add(.Columns(x).ColumnName.ToString())
                                                        ScheduleArray(count) = CSng(.Rows(i).Item(x)) '.Cells(i, x).Value)
                                                        count = count + 1
                                                    End If
                                                Next x
                                                If cmbSchedule.Items.Count = 0 Then
                                                    ' MsgBox("Wrong Pipe size no Schedule available")
                                                    txtErrors.Text = txtErrors.Text & vbNewLine & "Wrong Pipe size no Schedule available"
                                                Else
                                                    txtErrors.Text = ""
                                                    '    cmbPipeDia.SelectedIndex = 0
                                                    cmbSchedule.Text = "Sch 40"
                                                    cmbSchedule.SelectedIndex = cmbSchedule.FindStringExact("Sch 40")
                                                    If cmbSchedule.SelectedIndex < 0 Then
                                                        cmbSchedule.Text = "Sch STD"
                                                        cmbSchedule.SelectedIndex = cmbSchedule.FindStringExact("Sch STD")
                                                    End If
                                                    If cmbSchedule.SelectedIndex < 0 Then
                                                        cmbSchedule.Text = "Sch XS"
                                                        cmbSchedule.SelectedIndex = cmbSchedule.FindStringExact("Sch XS")
                                                    End If

                                                    '    'lblSuggSchedule.Text = cmbSchedule.Text
                                                End If
                                            End If

                                        End If

                                    End If
                                    TempOutletPipeSize = FinalPipeOutletSize                ' This is done as finalPipeOutletSize changes in index change
                                    If cmbInletPipeSize.Text = "--Select--" Or cmbInletPipeSize.SelectedIndex < 0 Then
                                        InletPipeSize = Noise_OutletPipeDia
                                        cmbInletPipeSize.Text = TempOutletPipeSize
                                        cmbInletPipeSize.SelectedIndex = cmbInletPipeSize.FindString(TempOutletPipeSize)
                                        '   Call LoadInletSchedule()            'To populate inlet schedule combobox
                                    Else
                                        If Areaunitschange = True Then cmbInletPipeSize.Text = cmbInletPipeSize.Items(InletPipeIndex)
                                    End If
                                    If cmbPipeDia.Text = "--Select--" Or cmbPipeDia.SelectedIndex < 0 Then
                                        cmbPipeDia.Text = TempOutletPipeSize
                                        cmbPipeDia.SelectedIndex = cmbPipeDia.FindString(TempOutletPipeSize)
                                        ArrPointer_PipeOutletSize = cmbPipeDia.SelectedIndex 'this is used to calculate the selected pipe dia 
                                    Else
                                        If Areaunitschange = True Then cmbPipeDia.Text = cmbPipeDia.Items(OutletPipeIndex)
                                    End If

                                End With

                                '20170623  APP.Workbooks.Close()
                                match = False

                                If cmbFluidType.Text = "Compressible" Then        'check only fro steam and gas and set the valve size for maximum diameter.
                                    With DT_PipeSchedule2 'PipeSheet2_worksheet
                                        LastRow = .Rows.Count - 2   '.Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                                        LastColumn = .Columns.Count - 1    '  .Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column
                                        For i = 2 To LastColumn

                                            If SuggestedRating = CSng(.Rows(1).Item(i)) Then 'CSng(.Cells(1, i).value) Then
                                                For j = 0 To LastRow
                                                    If (Maxdia * 25.4) < CSng(.Rows(j).Item(i)) Then       'CSng(.Cells(j, i).value) Then
                                                        ValveSize_MACNO = CSng(.Rows(j).Item(1))     ' CSng(.Cells(j, 2).value)
                                                        'MsgBox("Max MacNO Valve Size =  " & ValveSize_MACNO)
                                                        match = True
                                                        Exit For
                                                    End If
                                                Next
                                                If match = True Then
                                                    Exit For
                                                End If

                                            End If
                                        Next
                                    End With

                                End If

                            End If
                        End If
                    End If
                End If
            End If

        Catch ex As Exception
            MsgBox("CalculatePipeDia:  " & ex.Message)
        Finally
            '   APP.Workbooks.Close()
        End Try
        'Return Nothing
    End Sub
    '*****************************************************************************************************************************************************
    'there are 2 cases for Velocity  case caluclations
    'if Outlet Pressure P2 >Vapour Pressure Pv then no flashing so take Inlet flowrate for calculations
    'If Outlet pressure P2 < Vapour Pressure Pv then flashing is happening and some amount of steam is present.
    'So Outlet flowrate needs to be calculated in volumetric flow adding steam and water flow. 
    'Dryness fraction depending on Temperature and Outlet Pressure is to be found out.
    'From Dryness fraction mass flow at outlet of steam and water is found. 
    Public Function CalculateFlowVelocity()
        Try
            'Dim EnthalpyWater, TempDensityCase1, TempDensityCase2, TempDensityCase3 As Single

            If cmbFluidType.Text = "InCompressible" Then
                VelocityRuleFlag = True
                If FinalVapourPressureCase1 > FinalOutletPressureCase1 Then
                    FlowrateForPipeDiaCalcCase1 = FindFlashingFlowrate(FinalOutletPressureCase1, FinalInletPressureCase1, FinalInletTemperatureCase1, FinalDensityCase1, FinalFlowrateCase1, (DrynessFraction_LiquidCase1 / 100))
                    FlashingCase1 = True
                Else
                    FlowrateForPipeDiaCalcCase1 = FinalFlowrateCase1
                    FlashingCase1 = False
                End If
                If FinalVapourPressureCase2 > FinalOutletPressureCase2 Then
                    FlowrateForPipeDiaCalcCase2 = FindFlashingFlowrate(FinalOutletPressureCase2, FinalInletPressureCase2, FinalInletTemperatureCase2, FinalDensityCase2, FinalFlowrateCase2, (DrynessFraction_LiquidCase2 / 100))
                    FlashingCase2 = True
                Else
                    FlowrateForPipeDiaCalcCase2 = FinalFlowrateCase2
                    FlashingCase2 = False
                End If
                If FinalVapourPressureCase3 > FinaloutletPressureCase3 Then
                    FlowrateForPipeDiaCalcCase3 = FindFlashingFlowrate(FinaloutletPressureCase3, FinalInletPressureCase3, FinalInletTemperatureCase3, FinalDensityCase3, FinalFlowrateCase3, (DrynessFraction_LiquidCase3 / 100))
                    FlashingCase3 = True
                Else
                    FlowrateForPipeDiaCalcCase3 = FinalFlowrateCase3
                    FlashingCase3 = False
                End If
                If FlashingCase1 = True Then
                    FluidVelocityCase1 = 60
                Else
                    FluidVelocityCase1 = PipeVelocity
                End If
                If FlashingCase2 = True Then
                    FluidVelocityCase2 = 60
                Else
                    FluidVelocityCase2 = PipeVelocity
                End If
                If FlashingCase3 = True Then
                    FluidVelocityCase3 = 60
                Else
                    FluidVelocityCase3 = PipeVelocity
                End If
                If (FlashingCase1 = True Or FlashingCase2 = True Or FlashingCase3 = True) And cmbFluid.SelectedIndex = 1 Then ' only for Other Liquids
                    chkMolecularWeight.Visible = True
                    txtMolecularWeight.Visible = True
                Else
                    chkMolecularWeight.Visible = False
                    txtMolecularWeight.Visible = False
                End If

            Else

                If cmbFluid.Text = "Steam" Then
                    If Model = 4 Or Model = 5 Or Model = 6 Then
                        ' For Input Velocity
                        SoundVelocityCase1 = w_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        SoundVelocityCase2 = w_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        SoundVelocityCase3 = w_pT(FinaloutletPressureCase3, ToutPressureCase3)
                        FluidVelocityCase1 = 60   ' Pipe velocity should not be greater than 60 m/s as per research paper
                        FluidVelocityCase2 = 60
                        FluidVelocityCase3 = 60
                        PRDS_IP_FlowrateForPipeDiaCase1 = TempFlowrateCase1 / rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        PRDS_IP_FlowrateForPipeDiaCase2 = TempFlowrateCase2 / rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        PRDS_IP_FlowrateForPipeDiaCase3 = TempFlowrateCase3 / rho_pT(FinaloutletPressureCase3, ToutPressureCase3)


                        PRDS_OP_FlowrateForPipeDiaCase1 = FinalFlowrateCase1 / rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        PRDS_OP_FlowrateForPipeDiaCase2 = FinalFlowrateCase2 / rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        PRDS_OP_FlowrateForPipeDiaCase3 = FinalFlowrateCase3 / rho_pT(FinaloutletPressureCase3, ToutPressureCase3)

                    Else
                        SoundVelocityCase1 = w_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        SoundVelocityCase2 = w_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        SoundVelocityCase3 = w_pT(FinaloutletPressureCase3, ToutPressureCase3)
                        FluidVelocityCase1 = 60   ' Pipe velocity should not be greater than 60 m/s as per research paper
                        FluidVelocityCase2 = 60
                        FluidVelocityCase3 = 60

                        FlowrateForPipeDiaCalcCase1 = FinalFlowrateCase1 / rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        FlowrateForPipeDiaCalcCase2 = FinalFlowrateCase2 / rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        FlowrateForPipeDiaCalcCase3 = FinalFlowrateCase3 / rho_pT(FinaloutletPressureCase3, ToutPressureCase3)


                    End If

                Else  'for gas  
                    SoundVelocityCase1 = (Math.Sqrt((Kcase1 * 8314 * (FinalInletTemperatureCase1 + 273.15)) / MolecularWeightCase1))
                    SoundVelocityCase2 = (Math.Sqrt((Kcase2 * 8314 * (FinalInletTemperatureCase2 + 273.15)) / MolecularWeightCase2))
                    SoundVelocityCase3 = (Math.Sqrt((Kcase3 * 8314 * (FinalInletTemperatureCase3 + 273.15)) / MolecularWeightCase3))
                    FluidVelocityCase1 = 60  ' Pipe velocity should not be greater than 60 m/s as per research paper
                    FluidVelocityCase2 = 60
                    FluidVelocityCase3 = 60

                    'Calculate outlet Flowrate in m3/hr

                    FlowrateForPipeDiaCalcCase1 = (FinalInletPressureCase1 * (FinalFlowrateCase1 / FinalDensityCase1)) / FinalOutletPressureCase1
                    FlowrateForPipeDiaCalcCase2 = (FinalInletPressureCase2 * (FinalFlowrateCase2 / FinalDensityCase2)) / FinalOutletPressureCase2
                    FlowrateForPipeDiaCalcCase3 = (FinalInletPressureCase3 * (FinalFlowrateCase3 / FinalDensityCase3)) / FinaloutletPressureCase3


                End If


            End If
        Catch ex As Exception
            MsgBox("CalculateFlowVelocity:  " & ex.Message)
        End Try
        Return Nothing
    End Function
    Public Function CalculateFlowVelocity_ForNoise()
        Try
            If cmbFluidType.Text = "InCompressible" Then
                VelocityRuleFlag = True
                If FinalVapourPressureCase1 > FinalOutletPressureCase1 Then
                    FlowrateForPipeDiaCalcCase1 = FindFlashingFlowrate(FinalOutletPressureCase1, FinalInletPressureCase1, FinalInletTemperatureCase1, FinalDensityCase1, FinalFlowrateCase1, (DrynessFraction_LiquidCase1 / 100))
                    BafflePipeVelCase1 = FindFlashingFlowrate(BaffleOutletPressureCase1, FinalInletPressureCase1, FinalInletTemperatureCase1, BaffleDensityCase1, FinalFlowrateCase1, (DrynessFraction_LiquidCase1 / 100))
                    FlashingCase1 = True
                Else
                    FlowrateForPipeDiaCalcCase1 = FinalFlowrateCase1
                    BafflePipeVelCase1 = FinalFlowrateCase1
                    FlashingCase1 = False
                End If
                If FinalVapourPressureCase2 > FinalOutletPressureCase2 Then
                    FlowrateForPipeDiaCalcCase2 = FindFlashingFlowrate(FinalOutletPressureCase2, FinalInletPressureCase2, FinalInletTemperatureCase2, FinalDensityCase2, FinalFlowrateCase2, (DrynessFraction_LiquidCase2 / 100))
                    BafflePipeVelCase2 = FindFlashingFlowrate(BaffleOutletPressureCase2, FinalInletPressureCase2, FinalInletTemperatureCase2, BaffleDensityCase2, FinalFlowrateCase2, (DrynessFraction_LiquidCase2 / 100))
                    FlashingCase2 = True
                Else
                    FlowrateForPipeDiaCalcCase2 = FinalFlowrateCase2
                    BafflePipeVelCase2 = FinalFlowrateCase2
                    FlashingCase2 = False
                End If
                If FinalVapourPressureCase3 > FinaloutletPressureCase3 Then
                    FlowrateForPipeDiaCalcCase3 = FindFlashingFlowrate(FinaloutletPressureCase3, FinalInletPressureCase3, FinalInletTemperatureCase3, FinalDensityCase3, FinalFlowrateCase3, (DrynessFraction_LiquidCase3 / 100))
                    BafflePipeVelCase3 = FindFlashingFlowrate(BaffleOutletPressureCase3, FinalInletPressureCase3, FinalInletTemperatureCase3, BaffleDensityCase3, FinalFlowrateCase3, (DrynessFraction_LiquidCase3 / 100))
                    FlashingCase3 = True
                Else
                    FlowrateForPipeDiaCalcCase3 = FinalFlowrateCase3
                    BafflePipeVelCase3 = FinalFlowrateCase3
                    FlashingCase3 = False
                End If
                If FlashingCase1 = True Then
                    FluidVelocityCase1 = 60
                Else
                    FluidVelocityCase1 = PipeVelocity
                End If
                If FlashingCase2 = True Then
                    FluidVelocityCase2 = 60
                Else
                    FluidVelocityCase2 = PipeVelocity
                End If
                If FlashingCase3 = True Then
                    FluidVelocityCase3 = 60
                Else
                    FluidVelocityCase3 = PipeVelocity
                End If
                If (FlashingCase1 = True Or FlashingCase2 = True Or FlashingCase3 = True) And cmbFluid.SelectedIndex = 1 Then ' only for Other Liquids
                    chkMolecularWeight.Visible = True
                    txtMolecularWeight.Visible = True
                Else
                    chkMolecularWeight.Visible = False
                    txtMolecularWeight.Visible = False
                End If

            Else
                If cmbFluid.Text = "Steam" Then
                    If Model = 4 Or Model = 5 Or Model = 6 Then
                        ' For Input Velocity
                        SoundVelocityCase1 = w_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        SoundVelocityCase2 = w_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        SoundVelocityCase3 = w_pT(FinaloutletPressureCase3, ToutPressureCase3)
                        BaffleSoundVelocityCase1 = w_pT(BaffleOutletPressureCase1, ToutPressureCase1)
                        BaffleSoundVelocityCase2 = w_pT(BaffleOutletPressureCase2, ToutPressureCase2)
                        BaffleSoundVelocityCase3 = w_pT(BaffleOutletPressureCase3, ToutPressureCase3)
                        FluidVelocityCase1 = 60   ' Pipe velocity should not be greater than 60 m/s as per research paper
                        FluidVelocityCase2 = 60
                        FluidVelocityCase3 = 60
                        PRDS_IP_FlowrateForPipeDiaCase1 = TempFlowrateCase1 / rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        PRDS_IP_FlowrateForPipeDiaCase2 = TempFlowrateCase2 / rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        PRDS_IP_FlowrateForPipeDiaCase3 = TempFlowrateCase3 / rho_pT(FinaloutletPressureCase3, ToutPressureCase3)


                        PRDS_OP_FlowrateForPipeDiaCase1 = FinalFlowrateCase1 / rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        PRDS_OP_FlowrateForPipeDiaCase2 = FinalFlowrateCase2 / rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        PRDS_OP_FlowrateForPipeDiaCase3 = FinalFlowrateCase3 / rho_pT(FinaloutletPressureCase3, ToutPressureCase3)

                        BafflePipeVelCase1 = FinalFlowrateCase1 / rho_pT(BaffleOutletPressureCase1, ToutPressureCase1)      'For Pipe velocity.
                        BafflePipeVelCase2 = FinalFlowrateCase2 / rho_pT(BaffleOutletPressureCase2, ToutPressureCase2)
                        BafflePipeVelCase3 = FinalFlowrateCase3 / rho_pT(BaffleOutletPressureCase3, ToutPressureCase3)

                    Else
                        SoundVelocityCase1 = w_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        SoundVelocityCase2 = w_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        SoundVelocityCase3 = w_pT(FinaloutletPressureCase3, ToutPressureCase3)
                        BaffleSoundVelocityCase1 = w_pT(BaffleOutletPressureCase1, ToutPressureCase1)
                        BaffleSoundVelocityCase2 = w_pT(BaffleOutletPressureCase2, ToutPressureCase2)
                        BaffleSoundVelocityCase3 = w_pT(BaffleOutletPressureCase3, ToutPressureCase3)
                        FluidVelocityCase1 = 60   ' Pipe velocity should not be greater than 60 m/s as per research paper
                        FluidVelocityCase2 = 60
                        FluidVelocityCase3 = 60
                        Dim temp1 As Single = rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        Dim temp2 As Single = rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        Dim Temp3 As Single = rho_pT(FinaloutletPressureCase3, ToutPressureCase3)
                        FlowrateForPipeDiaCalcCase1 = FinalFlowrateCase1 / rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        FlowrateForPipeDiaCalcCase2 = FinalFlowrateCase2 / rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        FlowrateForPipeDiaCalcCase3 = FinalFlowrateCase3 / rho_pT(FinaloutletPressureCase3, ToutPressureCase3)

                        BafflePipeVelCase1 = FinalFlowrateCase1 / rho_pT(BaffleOutletPressureCase1, ToutPressureCase1)      'For Pipe velocity.
                        BafflePipeVelCase2 = FinalFlowrateCase2 / rho_pT(BaffleOutletPressureCase2, ToutPressureCase2)
                        BafflePipeVelCase3 = FinalFlowrateCase3 / rho_pT(BaffleOutletPressureCase3, ToutPressureCase3)
                    End If

                Else  'for gas  
                    SoundVelocityCase1 = (Math.Sqrt((Kcase1 * 8314 * (FinalInletTemperatureCase1 + 273.15)) / MolecularWeightCase1))
                    SoundVelocityCase2 = (Math.Sqrt((Kcase2 * 8314 * (FinalInletTemperatureCase2 + 273.15)) / MolecularWeightCase2))
                    SoundVelocityCase3 = (Math.Sqrt((Kcase3 * 8314 * (FinalInletTemperatureCase3 + 273.15)) / MolecularWeightCase3))
                    BaffleSoundVelocityCase1 = (Math.Sqrt((Kcase1 * 8314 * (FinalInletTemperatureCase1 + 273.15)) / MolecularWeightCase1))
                    BaffleSoundVelocityCase2 = (Math.Sqrt((Kcase2 * 8314 * (FinalInletTemperatureCase2 + 273.15)) / MolecularWeightCase2))
                    BaffleSoundVelocityCase3 = (Math.Sqrt((Kcase3 * 8314 * (FinalInletTemperatureCase3 + 273.15)) / MolecularWeightCase3))
                    FluidVelocityCase1 = 60  ' Pipe velocity should not be greater than 60 m/s as per research paper
                    FluidVelocityCase2 = 60
                    FluidVelocityCase3 = 60

                    'Calculate outlet Flowrate in m3/hr

                    FlowrateForPipeDiaCalcCase1 = (FinalInletPressureCase1 * (FinalFlowrateCase1 / FinalDensityCase1)) / FinalOutletPressureCase1
                    FlowrateForPipeDiaCalcCase2 = (FinalInletPressureCase2 * (FinalFlowrateCase2 / FinalDensityCase2)) / FinalOutletPressureCase2
                    FlowrateForPipeDiaCalcCase3 = (FinalInletPressureCase3 * (FinalFlowrateCase3 / FinalDensityCase3)) / FinaloutletPressureCase3


                    BafflePipeVelCase1 = (FinalInletPressureCase1 * (FinalFlowrateCase1 / FinalDensityCase1)) / BaffleOutletPressureCase1
                    BafflePipeVelCase2 = (FinalInletPressureCase2 * (FinalFlowrateCase2 / FinalDensityCase2)) / BaffleOutletPressureCase2
                    BafflePipeVelCase3 = (FinalInletPressureCase3 * (FinalFlowrateCase3 / FinalDensityCase3)) / BaffleOutletPressureCase3

                End If


                End If
            VelocityRuleFlag = False
        Catch ex As Exception
            MsgBox("CalculateFlowVelocity_forNoise:  " & ex.Message)
        End Try
        Return Nothing
    End Function


    Private Sub cmbAreaunits_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbAreaunits.KeyPress, cmbDensityUnits.KeyPress, cmbEndConnection.KeyPress, cmbFlowrate.KeyPress, cmbFluid.KeyPress, cmbFluidType.KeyPress, cmbHandwheel.KeyPress
        e.Handled = True
    End Sub


    Private Sub cmbAreaunits_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbAreaunits.SelectionChangeCommitted
        Try
            If Not cmbAreaunits.Items.Count = 0 Then 'taking care for startup of software
                If LoadingForm = True Then
                    'lblFinalSizeUnits.Text = CStr(cmbAreaunits.Text)
                    'lblFinalSizeUnits1.Text = CStr(cmbAreaunits.Text)
                    cmbAreaunits.Text = cmbAreaunits.SelectedItem
                    ' cmbInletPipeSize.Text = "--Select--"
                    'cmbPipeDia.Text = "--Select--"
                    Areaunitschange = True
                    Call CalculateFlowVelocity()
                    Call CalculatePipeDia()
                    Call PipeSelection("Schedule")
                    'Call ShowResults()
                    Areaunitschange = False
                    VelocityRuleFlag = False

                End If
            End If
        Catch ex As Exception
            MsgBox("cmbAreaunits_SelectedIndexChanged:  " & ex.Message)
        End Try
    End Sub


    Private Sub cmbAreaunits_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbAreaunits.SelectedIndexChanged
        'Try
        '    If Not cmbAreaunits.Items.Count = 0 Then 'taking care for startup of software
        '        If LoadingForm = True Then
        '            'lblFinalSizeUnits.Text = CStr(cmbAreaunits.Text)
        '            'lblFinalSizeUnits1.Text = CStr(cmbAreaunits.Text)
        '            cmbInletPipeSize.Text = "--Select--"
        '            cmbPipeDia.Text = "--Select--"
        '            Areaunitschange = True
        '            Call CalculateFlowVelocity()
        '            Call CalculatePipeDia()
        '            Areaunitschange = False
        '            VelocityRuleFlag = False

        '        End If
        '    End If
        'Catch ex As Exception
        '    MsgBox("cmbAreaunits_SelectedIndexChanged:  " & ex.Message)
        'End Try
    End Sub

    Public Function TsatFromPressure(ByVal InletPressure As Single) As Single
        'Tsat from InletPressure
        Dim beta, e, f, g, d As Single
        Try
            InletPressure = InletPressure / 10.0
            beta = InletPressure ^ 0.25
            e = beta ^ 2 - 17.073846940092 * beta + 14.91510861353
            f = 1167.0521452767 * beta ^ 2 + 12020.82470247 * beta - 4823.2657361591
            g = -724213.16703206 * beta ^ 2 - 3232555.0322333 * beta + 405113.40542057
            d = 2 * g / (-f - (f ^ 2 - 4 * e * g) ^ 0.5)
            TsatFromPressure = (650.17534844798 + d - ((650.17534844798 + d) ^ 2 - 4 * (-0.23855557567849 + 650.17534844798 * d)) ^ 0.5) / 2
        Catch ex As Exception
            MsgBox("TsatFromPressure: " & ex.Message)
            Return Nothing
        End Try
    End Function

    Public Function FindEnthalpyLiquid(ByVal Temperature As Single, ByVal Pressure As Single) As Single
        Dim i As Integer
        Dim tau, g_t As Single
        Try
            Pressure = Pressure / 10
            'Temperature = Temperature + 273.15

            Const R As Single = 0.461526 'kJ/(kg K)
            Dim I1 = New Single() {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 8, 8, 21, 23, 29, 30, 31, 32}
            Dim J1 = New Single() {-2, -1, 0, 1, 2, 3, 4, 5, -9, -7, -1, 0, 1, 3, -3, 0, 1, 3, 17, -4, 0, 6, -5, -2, 10, -8, -11, -6, -29, -31, -38, -39, -40, -41}
            Dim n1 = New Single() {0.14632971213167, -0.84548187169114, -3.756360367204, 3.3855169168385, -0.95791963387872, 0.15772038513228, -0.016616417199501, 0.00081214629983568, 0.00028319080123804, -0.00060706301565874, -0.018990068218419, -0.032529748770505, -0.021841717175414, -0.00005283835796993, -0.00047184321073267, -0.00030001780793026, 0.000047661393906987, -0.0000044141845330846, -0.00000000000000072694996297594, -0.000031679644845054, -0.0000028270797985312, -0.00000000085205128120103, -0.0000022425281908, -0.00000065171222895601, -0.00000000000014341729937924, -0.00000040516996860117, -0.0000000012734301741641, -0.00000000017424871230634, -6.8762131295531E-19, 1.4478307828521E-20, 2.6335781662795E-23, -1.1947622640071E-23, 1.8228094581404E-24, -9.3537087292458E-26}
            Pressure = Pressure / 16.53
            tau = 1386 / Temperature
            g_t = 0.0#
            For i = 0 To 33
                g_t = g_t + (n1(i) * (7.1 - Pressure) ^ I1(i) * J1(i) * (tau - 1.222) ^ (J1(i) - 1))
            Next i
            FindEnthalpyLiquid = R * Temperature * tau * g_t
        Catch ex As Exception
            MsgBox("FindEnthalpyLiquid:  " & ex.Message)
            Return Nothing
        End Try
    End Function

    Public Function FindEnthalphygas(ByVal TemperatureGas As Single, ByVal GasPressure As Single) As Single
        Dim i As Integer
        Dim tau, g0_tau, gr_tau As Double

        Const R As Double = 0.461526 'kJ/(kg K)

        Dim J0 = New Single() {0, 1, -5, -4, -3, -2, -1, 2, 3}
        Dim n0 = New Single() {-9.6927686500217, 10.086655968018, -0.005608791128302, 0.071452738081455, -0.40710498223928, 1.4240819171444, -4.383951131945, -0.28408632460772, 0.021268463753307}
        Dim Ir = New Single() {1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18, 20, 20, 20, 21, 22, 23, 24, 24, 24}
        Dim Jr = New Single() {0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3, 6, 35, 1, 2, 3, 7, 3, 16, 35, 0, 11, 25, 8, 36, 13, 4, 10, 14, 29, 50, 57, 20, 35, 48, 21, 53, 39, 26, 40, 58}
        Dim nr = New Single() {-0.0017731742473213, -0.017834862292358, -0.045996013696365, -0.057581259083432, -0.05032527872793, -0.000033032641670203, -0.00018948987516315, -0.0039392777243355, -0.043797295650573, -0.000026674547914087, 0.000000020481737692309, 0.00000043870667284435, -0.00003227767723857, -0.0015033924542148, -0.040668253562649, -0.00000000078847309559367, 0.000000012790717852285, 0.00000048225372718507, 0.0000022922076337661, -0.000000000016714766451061, -0.0021171472321355, -23.895741934104, -5.905956432427E-18, -0.0000012621808899101, -0.038946842435739, 0.000000000011256211360459, -8.2311340897998, 0.000000019809712802088, 1.0406965210174E-19, -0.00000000000010234747095929, -0.0000000010018179379511, -0.000000000080882908646985, 0.10693031879409, -0.33662250574171, 8.9185845355421E-25, 0.00000000000030629316876232, -0.0000042002467698208, -5.9056029685639E-26, 0.0000037826947613457, -0.0000000000000012768608934681, 7.3087610595061E-29, 5.5414715350778E-17, -0.0000009436970724121}
        Try
            GasPressure = GasPressure / 10
            'TemperatureGas = TemperatureGas + 273.15

            tau = 540 / TemperatureGas

            g0_tau = 0.0#
            For i = 0 To 8
                g0_tau = g0_tau + n0(i) * J0(i) * tau ^ (J0(i) - 1)
            Next i
            gr_tau = 0.0#
            For i = 0 To 42
                gr_tau = gr_tau + nr(i) * GasPressure ^ Ir(i) * Jr(i) * (tau - 0.5) ^ (Jr(i) - 1)
            Next i
            FindEnthalphygas = R * TemperatureGas * tau * (g0_tau + gr_tau)
        Catch ex As Exception
            MsgBox("FindEnthalphygas: " & ex.Message)
            Return Nothing
        End Try
    End Function

    Public Function FindFlashingFlowrate(ByVal OutletPressure As Single, ByVal InletPressure As Single, ByVal Temperature As Single, density As Single, ByVal InletFlowrate As Single, ByVal DrynessFraction As Single) As Single
        Dim SaturationOutletTemperature, hf1, hf2, hg, hfg As Single
        Dim VoulmetricDensity, MassFlowrate, SteamMassFlow, LiquidMassFlow, SpecificVolume As Single
        Dim MolArray = New Single() {3}
        'Dim i As Integer
        Try


            'Inlet temperature is considered to be Tsat to get Tf1
            If cmbFluid.SelectedIndex = 0 Then    'Only for water   
                hf1 = FindEnthalpyLiquid((Temperature + 273.15), InletPressure)
                SaturationOutletTemperature = TsatFromPressure(OutletPressure)
                hf2 = FindEnthalpyLiquid(SaturationOutletTemperature, OutletPressure)
                hg = FindEnthalphygas(SaturationOutletTemperature, OutletPressure)
                hfg = hg - hf2
                DrynessFraction = (hf1 - hf2) / hfg

                'Find Voumetric Density for steam from Table 
                'workbook = APP.Workbooks.Open(AppPath & "\Database\Water_Temp_Properties.xlsx")

                'worksheet = workbook.Worksheets("sheet1")

                'With worksheet
                '    LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                '    LastColumn = .Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column
                '    For i = 2 To LastRow
                '        If OutletPressure <= (CSng(.Cells(i, 2).Value)) Then
                '            Exit For
                '        End If
                '    Next
                '    SpecificVolume = (CSng(.Cells(i, 9).Value))

                'End With
                'APP.Workbooks.Close()

                SpecificVolume = vV_p(OutletPressure)

            End If

            'çalculate Output flowrate from dryness fraction
            VoulmetricDensity = density * 1000
            MassFlowrate = InletFlowrate * VoulmetricDensity

            '     SteamMassFlow = DrynessFraction * MassFlowrate          'Steam Mass Flowrate
            LiquidMassFlow = (1 - DrynessFraction) * MassFlowrate   'Liquid Mass Flowrate
            LiquidMassFlow = LiquidMassFlow / (density * 1000)

            If Not cmbFluid.SelectedIndex = 0 Then  'For Other Liquids 
                MolArray = {MolecularWeightCase1, MolecularWeightCase2, MolecularWeightCase3}
                density = (OutletPressure * 100000 * (MolArray.Max)) / (8314 * (Temperature + 273.15) * 1)
                SpecificVolume = 1 / density
            End If

            SteamMassFlow = (DrynessFraction * MassFlowrate) * SpecificVolume
            FindFlashingFlowrate = SteamMassFlow + LiquidMassFlow
        Catch ex As Exception
            MsgBox("FindFlashingFlowrate:  " & ex.Message)
            Return Nothing
        End Try
    End Function

    'Private Sub cmbVelocityRule_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbVelocityRule.SelectedIndexChanged
    '    Try
    '        If LoadingForm = True Then
    '            Call CalculateFlowVelocity()

    '            Call CalculatePipeDia()
    '            VelocityRuleFlag = False
    '        End If
    '    Catch ex As Exception
    '        MsgBox(ex.Source & "  " & ex.Message)
    '    End Try
    'End Sub

    Public Function CheckSelectedID(ByVal Sel_PipeSize As Single, ByVal sender As String) As Boolean
        Try
            Dim Schedule, PipeSize As Single
            Dim Sel_Schedule As String
            Dim i, j, count, x As Integer

            If LoadingForm = True And VelocityRuleFlag = False Then

                cmbCharacterstics.Enabled = False
                cmbKVseries.Enabled = False
                cmbKVOverride.Enabled = False
                cmbValveSizeOverride.Enabled = False
                cmbSelectedTrim.Enabled = False
                Sel_Schedule = cmbSchedule.Text

                If sender = "Pipedia" Then
                    With DT_PipeSchedule1 'PipeSheet1_worksheet
                        LastRow = .Rows.Count - 2  '.Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                        LastColumn = .Columns.Count - 1  '.Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column
                        For i = 0 To LastRow
                            If cmbAreaunits.SelectedIndex = 0 Then

                                If Sel_PipeSize = CSng(.Rows(i).Item(1)) Then      'CSng(.Cells(i, 2).Value) Then
                                    Exit For
                                End If
                            Else

                                If Sel_PipeSize = CSng(.Rows(i).Item(3)) Then 'CSng(.Cells(i, 4).Value) Then
                                    Exit For
                                End If
                            End If
                        Next

                        'Populate the Schedule for the selected pipe
                        If i <= LastRow Then

                            PipediaFlag = True
                            cmbSchedule.Items.Clear()

                            count = 0
                            For x = 4 To LastColumn

                                'If (CSng(.Cells(i, x).Value)) > 0 Then
                                If (CSng(.Rows(i).Item(x))) > 0 Then
                                    cmbSchedule.Items.Add(.Columns(x).ColumnName.ToString())
                                    ScheduleArray(count) = CSng(.Rows(i).Item(x)) '.Cells(i, x).Value)

                                    count = count + 1
                                End If
                            Next x


                            PipediaFlag = False
                            '  btnKVAccept.Enabled = False                 ' Do not allow to go calculate Final KV until Schedule is selected
                            ' btnValveSizeAccept.Enabled = False

                        End If
                        If Sel_Schedule <> "" Then
                            cmbSchedule.Text = Sel_Schedule
                            cmbSchedule.SelectedIndex = cmbSchedule.FindStringExact(Sel_Schedule)
                        Else
                            cmbSchedule.Text = "Sch 40"
                            cmbSchedule.SelectedIndex = cmbSchedule.FindStringExact("Sch 40")
                            If cmbSchedule.SelectedIndex < 0 Then
                                cmbSchedule.Text = "Sch STD"
                                cmbSchedule.SelectedIndex = cmbSchedule.FindStringExact("Sch STD")
                            End If
                            If cmbSchedule.SelectedIndex < 0 Then
                                cmbSchedule.Text = "Sch XS"
                                cmbSchedule.SelectedIndex = cmbSchedule.FindStringExact("Sch XS")
                            End If
                            Sel_Schedule = cmbSchedule.Text
                        End If

                        'Dim yemp = CSng(.Cells(i, 3).Value)
                        'PipeSize = CSng(.Cells(i, 3).Value) '  For calculations always take in inches
                        For j = 4 To LastColumn
                            ' If Sel_Schedule = .Rows(0).Item(j) Then   '.Cells(1, j).value Then
                            If Sel_Schedule = .Columns(j).ColumnName Then   '.Cells(1, j).value Then
                                Schedule = .Rows(i).Item(j) 'CSng(.Cells(i, j).value)
                                Exit For
                            End If
                        Next
                        PipeSize = If(IsDBNull(.Rows(i).Item(2)), 0, .Rows(i).Item(2))
                        '  PipeSize = CSng(.Rows(i).Item(2)) 'CSng(.Cells(i, 3).Value) '  For calculations always take in inches

                        ID = PipeSize - (2 * Schedule)


                        If Maxdia > ID Then 'selected OD and pipe schedule is more than or equal to suggested pipe ID. 
                            'MsgBox("Wrong OD or Schedule selected. ID less than Suggested ID")
                            txtErrors.Text = txtErrors.Text & vbNewLine & "Wrong OD or Schedule selected. ID less than Suggested ID"
                            CheckSelectedID = False
                        Else
                            txtErrors.Text = ""
                            CheckSelectedID = True
                        End If


                    End With
                End If


                PipediaFlag = False
            End If

        Catch ex As Exception
            MsgBox("CheckSelectedID:  " & ex.Message)
        End Try
    End Function

    Private Sub cmbPipeDia_Click(sender As Object, e As EventArgs) Handles cmbPipeDia.Click
        ShowPipeFlag = True
        cmbPipeDia.BackColor = Color.White
    End Sub
    Public Function PipeSelection(ByVal Funtiontype As String)
        Try
            If Not cmbPipeDia.Text = "--Select--" Then
                FinalPipeOutletSize = CSng(cmbPipeDia.Text)


                If Not lblSuggPipeSize.Text = "" Then

                    CheckSelectedID(CSng(cmbPipeDia.Text), Funtiontype)
                    Noise_OutletPipeDia = PipeOutletSize(cmbPipeDia.SelectedIndex)  'For Calculations 
                    FinalPipeOutletSize = PipeOutletSize(cmbPipeDia.SelectedIndex)  'For calculations
                    ' If ShowPipeFlag = True Then
                    lblFinalOutletPipe.Text = cmbPipeDia.Text
                    ShowPipeFlag = False
                    'End If
                    If Not cmbSchedule.SelectedIndex = -1 Then
                        Noise_Schedule = ScheduleArray(cmbSchedule.SelectedIndex) * 25.4 / 1000 ' Meters
                        ' cmbSchedule.SelectedIndex = 0
                    End If
                    ID = Noise_OutletPipeDia - (2 * ScheduleArray(cmbSchedule.SelectedIndex))
                    Noise_ID = ID * 25.4 / 1000 ' in meters
                    ' lblFinalPipeSize.Text = cmbPipeDia.Text
                    'Label18.Text = Noise_OutletPipeDia
                    'Label40.Text = Noise_Schedule
                    'Label41.Text = Noise_ID


                    cmbCharacterstics.Enabled = True
                    cmbKVseries.Enabled = True
                    cmbKVOverride.Enabled = True
                    cmbValveSizeOverride.Enabled = True
                    cmbSelectedTrim.Enabled = True
                    '       cmbSchedule.Text = "--Select--"

                End If
            End If

        Catch ex As Exception
            MsgBox("cmbPipeDia_SelectedIndexChanged:  " & ex.Message)
        End Try
    End Function

    'Private Sub cmbPipeDia_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbPipeDia.SelectedIndexChanged
    '    'Call PipeSelection()
    '    'If Not txtSuggestedValveSize.Text = "" Then
    '    '    Call FindFP()
    '    'End If
    'End Sub


    Private Sub cmbPipeDia_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbPipeDia.SelectionChangeCommitted
        cmbPipeDia.Text = cmbPipeDia.SelectedItem
        Call PipeSelection("Pipedia")

        If Not txtSuggestedValveSize.Text = "" Then
            Call ShowResults()

        End If
    End Sub

    Public Function VelocityRule()
        Try
            If Not lblSuggPipeSize.Text = "" Then
                CheckSelectedID(CSng(lblSuggPipeSize.Text), "Pipedia")
                '  FinalPipeOutletSize = CSng(lblSuggPipeSize.Text)
                Noise_OutletPipeDia = Temp_Noise_OutletPipeDia
                ' lblFinalOutletPipe.Text = FinalPipeOutletSize


                If Not cmbSchedule.SelectedIndex = -1 Then
                    Noise_Schedule = ScheduleArray(cmbSchedule.SelectedIndex) * 25.4 / 1000 ' Meters
                End If
                Noise_ID = ID * 25.4 / 1000 ' in meters

                cmbCharacterstics.Enabled = True
                cmbKVseries.Enabled = True
                cmbKVOverride.Enabled = True
                cmbValveSizeOverride.Enabled = True
                cmbSelectedTrim.Enabled = True
                'cmbSchedule.SelectedIndex = -1
                ' cmbSchedule.Text = "--Select--"

                'Label18.Text = Noise_OutletPipeDia
                'Label40.Text = Noise_Schedule
                'Label41.Text = Noise_ID
                ' PipediaFlag = True
            End If
        Catch ex As Exception
            MsgBox("btnAcceptVelocityRule_Click:  " & ex.Message)
        End Try
    End Function

    Private Sub btnAcceptVelocityRule_Click(sender As Object, e As EventArgs) Handles btnAcceptVelocityRule.Click
        Call VelocityRule()
    End Sub
    '''************************************************************************************************
    '''For all subtractions and divisions check Negative values 
    '''    '''************************************************************************************************
    '''    '''************************************************************************************************
    '''    '''************************************************************************************************
    '''    '''************************************************************************************************
    '''    '''************************************************************************************************
    '''    '''************************************************************************************************


    Private Sub cmbSchedule_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbSchedule.SelectionChangeCommitted
        Try

            If PipediaFlag = False Then
                cmbSchedule.Text = cmbSchedule.SelectedItem
                CheckSelectedID(CSng(cmbPipeDia.Text), "Schedule")
                If Not cmbSchedule.SelectedIndex = -1 Then
                    Noise_Schedule = ScheduleArray(cmbSchedule.SelectedIndex) * 25.4 / 1000 ' Meters
                End If

                Noise_ID = ID * 25.4 / 1000 ' in meters
                If Not cmbValveSizeOverride.Text = "--Select--" Then
                    Call ShowResults()
                End If
                cmbCharacterstics.Enabled = True
                cmbKVseries.Enabled = True
                cmbKVOverride.Enabled = True
                cmbValveSizeOverride.Enabled = True
                btnKVAccept.Enabled = True
                btnValveSizeAccept.Enabled = True
                cmbSelectedTrim.Enabled = True
            End If

        Catch ex As Exception
            MsgBox("cmbSchedule_SelectionChangeCommitted: " & ex.Message)
        End Try
    End Sub


    'Private Sub cmbSchedule_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbSchedule.SelectedIndexChanged
    '    'Try

    '    '    If PipediaFlag = False Then

    '    '        CheckSelectedID(CSng(cmbPipeDia.Text), "Schedule")
    '    '        If Not cmbSchedule.SelectedIndex = -1 Then
    '    '            Noise_Schedule = ScheduleArray(cmbSchedule.SelectedIndex) * 25.4 / 1000 ' Meters
    '    '        End If
    '    '        Noise_ID = ID * 25.4 / 1000 ' in meters

    '    '        cmbCharacterstics.Enabled = True
    '    '        cmbKVseries.Enabled = True
    '    '        cmbKVOverride.Enabled = True
    '    '        cmbValveSizeOverride.Enabled = True
    '    '        btnKVAccept.Enabled = True
    '    '        btnValveSizeAccept.Enabled = True

    '    '    End If

    '    'Catch ex As Exception
    '    '    MsgBox("cmbSchedule_SelectedIndexChanged: " & ex.Message)
    '    'End Try
    'End Sub


    '*****************************************************************************************************************************************************
    'Corrected KV calculations - K,V series
    '*****************************************************************************************************************************************************

    Public Function FindingKVMax() As Boolean

        Try
            '**********************************************************************************
            'Calculate Maximum KV from 3 Kv cases
            '**********************************************************************************
            KVarray = New Single() {FinalKVCase1, FinalKVCase2, FinalKVCase3}
            KVmax = KVarray.Max
            ' If Not FinalKVCase1 = 0 Then
            If Not KVmax = 0 Then
                If Not cmbCharacterstics.Text = "--Select--" Then
                    If cmbCharacterstics.SelectedIndex = 0 Or cmbCharacterstics.SelectedIndex = 2 Then
                        MaximumKV = KVmax / LinearKVruleFactors(cmbKVseries.SelectedIndex)
                    Else
                        MaximumKV = KVmax / EQPercentKVruleFactors(cmbKVseries.SelectedIndex)
                    End If
                    FindingKVMax = True
                Else
                    '20170621 MsgBox("Please select Valve charachtersics")
                    FindingKVMax = False
                End If
            End If
            '**********************************************************************************

        Catch ex As Exception
            MsgBox("FindingKVMax  " & ex.Message)
        End Try
    End Function

    Public Function FindMaxKVfromChart()

        Dim i, j As UInt16
        Dim tempObject, Seatobject, PrBl_Seatobject As Single()
        Dim TrimType_Sheet As String()
        '**-------------------------*-----------------------------------------------------------*-----------------------------------------------------------------
        'Now find nearest Kv from excel sheet RatingClass
        '**-------------------------*-----------------------------------------------------------*-----------------------------------------------------------------

        Try
            ' workbook = APP.Workbooks.Open(AppPath & "\Database\RatingClass.xlsx")
            tempObject = MaxKV150_FromSheet 'default
            Seatobject = SeatDia150_FromSheet 'default
            PrBl_Seatobject = PrBl_SeatDia150_FromSheet
            TrimType_Sheet = TW_TrimType150_FromSheet
            FinalOverrideRatings = SuggestedRating
            ' If dtb.Rows(SelectedTrimNo).Item(0) = 1 Then    '  PS1
            If cmbModel.SelectedIndex < 2 Or cmbModel.SelectedIndex = 4 Then
                If FinalOverrideRatings < 600 Then
                    tempObject = MaxKV150_FromSheet
                    Seatobject = SeatDia150_FromSheet
                    PrBl_Seatobject = PrBl_SeatDia150_FromSheet
                    TrimType_Sheet = TrimType150_Sheet
                    LastRow = DT_RatingClass_150300.Rows.Count - 2
                    'RatingClass_worksheet = RatingClass_workbook.Worksheets("Class150300")
                ElseIf FinalOverrideRatings >= 600 Then
                    tempObject = MaxKV600_FromSheet
                    Seatobject = SeatDia600_FromSheet
                    PrBl_Seatobject = PrBl_SeatDia600_FromSheet
                    TrimType_Sheet = TrimType600_Sheet
                    LastRow = DT_RatingClass_600900.Rows.Count - 2
                    'RatingClass_worksheet = RatingClass_workbook.Worksheets("Class600900")
                End If
            ElseIf cmbModel.SelectedIndex = 2 Or cmbModel.SelectedIndex = 3 Then

                tempObject = TW_MaxKV150_FromSheet
                Seatobject = TW_SeatDia150_FromSheet
                PrBl_Seatobject = TW_PrBl_SeatDia150_FromSheet
                TrimType_Sheet = TW_TrimType150_FromSheet
                LastRow = DT_3WAY_300.Rows.Count - 2
            ElseIf cmbModel.SelectedIndex = 5 Or cmbModel.SelectedIndex = 6 Then
                If FinalOverrideRatings < 600 Then
                    tempObject = BEPRDS_MaxKV150_FromSheet
                    Seatobject = BEPRDS_SeatDia150_FromSheet
                    PrBl_Seatobject = BEPRDS_PrBl_SeatDia150_FromSheet
                    TrimType_Sheet = BEPRDS_TrimType150_FromSheet
                    LastRow = DT_BEPRDSP1150300.Rows.Count - 2
                ElseIf FinalOverrideRatings >= 600 Then
                    tempObject = BEPRDS_MaxKV600_FromSheet
                    Seatobject = BEPRDS_SeatDia600_FromSheet
                    PrBl_Seatobject = BEPRDS_PrBl_SeatDia600_FromSheet
                    TrimType_Sheet = BEPRDS_TrimType600_FromSheet
                    LastRow = DT_BEPRDSP1600900.Rows.Count - 2
                End If
            End If


            ' With RatingClass_worksheet
            ' LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
            If NextMaxKVcount = 0 Then                               'For Finding 1st 
                For i = 1 To LastRow  'Start from second row of data 
                    '    If MaximumKV <= CSng(.Cells(i, 5).value) And CSng(.Cells(i, 5).value) > KVmax Then
                    '  If MaximumKV <= tempObject(i) And tempObject(i) > KVmax Then
                    MaxKVfromRatingClass = tempObject(i - 1)
                    SeatDia = Seatobject(i - 1) 'CSng(.Cells(i - 1, 3).value)  'This value is needed for Renoylds Number Calculations
                    PrBl_SeatDia = PrBl_Seatobject(i - 1)
                    Microtrim = TrimType_Sheet(i - 1)
                    NextMaxKVcount = NextMaxKVcount + 1   ' So next time start with the next of this selected i 
                    Exit For
                    '  End If
                Next
            Else
                For i = 1 To LastRow
                    If MaxKVfromRatingClass < tempObject(i) Then 'CSng(.Cells(i, 5).value) Then
                        AcceptedKv_Count = AcceptedKv_Count + 1
                        For j = 0 To 40
                            If MaxKVsfromChart(j) = tempObject(i) Then ' CSng(.Cells(i, 5).value) Then
                                Exit For
                            End If

                        Next
                        If j > 40 Then
                            MaxKVfromRatingClass = tempObject(i)  'CSng(.Cells(i, 5).value)
                            SeatDia = Seatobject(i) 'CSng(.Cells(i, 3).value)  'This value is needed for Renoylds Number Calculations
                            PrBl_SeatDia = PrBl_Seatobject(i)
                            Microtrim = TrimType_Sheet(i)
                            Exit For
                        End If
                    End If
                Next
                
            End If
            ' MsgBox(MaxKVfromRatingClass)
            '  End With
        Catch ex As Exception
            MsgBox("FindMaxKVfromChart " & ex.Message)
        Finally
            '  APP.Workbooks.Close()
        End Try

        Return Nothing
    End Function


    Public Function KVfromOldKVmax(ByVal Index As Byte)
        Dim count, direction As Byte
        Dim OldKv As String
        Try
            If Not cmbKVOverride.Text = "--Select--" And Not cmbKVOverride.Text = "" Then
                If cmbUnitsType.SelectedIndex = 1 Then        ' FPS
                    lblKVMaxValue.Text = cmbKVOverride.Text
                    FinalKVmax_ValveSize = CSng((cmbKVOverride.Text / 1.17))
                    OldKv = FinalKVmax_ValveSize
                Else
                    lblKVMaxValue.Text = cmbKVOverride.Text
                    FinalKVmax_ValveSize = CSng(cmbKVOverride.Text)
                    OldKv = FinalKVmax_ValveSize
                End If
            End If
            '**-------------------------*-----------------------------------------------------------*-----------------------------------------------------------------
            'Now this is a fresh KVmax from chart for which KV needs to be refined with FL values unit new KV is same for 2 iterations.
            '**-------------------------*-----------------------------------------------------------*-----------------------------------------------------------------
            'CorrectedKvCase1 = 0
            'CorrectedKvCase2 = 0
            'CorrectedKvCase3 = 0

            '""""""""""$@#$@$%@#$%^@^@$  --------- Later please check maximum interation interlock.

            count = 0
            count = count + 1

            CorrectedKvCase1 = FinalKVCase1
            CorrectedKvCase2 = FinalKVCase2
            CorrectedKvCase3 = FinalKVCase3

            If Not OldKv = "--Select--" And Not OldKv = "" Then
                MaxKVfromRatingClass = OldKv
                ''******************************************************************************************
                '   Now Find what percentage is the 3 Approximate KV calculated of the selected max KV from Table
                PercentageKVCase1 = (FinalKVCase1 / MaxKVfromRatingClass) * 100
                PercentageKVCase2 = (FinalKVCase2 / MaxKVfromRatingClass) * 100
                PercentageKVCase3 = (FinalKVCase3 / MaxKVfromRatingClass) * 100

                ''******************************************************************************************

                'Now check if suggested KV is less than Selected KV then go through loop, else Fl = 0.75
                If Not txtSuggestedKV.Text = "" Then


                    direction = cmbFlowDirection.SelectedIndex + 2 'to map with the sheet column

                    LastRow = 43
                    FLCase1 = 0
                    FLCase2 = 0
                    FLCase3 = 0
                    If PercentageKVCase1 <= 99 Then
                        For i = 3 To LastRow
                            If PercentageKVCase1 <= DT_FL.Rows(i).Item(0) Then

                                FLCase1 = DT_FL.Rows(i).Item(Index) ' 
                                If txtFlowrateCase1.Text = "" Then
                                    FLCase1 = 0
                                End If

                                Exit For
                            End If
                        Next
                    Else
                        FLCase1 = 0.92
                    End If
                    If PercentageKVCase2 <= 99 Then
                        For i = 3 To LastRow
                            If PercentageKVCase2 <= DT_FL.Rows(i).Item(0) Then
                                FLCase2 = DT_FL.Rows(i).Item(Index)
                                If txtFlowrateCase2.Text = "" Then
                                    FLCase2 = 0
                                End If
                                Exit For
                            End If
                        Next
                    Else
                        FLCase2 = 0.92
                    End If
                    If PercentageKVCase3 <= 99 Then
                        For i = 3 To LastRow
                            If PercentageKVCase3 <= DT_FL.Rows(i).Item(0) Then
                                FLCase3 = DT_FL.Rows(i).Item(Index)
                                If txtFlowrateCase3.Text = "" Then
                                    FLCase3 = 0
                                End If
                                Exit For
                            End If
                        Next
                    Else
                        FLCase3 = 0.92
                    End If


                    If cmbFluidType.Text = "Compressible" Then

                        Call Chokedflow((FLCase1 * FLCase1 * 0.85), (FLCase2 * FLCase2 * 0.85), (FLCase3 * FLCase3 * 0.85))
                    Else
                        Call Chokedflow((FLCase1 * FLCase1), (FLCase2 * FLCase2), (FLCase3 * FLCase3))

                    End If

                    Call CalculateKVCV()

                    FPKVCase1 = FinalKVCase1
                    FPKVCase2 = FinalKVCase2
                    FPKVCase3 = FinalKVCase3


                End If

                '  Loop
            End If
        Catch ex As Exception
            MsgBox("KVfromOldKVmax  " & ex.Message)
        Finally
            ' APP.Workbooks.Close()
        End Try

        Return Nothing
    End Function

    Public Function NEwKVfromKVmax(ByVal Index As Byte, ByVal MAXKv As Single)
        Dim count, direction As Byte
        Try
            '**-------------------------*-----------------------------------------------------------*-----------------------------------------------------------------
            'Now this is a fresh KVmax from chart for which KV needs to be refined with FL values unit new KV is same for 2 iterations.
            '**-------------------------*-----------------------------------------------------------*-----------------------------------------------------------------
            'CorrectedKvCase1 = 0
            'CorrectedKvCase2 = 0
            'CorrectedKvCase3 = 0

            '""""""""""$@#$@$%@#$%^@^@$  --------- Later please check maximum interation interlock.

            count = 0
            '     Do While Not Math.Round(FinalKVCase1, 4) = Math.Round(CorrectedKvCase1, 4) Or Not Math.Round(FinalKVCase2, 4) = Math.Round(CorrectedKvCase2, 4) Or Not Math.Round(FinalKVCase3, 4) = Math.Round(CorrectedKvCase3, 4)
            count = count + 1
            'MsgBox(" KVmax  = " & KVmax)
            'MsgBox(" FinalKV CASE1 :  " & FinalKVCase1 & " FinalKV CASE2 :  " & FinalKVCase2 & " FinalKV CASE3 :  " & FinalKVCase3 & " FLcase1 = " & FLCase1)

            'If count > 5 Then
            '    'MsgBox("KV refine by FL unsuccessful")
            '    '   txtErrors.Text = txtErrors.Text & vbNewLine & "Kv refine by FL unsuccessful"
            '    Exit Do
            'Else
            '  txtErrors.Text = ""
            '   End If
            'CorrectedKvCase1 = FinalKVCase1
            'CorrectedKvCase2 = FinalKVCase2
            'CorrectedKvCase3 = FinalKVCase3

            ''******************************************************************************************
            '   Now Find what percentage is the 3 Approximate KV calculated of the selected max KV from Table
            PercentageKVCase1 = (FinalKVCase1 / MAXKv) * 100
            PercentageKVCase2 = (FinalKVCase2 / MAXKv) * 100
            PercentageKVCase3 = (FinalKVCase3 / MAXKv) * 100

            ''******************************************************************************************
            'Now Find the Fl form chart for each PercentageKV case

            direction = cmbFlowDirection.SelectedIndex + 2 'to map with the sheet column


            LastRow = 43
            FLCase1 = 0
            FLCase2 = 0
            FLCase3 = 0
            If PercentageKVCase1 <= 99 Then
                For i = 1 To LastRow
                    'If PercentageKVCase1 <= CSng(.Cells(i, 1).Value) Then
                    If PercentageKVCase1 <= DT_FL.Rows(i).Item(0) Then

                        FLCase1 = DT_FL.Rows(i).Item(Index) 'FL_Column2array(i - 1) 
                        If txtFlowrateCase1.Text = "" Then
                            FLCase1 = 0
                        End If

                        Exit For
                    End If
                Next
            Else
                FLCase1 = 0.9
            End If
            If PercentageKVCase2 <= 99 Then
                For i = 1 To LastRow
                    If PercentageKVCase2 <= DT_FL.Rows(i).Item(0) Then 'CSng(.Cells(i, 1).Value) Then
                        FLCase2 = DT_FL.Rows(i).Item(Index) 'FL_Column2array(i - 1)
                        If txtFlowrateCase2.Text = "" Then
                            FLCase2 = 0
                        End If
                        Exit For
                    End If
                Next
            Else
                FLCase2 = 0.9
            End If
            If PercentageKVCase3 <= 99 Then
                For i = 1 To LastRow
                    If PercentageKVCase3 <= DT_FL.Rows(i).Item(0) Then
                        FLCase3 = DT_FL.Rows(i).Item(Index)
                        If txtFlowrateCase3.Text = "" Then
                            FLCase3 = 0
                        End If
                        Exit For
                    End If
                Next
            Else
                FLCase3 = 0.9
            End If

            DT_FLtable.Rows(0)(Index - 5) = FLCase1
            DT_FLtable.Rows(1)(Index - 5) = FLCase2
            DT_FLtable.Rows(2)(Index - 5) = FLCase3


            'End With

            If cmbFluidType.Text = "Compressible" Then
                Call Chokedflow((FLCase1 * FLCase1 * 0.85), (FLCase2 * FLCase2 * 0.85), (FLCase3 * FLCase3 * 0.85))
            Else
                Call Chokedflow((FLCase1 * FLCase1), (FLCase2 * FLCase2), (FLCase3 * FLCase3))

            End If
            Call CalculateKVCV()
            '   Loop

        Catch ex As Exception
            MsgBox("NEwKVfromKVmax  " & ex.Message)
        Finally
            ' APP.Workbooks.Close()
        End Try

        Return Nothing
    End Function

    Public Function CalculateKVfromRenoyldsNo()

        '  Try
        '**********************************************************************************
        'Calculate Renoylds No 
        '**********************************************************************************
        'Now Find the Fl form chart for each PercentageKV case
        '' We are only using FTO column 
        Dim FRvaluesfromchart As Single
        Dim direction As Single
        'If cmbFlowDirection.Text = "FTO" Then
        direction = 5       'by default FTO
        'Else
        '    direction = 4
        'End If

        '20170623 workbook = APP.Workbooks.Open(AppPath & "\Database\FL.xlsx")
        'worksheet = workbook.Worksheets("SHEET1")
        'With FL_worksheet
        'LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
        LastRow = DT_FL.Rows.Count - 2
        FDCase1 = 0
        FDCase2 = 0
        FDCase3 = 0
        For i = 1 To LastRow
            If PercentageKVCase1 <= FL_Column1array(i) Then 'CSng(.Cells(i, 1).Value) Then
                FDCase1 = FL_Column5array(i - 1) '(.Cells(i - 1, direction).Value)
                Exit For
            Else
                FDCase1 = 0.411406321
            End If
        Next
        For i = 1 To LastRow
            If PercentageKVCase2 <= FL_Column1array(i) Then 'CSng(.Cells(i, 1).Value) Then
                FDCase2 = FL_Column5array(i - 1) '(.Cells(i - 1, direction).Value)
                Exit For
            Else
                FDCase2 = 0.411406321
            End If
        Next
        For i = 1 To LastRow
            If PercentageKVCase3 <= FL_Column1array(i) Then 'CSng(.Cells(i, 1).Value) Then
                FDCase3 = FL_Column5array(i - 1) 'CSng(.Cells(i - 1, direction).Value)
                Exit For
            Else
                FDCase3 = 0.411406321
            End If
        Next

        'End With
        '  APP.ActiveWorkbook.Close()
        KVforRenoyldNoCase1 = FinalKVCase1
        KVforRenoyldNoCase2 = FinalKVCase2
        KVforRenoyldNoCase3 = FinalKVCase3


        N4 = 7.07 * 10 ^ -2
        N2 = 1.6 * 10 ^ -3

        N1 = 1

        RenoyldNoCase1 = (N4 * FDCase1 * FinalFlowrateCase1 / (FinalViscosityCase1 * Math.Sqrt(KVforRenoyldNoCase1 * FLCase1))) * ((((FLCase1 ^ 2 * KVforRenoyldNoCase1 ^ 2) / (N2 * SeatDia ^ 4)) + 1) ^ 0.25)
        RenoyldNoCase2 = (N4 * FDCase2 * FinalFlowrateCase2 / (FinalViscosityCase2 * Math.Sqrt(KVforRenoyldNoCase2 * FLCase2))) * ((((FLCase2 ^ 2 * KVforRenoyldNoCase2 ^ 2) / (N2 * SeatDia ^ 4)) + 1) ^ 0.25)
        RenoyldNoCase3 = (N4 * FDCase3 * FinalFlowrateCase3 / (FinalViscosityCase3 * Math.Sqrt(KVforRenoyldNoCase3 * FLCase3))) * ((((FLCase3 ^ 2 * KVforRenoyldNoCase3 ^ 2) / (N2 * SeatDia ^ 4)) + 1) ^ 0.25)

        If cmbFluidType.Text = "Compressible" Then
            RenoyldNoCase1 = RenoyldNoCase1 / FinalDensityCase1
            RenoyldNoCase2 = RenoyldNoCase2 / FinalDensityCase2
            RenoyldNoCase3 = RenoyldNoCase3 / FinalDensityCase3
            N1 = 78.39
        End If

        'IF REYNOLDS NUMBER IS GREATER THAN OR EQUAL TO 10,000 (Turbulent) THEN DO NOT CHAGE THE KV VALUE OTHERWISE USE THE FORMULA BELOW AND TAKE THAT KV VALUE
        TurbulentCase1 = True
        TurbulentCase2 = True
        TurbulentCase3 = True
        '20170623 workbook = APP.Workbooks.Open(AppPath & "\Database\FR.xlsx")
        'worksheet = workbook.Worksheets("SHEET1")
        '  With FR_worksheet
        '  LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
        LastRow = DT_FR.Rows.Count - 2
        If RenoyldNoCase1 < 10000 Then
            If Not cmbFluid.SelectedIndex = 0 And chkViscosity.Checked = False Then
                FinalKVCase1 = FinalKVCase1         'no change as viscosity not given so flow is turbulent. s
            Else
                TurbulentCase1 = False
                For i = 1 To LastRow
                    FRvaluesfromchart = FR_Column1array(i) 'CSng(.Cells(i, 1).Value)
                    If RenoyldNoCase1 < FR_Column1array(i) Then 'CSng(.Cells(i, 1).Value) Then
                        FRCase1 = FR_Column2array(i - 1) ' CSng(.Cells(i - 1, 2).Value)
                        Exit For
                    End If
                Next
                'Please check density or specific gravity
                If cmbFluidType.Text = "InCompressible" Then
                    FinalKVCase1 = (FinalFlowrateCase1 / (N1 * FRCase1)) * Math.Sqrt(FinalDensityCase1 / FinalPressureDropCase1)
                Else
                    FinalKVCase1 = (FinalFlowrateCase1 / (N1 * FRCase1)) * Math.Sqrt(((FinalInletTemperatureCase1 + 273.15) / (FinalPressureDropCase1 * MolecularWeightCase1 * (FinalInletPressureCase1 + FinalOutletPressureCase1))))
                End If

            End If

        End If

        If RenoyldNoCase2 < 10000 Then
            If Not cmbFluid.SelectedIndex = 0 And chkViscosity.Checked = False Then
                FinalKVCase2 = FinalKVCase2         'no change as viscosity not given so flow is turbulent. s
            Else

                TurbulentCase2 = False
                For i = 1 To LastRow
                    FRvaluesfromchart = FR_Column1array(i) ' CSng(.Cells(i, 1).Value)
                    If RenoyldNoCase2 < FR_Column1array(i) Then ' CSng(.Cells(i, 1).Value) Then
                        FRCase2 = FR_Column2array(i - 1) ' CSng(.Cells(i - 1, 2).Value)
                        Exit For
                    End If
                Next
                'Please check density or specific gravity
                If cmbFluidType.Text = "InCompressible" Then
                    FinalKVCase2 = (FinalFlowrateCase2 / (N1 * FRCase2)) * Math.Sqrt(FinalDensityCase2 / FinalPressureDropCase2)
                Else
                    FinalKVCase2 = (FinalFlowrateCase2 / (N1 * FRCase2)) * Math.Sqrt(((FinalInletTemperatureCase2 + 273.15) / (FinalPressureDropCase2 * MolecularWeightCase2 * (FinalInletPressureCase2 + FinalOutletPressureCase2))))
                End If
            End If

        End If


        If RenoyldNoCase3 < 10000 Then
            If Not cmbFluid.SelectedIndex = 0 And chkViscosity.Checked = False Then
                FinalKVCase3 = FinalKVCase3         'no change as viscosity not given so flow is turbulent. s
            Else
                TurbulentCase3 = False
                For i = 1 To LastRow
                    FRvaluesfromchart = FR_Column1array(i) '
                    If RenoyldNoCase3 < FR_Column1array(i) Then 'CSng(.Cells(i, 1).Value) Then
                        FRCase3 = FR_Column2array(i - 1) ' CSng(.Cells(i - 1, 2).Value)
                        Exit For
                    End If
                Next
                'Please check density or specific gravity
                If cmbFluidType.Text = "InCompressible" Then
                    FinalKVCase3 = (FinalFlowrateCase3 / (N1 * FRCase3)) * Math.Sqrt(FinalDensityCase3 / FinalPressureDropCase3)
                Else
                    FinalKVCase3 = (FinalFlowrateCase3 / (N1 * FRCase3)) * Math.Sqrt(((FinalInletTemperatureCase3 + 273.15) / (FinalPressureDropCase3 * MolecularWeightCase3 * (FinalInletPressureCase3 + FinaloutletPressureCase3))))
                End If

            End If

        End If

        MaxKVfromRatingClass_old = 0 ' search next greater Kvmax from Kv chart
        NextMaxKVcount = NextMaxKVcount + 1
        '  End With

        'Finally we get 3 KVs. those with turbulent flow will not change, with laminar flow have corrected KV.
        'Now check with KV rule.

        ' Catch ex As Exception
        '  MsgBox(" CalculateKVfromRenoyldsNo   " & ex.Message)
        'Finally
        '    APP.Workbooks.Close()
        ' End Try
        Return Nothing
    End Function

    ''' <summary>
    ''' TrimType 1: PS1  2: PS3
    ''' </summary>
    ''' <param name="SuggestedKVMAX"></param>
    ''' <param name="TrimType"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function FindValveSize(ByVal SuggestedKVMAX As Single, ByVal TrimType As Byte)
        Dim k, Sheet2_i, Sheet2_j As Integer
        Dim tempkvmax, tempvalvesize, temp_Valve_ID As Single
        Dim DiameterCase1, DiameterCase2, DiameterCase3, MaxValvediameter As Single
        ' Dim Sheet2_workbook As excel.Workbook
        '  Dim Sheet2_worksheet As excel.Worksheet
        Dim Sheet2_LastColumn As Long
        Dim Sheet2_LastRow As Long
        Dim KVobject(), Valveobject(), SeatDiaObject(), PrblSeatDiaObj() As Single
        Dim ReplaceString As String
        '*****************************************************************************************************************************************************
        'Corrected KV calculations - Select Pipe Size from Shorlisted Corrected Kvs.
        '*****************************************************************************************************************************************************
        Try
            If cmbVelocityRule.Text = "-Select--" Then
                cmbVelocityRule.SelectedIndex = 0       'take default value as 1st value if not selected
            End If
            If cmbFluidType.Text = "InCompressible" Then
                'If cmbUnitsType.SelectedIndex = 1 Then      'FPS system
                '    Select Case cmbVelocityRule.SelectedIndex
                '        Case 0
                '            FinalVelocityRule = 20 * 0.3048
                '        Case 1
                '            FinalVelocityRule = 25 * 0.3048
                '    End Select
                'Else
                Select Case cmbVelocityRule.SelectedIndex
                    Case 0
                        FinalVelocityRule = 6
                    Case 1
                        FinalVelocityRule = 8
                End Select
                'End If

            Else
                Select Case cmbVelocityRule.SelectedIndex
                    Case 0
                        FinalVelocityRule = 0.3
                    Case 1
                        FinalVelocityRule = 0.4
                End Select
            End If



            If cmbFluidType.Text = "InCompressible" Then
                If FlashingCase1 = True Then
                    FluidVelocityCase1 = 60             'max allowed velocity of mixture of steam and water if flashing
                Else
                    FluidVelocityCase1 = FinalVelocityRule
                End If
                If FlashingCase2 = True Then
                    FluidVelocityCase2 = 60
                Else
                    FluidVelocityCase2 = FinalVelocityRule
                End If
                If FlashingCase3 = True Then
                    FluidVelocityCase3 = 60
                Else
                    FluidVelocityCase3 = FinalVelocityRule
                End If
                If FlashingCase1 = True Or FlashingCase2 = True Or FlashingCase3 = True Then
                    chkNoiseAttenuation.Visible = False
                    lblFlashingCaseNoAttenuation.Visible = True
                    lblFlashingCaseNoAttenuation.Text = "No Noise Attenuation for Flashing Case"
                    chkBaffleCase1.Visible = False
                    chkBaffleCase1.Checked = False
                    txtBaffleKVCase1.Visible = False
                    chkBaffleCase2.Visible = False
                    chkBaffleCase2.Checked = False
                    txtBaffleKVCase3.Visible = False
                    chkBaffleCase3.Visible = False
                    chkBaffleCase3.Checked = False
                    txtBaffleKVCase3.Visible = False
                Else
                    chkNoiseAttenuation.Visible = True
                    lblFlashingCaseNoAttenuation.Visible = False
                    lblFlashingCaseNoAttenuation.Text = ""
                    chkBaffleCase1.Visible = True
                    chkBaffleCase2.Visible = True
                    chkBaffleCase3.Visible = True

                End If
            Else
                FluidVelocityCase1 = SoundVelocityCase1 * FinalVelocityRule
                FluidVelocityCase2 = SoundVelocityCase2 * FinalVelocityRule
                FluidVelocityCase3 = SoundVelocityCase3 * FinalVelocityRule
            End If

            '  workbook = APP.Workbooks.Open(AppPath & "\Database\RatingClass.xlsx")
            ' RatingClass_worksheet = RatingClass_workbook.Worksheets("Class150300")
            FinalOverrideRatings = SuggestedRating                  ' 2500 and above not avaialble in P1 and P3 trim 
            KVobject = MaxKV150_FromSheet
            Valveobject = Valve150_FromSheet
            SeatDiaObject = SeatDia150_FromSheet
            PrblSeatDiaObj = PrBl_SeatDia150_FromSheet
            If cmbModel.SelectedIndex < 2 Then
                If TrimType = 1 Then    '  PS1
                    If FinalOverrideRatings < 600 Then
                        KVobject = MaxKV150_FromSheet
                        Valveobject = Valve150_FromSheet
                        SeatDiaObject = SeatDia150_FromSheet
                        PrblSeatDiaObj = PrBl_SeatDia150_FromSheet
                        LastRow = DT_RatingClass_150300.Rows.Count - 2
                        ' RatingClass_worksheet = RatingClass_workbook.Worksheets("Class150300")
                    ElseIf FinalOverrideRatings >= 600 Then
                        KVobject = MaxKV600_FromSheet
                        Valveobject = Valve600_FromSheet
                        SeatDiaObject = SeatDia600_FromSheet
                        PrblSeatDiaObj = PrBl_SeatDia600_FromSheet
                        LastRow = DT_RatingClass_600900.Rows.Count - 2
                        '' RatingClass_worksheet = RatingClass_workbook.Worksheets("Class600900")
                    End If
                Else                    ' PS3
                    If FinalOverrideRatings < 600 Then
                        KVobject = PS3_MaxKV150_FromSheet
                        Valveobject = PS3_Valve150_FromSheet
                        SeatDiaObject = PS3_SeatDia150_FromSheet
                        LastRow = DT_PS3150300KV.Rows.Count - 2
                        'RatingClass_worksheet = RatingClass_workbook.Worksheets("Class150300")
                    ElseIf FinalOverrideRatings >= 600 Then
                        KVobject = PS3_MaxKV600_FromSheet
                        Valveobject = PS3_Valve600_FromSheet
                        SeatDiaObject = PS3_SeatDia600_FromSheet
                        LastRow = DT_PS3600900KV.Rows.Count - 2
                        'RatingClass_worksheet = RatingClass_workbook.Worksheets("Class600900")
                    End If
                End If
            ElseIf cmbModel.SelectedIndex = 2 Or cmbModel.SelectedIndex = 3 Then
                KVobject = TW_MaxKV150_FromSheet
                Valveobject = TW_Valve150_FromSheet
                SeatDiaObject = TW_SeatDia150_FromSheet
                PrblSeatDiaObj = TW_PrBl_SeatDia150_FromSheet
                LastRow = DT_3WAY_300.Rows.Count - 2
            ElseIf cmbModel.SelectedIndex = 5 Then
                If FinalOverrideRatings < 600 Then
                    KVobject = BEPRDS_MaxKV150_FromSheet
                    SeatDiaObject = BEPRDS_SeatDia150_FromSheet
                    PrblSeatDiaObj = BEPRDS_PrBl_SeatDia150_FromSheet
                    LastRow = DT_BEPRDSP1150300.Rows.Count - 2
                ElseIf FinalOverrideRatings >= 600 Then
                    KVobject = BEPRDS_MaxKV600_FromSheet
                    SeatDiaObject = BEPRDS_SeatDia600_FromSheet
                    PrblSeatDiaObj = BEPRDS_PrBl_SeatDia600_FromSheet
                    LastRow = DT_BEPRDSP1600900.Rows.Count - 2
                End If
            End If
            'Sheet2_LastRow = PipeSheet2_worksheet.Cells(PipeSheet2_worksheet.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
            'Sheet2_LastColumn = PipeSheet2_worksheet.Cells(1, PipeSheet2_worksheet.Columns.Count).End(excel.XlDirection.xlToLeft).Column
            Sheet2_LastRow = DT_PipeSchedule2.Rows.Count - 2
            Sheet2_LastColumn = DT_PipeSchedule2.Columns.Count - 1


            ''In this loop below the selected Valve size will be in inces
            '  With RatingClass_worksheet

            'LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
            Array.Clear(ValveSizeArray, 0, ValveSizeArray.Length)
            Array.Clear(FinalValveSizeforNoise, 0, FinalValveSizeforNoise.Length)
            Array.Clear(SeatDia_array, 0, SeatDia_array.Length)
            Array.Clear(PrBl_SeatDia_array, 0, SeatDia_array.Length)
            'Array.Clear(tempCode_ValveSize, 0, tempCode_ValveSize.Length)

            cmbValveSizeOverride.Items.Clear()
            k = 0
            For j = 0 To LastRow  'Start from second row of data 
                tempkvmax = KVobject(j) 'CSng(.Cells(j, 5).value)
                If SuggestedKVMAX = KVobject(j) Then 'CSng(.Cells(j, 5).value) Then
                    tempvalvesize = Valveobject(j) 'CSng(.Cells(j, 1).value)

                    '******* Now check whether Valve Outlet Velocity is less than Selected Velocity rule then only valve size is ok
                    DiameterCase1 = Math.Sqrt(((FlowrateForPipeDiaCalcCase1 / 3600) / FluidVelocityCase1) * 4 / Math.PI)
                    DiameterCase2 = Math.Sqrt(((FlowrateForPipeDiaCalcCase2 / 3600) / FluidVelocityCase2) * 4 / Math.PI)
                    DiameterCase3 = Math.Sqrt(((FlowrateForPipeDiaCalcCase3 / 3600) / FluidVelocityCase3) * 4 / Math.PI)
                    Dim Diaarray = New Single() {DiameterCase1, DiameterCase2, DiameterCase3}
                    MaxValvediameter = Diaarray.Max

                    MaxValvediameter = MaxValvediameter * 39.370007 'Meters to  inches 

                    With DT_PipeSchedule2

                        For Sheet2_i = 0 To Sheet2_LastRow

                            If tempvalvesize = .Rows(Sheet2_i).Item(1) Then 'CSng(.Cells(Sheet2_i, 2).value)
                                For Sheet2_j = 2 To Sheet2_LastColumn
                                    If SuggestedRating = CInt(.Columns(Sheet2_j).ColumnName.ToString()) Then '  CSng(.Cells(1, Sheet2_j).value) Then
                                        temp_Valve_ID = .Rows(Sheet2_i).Item(Sheet2_j)  'CSng(.Cells(Sheet2_i, Sheet2_j).value)
                                        temp_Valve_ID = temp_Valve_ID / 25.4
                                        Exit For
                                    End If
                                Next
                                Exit For
                            End If
                        Next
                    End With

                    ' If tempvalvesize >= ValveSize_MACNO And cmbFluidType.Text = "Compressible" Then
                    '  If temp_Valve_ID >= MaxValvediameter Then
                    ValveSizeFound = True
                    ValveSizeArray(k) = tempvalvesize
                    FinalValveSizeforNoise(k) = tempvalvesize

                    '20201030 Calculate Seat Diameter only if No Kv is selected. 

                    SeatDia_array(k) = SeatDiaObject(j)
                    If Not cmbSelectedTrim.SelectedIndex = 1 Then ' Not PS3
                        PrBl_SeatDia_array(k) = PrblSeatDiaObj(j)
                    Else
                        PrBl_SeatDia_array(k) = 0
                    End If

                    k = k + 1

                    ReplaceString = CStr(tempvalvesize)
                    ReplaceString = ReplaceString.Replace(vbLf, "")
                    cmbValveSizeOverride.Items.Add(ReplaceString)
                    'End If

                End If
            Next

            'In the module below the conversion from inches to mm for above valve sizeif Units selected is in mm
            If cmbAreaunits.SelectedIndex = 0 Then  'If Valve Size units in mm 
                With DT_PipeSchedule1 'PipeSheet1_worksheet
                    LastRow = .Rows.Count - 2   ' .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                    cmbValveSizeOverride.Items.Clear()
                    For j = 0 To ValveSizeArray.Length - 1
                        For i = 0 To LastRow
                            If ValveSizeArray(j) = .Rows(i).Item(3) Then 'CSng(.Cells(i, 4).value) Then
                                tempvalvesize = .Rows(i).Item(1)     ' CSng(.Cells(i, 2).value)
                                ValveSizeArray(j) = tempvalvesize
                                ReplaceString = CStr(tempvalvesize)
                                ReplaceString = ReplaceString.Replace(vbLf, "")
                                cmbValveSizeOverride.Items.Add(ReplaceString)
                                Exit For
                            End If
                        Next
                    Next
                End With
            End If

        Catch ex As Exception
            MsgBox("FindValveSize " & ex.Message)
        Finally
            ' APP.Workbooks.Close()
        End Try
        Return Nothing
    End Function
    Public Function CalculateKvforPS1() As Boolean
        Dim LastMaximumKV, SuggestedKvfromChart As Single
        Dim KvOverrideText, ValveSizeOverrideText As String
        Dim SuggkVFound As Boolean = False

        SuggestedKvfromChart = 0

        Try
            AcceptedKv_Count = 0

            ReDim MaxKVsfromChart(40)
            ReDim MaxCvsfromChart(40)
            ReDim FinalShowKVCase1(40)
            ReDim FinalShowKVCase2(40)
            ReDim FinalShowKVCase3(40)
            ReDim MicroTrim_Array(40)
            ReDim SeatDia_array(40)
            ReDim PrBl_SeatDia_array(40)

            Array.Clear(MaxKVsfromChart, 0, MaxKVsfromChart.Length)
            Array.Clear(MaxCvsfromChart, 0, MaxCvsfromChart.Length)
            Array.Clear(FinalShowKVCase1, 0, FinalShowKVCase1.Length)
            Array.Clear(FinalShowKVCase2, 0, FinalShowKVCase2.Length)
            Array.Clear(FinalShowKVCase3, 0, FinalShowKVCase3.Length)
            Array.Clear(MicroTrim_Array, 0, MicroTrim_Array.Length)
            If cmbSelectedTrim.SelectedIndex < 2 Then
                Array.Clear(SeatDia_array, 0, SeatDia_array.Length)
                Array.Clear(PrBl_SeatDia_array, 0, PrBl_SeatDia_array.Length)
            End If

            If LoadingProjectFile = True Then                   ' Changes 22102020
                If cmbFluidType.Text = "Compressible" Then

                    Call Chokedflow((FLCase1 * FLCase1 * 0.85), (FLCase2 * FLCase2 * 0.85), (FLCase3 * FLCase3 * 0.85))
                Else
                    Call Chokedflow((FLCase1 * FLCase1), (FLCase2 * FLCase2), (FLCase3 * FLCase3))

                End If
            End If

            Call CalculateKVCV()
            If FinalKVCase1 = 0 And FinalKVCase2 = 0 And FinalKVCase3 = 0 Then 'Added if during Re-calculations the KV values are 0 then further steps do not take place
                Call AllCalculations()                                          'So calling AllCalulcations again
            End If
            CalculateKvforPS1 = False
            NextMaxKVcount = 0
            FinalKVCount = 0
            If FindingKVMax() Then
                Do While FinalKVCount < 40
                    FindMaxKVfromChart()
                    NEwKVfromKVmax(5, MaxKVfromRatingClass)
                    ' FindingKVMax()
                    '  If MaximumKV < MaxKVfromRatingClass Then
                    If LastMaximumKV = MaxKVfromRatingClass Then
                        Exit Do
                    End If
                    CalculateKVfromRenoyldsNo()
                    FindingKVMax()
                    If MaximumKV < MaxKVfromRatingClass And SuggkVFound = False Then        'This means KV is acceptable and can be added to valid 5 KV list.
                        If cmbUnitsType.SelectedIndex = 1 Then
                            SuggestedKvfromChart = MaxKVfromRatingClass * 1.17
                        Else
                            SuggestedKvfromChart = MaxKVfromRatingClass
                        End If

                        SuggkVFound = True
                    End If
                    'Add the KV into final KV list of 5
                    ValveSizeOverrideText = cmbValveSizeOverride.Text    'this is done so that combobox text is not overriden 
                    'If FinalKVCount = 0 Then                '' Only for 1st minimum Kv
                    '    ValveSizeFound = False
                    '    Call FindValveSize(MaxKVfromRatingClass, 1)
                    'End If

                    '  If ValveSizeFound = True Then                       'Now the Kv is acceptable
                    CalculateKvforPS1 = True
                    LastMaximumKV = MaxKVfromRatingClass            'This is done so that Kv list does not have duplicate Kvs
                    MaxKVsfromChart(FinalKVCount) = MaxKVfromRatingClass
                    If cmbUnitsType.SelectedIndex = 1 Then
                        MaxCvsfromChart(FinalKVCount) = MaxKVfromRatingClass * 1.17
                    End If
                    FinalShowKVCase1(FinalKVCount) = FinalKVCase1
                    FinalShowKVCase2(FinalKVCount) = FinalKVCase2
                    FinalShowKVCase3(FinalKVCount) = FinalKVCase3
                    FlowTypeCase1(FinalKVCount) = TurbulentCase1
                    FlowTypeCase2(FinalKVCount) = TurbulentCase2
                    FlowTypeCase3(FinalKVCount) = TurbulentCase3
                    FLCase1_array(FinalKVCount) = FLCase1
                    FLCase2_array(FinalKVCount) = FLCase2
                    FLCase3_array(FinalKVCount) = FLCase3
                    FDCase1_array(FinalKVCount) = FDCase1
                    FDCase2_array(FinalKVCount) = FDCase2
                    FDCase3_array(FinalKVCount) = FDCase3
                    MicroTrim_Array(FinalKVCount) = Microtrim

                    ''If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                    '20201030 If cmbSelectedTrim.SelectedIndex < 2 Then
                    '    SeatDia_array(FinalKVCount) = SeatDia
                    '    PrBl_SeatDia_array(FinalKVCount) = PrBl_SeatDia
                    'End If
                    '  Else
                    'SeatDia_array(FinalKVCount) = SeatDia * 25.4
                    'PrBl_SeatDia_array(FinalKVCount) = PrBl_SeatDia * 25.4
                    'End If

                    FinalKVCount = FinalKVCount + 1
                    '  MsgBox("Stored KV" & MaxKVfromRatingClass & " " & FinalKVCase1 & "   2." & FinalKVCase2 & " 3." & FinalKVCase3)
                    'Else
                    '    NextMaxKVcount = NextMaxKVcount + 1
                    'End If
                    'Else
                    '    NextMaxKVcount = NextMaxKVcount + 1
                    'End If
                    'Else
                    '    NextMaxKVcount = NextMaxKVcount + 1
                    'End If
                    ' txtErrors.Text = "NextMaxKVcount = " & CStr(NextMaxKVcount)
                    'MsgBox("nextMaxKvcount= " & NextMaxKVcount)
                    If NextMaxKVcount > 50 Then
                        txtErrors.Text = txtErrors.Text & vbNewLine & "MaximumKv > MaxKvfromRatingClass: SO no matching corrected Kv found"
                        'MsgBox("MaximumKV > MaxKVfromRatingClass: SO no matching corrected KV found")
                        CalculateKvforPS1 = False
                        Exit Do
                    Else
                        txtErrors.Text = ""
                    End If

                Loop  ' Main Do 
                If CalculateKvforPS1 = False Then
                    Return Nothing
                    Exit Function
                End If
                AcceptedKv_Count = AcceptedKv_Count + 1
                Array.Resize(MaxKVsfromChart, AcceptedKv_Count)
                Array.Resize(MaxCvsfromChart, AcceptedKv_Count)
                Array.Resize(FinalShowKVCase1, AcceptedKv_Count)
                Array.Resize(FinalShowKVCase2, AcceptedKv_Count)
                Array.Resize(FinalShowKVCase3, AcceptedKv_Count)
                Array.Resize(MicroTrim_Array, AcceptedKv_Count)
                'The first KV found will be shown
                If SuggkVFound = False Then
                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                        SuggestedKvfromChart = MaxKVsfromChart(AcceptedKv_Count - 1)
                    Else
                        SuggestedKvfromChart = MaxCvsfromChart(AcceptedKv_Count - 1)
                    End If
                End If
                If txtSuggestedKV.Text = "" Then
                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                        '  txtSuggestedKV.Text = MaxKVsfromChart(0)
                        txtSuggestedKV.Text = Array.Find(MaxKVsfromChart, Function(x) (x = SuggestedKvfromChart))

                    Else
                        txtSuggestedKV.Text = Array.Find(MaxCvsfromChart, Function(x) (x = SuggestedKvfromChart))
                        'txtSuggestedKV.Text = MaxCvsfromChart(0)

                    End If
                    KvIndex = Array.FindIndex(MaxKVsfromChart, Function(x) (x = SuggestedKvfromChart))
                    Call FindValveSize(Array.Find(MaxKVsfromChart, Function(x) (x = SuggestedKvfromChart)), 1)
                End If
                txtSuggestedValveSize.Text = CStr(ValveSizeArray(0)) 'Suggested Valve Size from first list 
                lblMicroTrim.Text = MicroTrim_Array(KvIndex)
                Microtrim = MicroTrim_Array(KvIndex)
                'FinalKVmax_ValveSize = MaxKVsfromChart(0)
                KvOverrideText = cmbKVOverride.Text
                ValveSizeOverrideText = cmbValveSizeOverride.Text
                cmbKVOverride.Items.Clear()
                If cmbSelectedTrim.SelectedIndex = 0 Then               'Do not populate list if Trim Already Selected Perforated

                    For i = 0 To AcceptedKv_Count - 1          'update the Combobox list
                        SuggestedKVArray(i) = MaxKVsfromChart(i)
                        If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                            cmbKVOverride.Items.Add(CStr(MaxKVsfromChart(i)))
                        Else
                            cmbKVOverride.Items.Add(CStr(MaxCvsfromChart(i)))
                        End If
                    Next
                    ' Call FindValveSize(SuggestedKVArray(0))             'To update valve size list and combobox as per first Kv from list 

                    Dim foundstring As Integer = cmbKVOverride.FindStringExact(KvOverrideText)

                    If KvOverrideText = "" Then
                        cmbKVOverride.SelectedIndex = 0
                    ElseIf foundstring < 0 And Not KvOverrideText = "--Select--" Then
                        'MsgBox("Selected Kv/Cv is not available, so changed to the available Kv/Cv", , "Alert")
                        ToolTip3.Show("Selected Kv/Cv is not available, so changed to the available Kv/Cv", cmbKVOverride, 10)
                        ToolTip3.Show("Selected Kv/Cv is not available, so changed to the available Kv/Cv", cmbKVOverride, 3000)
                        cmbKVOverride.SelectedIndex = 0
                    Else
                        cmbKVOverride.Text = KvOverrideText             ' Load in text what was before. till user physically selects from list
                    End If
                End If

                If ValveSizeOverrideText = "" Then
                    cmbValveSizeOverride.SelectedIndex = 0
                Else
                    cmbValveSizeOverride.Text = ValveSizeOverrideText      'However the Text of Valve Size combobox will remain as the same as selected by user earlier
                End If
                If cmbSelectedTrim.SelectedIndex < 2 Then   ' If Trim is already selected and Perforated, Donot ovewrite the seat dia
                    cmbSeatDia.Items.Clear()
                    If cmbBalancing.SelectedIndex > 0 Then
                        SeatDia = PrBl_SeatDia          ' For Actuator Calculations

                        If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                            cmbSeatDia.Items.Add(PrBl_SeatDia_array(KvIndex))
                        Else  ' FPS
                            cmbSeatDia.Items.Add(Math.Round((PrBl_SeatDia_array(KvIndex) / 25.4), 1))
                        End If
                    Else                        'default fill Seat dia 
                        If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                            cmbSeatDia.Items.Add(SeatDia_array(KvIndex))
                        Else    'FPS
                            cmbSeatDia.Items.Add(Math.Round((SeatDia_array(KvIndex) / 25.4), 1))
                        End If

                    End If
                    '             If cmbSeatDia.Items.Count > 0 Then cmbSeatDia.SelectedIndex = 0  '15102020  Changes
                End If
            Else
                CalculateKvforPS1 = False
            End If
        Catch ex As Exception
            MsgBox("CalculateKvforPS1: " & ex.Message)
        End Try
    End Function

    Public Function CalculatefromKVseries()
        Dim SearchFailed As Boolean = False
        Dim LastMaximumKV As Single = 0
        Dim ValveSizeOverrideText As String
        Dim TempFLCase1, TempFLCase2, TempFLCase3, TempFDCase1, TempFDCase2, TempFDCase3, TempSeatDia, TempPrBl_SeatDia As Single
        'Dim TempTurbulentCase1, TempTurbulentCase2, TempTurbulentCase3 As Boolean
        Dim trim_i, next_trim, ModelIndex As Byte

        Dim ValveSize_Perfor As Single

        Try
            ' Dim watch As Stopwatch = Stopwatch.StartNew()

            If LoadingForm = True Then
                NoFPCalc = True
                FinalKVCount = 0

                MaxKVfromRatingClass = 0
                MaxKVfromRatingClass_old = 0

                TempKvCase1 = FinalKVCase1
                TempKvCase2 = FinalKVCase2
                TempKvCase3 = FinalKVCase3
                Dim Diaarray = New Single() {FinalKVCase1, FinalKVCase2, FinalKVCase3}
                Dim MaxKv = Diaarray.Max
                TempFLCase1 = FLCase1
                TempFLCase2 = FLCase2
                TempFLCase3 = FLCase3
                TempFDCase1 = FDCase1
                TempFDCase2 = FDCase2
                TempFDCase3 = FDCase3
                TempSeatDia = SeatDia
                TempPrBl_SeatDia = PrBl_SeatDia
                ValveSizeOverrideText = cmbValveSizeOverride.Text
                
                If Model = 1 Then
                    ModelIndex = 1           ' For Ecotrol
                Else
                    ModelIndex = 0            ' For FM GLOBE Valve, 3 way and PRDS
                End If
                txtSuggTrim.Text = ""
                If (CalculateKvforPS1()) Then
                    If Not (cmbModel.SelectedIndex = 2 Or cmbModel.SelectedIndex = 3 Or (cmbFluidType.SelectedIndex = 0 And MaxKv <= 0.2) Or (cmbFluidType.SelectedIndex = 1 And MaxKv <= 0.85)) Then   'Only if Model is not 3Way - (3way does not have Perforated )

                        '////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        ''''''''''''''''''''''''''''''''Check MultiStage    - START ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


                        If TurbulentCase1 = False Or TurbulentCase2 = False Or TurbulentCase3 = False Then
                            txtSuggTrim.Text = TrimName((ModelIndex * 5))
                            SelectedTrimNo = 0

                        Else

                            'Multi Trim Check Program
                            dtb.Rows.Clear()
                            Call Chokedflow(FLCase1, FLCase2, FLCase3)
                            Call CalculateKVCV()
                            If cmbFluidType.SelectedIndex = 0 Then
                                CheckCavitation(FLCase1, FLCase1, FLCase1, PS1)
                                Call CheckTrimVelocity(FinalKVCase1, FinalKVCase2, FinalKVCase3, PS1, 11.57)
                            Else
                                PS1.VelFinal = 0
                                PS1.CVFinal = 0
                            End If

                            dtb.Rows.Add(0, PS1.VelFinal, PS1.CVFinal, FinalKVCase1, FinalKVCase2, FinalKVCase3, TrimName((ModelIndex * 5)))
                            DT_FLtable.Rows(0)(0) = FLCase1
                            DT_FLtable.Rows(1)(0) = FLCase2
                            DT_FLtable.Rows(2)(0) = FLCase3

                            'Now Populate the Trim Selection datatable

                            Call NEwKVfromKVmax(6, MaximumKV)   'PS3            'This calculates Choked flow and Kv
                            If cmbFluidType.SelectedIndex = 0 Then
                                Call CheckCavitation(DT_FLtable.Rows(0).Item(1), DT_FLtable.Rows(1).Item(1), DT_FLtable.Rows(2).Item(1), PS3)
                                Call CheckTrimVelocity(FinalKVCase1, FinalKVCase2, FinalKVCase3, PS3, 6.9)
                            Else
                                PS3.VelFinal = 0
                                PS3.CVFinal = 0
                            End If
                            dtb.Rows.Add(1, PS3.VelFinal, PS3.CVFinal, FinalKVCase1, FinalKVCase2, FinalKVCase3, TrimName((ModelIndex * 5) + 1))


                            'Call Chokedflow(0.93, 0.93, 0.93)
                            Call NEwKVfromKVmax(7, MaximumKV)   'PR1
                            If cmbFluidType.SelectedIndex = 0 Then
                                Call CheckCavitation(DT_FLtable.Rows(0).Item(2), DT_FLtable.Rows(1).Item(2), DT_FLtable.Rows(2).Item(2), PR1)
                                Call CheckTrimVelocity(FinalKVCase1, FinalKVCase2, FinalKVCase3, PR1, 9.92)
                            Else
                                PR1.VelFinal = 0
                                PR1.CVFinal = 0
                            End If
                            dtb.Rows.Add(2, PR1.VelFinal, PR1.CVFinal, FinalKVCase1, FinalKVCase2, FinalKVCase3, TrimName((ModelIndex * 5) + 2))

                            'Call Chokedflow(0.95, 0.95, 0.95)
                            Call NEwKVfromKVmax(8, MaximumKV)   'PR2
                            If cmbFluidType.SelectedIndex = 0 Then
                                Call CheckCavitation(DT_FLtable.Rows(0).Item(3), DT_FLtable.Rows(1).Item(3), DT_FLtable.Rows(2).Item(3), PR2)
                                Call CheckTrimVelocity(FinalKVCase1, FinalKVCase2, FinalKVCase3, PR2, 7.2)
                            Else
                                PR2.VelFinal = 0
                                PR2.CVFinal = 0
                            End If

                            dtb.Rows.Add(3, PR2.VelFinal, PR2.CVFinal, FinalKVCase1, FinalKVCase2, FinalKVCase3, TrimName((ModelIndex * 5) + 3))

                            'Call Chokedflow(0.975, 0.975, 0.975)
                            Call NEwKVfromKVmax(9, MaximumKV)   'PR3
                            If cmbFluidType.SelectedIndex = 0 Then
                                Call CheckCavitation(DT_FLtable.Rows(0).Item(4), DT_FLtable.Rows(1).Item(4), DT_FLtable.Rows(2).Item(4), PR3)
                                Call CheckTrimVelocity(FinalKVCase1, FinalKVCase2, FinalKVCase3, PR3, 5.73)
                            Else
                                PR3.VelFinal = 0
                                PR3.CVFinal = 0
                            End If

                            dtb.Rows.Add(4, PR3.VelFinal, PR3.CVFinal, FinalKVCase1, FinalKVCase2, FinalKVCase3, TrimName((ModelIndex * 5) + 4))

                            'DataGridView2.DataSource = DT_FLtable




                            ' Now Select trim on basis of Data Table 'here search for less than and close to  40 m/s trimvelocity 
                            'which should be not critical and  chocked cavitation
                            If cmbFluidType.SelectedIndex = 0 Then
                                dtb.DefaultView.Sort = "TrimVelocity ASC"               'Sort As per trim Velocity
                                dtb = dtb.DefaultView.ToTable

                                next_trim = 0
                                For trim_i = 1 To 4         'compare 2nd row with first row so starting from 1 
                                    If dtb.Rows(trim_i).Item(2) = 4 Then            '4 is flashing
                                        If dtb.Rows(trim_i).Item(0) = 2 Or dtb.Rows(trim_i).Item(0) = 0 Then ' Flashing is allowed only for PS1 and PR1 
                                            next_trim = trim_i
                                            If CSng(dtb.Rows(trim_i).Item(1)) <= 40 And CSng(dtb.Rows(trim_i).Item(1)) > CSng(dtb.Rows(next_trim).Item(1)) Then
                                                next_trim = trim_i
                                            Else
                                                Exit For
                                            End If
                                        End If

                                    Else
                                        If CSng(dtb.Rows(trim_i).Item(1)) <= 40 And CSng(dtb.Rows(trim_i).Item(1)) > CSng(dtb.Rows(next_trim).Item(1)) And dtb.Rows(trim_i).Item(2) < 2 Then

                                            '  MsgBox(CSng(dtb.Rows(trim_i).Item(1)) & "   " & dtb.Rows(trim_i).Item(0).ToString)
                                            next_trim = trim_i
                                        Else
                                            Exit For
                                        End If
                                    End If
                                Next trim_i
                            Else
                                PressureRatio(0) = (FinalPressureDropCase1 / FinalInletPressureCase1)
                                PressureRatio(1) = (FinalPressureDropCase2 / FinalInletPressureCase2)
                                PressureRatio(2) = (FinalPressureDropCase3 / FinalInletPressureCase3)
                                If PressureRatio.Max <= 0.3 Then
                                    next_trim = 0              'PS1
                                ElseIf PressureRatio.Max > 0.3 And PressureRatio.Max <= 0.5 Then
                                    next_trim = 2            'PR1
                                ElseIf PressureRatio.Max > 0.5 And PressureRatio.Max <= 0.75 Then
                                    next_trim = 3            'PR2
                                ElseIf PressureRatio.Max > 0.75 And PressureRatio.Max <= 9 Then
                                    next_trim = 4            'PR3
                                End If
                            End If


                            txtSuggTrim.Text = dtb.Rows(next_trim)(6).ToString
                            If dtb.Rows(next_trim)(0) > 1 Then
                                Microtrim = ""
                                lblMicroTrim.Text = ""
                            End If
                            If dtb.Rows(next_trim).Item(0) > 1 Then                   ' Other than PS1 & PS3   - they have defined Kvs. Others have range of KVs to select from 
                                If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                    txtSuggestedKV.Text = Math.Round(MaximumKV, 2)          ' Kv
                                Else
                                    txtSuggestedKV.Text = Math.Round((MaximumKV * 1.17), 2)          '  for Cv 
                                End If

                                ValveSize_Perfor = CheckKV(MaximumKV, FinalValveSize, dtb.Rows(next_trim).Item(0), 3)
                                txtSuggestedValveSize.Text = ValveSize_Perfor

                            End If


                            SelectedTrimNo = next_trim              'this is selected Trim Number which is suggested. 

                            frmTestingGrids.DGVTrimSelection.Visible = True
                            frmTestingGrids.DGVTrimSelection.DataSource = dtb

                            ''''''''''''''''''''''''''''''''Check MultiStage' - - - END ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                            '////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            If cmbFluidType.SelectedIndex = 0 Then
                                If dtb.Rows(SelectedTrimNo).Item(0) = 1 Then         'PS3 and Incompressible
                                    Call CalculateKvforPS3()
                                End If
                            End If
                        End If
                        If Not cmbInletPipeSize.Text = "--Select--" Then
                            If FinalValveSize > cmbInletPipeSize.Text Then
                                'MsgBox("Inlet Pipe Size less than Valve Size. Please select greater Inlet Pipe Size")
                                txtErrors.Text = txtErrors.Text & vbNewLine & "Inlet Pipe Size less than Valve Size. Please select greater Inlet Pipe Size"
                            Else
                                txtErrors.Text = ""
                            End If
                        End If
                    Else
                        SelectedTrimNo = 0
                        txtSuggTrim.Text = "P1"
                    End If
                Else
                    'FinalKVCase1 = TempKvCase1
                    'FinalKVCase2 = TempKvCase2
                    'FinalKVCase3 = TempKvCase3
                End If


                    btnKVAccept.Enabled = True

                    'Load original values 
                    FinalKVCase1 = TempKvCase1
                    FinalKVCase2 = TempKvCase2
                    FinalKVCase3 = TempKvCase3
                    FLCase1 = TempFLCase1
                    FLCase2 = TempFLCase2
                    FLCase3 = TempFLCase3
                    FDCase1 = TempFDCase1
                    FDCase2 = TempFDCase2
                    FDCase3 = TempFDCase3
                    SeatDia = TempSeatDia
                    PrBl_SeatDia = TempPrBl_SeatDia


                    NoFPCalc = False
                End If
            'watch.Stop()
            'MsgBox(FinalKVCount & " :  " & watch.Elapsed.TotalMilliseconds)
        Catch ex As Exception
            MsgBox("CalculatefromKVseries: " & ex.Message)
        End Try
        Return Nothing
    End Function
    Public Function Perf_FindKvFromChart(ByVal ValveSize As Single)
        Try
            ' From Valve size and Selected Trim find the Kv matching with Maximum Kv. 
            ' Rating Class needed for selection of File. Find the row in which suggested valve size is fitting 
            ' and then check the Kvmax is fitting for the selected Trim if not then select next valve size.





        Catch ex As Exception
            MsgBox("Perf_FindKvFromChart: " & ex.Message)

        End Try
    End Function

    Public Function CalculateKvforPS3()
        Dim SearchFailed As Boolean
        Dim SuggkVFound As Boolean = False
        Dim SuggestedKvfromChart As Single
        Dim KvOverrideText As String
        Dim LastKv As Object = 0
        Try

            ''  Now Find 5 KVs for PS3
            AcceptedKv_Count = 0
            Dim tempObject, Seatobject, PrBl_Seatobject, Valveobject As Single()
            Dim TrimType_Sheet As String()
            Dim j As Byte = 0

            ReDim MaxKVsfromChart(40)
            ReDim MaxCvsfromChart(40)
            ReDim FinalShowKVCase1(40)
            ReDim FinalShowKVCase2(40)
            ReDim FinalShowKVCase3(40)
            ReDim MicroTrim_Array(40)
            ReDim SeatDia_array(40)
            ReDim PrBl_SeatDia_array(40)

            Array.Clear(MaxKVsfromChart, 0, MaxKVsfromChart.Length)
            Array.Clear(MaxCvsfromChart, 0, MaxCvsfromChart.Length)
            Array.Clear(FinalShowKVCase1, 0, FinalShowKVCase1.Length)
            Array.Clear(FinalShowKVCase2, 0, FinalShowKVCase2.Length)
            Array.Clear(FinalShowKVCase3, 0, FinalShowKVCase3.Length)
            Array.Clear(MicroTrim_Array, 0, MicroTrim_Array.Length)
            If cmbSelectedTrim.SelectedIndex < 2 Then                    '11102020 Update only if PS1 or PS3 else dont change last seat diameter.
                Array.Clear(SeatDia_array, 0, SeatDia_array.Length)
                Array.Clear(PrBl_SeatDia_array, 0, PrBl_SeatDia_array.Length)
            End If

            FinalKVCase1 = dtb.Rows(SelectedTrimNo).Item(3)
            FinalKVCase2 = dtb.Rows(SelectedTrimNo).Item(4)
            FinalKVCase3 = dtb.Rows(SelectedTrimNo).Item(5)
            'Default
            tempObject = PS3_MaxKV150_FromSheet
            Seatobject = PS3_SeatDia150_FromSheet
            PrBl_Seatobject = PrBl_SeatDia150_FromSheet             'To be checked and Changed
            Valveobject = PS3_Valve150_FromSheet
            TrimType_Sheet = PS3_TrimType150_Sheet
            If FinalOverrideRatings < 600 Then
                tempObject = PS3_MaxKV150_FromSheet
                Seatobject = PS3_SeatDia150_FromSheet
                PrBl_Seatobject = PrBl_SeatDia150_FromSheet             'To be checked and Changed
                Valveobject = PS3_Valve150_FromSheet
                LastRow = DT_PS3150300KV.Rows.Count - 2
                'RatingClass_worksheet = RatingClass_workbook.Worksheets("Class150300")
            ElseIf FinalOverrideRatings >= 600 Then
                tempObject = PS3_MaxKV600_FromSheet
                Seatobject = PS3_SeatDia600_FromSheet
                PrBl_Seatobject = PrBl_SeatDia600_FromSheet             'To be checked and Changed
                Valveobject = PS3_Valve600_FromSheet
                LastRow = DT_PS3600900KV.Rows.Count - 2
            End If
            SearchFailed = True
            For i = 1 To LastRow  'Start from second row of data 
                ' valve size should be greater than PS1 selected Valve Size for respective found Kvmax
                If tempObject(i) > MaximumKV And Valveobject(i) >= FinalValveSizeforNoise(0) And SuggkVFound = False Then
                    If cmbUnitsType.SelectedIndex = 1 Then
                        SuggestedKvfromChart = MaxKVfromRatingClass * 1.17
                    Else
                        SuggestedKvfromChart = MaxKVfromRatingClass
                    End If
                    SuggkVFound = True
                End If
                If Valveobject(i) >= FinalValveSizeforNoise(0) Then
                    MaxKVfromRatingClass = tempObject(i - 1)
                    'Call FindValveSize(MaxKVfromRatingClass, 2)
                    SearchFailed = False
                    For j = 0 To 39
                        If LastKv < tempObject(i - 1) Then                 ' 11102020 To avoid Multiple Enteries
                            AcceptedKv_Count = AcceptedKv_Count + 1
                            MaxKVsfromChart(j) = tempObject(i - 1)
                            MaxCvsfromChart(j) = tempObject(i - 1) * 1.17                           '11102020 CHANGES 
                            MicroTrim_Array(j) = TrimType_Sheet(i - 1)
                            FinalShowKVCase1(j) = dtb.Rows(SelectedTrimNo).Item(3)
                            FinalShowKVCase2(j) = dtb.Rows(SelectedTrimNo).Item(4)
                            FinalShowKVCase3(j) = dtb.Rows(SelectedTrimNo).Item(5)
                            FlowTypeCase1(j) = True
                            FlowTypeCase2(j) = True
                            FlowTypeCase3(j) = True
                            FLCase1_array(j) = 0.97
                            FLCase2_array(j) = 0.97
                            FLCase3_array(j) = 0.97
                            FDCase1_array(j) = 0.35
                            FDCase2_array(j) = 0.35
                            FDCase3_array(j) = 0.35

                            LastKv = tempObject(i - 1)

                        Else
                            j = j - 1
                        End If
                        i = i + 1

                        If i > LastRow Then
                            Exit For
                        End If

                    Next
                    Exit For
                End If
            Next
            If SearchFailed = False Then                'Found Kv and Valve
                KvOverrideText = cmbKVOverride.Text
                cmbKVOverride.Items.Clear()
                If cmbSelectedTrim.SelectedIndex = 1 Then               'Do not populate list if Trim Already Selected Perforated
                    'The first KV found will be shown
                    If txtSuggestedKV.Text = "" Then
                        If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                            '  txtSuggestedKV.Text = MaxKVsfromChart(0)
                            txtSuggestedKV.Text = Array.Find(MaxKVsfromChart, Function(x) (x = SuggestedKvfromChart))
                        Else
                            ' txtSuggestedKV.Text = MaxCvsfromChart(0)
                            txtSuggestedKV.Text = Array.Find(MaxCvsfromChart, Function(x) (x = SuggestedKvfromChart))
                        End If
                        KvIndex = Array.FindIndex(MaxKVsfromChart, Function(x) (x = SuggestedKvfromChart))
                        Call FindValveSize(MaxKVfromRatingClass, 2)
                    End If
                    For i = 0 To AcceptedKv_Count - 1                 'update the Combobox list
                        SuggestedKVArray(i) = MaxKVsfromChart(i)
                        If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                            cmbKVOverride.Items.Add(CStr(MaxKVsfromChart(i)))
                        Else
                            cmbKVOverride.Items.Add(CStr(MaxCvsfromChart(i)))
                        End If
                    Next

                    ' Call FindValveSize(SuggestedKVArray(0))             'To update valve size list and combobox as per first Kv from list 
                    If txtSuggestedValveSize.Text = "" Then txtSuggestedValveSize.Text = CStr(ValveSizeArray(0)) 'Suggested Valve Size from first list 
                    Dim foundstring As Integer = cmbKVOverride.FindStringExact(KvOverrideText)
                    If KvOverrideText = "" Then
                        cmbKVOverride.SelectedIndex = KvIndex
                    ElseIf foundstring < 0 Then
                        'MsgBox("Selected Kv/Cv is not available, so changed to the available Kv/Cv", , "Alert")
                        ToolTip3.Show("Selected Kv/Cv is not available, so changed to the available Kv/Cv", cmbKVOverride, 2)
                        ToolTip3.Show("Selected Kv/Cv is not available, so changed to the available Kv/Cv", cmbKVOverride, 3000)
                        cmbKVOverride.SelectedIndex = KvIndex
                    Else
                        cmbKVOverride.Text = KvOverrideText             ' Load in text what was before. till user physically selects from list
                    End If
                    If cmbSelectedTrim.SelectedIndex < 2 Then       '11102020 To avoid overriding the Seatdiameter list for Perforated
                        cmbSeatDia.Items.Clear()
                        If cmbBalancing.SelectedIndex > 0 Then
                            SeatDia = PrBl_SeatDia          ' For Actuator Calculations
                            If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                cmbSeatDia.Items.Add(PrBl_SeatDia_array(KvIndex))

                            Else
                                cmbSeatDia.Items.Add(Math.Round((PrBl_SeatDia_array(KvIndex) / 25.4), 1))
                            End If

                        Else                        'default fill Seat dia 
                            If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                cmbSeatDia.Items.Add(SeatDia_array(KvIndex))
                            Else
                                cmbSeatDia.Items.Add(Math.Round((SeatDia_array(KvIndex) / 25.4), 1))
                            End If
                        End If
                        ' If cmbSeatDia.Items.Count > 0 Then cmbSeatDia.SelectedIndex = 0  '15102020  Changes
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox("CalculateKvforPS3: " & ex.Message)
        End Try
    End Function

    Private Sub cmbKVseries_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbKVseries.SelectedIndexChanged
        Try
            If LoadingProjectFile = False Then
                If LoadingForm = True Then
                    If DontgotoKvRuleEvent = False Then
                        lblCalculating.Visible = True

                        btnValveSizeAccept.Enabled = False
                        '  CalculatefromKVseries()
                        Call RECalculate()
                        lblCalculating.Visible = False
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox("cmbKVseries_SelectedIndexChanged:  " & ex.Message)
        End Try

    End Sub

    Public Sub RECalculate()
        Try


            Dim NoiseAttnCheckedState As Boolean
            'Call AllCalculations()
            'Call CalculateRatings()
            'Call ConfirmRating()
            'Call VelocityRule()

            If LoadingForm = True Then
                If Not cmbCharacterstics.Text = "--Select--" And Not cmbKVseries.Text = "--Select--" Then
                    'This is because when Attenuation is checked and recalculate is pressed then Noise is attenuated. 

                    FinalNoiseLevelCase1 = 0
                    FinalNoiseLevelCase2 = 0
                    FinalNoiseLevelCase3 = 0
                    NoiseAttnCheckedState = chkNoiseAttenuation.Checked
                    chkNoiseAttenuation.Checked = False

                    'Call cmbCharacterstics_TextChanged(sender, e)

                    If LoadingProjectFile = False Then
                        txtSuggestedKV.Text = ""
                        txtSuggestedValveSize.Text = ""
                        lblCalculating.Visible = True
                    End If
                    btnValveSizeAccept.Enabled = False

                    CalculatefromKVseries()
                    Call KVfromOldKVmax((cmbSelectedTrim.SelectedIndex + 5))  'For FL to match the column which starts form 5'
                    If cmbSelectedTrim.SelectedIndex = 1 And cmbFluidType.SelectedIndex = 0 Then
                        Call CalculateKvforPS3()
                    End If
                    Call KVoverride()
                    lblCalculating.Visible = False

                    If Not cmbKVOverride.Text = "" And Not cmbKVOverride.Text = "--Select--" And Not cmbValveSizeOverride.Text = "" And Not cmbValveSizeOverride.Text = "--Select--" Then
                        Call CalculateNoise()
                        Call FindFP()
                        '20220913 Call CalculateNoise()
                        If NoiseAttnCheckedState = True Then
                            chkNoiseAttenuation.Checked = True
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox("Re-Calculate button  : " & ex.Message)
        End Try
    End Sub

    Private Sub btnCalculateKV_Click(sender As Object, e As EventArgs)
        Call RECalculate()
    End Sub

    Public Function FinalKV()
        Try
            If LoadingProjectFile = False Then
                NoiseAttenuationFlag = False   ' This is to recalculate the Noise when Recalculate button or new entries are made. KVAttenuated was not being calculated. 
                If Not cmbCharacterstics.Items.Count = 0 Then
                    If LoadingForm = True Then
                        DontgotoKvRuleEvent = True
                        If cmbCharacterstics.SelectedIndex = 0 Then             'linear
                            cmbKVseries.SelectedIndex = 3   '80 % stroke
                            cmbKVseries.Text = cmbKVseries.SelectedItem
                        ElseIf cmbCharacterstics.SelectedIndex = 1 Then         'equal percentatge
                            cmbKVseries.SelectedIndex = 3                       'Kept open for future provisions.
                            cmbKVseries.Text = cmbKVseries.SelectedItem
                        ElseIf cmbCharacterstics.SelectedIndex = 2 Then         ' on off
                            cmbKVseries.SelectedIndex = 6                       '100%.
                            cmbKVseries.Text = cmbKVseries.SelectedItem
                        End If
                        DontgotoKvRuleEvent = False
                        'If LoadingForm = True Then             'Commented as CalculatefromKVseries called twice
                        '    lblCalculating.Visible = True

                        '    btnValveSizeAccept.Enabled = False

                        '    CalculatefromKVseries()

                        '    lblCalculating.Visible = False

                        'End If
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox("Characterstics Selection  : " & ex.Message)
        End Try

    End Function

    Private Sub cmbCharacterstics_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbCharacterstics.KeyPress, cmbSelectedTrim.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCharacterstics_TextChanged(sender As Object, e As EventArgs) Handles cmbCharacterstics.TextChanged
        Try
            If Me.Created Then
                If LoadingForm = True Then
                    If LoadingProjectFile = False Then
                        If Model > 1 Then

                            cmbCharacterstics.SelectedIndex = 0   ' only Linear avaialble
                            ToolTip1.Show("Only Linear Avaialble", cmbCharacterstics, 1)
                            ToolTip1.Show("Only Linear Avaialble", cmbCharacterstics, 2000)
                                ' MsgBox("Not Available")
                            'Exit Sub
                            End If
                        End If
        
                        cmbCharacterstics.Text = cmbCharacterstics.SelectedItem

                        Call FinalKV()
                        Call RECalculate()

                    End If
                End If
            'cmbKVOverride.Focus()
        Catch ex As Exception
            MsgBox("cmbCharacterstics_TextChanged  : " & ex.Message)
        End Try
    End Sub

    'Public Function ShowVelocity()
    '    Dim VelocityValveInletCase1, VelocityValveInletCase2, VelocityValveInletCase3, VelocityInletPipeCase1, VelocityInletPipeCase2, VelocityInletPipeCase3 As Single


    '    Try
    '        If cmbFluidType.Text = "InCompressible" Then

    '            VelocityValveInletCase1 = Math.Round((FinalFlowrateCase1 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
    '            VelocityValveInletCase2 = Math.Round((FinalFlowrateCase2 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
    '            VelocityValveInletCase3 = Math.Round((FinalFlowrateCase3 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)

    '            If cmbUnitsType.SelectedIndex = 1 Then    'FPS   
    '                If Not (txtFlowrateCase1.Text = "") Then lblVelocityValveInletCase1.Text = Math.Round(VelocityValveInletCase1 * 3.281, 2) Else lblVelocityValveInletCase1.Text = ""
    '                If Not (txtFlowrateCase2.Text = "") Then lblVelocityValveInletCase2.Text = Math.Round(VelocityValveInletCase2 * 3.281, 2) Else lblVelocityValveInletCase2.Text = ""
    '                If Not (txtFlowrateCase3.Text = "") Then lblVelocityValveInletCase3.Text = Math.Round(VelocityValveInletCase3 * 3.281, 2) Else lblVelocityValveInletCase3.Text = ""
    '            Else
    '                If Not (txtFlowrateCase1.Text = "") Then lblVelocityValveInletCase1.Text = VelocityValveInletCase1 Else lblVelocityValveInletCase1.Text = ""
    '                If Not (txtFlowrateCase2.Text = "") Then lblVelocityValveInletCase2.Text = VelocityValveInletCase2 Else lblVelocityValveInletCase2.Text = ""
    '                If Not (txtFlowrateCase3.Text = "") Then lblVelocityValveInletCase3.Text = VelocityValveInletCase3 Else lblVelocityValveInletCase3.Text = ""
    '            End If
    '            If Not (txtFlowrateCase1.Text = "") Then
    '                VelocityValveOutletCase1 = Math.Round((FlowrateForPipeDiaCalcCase1 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)

    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS   
    '                    lblVelocityValveOutletCase1.Text = Math.Round(VelocityValveOutletCase1 * 3.281, 3)
    '                Else
    '                    lblVelocityValveOutletCase1.Text = VelocityValveOutletCase1
    '                End If
    '            Else
    '                lblVelocityValveOutletCase1.Text = ""
    '            End If

    '            If Not (txtFlowrateCase2.Text = "") Then
    '                VelocityValveOutletCase2 = Math.Round((FlowrateForPipeDiaCalcCase2 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
    '                If VelocityValveOutletCase2 > FinalVelocityRule Then lblVelocityValveOutletCase2.ForeColor = Color.Red
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityValveOutletCase2.Text = Math.Round(VelocityValveOutletCase2 * 3.281, 3)
    '                Else
    '                    lblVelocityValveOutletCase2.Text = VelocityValveOutletCase2
    '                End If
    '            Else
    '                lblVelocityValveOutletCase2.Text = ""
    '            End If
    '            If Not (txtFlowrateCase3.Text = "") Then
    '                VelocityValveOutletCase3 = Math.Round((FlowrateForPipeDiaCalcCase3 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 2)
    '                If VelocityValveOutletCase3 > FinalVelocityRule Then lblVelocityValveOutletCase3.ForeColor = Color.Red
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityValveOutletCase3.Text = Math.Round(VelocityValveOutletCase3 * 3.281, 3)
    '                Else
    '                    lblVelocityValveOutletCase3.Text = VelocityValveOutletCase3
    '                End If
    '            Else
    '                lblVelocityValveOutletCase3.Text = ""
    '            End If

    '            If Not (txtFlowrateCase1.Text = "") Then
    '                VelocityPipeCase1 = Math.Round((FlowrateForPipeDiaCalcCase1 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
    '                If VelocityPipeCase1 > FinalVelocityRule Then lblVelocityOutletPipeCase1.ForeColor = Color.Red
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityOutletPipeCase1.Text = Math.Round(VelocityPipeCase1 * 3.281, 3)
    '                Else
    '                    lblVelocityOutletPipeCase1.Text = VelocityPipeCase1
    '                End If
    '            Else
    '                lblVelocityOutletPipeCase1.Text = ""
    '            End If
    '            If Not (txtFlowrateCase2.Text = "") Then
    '                VelocityPipeCase2 = Math.Round((FlowrateForPipeDiaCalcCase2 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
    '                If VelocityPipeCase2 > FinalVelocityRule Then lblVelocityOutletPipeCase2.ForeColor = Color.Red
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityOutletPipeCase2.Text = Math.Round(VelocityPipeCase2 * 3.281, 3)
    '                Else
    '                    lblVelocityOutletPipeCase2.Text = VelocityPipeCase2
    '                End If
    '            Else
    '                lblVelocityOutletPipeCase2.Text = ""
    '            End If
    '            If Not (txtFlowrateCase3.Text = "") Then
    '                VelocityPipeCase3 = Math.Round((FlowrateForPipeDiaCalcCase3 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
    '                If VelocityPipeCase3 > FinalVelocityRule Then lblVelocityOutletPipeCase3.ForeColor = Color.Red
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityOutletPipeCase3.Text = Math.Round(VelocityPipeCase3 * 3.281, 3)
    '                Else
    '                    lblVelocityOutletPipeCase3.Text = VelocityPipeCase3
    '                End If
    '            Else
    '                lblVelocityOutletPipeCase3.Text = ""
    '            End If
    '            'Inlet Pipe Velcoity
    '            If Not (txtFlowrateCase1.Text = "") Then
    '                VelocityInletPipeCase1 = Math.Round((FinalFlowrateCase1 / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityInletPipeCase1.Text = Math.Round(VelocityInletPipeCase1 * 3.281, 3)
    '                Else
    '                    lblVelocityInletPipeCase1.Text = VelocityInletPipeCase1
    '                End If
    '            Else
    '                lblVelocityInletPipeCase1.Text = ""
    '            End If

    '            If Not (txtFlowrateCase2.Text = "") Then
    '                VelocityInletPipeCase2 = Math.Round((FinalFlowrateCase2 / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityInletPipeCase2.Text = Math.Round(VelocityInletPipeCase2 * 3.281, 3)
    '                Else
    '                    lblVelocityInletPipeCase2.Text = VelocityInletPipeCase2
    '                End If
    '            Else
    '                lblVelocityInletPipeCase2.Text = ""
    '            End If

    '            If Not (txtFlowrateCase3.Text = "") Then
    '                VelocityInletPipeCase3 = Math.Round((FinalFlowrateCase3 / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityInletPipeCase3.Text = Math.Round(VelocityInletPipeCase3 * 3.281, 3)
    '                Else
    '                    lblVelocityInletPipeCase3.Text = VelocityInletPipeCase3
    '                End If
    '            Else
    '                lblVelocityInletPipeCase3.Text = ""
    '            End If
    '        Else                 ' ******************* COMPRESSIBLE **********************
    '            VelocityValveInletCase1 = Math.Round(((FinalFlowrateCase1 / FinalDensityCase1) / 3600) / (Math.PI * Noise_ValveID * Noise_ValveID / 4), 3)
    '            VelocityValveInletCase2 = Math.Round(((FinalFlowrateCase2 / FinalDensityCase2) / 3600) / (Math.PI * Noise_ValveID * Noise_ValveID / 4), 3)
    '            VelocityValveInletCase3 = Math.Round(((FinalFlowrateCase3 / FinalDensityCase3) / 3600) / (Math.PI * Noise_ValveID * Noise_ValveID / 4), 3)

    '            If cmbUnitsType.SelectedIndex = 1 Then    'FPS   
    '                If Not (txtFlowrateCase1.Text = "") Then lblVelocityValveInletCase1.Text = Math.Round(VelocityValveInletCase1 * 3.281, 2) Else lblVelocityValveInletCase1.Text = ""
    '                If Not (txtFlowrateCase2.Text = "") Then lblVelocityValveInletCase2.Text = Math.Round(VelocityValveInletCase2 * 3.281, 2) Else lblVelocityValveInletCase2.Text = ""
    '                If Not (txtFlowrateCase3.Text = "") Then lblVelocityValveInletCase3.Text = Math.Round(VelocityValveInletCase3 * 3.281, 2) Else lblVelocityValveInletCase3.Text = ""
    '            Else
    '                If Not (txtFlowrateCase1.Text = "") Then lblVelocityValveInletCase1.Text = VelocityValveInletCase1 Else lblVelocityValveInletCase1.Text = ""
    '                If Not (txtFlowrateCase2.Text = "") Then lblVelocityValveInletCase2.Text = VelocityValveInletCase2 Else lblVelocityValveInletCase2.Text = ""
    '                If Not (txtFlowrateCase3.Text = "") Then lblVelocityValveInletCase3.Text = VelocityValveInletCase3 Else lblVelocityValveInletCase3.Text = ""
    '            End If

    '            If Not (txtFlowrateCase1.Text = "") Then
    '                VelocityValveOutletCase1 = Math.Round((FlowrateForPipeDiaCalcCase1 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
    '                If VelocityValveOutletCase1 > FinalVelocityRule Then
    '                    lblVelocityValveOutletCase1.ForeColor = Color.Red
    '                    lblMachNoVavleOutCase1.ForeColor = Color.Red
    '                End If

    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS   
    '                    lblVelocityValveOutletCase1.Text = Math.Round(VelocityValveOutletCase1 * 3.281, 3)
    '                Else
    '                    lblVelocityValveOutletCase1.Text = VelocityValveOutletCase1
    '                End If
    '                lblMachNoVavleOutCase1.Text = Math.Round(VelocityValveOutletCase1 / SoundVelocityCase1, 3)
    '            Else
    '                lblVelocityValveOutletCase1.Text = ""
    '                lblMachNoVavleOutCase1.Text = ""
    '            End If

    '            If Not (txtFlowrateCase2.Text = "") Then
    '                VelocityValveOutletCase2 = Math.Round((FlowrateForPipeDiaCalcCase2 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
    '                If VelocityValveOutletCase2 > FinalVelocityRule Then
    '                    lblVelocityValveOutletCase2.ForeColor = Color.Red
    '                    lblMachNoVavleOutCase2.ForeColor = Color.Red
    '                End If
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityValveOutletCase2.Text = Math.Round(VelocityValveOutletCase2 * 3.281, 3)
    '                Else
    '                    lblVelocityValveOutletCase2.Text = VelocityValveOutletCase2
    '                End If
    '                lblMachNoVavleOutCase2.Text = Math.Round(VelocityValveOutletCase2 / SoundVelocityCase2, 3)
    '            Else
    '                lblVelocityValveOutletCase2.Text = ""
    '                lblMachNoVavleOutCase2.Text = ""
    '            End If

    '            If Not (txtFlowrateCase3.Text = "") Then
    '                VelocityValveOutletCase3 = Math.Round((FlowrateForPipeDiaCalcCase3 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 2)
    '                If VelocityValveOutletCase3 > FinalVelocityRule Then
    '                    lblVelocityValveOutletCase3.ForeColor = Color.Red
    '                    lblMachNoVavleOutCase3.ForeColor = Color.Red
    '                End If
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityValveOutletCase3.Text = Math.Round(VelocityValveOutletCase3 * 3.281, 3)
    '                Else
    '                    lblVelocityValveOutletCase3.Text = VelocityValveOutletCase3
    '                End If
    '                lblMachNoVavleOutCase3.Text = Math.Round(VelocityValveOutletCase3 / SoundVelocityCase3, 3)
    '            Else
    '                lblVelocityValveOutletCase3.Text = ""
    '                lblMachNoVavleOutCase3.Text = ""
    '            End If

    '            If Not (txtFlowrateCase1.Text = "") Then
    '                VelocityPipeCase1 = Math.Round((FlowrateForPipeDiaCalcCase1 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
    '                If VelocityPipeCase1 > FinalVelocityRule Then
    '                    lblVelocityOutletPipeCase1.ForeColor = Color.Red
    '                    lblMachNoPipeOutCase1.ForeColor = Color.Red
    '                End If
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityOutletPipeCase1.Text = Math.Round(VelocityPipeCase1 * 3.281, 3)
    '                Else
    '                    lblVelocityOutletPipeCase1.Text = VelocityPipeCase1
    '                End If
    '                lblMachNoPipeOutCase1.Text = Math.Round(VelocityPipeCase1 / SoundVelocityCase1, 3)
    '            Else
    '                lblVelocityOutletPipeCase1.Text = ""
    '                lblMachNoPipeOutCase1.Text = ""
    '            End If

    '            If Not (txtFlowrateCase2.Text = "") Then
    '                VelocityPipeCase2 = Math.Round((FlowrateForPipeDiaCalcCase2 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
    '                If VelocityPipeCase2 > FinalVelocityRule Then
    '                    lblVelocityOutletPipeCase2.ForeColor = Color.Red
    '                    lblMachNoPipeOutCase2.ForeColor = Color.Red
    '                End If
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityOutletPipeCase2.Text = Math.Round(VelocityPipeCase2 * 3.281, 3)
    '                Else
    '                    lblVelocityOutletPipeCase2.Text = VelocityPipeCase2
    '                End If
    '                lblMachNoPipeOutCase2.Text = Math.Round(VelocityPipeCase2 / SoundVelocityCase2, 3)
    '            Else
    '                lblVelocityOutletPipeCase2.Text = ""
    '                lblMachNoPipeOutCase2.Text = ""
    '            End If

    '            If Not (txtFlowrateCase3.Text = "") Then
    '                VelocityPipeCase3 = Math.Round((FlowrateForPipeDiaCalcCase3 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
    '                If VelocityPipeCase3 > FinalVelocityRule Then
    '                    lblVelocityOutletPipeCase3.ForeColor = Color.Red
    '                    lblMachNoPipeOutCase3.ForeColor = Color.Red
    '                End If
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityOutletPipeCase3.Text = Math.Round(VelocityPipeCase3 * 3.281, 3)
    '                Else
    '                    lblVelocityOutletPipeCase3.Text = VelocityPipeCase3
    '                End If
    '                lblMachNoPipeOutCase3.Text = Math.Round(VelocityPipeCase3 / SoundVelocityCase3, 3)
    '            Else
    '                lblVelocityOutletPipeCase3.Text = ""
    '                lblMachNoPipeOutCase3.Text = ""
    '            End If
    '            'Pipe Inlet Velocity
    '            If Not (txtFlowrateCase1.Text = "") Then
    '                VelocityInletPipeCase1 = Math.Round(((FinalFlowrateCase1 / FinalDensityCase1) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityInletPipeCase1.Text = Math.Round(VelocityInletPipeCase1 * 3.281, 3)
    '                Else
    '                    lblVelocityInletPipeCase1.Text = VelocityInletPipeCase1
    '                End If
    '            Else
    '                lblVelocityInletPipeCase1.Text = ""
    '            End If

    '            If Not (txtFlowrateCase2.Text = "") Then
    '                VelocityInletPipeCase2 = Math.Round(((FinalFlowrateCase2 / FinalDensityCase2) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityInletPipeCase2.Text = Math.Round(VelocityInletPipeCase2 * 3.281, 3)
    '                Else
    '                    lblVelocityInletPipeCase2.Text = VelocityInletPipeCase2
    '                End If
    '            Else
    '                lblVelocityInletPipeCase2.Text = ""
    '            End If
    '            If Not (txtFlowrateCase3.Text = "") Then
    '                VelocityInletPipeCase3 = Math.Round(((FinalFlowrateCase3 / FinalDensityCase3) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
    '                If cmbUnitsType.SelectedIndex = 1 Then    'FPS
    '                    lblVelocityInletPipeCase3.Text = Math.Round(VelocityInletPipeCase3 * 3.281, 3)
    '                Else
    '                    lblVelocityInletPipeCase3.Text = VelocityInletPipeCase3
    '                End If
    '            Else
    '                lblVelocityInletPipeCase3.Text = ""
    '            End If


    '        End If

    '            'IF ALL CASES NOT SELECTED
    '            If FinalPressureDropCase1 > 0 Then
    '                lblVelocityValveInletCase1.Visible = True
    '                lblVelocityValveOutletCase1.Visible = True
    '                lblVelocityOutletPipeCase1.Visible = True
    '                lblVelocityInletPipeCase1.Visible = True
    '                lblMachNoVavleOutCase1.Visible = True
    '                lblMachNoPipeOutCase1.Visible = True
    '            Else
    '                lblVelocityValveInletCase1.Visible = False
    '                lblVelocityValveOutletCase1.Visible = False
    '                lblVelocityOutletPipeCase1.Visible = False
    '                lblVelocityInletPipeCase1.Visible = False
    '                lblMachNoVavleOutCase1.Visible = False
    '                lblMachNoPipeOutCase1.Visible = False
    '            End If
    '            If FinalPressureDropCase2 > 0 Then
    '                lblVelocityValveInletCase2.Visible = True
    '                lblVelocityValveOutletCase2.Visible = True
    '                lblVelocityOutletPipeCase2.Visible = True
    '                lblVelocityInletPipeCase2.Visible = True
    '                lblMachNoVavleOutCase2.Visible = True
    '                lblMachNoPipeOutCase2.Visible = True
    '            Else
    '                lblVelocityValveInletCase2.Visible = False
    '                lblVelocityValveOutletCase2.Visible = False
    '                lblVelocityOutletPipeCase2.Visible = False
    '                lblVelocityInletPipeCase2.Visible = False
    '                lblMachNoVavleOutCase2.Visible = False
    '                lblMachNoPipeOutCase2.Visible = False
    '            End If
    '            If FinalPressureDropCase3 > 0 Then
    '                lblVelocityValveInletCase3.Visible = True
    '                lblVelocityValveOutletCase3.Visible = True
    '                lblVelocityOutletPipeCase3.Visible = True
    '                lblVelocityInletPipeCase3.Visible = True
    '                lblMachNoVavleOutCase3.Visible = True
    '                lblMachNoPipeOutCase3.Visible = True

    '            Else
    '                lblVelocityValveInletCase3.Visible = False
    '                lblVelocityValveOutletCase3.Visible = False
    '                lblVelocityOutletPipeCase3.Visible = False
    '                lblVelocityInletPipeCase3.Visible = False
    '                lblMachNoVavleOutCase3.Visible = False
    '                lblMachNoPipeOutCase3.Visible = False
    '            End If
    '    Catch ex As Exception
    '        MsgBox("ShowVelocity: " & ex.Message)
    '    End Try
    '    Return Nothing

    'End Function
    Public Function ShowVelocity_forNoise()
        Dim VelocityValveInletCase1, VelocityValveInletCase2, VelocityValveInletCase3, VelocityInletPipeCase1, VelocityInletPipeCase2, VelocityInletPipeCase3 As Single
        Dim TempMachno As Single

        Try
            If cmbFluidType.Text = "InCompressible" Then

                VelocityValveInletCase1 = Math.Round((FinalFlowrateCase1 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
                VelocityValveInletCase2 = Math.Round((FinalFlowrateCase2 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
                VelocityValveInletCase3 = Math.Round((FinalFlowrateCase3 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)

                If cmbUnitsType.SelectedIndex = 1 Then    'FPS   
                    If Not (txtFlowrateCase1.Text = "") Then lblVelocityValveInletCase1.Text = Math.Round(VelocityValveInletCase1 * 3.281, 2) Else lblVelocityValveInletCase1.Text = ""
                    If Not (txtFlowrateCase2.Text = "") Then lblVelocityValveInletCase2.Text = Math.Round(VelocityValveInletCase2 * 3.281, 2) Else lblVelocityValveInletCase2.Text = ""
                    If Not (txtFlowrateCase3.Text = "") Then lblVelocityValveInletCase3.Text = Math.Round(VelocityValveInletCase3 * 3.281, 2) Else lblVelocityValveInletCase3.Text = ""
                Else
                    If Not (txtFlowrateCase1.Text = "") Then lblVelocityValveInletCase1.Text = VelocityValveInletCase1 Else lblVelocityValveInletCase1.Text = ""
                    If Not (txtFlowrateCase2.Text = "") Then lblVelocityValveInletCase2.Text = VelocityValveInletCase2 Else lblVelocityValveInletCase2.Text = ""
                    If Not (txtFlowrateCase3.Text = "") Then lblVelocityValveInletCase3.Text = VelocityValveInletCase3 Else lblVelocityValveInletCase3.Text = ""
                End If
                If Not (txtFlowrateCase1.Text = "") Then
                    VelocityValveOutletCase1 = Math.Round((FlowrateForPipeDiaCalcCase1 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
                    If VelocityValveOutletCase1 > FinalVelocityRule Then lblVelocityValveOutletCase1.ForeColor = Color.Red Else lblVelocityValveOutletCase1.ForeColor = Color.Black
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS   
                        lblVelocityValveOutletCase1.Text = Math.Round(VelocityValveOutletCase1 * 3.281, 3)
                    Else
                        lblVelocityValveOutletCase1.Text = VelocityValveOutletCase1
                    End If
                Else
                    lblVelocityValveOutletCase1.Text = ""
                End If

                If Not (txtFlowrateCase2.Text = "") Then
                    VelocityValveOutletCase2 = Math.Round((FlowrateForPipeDiaCalcCase2 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
                    If VelocityValveOutletCase2 > FinalVelocityRule Then lblVelocityValveOutletCase2.ForeColor = Color.Red Else lblVelocityValveOutletCase2.ForeColor = Color.Black
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityValveOutletCase2.Text = Math.Round(VelocityValveOutletCase2 * 3.281, 3)
                    Else
                        lblVelocityValveOutletCase2.Text = VelocityValveOutletCase2
                    End If
                Else
                    lblVelocityValveOutletCase2.Text = ""
                End If
                If Not (txtFlowrateCase3.Text = "") Then
                    VelocityValveOutletCase3 = Math.Round((FlowrateForPipeDiaCalcCase3 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 2)
                    If VelocityValveOutletCase3 > FinalVelocityRule Then lblVelocityValveOutletCase3.ForeColor = Color.Red Else lblVelocityValveOutletCase3.ForeColor = Color.Black
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityValveOutletCase3.Text = Math.Round(VelocityValveOutletCase3 * 3.281, 3)
                    Else
                        lblVelocityValveOutletCase3.Text = VelocityValveOutletCase3
                    End If
                Else
                    lblVelocityValveOutletCase3.Text = ""
                End If

                If Not (txtFlowrateCase1.Text = "") Then
                    VelocityPipeCase1 = Math.Round((BafflePipeVelCase1 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
                    If VelocityPipeCase1 > FinalVelocityRule Then lblVelocityOutletPipeCase1.ForeColor = Color.Red Else lblVelocityOutletPipeCase1.ForeColor = Color.Black
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityOutletPipeCase1.Text = Math.Round(VelocityPipeCase1 * 3.281, 3)
                    Else
                        lblVelocityOutletPipeCase1.Text = VelocityPipeCase1
                    End If
                Else
                    lblVelocityOutletPipeCase1.Text = ""
                End If
                If Not (txtFlowrateCase2.Text = "") Then
                    VelocityPipeCase2 = Math.Round((BafflePipeVelCase2 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
                    If VelocityPipeCase2 > FinalVelocityRule Then lblVelocityOutletPipeCase2.ForeColor = Color.Red Else lblVelocityOutletPipeCase2.ForeColor = Color.Black
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityOutletPipeCase2.Text = Math.Round(VelocityPipeCase2 * 3.281, 3)
                    Else
                        lblVelocityOutletPipeCase2.Text = VelocityPipeCase2
                    End If
                Else
                    lblVelocityOutletPipeCase2.Text = ""
                End If
                If Not (txtFlowrateCase3.Text = "") Then
                    VelocityPipeCase3 = Math.Round((BafflePipeVelCase3 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
                    If VelocityPipeCase3 > FinalVelocityRule Then lblVelocityOutletPipeCase3.ForeColor = Color.Red Else lblVelocityOutletPipeCase3.ForeColor = Color.Black
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityOutletPipeCase3.Text = Math.Round(VelocityPipeCase3 * 3.281, 3)
                    Else
                        lblVelocityOutletPipeCase3.Text = VelocityPipeCase3
                    End If
                Else
                    lblVelocityOutletPipeCase3.Text = ""
                End If
                'Inlet Pipe Velcoity
                If Not (txtFlowrateCase1.Text = "") Then
                    VelocityInletPipeCase1 = Math.Round((FinalFlowrateCase1 / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityInletPipeCase1.Text = Math.Round(VelocityInletPipeCase1 * 3.281, 3)
                    Else
                        lblVelocityInletPipeCase1.Text = VelocityInletPipeCase1
                    End If
                Else
                    lblVelocityInletPipeCase1.Text = ""
                End If

                If Not (txtFlowrateCase2.Text = "") Then
                    VelocityInletPipeCase2 = Math.Round((FinalFlowrateCase2 / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityInletPipeCase2.Text = Math.Round(VelocityInletPipeCase2 * 3.281, 3)
                    Else
                        lblVelocityInletPipeCase2.Text = VelocityInletPipeCase2
                    End If
                Else
                    lblVelocityInletPipeCase2.Text = ""
                End If

                If Not (txtFlowrateCase3.Text = "") Then
                    VelocityInletPipeCase3 = Math.Round((FinalFlowrateCase3 / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityInletPipeCase3.Text = Math.Round(VelocityInletPipeCase3 * 3.281, 3)
                    Else
                        lblVelocityInletPipeCase3.Text = VelocityInletPipeCase3
                    End If
                Else
                    lblVelocityInletPipeCase3.Text = ""
                End If
            Else                    '''--------------COMPRESSIBLE -------------------------------------
                VelocityValveInletCase1 = Math.Round(((TempFlowrateCase1 / FinalDensityCase1) / 3600) / (Math.PI * Noise_ValveID * Noise_ValveID / 4), 3)
                VelocityValveInletCase2 = Math.Round(((TempFlowrateCase2 / FinalDensityCase2) / 3600) / (Math.PI * Noise_ValveID * Noise_ValveID / 4), 3)
                VelocityValveInletCase3 = Math.Round(((TempFlowrateCase3 / FinalDensityCase3) / 3600) / (Math.PI * Noise_ValveID * Noise_ValveID / 4), 3)

                If cmbUnitsType.SelectedIndex = 1 Then    'FPS   
                    If Not (txtFlowrateCase1.Text = "") Then lblVelocityValveInletCase1.Text = Math.Round(VelocityValveInletCase1 * 3.281, 2) Else lblVelocityValveInletCase1.Text = ""
                    If Not (txtFlowrateCase2.Text = "") Then lblVelocityValveInletCase2.Text = Math.Round(VelocityValveInletCase2 * 3.281, 2) Else lblVelocityValveInletCase2.Text = ""
                    If Not (txtFlowrateCase3.Text = "") Then lblVelocityValveInletCase3.Text = Math.Round(VelocityValveInletCase3 * 3.281, 2) Else lblVelocityValveInletCase3.Text = ""
                Else
                    If Not (txtFlowrateCase1.Text = "") Then lblVelocityValveInletCase1.Text = VelocityValveInletCase1 Else lblVelocityValveInletCase1.Text = ""
                    If Not (txtFlowrateCase2.Text = "") Then lblVelocityValveInletCase2.Text = VelocityValveInletCase2 Else lblVelocityValveInletCase2.Text = ""
                    If Not (txtFlowrateCase3.Text = "") Then lblVelocityValveInletCase3.Text = VelocityValveInletCase3 Else lblVelocityValveInletCase3.Text = ""
                End If

                If Not (txtFlowrateCase1.Text = "") Then
                    If Model = 4 Or Model = 5 Or Model = 6 Then
                        VelocityValveOutletCase1 = Math.Round((PRDS_OP_FlowrateForPipeDiaCase1 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
                    Else
                        VelocityValveOutletCase1 = Math.Round((FlowrateForPipeDiaCalcCase1 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
                    End If
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS   
                        lblVelocityValveOutletCase1.Text = Math.Round(VelocityValveOutletCase1 * 3.281, 3)
                    Else
                        lblVelocityValveOutletCase1.Text = VelocityValveOutletCase1
                    End If

                    TempMachno = Math.Round(VelocityValveOutletCase1 / SoundVelocityCase1, 3)
                    lblMachNoVavleOutCase1.Text = TempMachno
                    If TempMachno > FinalVelocityRule Then
                        lblVelocityValveOutletCase1.ForeColor = Color.Red
                        lblMachNoVavleOutCase1.ForeColor = Color.Red
                    Else
                        lblVelocityValveOutletCase1.ForeColor = Color.Black
                        lblMachNoVavleOutCase1.ForeColor = Color.Black
                    End If
                Else
                    lblVelocityValveOutletCase1.Text = ""
                    lblMachNoVavleOutCase1.Text = ""
                End If

                    If Not (txtFlowrateCase2.Text = "") Then
                    If Model = 4 Or Model = 5 Or Model = 6 Then
                        VelocityValveOutletCase2 = Math.Round((PRDS_OP_FlowrateForPipeDiaCase2 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
                    Else
                        VelocityValveOutletCase2 = Math.Round((FlowrateForPipeDiaCalcCase2 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 3)
                    End If
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityValveOutletCase2.Text = Math.Round(VelocityValveOutletCase2 * 3.281, 3)
                    Else
                        lblVelocityValveOutletCase2.Text = VelocityValveOutletCase2
                    End If
                    TempMachno = Math.Round(VelocityValveOutletCase2 / SoundVelocityCase2, 3)
                    lblMachNoVavleOutCase2.Text = TempMachno
                    If TempMachno > FinalVelocityRule Then
                        lblVelocityValveOutletCase2.ForeColor = Color.Red
                        lblMachNoVavleOutCase2.ForeColor = Color.Red
                    Else
                        lblVelocityValveOutletCase2.ForeColor = Color.Black
                        lblMachNoVavleOutCase2.ForeColor = Color.Black
                    End If

                Else
                    lblVelocityValveOutletCase2.Text = ""
                    lblMachNoVavleOutCase2.Text = ""
                End If

                If Not (txtFlowrateCase3.Text = "") Then
                    If Model = 4 Or Model = 5 Or Model = 6 Then
                        VelocityValveOutletCase3 = Math.Round((PRDS_OP_FlowrateForPipeDiaCase3 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 2)
                    Else
                        VelocityValveOutletCase3 = Math.Round((FlowrateForPipeDiaCalcCase3 / (Math.PI * Noise_ValveID * Noise_ValveID / 4)) / 3600, 2)
                    End If

                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityValveOutletCase3.Text = Math.Round(VelocityValveOutletCase3 * 3.281, 3)
                    Else
                        lblVelocityValveOutletCase3.Text = VelocityValveOutletCase3
                    End If
                    TempMachno = Math.Round(VelocityValveOutletCase3 / SoundVelocityCase3, 3)
                    lblMachNoVavleOutCase3.Text = TempMachno
                    If TempMachno > FinalVelocityRule Then
                        lblVelocityValveOutletCase3.ForeColor = Color.Red
                        lblMachNoVavleOutCase3.ForeColor = Color.Red
                    Else
                        lblVelocityValveOutletCase3.ForeColor = Color.Black
                        lblMachNoVavleOutCase3.ForeColor = Color.Black

                    End If
                Else
                    lblVelocityValveOutletCase3.Text = ""
                    lblMachNoVavleOutCase3.Text = ""
                End If

                If Not (txtFlowrateCase1.Text = "") Then
                    VelocityPipeCase1 = Math.Round((BafflePipeVelCase1 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityOutletPipeCase1.Text = Math.Round(VelocityPipeCase1 * 3.281, 3)
                    Else
                        lblVelocityOutletPipeCase1.Text = VelocityPipeCase1
                    End If
                    TempMachno = Math.Round(VelocityPipeCase1 / BaffleSoundVelocityCase1, 3)
                    lblMachNoPipeOutCase1.Text = TempMachno
                    If TempMachno > FinalVelocityRule Then
                        lblVelocityOutletPipeCase1.ForeColor = Color.Red
                        lblMachNoPipeOutCase1.ForeColor = Color.Red
                    Else
                        lblVelocityOutletPipeCase1.ForeColor = Color.Black
                        lblMachNoPipeOutCase1.ForeColor = Color.Black
                    End If
                Else
                    lblVelocityOutletPipeCase1.Text = ""
                    lblMachNoPipeOutCase1.Text = ""
                End If

                If Not (txtFlowrateCase2.Text = "") Then
                    VelocityPipeCase2 = Math.Round((BafflePipeVelCase2 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityOutletPipeCase2.Text = Math.Round(VelocityPipeCase2 * 3.281, 3)
                    Else
                        lblVelocityOutletPipeCase2.Text = VelocityPipeCase2
                    End If
                    TempMachno = Math.Round(VelocityPipeCase2 / BaffleSoundVelocityCase2, 3)
                    lblMachNoPipeOutCase2.Text = TempMachno
                    If TempMachno > FinalVelocityRule Then
                        lblVelocityOutletPipeCase2.ForeColor = Color.Red
                        lblMachNoPipeOutCase2.ForeColor = Color.Red
                    Else
                        lblVelocityOutletPipeCase2.ForeColor = Color.Black
                        lblMachNoPipeOutCase2.ForeColor = Color.Black
                    End If
                Else
                    lblVelocityOutletPipeCase2.Text = ""
                    lblMachNoPipeOutCase2.Text = ""
                End If

                If Not (txtFlowrateCase3.Text = "") Then
                    VelocityPipeCase3 = Math.Round((BafflePipeVelCase3 / (Math.PI * Noise_ID * Noise_ID / 4)) / 3600, 3)
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityOutletPipeCase3.Text = Math.Round(VelocityPipeCase3 * 3.281, 3)
                    Else
                        lblVelocityOutletPipeCase3.Text = VelocityPipeCase3
                    End If
                    TempMachno = Math.Round(VelocityPipeCase3 / BaffleSoundVelocityCase3, 3)
                    lblMachNoPipeOutCase3.Text = TempMachno
                    If TempMachno > FinalVelocityRule Then
                        lblVelocityOutletPipeCase3.ForeColor = Color.Red
                        lblMachNoPipeOutCase3.ForeColor = Color.Red
                    Else
                        lblVelocityOutletPipeCase3.ForeColor = Color.Black
                        lblMachNoPipeOutCase3.ForeColor = Color.Black
                    End If
                Else
                    lblVelocityOutletPipeCase3.Text = ""
                    lblMachNoPipeOutCase3.Text = ""
                End If
                'Pipe Inlet Velocity
                If Not (txtFlowrateCase1.Text = "") Then
                    If Model = 4 Or Model = 5 Or Model = 6 Then
                        VelocityInletPipeCase1 = Math.Round(((TempFlowrateCase1 / BaffleDensityCase1) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    Else
                        VelocityInletPipeCase1 = Math.Round(((FinalFlowrateCase1 / BaffleDensityCase1) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    End If
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityInletPipeCase1.Text = Math.Round(VelocityInletPipeCase1 * 3.281, 3)
                    Else
                        lblVelocityInletPipeCase1.Text = VelocityInletPipeCase1
                    End If
                Else
                    lblVelocityInletPipeCase1.Text = ""
                End If

                If Not (txtFlowrateCase2.Text = "") Then
                    If Model = 4 Or Model = 5 Or Model = 6 Then
                        VelocityInletPipeCase2 = Math.Round(((TempFlowrateCase2 / BaffleDensityCase2) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    Else
                        VelocityInletPipeCase2 = Math.Round(((FinalFlowrateCase2 / BaffleDensityCase2) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    End If
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityInletPipeCase2.Text = Math.Round(VelocityInletPipeCase2 * 3.281, 3)
                    Else
                        lblVelocityInletPipeCase2.Text = VelocityInletPipeCase2
                    End If
                Else
                    lblVelocityInletPipeCase2.Text = ""
                End If
                If Not (txtFlowrateCase3.Text = "") Then
                    If Model = 4 Or Model = 5 Or Model = 6 Then
                        VelocityInletPipeCase3 = Math.Round(((TempFlowrateCase3 / BaffleDensityCase3) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    Else
                        VelocityInletPipeCase3 = Math.Round(((FinalFlowrateCase3 / BaffleDensityCase3) / (Math.PI * InletPipeID * InletPipeID / 4)) / 3600, 3)
                    End If
                    If cmbUnitsType.SelectedIndex = 1 Then    'FPS
                        lblVelocityInletPipeCase3.Text = Math.Round(VelocityInletPipeCase3 * 3.281, 3)
                    Else
                        lblVelocityInletPipeCase3.Text = VelocityInletPipeCase3
                    End If
                Else
                    lblVelocityInletPipeCase3.Text = ""
                End If


                End If

            'IF ALL CASES NOT SELECTED
            If FinalPressureDropCase1 <= 0 Then
                lblVelocityValveInletCase1.Text = ""
                lblVelocityValveOutletCase1.Text = ""
                lblVelocityOutletPipeCase1.Text = ""
                lblVelocityInletPipeCase1.Text = ""
                lblMachNoVavleOutCase1.Text = ""
                lblMachNoPipeOutCase1.Text = ""

            End If
            If FinalPressureDropCase2 <= 0 Then
                lblVelocityValveInletCase2.Text = ""
                lblVelocityValveOutletCase2.Text = ""
                lblVelocityOutletPipeCase2.Text = ""
                lblVelocityInletPipeCase2.Text = ""
                lblMachNoVavleOutCase2.Text = ""
                lblMachNoPipeOutCase2.Text = ""

            End If
            If FinalPressureDropCase3 <= 0 Then
                lblVelocityValveInletCase3.Text = ""
                lblVelocityValveOutletCase3.Text = ""
                lblVelocityOutletPipeCase3.Text = ""
                lblVelocityInletPipeCase3.Text = ""
                lblMachNoVavleOutCase3.Text = ""
                lblMachNoPipeOutCase3.Text = ""

            End If
        Catch ex As Exception
            MsgBox("ShowVelocity_forNoise: " & ex.Message)
        End Try
        Return Nothing

    End Function

    Public Function FindValveModel()
        ''******************************************************************************************4
        'Find Model No for FMValve                         '13102020    Changes     
        lblValveModel.Text = ""
        If cmbModel.SelectedIndex = 0 Then
            If Not lblFinalRating.Text = "" Then
                If FinalValveSize <= 4 And lblFinalRating.Text <= 300 Then
                    lblValveModel.Text = "F11"

                    If cmbBonnetType.SelectedIndex = 0 And cmbBalancing.SelectedIndex = 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "00" 'F1100	Std	Non pressure balance	IV or V
                        'F1106	Std	Non pressure balance	VI
                    ElseIf cmbBonnetType.SelectedIndex = 0 And cmbBalancing.SelectedIndex = 0 And cmbLeakage.SelectedIndex = 2 Then
                        lblValveModel.Text = lblValveModel.Text & "06" 'F1106	Std	Non pressure balance	VI
                    ElseIf cmbBonnetType.SelectedIndex = 1 And cmbBalancing.SelectedIndex = 0 And cmbLeakage.SelectedIndex = 2 Then
                        lblValveModel.Text = lblValveModel.Text & "16" 'F1116	Ext	Non pressure balance	VI
                    ElseIf cmbBonnetType.SelectedIndex = 1 And cmbBalancing.SelectedIndex = 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "10"  'F1110	Ext	Non pressure balance	IV or V
                    ElseIf cmbBonnetType.SelectedIndex = 0 And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 0 Then
                        lblValveModel.Text = lblValveModel.Text & "20" 'F1120	Std	pressure balance	IV
                    ElseIf cmbBonnetType.SelectedIndex = 1 And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 0 Then
                        lblValveModel.Text = lblValveModel.Text & "30"  'F1130	Ext	pressure balance	IV
                    ElseIf (cmbBonnetType.SelectedIndex = 0 Or cmbBonnetType.SelectedIndex = 1) And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 1 Then
                        lblValveModel.Text = lblValveModel.Text & "35"  'F1135	STd or Ext.	pressure balance	V
                    ElseIf cmbBonnetType.SelectedIndex = 2 And cmbBalancing.SelectedIndex = 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "40"  'F1140	Bellow	Non pressure balance	Any
                    ElseIf cmbBonnetType.SelectedIndex = 2 And cmbBalancing.SelectedIndex > 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "60"  'F1160	Bellow	pressure balance	Any
                    ElseIf cmbBonnetType.SelectedIndex = 2 And cmbBalancing.SelectedIndex >= 0 And cmbLeakage.SelectedIndex = 2 Then
                        lblValveModel.Text = lblValveModel.Text & "46"  'F1146	Bellow	Any	VI
                    Else
                        lblValveModel.Text = lblValveModel.Text & "  "  'Blank
                    End If

                ElseIf FinalValveSize >= 6 And FinalValveSize <= 16 And lblFinalRating.Text <= 300 Then
                    lblValveModel.Text = "F12"

                    If cmbBonnetType.SelectedIndex = 0 And cmbBalancing.SelectedIndex = 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "00" 'F1200	Std	Non pressure balance	IV or V
                    ElseIf cmbBonnetType.SelectedIndex = 0 And cmbBalancing.SelectedIndex = 0 And cmbLeakage.SelectedIndex = 2 Then
                        lblValveModel.Text = lblValveModel.Text & "06" 'F1206	Std	Non pressure balance	VI
                    ElseIf cmbBonnetType.SelectedIndex = 1 And cmbBalancing.SelectedIndex = 0 And cmbLeakage.SelectedIndex = 2 Then
                        lblValveModel.Text = lblValveModel.Text & "16" 'F1216	Ext	Non pressure balance	VI
                    ElseIf cmbBonnetType.SelectedIndex = 1 And cmbBalancing.SelectedIndex = 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "10"  'F1210	Ext	Non pressure balance	IV or V
                    ElseIf cmbBonnetType.SelectedIndex = 0 And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 0 Then
                        lblValveModel.Text = lblValveModel.Text & "20" 'F1220	Std	pressure balance	IV
                    ElseIf cmbBonnetType.SelectedIndex = 1 And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 0 Then
                        lblValveModel.Text = lblValveModel.Text & "30"  'F1230	Ext	pressure balance	IV
                    ElseIf (cmbBonnetType.SelectedIndex = 0 Or cmbBonnetType.SelectedIndex = 1) And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 1 Then
                        lblValveModel.Text = lblValveModel.Text & "35"  'F1235	STd or Ext.	pressure balance	V
                    ElseIf cmbBonnetType.SelectedIndex = 2 And cmbBalancing.SelectedIndex = 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "40"  'F1240	Bellow	Non pressure balance	Any
                    ElseIf cmbBonnetType.SelectedIndex = 2 And cmbBalancing.SelectedIndex > 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "60"  'F1260	Bellow	pressure balance	Any
                    ElseIf cmbBonnetType.SelectedIndex = 2 And cmbBalancing.SelectedIndex >= 0 And cmbLeakage.SelectedIndex = 2 Then
                        lblValveModel.Text = lblValveModel.Text & "46"  'F1146	Bellow	Any	VI
                    Else
                        lblValveModel.Text = lblValveModel.Text & "  "  'Blank
                    End If

                ElseIf FinalValveSize >= 1 And FinalValveSize <= 8 And lblFinalRating.Text <= 1500 Then
                    lblValveModel.Text = "F13"

                    If cmbBonnetType.SelectedIndex = 0 And cmbBalancing.SelectedIndex = 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "00" 'F1300	Std	Non pressure balance	IV or V
                    ElseIf cmbBonnetType.SelectedIndex = 1 And cmbBalancing.SelectedIndex = 0 And (cmbLeakage.SelectedIndex = 0 Or cmbLeakage.SelectedIndex = 1) Then
                        lblValveModel.Text = lblValveModel.Text & "10"  'F1310	Ext	Non pressure balance	IV or V
                    ElseIf cmbBonnetType.SelectedIndex = 0 And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 0 Then
                        lblValveModel.Text = lblValveModel.Text & "20"  'F1320	Std	pressure balance	IV
                    ElseIf cmbBonnetType.SelectedIndex = 1 And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 0 Then
                        lblValveModel.Text = lblValveModel.Text & "30"   'F1330	Ext	pressure balance	IV
                    ElseIf (cmbBonnetType.SelectedIndex = 0 Or cmbBonnetType.SelectedIndex = 1) And cmbBalancing.SelectedIndex > 0 And cmbLeakage.SelectedIndex = 1 Then
                        lblValveModel.Text = lblValveModel.Text & "35"      'F1335	Any	pressure balance	V
                    Else
                        lblValveModel.Text = lblValveModel.Text & "  "  'Blank
                    End If

                End If
                '***** Now Add Selected Trim 
                If Not cmbSelectedTrim.Text = "" And Not cmbSelectedTrim.Text = "--Select--" Then
                    If cmbCharacterstics.Text = "On-Off" And cmbSelectedTrim.SelectedIndex = 0 Then         'For On-off and trim P1 the model no should be S
                        lblValveModel.Text = lblValveModel.Text & "-S"
                    ElseIf cmbSelectedTrim.SelectedIndex < 2 Then
                        lblValveModel.Text = lblValveModel.Text & "-" & lblMicroTrim.Text
                    Else
                        lblValveModel.Text = lblValveModel.Text & "-" & cmbSelectedTrim.Text
                    End If
                Else
                    lblValveModel.Text = lblValveModel.Text & "-  "    ' To Blanks
                End If


                '****** Now Check Baffles
                If chkBaffleCase3.Checked = True Then
                    lblValveModel.Text = lblValveModel.Text & "-S3"
                ElseIf chkBaffleCase2.Checked = True Then
                    lblValveModel.Text = lblValveModel.Text & "-S2"
                ElseIf chkBaffleCase1.Checked = True Then
                    lblValveModel.Text = lblValveModel.Text & "-S1"
                Else
                    lblValveModel.Text = lblValveModel.Text & "  "
                End If
            Else
                lblValveModel.Text = ""
            End If




            '******************************************************************************
            'Find Model no for Ecotrol                      '13102020  Changes
        ElseIf cmbModel.SelectedIndex = 1 Then
            If Not lblFinalRating.Text = "" Then
                If FinalValveSize <= 4 And lblFinalRating.Text <= 300 Then
                    lblValveModel.Text = "8C"
                ElseIf FinalValveSize >= 6 And FinalValveSize <= 16 And lblFinalRating.Text <= 300 Then
                    lblValveModel.Text = "6N"
                ElseIf FinalValveSize >= 1 And FinalValveSize <= 8 And lblFinalRating.Text <= 1500 Then
                    lblValveModel.Text = "6H"
                End If
            Else
                lblValveModel.Text = ""
            End If
            ' ********Now Check For Bonnet
            If cmbBonnetType.SelectedIndex = 0 Then
                If cmbBalancing.SelectedIndex = 0 Then
                    lblValveModel.Text = lblValveModel.Text & "1"
                ElseIf cmbBalancing.SelectedIndex > 0 Then
                    lblValveModel.Text = lblValveModel.Text & "7"
                Else
                    lblValveModel.Text = lblValveModel.Text & " "   ' Blank
                End If
            ElseIf cmbBonnetType.SelectedIndex = 1 Then
                If cmbBalancing.SelectedIndex = 0 Then
                    lblValveModel.Text = lblValveModel.Text & "3"
                ElseIf cmbBalancing.SelectedIndex > 0 Then
                    lblValveModel.Text = lblValveModel.Text & "8"
                Else
                    lblValveModel.Text = lblValveModel.Text & " "   ' Blank
                End If
            ElseIf cmbBonnetType.SelectedIndex = 2 Then
                If cmbBalancing.SelectedIndex = 0 Then
                    lblValveModel.Text = lblValveModel.Text & "4"
                ElseIf cmbBalancing.SelectedIndex > 0 Then
                    lblValveModel.Text = lblValveModel.Text & "9"
                Else
                    lblValveModel.Text = lblValveModel.Text & " "   ' Blank
                End If
            Else
                lblValveModel.Text = lblValveModel.Text & " "   ' Blank
            End If



            '***** Now Add Selected Trim 
            If Not cmbSelectedTrim.Text = "" And Not cmbSelectedTrim.Text = "--Select--" Then
                If cmbCharacterstics.Text = "On-Off" And cmbSelectedTrim.SelectedIndex = 0 Then         'For On-off and trim P1 the model no should be S
                    lblValveModel.Text = lblValveModel.Text & "-S"

                ElseIf cmbSelectedTrim.SelectedIndex < 2 Then
                    lblValveModel.Text = lblValveModel.Text & "-" & lblMicroTrim.Text
                Else
                    lblValveModel.Text = lblValveModel.Text & "-" & cmbSelectedTrim.Text
                End If
            Else
                lblValveModel.Text = lblValveModel.Text & "-  "    ' To Blanks
            End If
            '****** Now Check Baffles
            If chkBaffleCase3.Checked = True Then
                lblValveModel.Text = lblValveModel.Text & "-S3"
            ElseIf chkBaffleCase2.Checked = True Then
                lblValveModel.Text = lblValveModel.Text & "-S2"
            ElseIf chkBaffleCase1.Checked = True Then
                lblValveModel.Text = lblValveModel.Text & "-S1"
            Else
                lblValveModel.Text = lblValveModel.Text & "-  "
            End If
        End If


        ' **************************************************************************************
        Return Nothing
    End Function

    Public Function FlowSeverity_Display(ByVal fcase As Byte) As String
        Try

            Dim Index, Priority_Check As Byte
            If Stages > 0 Or chkBaffleCase1.Checked = True Then      'If Special trim or Baffles are selected do not consider P1 trim
                Priority_Check = 1   ' Normal
                For Index = 1 To 6
                    If Not DT_Flowtype.Rows(Index).Item(fcase) = "" Then
                        If DT_Flowtype.Rows(Index).Item(fcase) = "Choke.Cavi." Then
                            FlowSeverity_Display = DT_Flowtype.Rows(Index).Item(fcase)
                            Exit For
                        ElseIf DT_Flowtype.Rows(Index).Item(fcase) = "SevereCavi" Then
                            FlowSeverity_Display = DT_Flowtype.Rows(Index).Item(fcase)
                            Priority_Check = 3          ' Severe
                        ElseIf DT_Flowtype.Rows(Index).Item(fcase) = "Inci.Cavit." Then
                            If Priority_Check < 3 Then
                                FlowSeverity_Display = DT_Flowtype.Rows(Index).Item(fcase)
                                Priority_Check = 2  ' Incipient 
                            End If
                        Else
                            If Priority_Check < 2 Then
                                FlowSeverity_Display = DT_Flowtype.Rows(Index).Item(fcase)
                                Priority_Check = 1
                            End If
                        End If
                    End If
                Next
                If Priority_Check > 1 Then
                    Hardnened_Cavitation_Choking = True
                    txtErrors.Text = "Use Hardened TRIM"
                    ToolTip2.Show("Use Hardened TRIM", lblFlowSeverity)
                End If
            Else
                FlowSeverity_Display = ""         'Directly Display what is in the P1 case
                Hardnened_Cavitation_Choking = False
                txtErrors.Text = ""
                ToolTip1.Hide(lblFlowSeverity)
            End If
        Catch ex As Exception
            MsgBox("FlowSeverity_Display : ", ex.Message)
        End Try
    End Function

    Public Function FindFP()
        '    DETERMINATION OF PIPING GEOMETRY FACTOR (FP)

        '    FP=1/(SQRT(1+((SUM Z/N2)*(CI#/d^2)^2)))
        'WHERE SUMZ=Z1+Z2+ZB1-ΖB2   AND CI#= TAKE MAXIMUM VALUE OF ACCEPTABLE 100% KV FROM STEP 11 
        'WHERE d=TAKE THE VALUE FROM KV CHART WITH RESPECT TO MAX. KV VALUE, D1=IF THE INLET DIAMETER VALUE (B54)IS GIVEN BY
        '  THE USER THEN TAKE THAT VALUE OTHERWISE TAKE d AS THE VALUE  IN METERS   , D2=  OUTLET DIAMETER CALCULATED FROM ######
        Dim Sum, d, Z1, Z2, ZB1, ZB2, D1, D2 As Single
        Dim ACase1, ACase2, ACase3, BCase1, BCase2, BCase3, Cavit_PvcCase1, Cavit_PvcCase2, Cavit_PvcCase3 As Single
        Try
            If LoadingProjectFile = False Then
                If Not lblSuggPipeSize.Text = "" Then
                    D2 = Noise_OutletPipeDia

                    d = FinalValveSize

                    If cmbInletPipeSize.Text = "--Select--" Then
                        D1 = D2
                    ElseIf FinalValveSize > cmbInletPipeSize.Text Then
                        D1 = D2
                    Else
                        D1 = InletPipeSize
                    End If


                    Z1 = 0.5 * ((1 - (d / D1) ^ 2) ^ 2)
                    Z2 = 1 * ((1 - (d / D2) ^ 2) ^ 2)
                    ZB1 = 1 - ((d / D1) ^ 4)
                    ZB2 = 1 - ((d / D2) ^ 4)

                    Sum = Z1 + Z2 + ZB1 - ZB2
                    N2 = 666

                    FP = 1 / (Math.Sqrt(1 + ((Sum / N2) * (FinalKVmax_ValveSize / (FinalValveSize ^ 2)) ^ 2)))

                    If FP > 1 Then
                        FP = 0.98
                    End If

                    lblFP.Text = Math.Round(FP, 2)
                    If FLCase1 <> 0 And FinalPressureDropCase1 > 0 Then
                        lblFLCase1.Text = Math.Round(FLCase1, 2)
                        lblXTCase1.Text = Math.Round((FLCase1 * FLCase1 * 0.85), 2)
                    Else
                        lblFLCase1.Text = ""
                        lblXTCase1.Text = ""
                    End If

                    If FLCase2 <> 0 And FinalPressureDropCase2 > 0 Then
                        lblFLCase2.Text = Math.Round(FLCase2, 2)
                        lblXTCase2.Text = Math.Round((FLCase2 * FLCase2 * 0.85), 2)
                    Else
                        lblFLCase2.Text = ""
                        lblXTCase2.Text = ""
                    End If
                    If FLCase3 <> 0 And FinalPressureDropCase3 > 0 Then
                        lblFLCase3.Text = Math.Round(FLCase3, 2)
                        lblXTCase3.Text = Math.Round((FLCase3 * FLCase3 * 0.85), 2)
                    Else
                        lblFLCase3.Text = ""
                        lblXTCase3.Text = ""

                    End If

                    FinalKVCase1 = FPKVCase1 / FP
                    FinalKVCase2 = FPKVCase2 / FP
                    FinalKVCase3 = FPKVCase3 / FP
                    If FinalKVCase1 <> 0 And Not IsDBNull(FinalKVCase1) And Not Double.IsInfinity(FinalKVCase1) Then
                        lblFinalCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                        lblFinalKVCase1.Text = Math.Round(FinalKVCase1, 2)
                    Else
                        lblFinalCVCase1.Text = ""
                        lblFinalKVCase1.Text = ""
                    End If

                    If FinalKVCase2 <> 0 And Not IsDBNull(FinalKVCase2) And Not Double.IsInfinity(FinalKVCase2) Then
                        lblFinalCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                        lblFinalKvCase2.Text = Math.Round(FinalKVCase2, 2)
                    Else
                        lblFinalCVCase2.Text = ""
                        lblFinalKvCase2.Text = ""
                    End If
                    If FinalKVCase3 <> 0 And Not IsDBNull(FinalKVCase3) And Not Double.IsInfinity(FinalKVCase3) Then
                        lblFinalCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                        lblFinalKVcase3.Text = Math.Round(FinalKVCase3, 2)
                    Else
                        lblFinalCVCase3.Text = ""
                        lblFinalKVcase3.Text = ""
                    End If


                    FindingKVMax()
                    If Not MaximumKV < FinalKVmax_ValveSize Then
                        '  MsgBox("% Opening/Flow is exceding KV rule")
                        txtErrors.Text = txtErrors.Text & vbNewLine & "% Opening/Flow is exceding Kv rule"
                    Else
                        txtErrors.Text = ""
                    End If

                End If
                If FinalValveSize > D2 Then
                    '  lblKVerrordueToValve.Visible = True

                    txtErrors.Text = txtErrors.Text & vbNewLine & "The Final Kvs/Cvs are incorrect as Valve Size is greater than Outlet Pipe Size"
                Else
                    'lblKVerrordueToValve.Visible = False
                    ' txtErrors.Text = ""
                End If


                ' Now find Model type
                Call FindValveModel()

                ' **************************************************************************************
                ' Now Calculate Stroke %

                If cmbCharacterstics.Text = "LINEAR" Or cmbCharacterstics.Text = "On-Off" Then
                    StrokeCase1 = (FinalKVCase1 / FinalKVmax_ValveSize) * 100
                    StrokeCase2 = (FinalKVCase2 / FinalKVmax_ValveSize) * 100
                    StrokeCase3 = (FinalKVCase3 / FinalKVmax_ValveSize) * 100
                Else
                    StrokeCase1 = (((Math.Log10(FinalKVCase1 / FinalKVmax_ValveSize)) / (Math.Log10(40))) + 1) * 100
                    StrokeCase2 = (((Math.Log10(FinalKVCase2 / FinalKVmax_ValveSize)) / (Math.Log10(40))) + 1) * 100
                    StrokeCase3 = (((Math.Log10(FinalKVCase3 / FinalKVmax_ValveSize)) / (Math.Log10(40))) + 1) * 100
                End If

                If StrokeCase1 < 0 Then StrokeCase1 = 0
                If StrokeCase2 < 0 Then StrokeCase2 = 0
                If StrokeCase3 < 0 Then StrokeCase3 = 0

                'check Stroke with KV max 
                ' Pending work Note1 for Stroke rule in Kv max
                If FinalPressureDropCase1 > 0 And Not IsDBNull(StrokeCase1) And Not Double.IsInfinity(StrokeCase1) Then
                    If StrokeCase1 < 15 Then
                        ' MsgBox("Stroke length of CASE 1 less than 15% ")
                        txtErrors.Text = txtErrors.Text & vbNewLine & "Stroke length of CASE 1 less than 15% "
                        lblStrokeCase1.ForeColor = Color.Red

                    ElseIf StrokeCase1 > 90 Then
                        'MsgBox("Stroke length of CASE 1 more than 90% ")
                        txtErrors.Text = txtErrors.Text & vbNewLine & "Stroke length of CASE 1 more than 90% "
                        lblStrokeCase1.ForeColor = Color.Red
                    Else
                        lblStrokeCase1.ForeColor = Color.Black
                        ' txtErrors.Text = ""
                    End If
                    lblStrokeCase1.Text = Math.Round(StrokeCase1, 1)

                    If cmbCharacterstics.Text = "On-Off" Then               ' 20102020 Changes
                        lblStrokeCase1.ForeColor = Color.Black
                        lblStrokeCase1.Text = "100"
                    End If

                    '******************************************************************************
                   

                    ' CHARt
                   

                 
                    '' frmChart.ChrtFlowCharac.Series(0).Points.AddXY(0, 0)
                    'frmChart.ChrtFlowCharac.Series(0).Points.AddXY(Math.Round(StrokeCase1, 0), Math.Round((FinalKVCase1 / FinalKVmax_ValveSize) * 100, 1))
                    'frmChart.ChrtFlowCharac.Series(0).Points.AddXY(Math.Round(StrokeCase2, 0), Math.Round((FinalKVCase2 / FinalKVmax_ValveSize) * 100, 1))
                    'frmChart.ChrtFlowCharac.Series(0).Points.AddXY(Math.Round(StrokeCase3, 0), Math.Round((FinalKVCase3 / FinalKVmax_ValveSize) * 100, 1))
                    'frmChart.ChrtFlowCharac.Series(0).Points.AddXY(Math.Round(StrokeCase1, 0), Math.Round((FinalKVCase1 / FinalKVmax_ValveSize) * 100, 1))
                    '  frmChart.ChrtFlowCharac.Series(0).Points.AddXY(100, 100)


                    '******************************************************************************
                    If TurbulentCase1 = False Then
                        lblFlowtypeCase1.Text = "Non-Turb."
                    Else
                        lblFlowtypeCase1.Text = "Turbulent"
                    End If
                Else
                    lblStrokeCase1.Text = ""
                    lblFlowtypeCase1.Text = ""
                End If


                If FinalPressureDropCase2 > 0 And Not IsDBNull(StrokeCase2) And Not Double.IsInfinity(StrokeCase2) Then
                    If StrokeCase2 < 15 Then
                        'MsgBox("Stroke length of CASE 2 less than 15% ")
                        txtErrors.Text = txtErrors.Text & vbNewLine & " Stroke length of CASE 2 less than 15%"
                        lblStrokeCase2.ForeColor = Color.Red
                    ElseIf StrokeCase2 > 90 Then
                        'MsgBox("Stroke length of CASE 2 more than 90% ")
                        txtErrors.Text = txtErrors.Text & vbNewLine & " Stroke length of CASE 2 more than 90% "
                        lblStrokeCase2.ForeColor = Color.Red
                    Else
                        ' txtErrors.Text = ""
                        lblStrokeCase2.ForeColor = Color.Black
                    End If
                    lblStrokeCase2.Text = Math.Round(StrokeCase2, 1)

                    If cmbCharacterstics.Text = "On-Off" Then               ' 20102020 Changes
                        lblStrokeCase2.ForeColor = Color.Black
                        lblStrokeCase2.Text = "100"
                    End If

                    If TurbulentCase2 = False Then
                        lblFlowtypeCase2.Text = "Non-Turb."
                    Else
                        lblFlowtypeCase2.Text = "Turbulent"
                    End If
                Else
                    lblStrokeCase2.Text = ""
                    lblFlowtypeCase2.Text = ""
                End If

                If FinalPressureDropCase3 > 0 And Not IsDBNull(StrokeCase3) And Not Double.IsInfinity(StrokeCase3) Then
                    If StrokeCase3 < 15 Then
                        ' MsgBox("Stroke length of CASE 3 less than 15% ")
                        txtErrors.Text = txtErrors.Text & vbNewLine & " Stroke length of CASE 3 less than 15% "
                        lblStrokeCase3.ForeColor = Color.Red
                    ElseIf StrokeCase3 > 90 Then
                        '  MsgBox(" Stroke length of CASE 3 more than 90% ")
                        txtErrors.Text = txtErrors.Text & vbNewLine & " Stroke length of CASE 3 more than 90% "
                        lblStrokeCase3.ForeColor = Color.Red
                    Else
                        ' txtErrors.Text = ""
                        lblStrokeCase3.ForeColor = Color.Black
                    End If
                    lblStrokeCase3.Text = Math.Round(StrokeCase3, 1)

                    If cmbCharacterstics.Text = "On-Off" Then               ' 20102020 Changes
                        lblStrokeCase3.ForeColor = Color.Black
                        lblStrokeCase3.Text = "100"
                    End If

                    If TurbulentCase3 = False Then
                        lblFlowtypeCase3.Text = "Non-Turb."
                    Else
                        lblFlowtypeCase3.Text = "Turbulent"
                    End If
                Else
                    lblStrokeCase3.Text = ""
                    lblFlowtypeCase3.Text = ""
                End If





                '*************************************************************************

                'Check Severity
                'temporary

                Hardnened_Cavitation_Choking = False
                ToolTip1.Hide(lblFlowSeverity)

                
               
                If cmbFluidType.Text = "InCompressible" Then
                    '  Call Chokedflow(FLCase1 * FLCase1, FLCase2 * FLCase2, FLCase3 * FLCase3)
                    If FinalPressureDropCase1 > 0 Then
                        lblFlowSeverity.Visible = True
                        If FlashingCase1 = False Then
                            lblSeverityCase1.Text = FlowSeverity_Display(1)
                        Else
                            lblSeverityCase1.Text = " Flashing"
                            Hardnened_Cavitation_Choking = True
                            ToolTip1.Show("Use Hardened TRIM", lblFlowSeverity)
                            txtErrors.Text = "Use Hardened TRIM"
                        End If
                    Else
                        lblSeverityCase1.Text = ""
                        Hardnened_Cavitation_Choking = False
                        txtErrors.Text = ""
                        ToolTip1.Hide(lblFlowSeverity)
                    End If

                    If FinalPressureDropCase2 > 0 Then
                        If FlashingCase2 = False Then
                            lblSeverityCase2.Text = FlowSeverity_Display(2)
                        Else
                            lblSeverityCase2.Text = " Flashing"
                            Hardnened_Cavitation_Choking = True
                            txtErrors.Text = "Use Hardened TRIM"
                            ToolTip1.Show("Use Hardened TRIM", lblFlowSeverity)
                        End If
                    Else
                        lblSeverityCase2.Text = ""
                        Hardnened_Cavitation_Choking = False
                        txtErrors.Text = ""
                        ToolTip1.Hide(lblFlowSeverity)
                    End If

                    If FinalPressureDropCase3 > 0 Then
                        If FlashingCase3 = False Then
                            lblSeverityCase3.Text = FlowSeverity_Display(3)
                        Else
                            lblSeverityCase3.Text = " Flashing"
                            Hardnened_Cavitation_Choking = True
                            txtErrors.Text = "Use Hardened TRIM"
                            ToolTip1.Show("Use Hardened TRIM", lblFlowSeverity)
                        End If
                    Else
                        lblSeverityCase3.Text = ""
                        Hardnened_Cavitation_Choking = False
                        txtErrors.Text = ""
                        ToolTip1.Hide(lblFlowSeverity)
                    End If
                End If

                If cmbFluidType.Text = "Compressible" Then
                    Call Chokedflow(FLCase1 * FLCase1 * 0.85, FLCase2 * FLCase2 * 0.85, FLCase3 * FLCase3 * 0.85)

                    If Not txtFlowrateCase1.Text = "" And Not FinalPressureDropCase1 <= 0 Then
                        If CompressibleChocked_Case1 = 1 Then lblSeverityCase1.Text = "Choked" Else lblSeverityCase1.Text = "Normal"
                    Else
                        lblSeverityCase1.Text = ""
                    End If
                    If Not txtFlowrateCase2.Text = "" And Not FinalPressureDropCase2 <= 0 Then
                        If CompressibleChocked_Case2 = 1 Then lblSeverityCase2.Text = "Choked" Else lblSeverityCase2.Text = "Normal"
                    Else
                        lblSeverityCase2.Text = ""
                    End If
                    If Not txtFlowrateCase3.Text = "" And Not FinalPressureDropCase3 <= 0 Then
                        If CompressibleChocked_Case3 = 1 Then lblSeverityCase3.Text = "Choked" Else lblSeverityCase3.Text = "Normal"
                    Else
                        lblSeverityCase3.Text = ""
                    End If
                    If CompressibleChocked_Case1 = 1 Or CompressibleChocked_Case2 = 1 Or CompressibleChocked_Case3 = 1 Then
                        Hardnened_Cavitation_Choking = True
                        txtErrors.Text = "Use Hardened TRIM"
                        ToolTip1.Show("Use Hardened TRIM", lblFlowSeverity)
                    Else
                        Hardnened_Cavitation_Choking = False
                        txtErrors.Text = ""
                        ToolTip1.Show("", lblFlowSeverity)
                    End If
                    lblMicroTrim.Text = Microtrim
                End If
            End If
        Catch ex As Exception
            MsgBox("FindFP :" & ex.Message)
        End Try
        Return Nothing
    End Function

    Public Sub CalculateNoise()
        Dim tempFDCase1, tempFDCase2, tempFDCase3, tempPressureDropCase1, tempPressureDropCase2, tempPressureDropCase3, tempFLcase1, tempFLcase2, tempFLcase3 As Single
        Dim tempKCase1, tempKCase2, tempKCase3, tempDensityCase1, tempDensityCase2, tempDensityCase3, tempZCase1, tempZCase2, tempZCase3, tempXCase1, tempXCase2, tempXCase3 As Single
        Dim tempInletPressureCase1, tempInletPressureCase2, tempInletPressureCase3 As Single
        Dim TemperatureCase1, TemperatureCase2, TemperatureCase3, tempFPKVCase1, tempFPKVCase2, tempFPKVCase3, tempFP As Single
        Dim tempToutPressureCase1, tempToutPressureCase2, tempToutPressureCase3 As Single
        Dim tempSoundVelCase1, tempSoundVelCase2, tempSoundVelCase3 As Single
        Try
            '20220920 If LoadingProjectFile = False Then
            Me.Cursor = Cursors.WaitCursor
            lblCalculating.Visible = True

            TempKvCase1 = FinalKVCase1
            TempKvCase2 = FinalKVCase2
            TempKvCase3 = FinalKVCase3

            tempFPKVCase1 = FPKVCase1
            tempFPKVCase2 = FPKVCase2
            tempFPKVCase3 = FPKVCase3

            tempPressureDropCase1 = FinalPressureDropCase1
            tempPressureDropCase2 = FinalPressureDropCase2
            tempPressureDropCase3 = FinalPressureDropCase3

            If FinalPressureDropCase1 <= 0 Then Case1Present = False Else Case1Present = True
            If FinalPressureDropCase2 <= 0 Then Case2Present = False Else Case2Present = True
            If FinalPressureDropCase3 <= 0 Then Case3Present = False Else Case3Present = True


            tempInletPressureCase1 = FinalInletPressureCase1
            tempInletPressureCase2 = FinalInletPressureCase2
            tempInletPressureCase3 = FinalInletPressureCase3

            tempOutletPressureCase1 = FinalOutletPressureCase1
            tempOutletPressureCase2 = FinalOutletPressureCase2
            tempOutletPressureCase3 = FinaloutletPressureCase3
            BaffleOutletPressureCase1 = FinalOutletPressureCase1        'For Pipe Velocity Calculations consider original OUTPressure
            BaffleOutletPressureCase2 = FinalOutletPressureCase2
            BaffleOutletPressureCase3 = FinaloutletPressureCase3


            TemperatureCase1 = FinalInletTemperatureCase1
            TemperatureCase2 = FinalInletTemperatureCase2
            TemperatureCase3 = FinalInletTemperatureCase3
            BaffleDensityCase1 = FinalDensityCase1          'This is for Pipe Velocity calculations only. 
            BaffleDensityCase2 = FinalDensityCase2
            BaffleDensityCase3 = FinalDensityCase3

            tempDensityCase1 = FinalDensityCase1
            tempDensityCase2 = FinalDensityCase2
            tempDensityCase3 = FinalDensityCase3

            tempKCase1 = Kcase1
            tempKCase2 = Kcase2
            tempKCase3 = Kcase3

            tempXCase1 = Xcase1
            tempXCase2 = Xcase2
            tempXCase3 = Xcase3

            tempFDCase1 = FDCase1
            tempFDCase2 = FDCase2
            tempFDCase3 = FDCase3

            'Zcase1 = 1
            'Zcase2 = 1
            'Zcase3 = 1
            tempZCase1 = Zcase1
            tempZCase2 = Zcase2
            tempZCase3 = Zcase3

            tempFLcase1 = FLCase1
            tempFLcase2 = FLCase2
            tempFLcase3 = FLCase3
            tempFP = FP
            '
            tempSoundVelCase1 = SoundVelocityCase1
            tempSoundVelCase2 = SoundVelocityCase2
            tempSoundVelCase3 = SoundVelocityCase3

            tempToutPressureCase1 = ToutPressureCase1
            tempToutPressureCase2 = ToutPressureCase2
            tempToutPressureCase3 = ToutPressureCase3


            For Each DTRow As DataRow In DT_Baffles.Rows
                For dtcol As Byte = 0 To 5
                    DTRow(dtcol) = 0            'clear data grid
                Next
            Next

            For Each DTRow As DataRow In Dt_NoisePrStages.Rows
                For dtcol As Byte = 0 To 2
                    DTRow(dtcol) = 0            'clear data grid
                Next
            Next

            For Each DTRow As DataRow In DT_NoiseAttenuation.Rows
                For dtcol As Byte = 0 To 2
                    DTRow(dtcol) = 0            'clear data grid
                Next
            Next

            For Each DTRow As DataRow In DT_StageWiseNoise.Rows
                For dtcol As Byte = 0 To 2
                    DTRow(dtcol) = 0            'clear data grid
                Next
            Next

            'DT_Flowtype.Clear()

            DT_Flowtype.Rows(0).Item(1) = ""
            DT_Flowtype.Rows(0).Item(2) = ""
            DT_Flowtype.Rows(0).Item(3) = ""

            DT_Flowtype.Rows(1).Item(1) = ""
            DT_Flowtype.Rows(1).Item(2) = ""
            DT_Flowtype.Rows(1).Item(3) = ""

            DT_Flowtype.Rows(2).Item(1) = ""
            DT_Flowtype.Rows(2).Item(2) = ""
            DT_Flowtype.Rows(2).Item(3) = ""

            DT_Flowtype.Rows(3).Item(1) = ""
            DT_Flowtype.Rows(3).Item(2) = ""
            DT_Flowtype.Rows(3).Item(3) = ""

            DT_Flowtype.Rows(4).Item(1) = ""
            DT_Flowtype.Rows(4).Item(2) = ""
            DT_Flowtype.Rows(4).Item(3) = ""

            DT_Flowtype.Rows(5).Item(1) = ""
            DT_Flowtype.Rows(5).Item(2) = ""
            DT_Flowtype.Rows(5).Item(3) = ""

            DT_Flowtype.Rows(6).Item(1) = ""
            DT_Flowtype.Rows(6).Item(2) = ""
            DT_Flowtype.Rows(6).Item(3) = ""


            '-------------------------------------------------------------------------------------------------------
            'Noise Calculations 
            '-------------------------------------------------------------------------------------------------------
            'Check which Trim is selected-  cmbSelectedTrim.SelectedIndex
            'if PR2 then stages = 2 PR3, PS3 then stages = 3    else Stage 1
            'Divide Pressure drop by Stages. 1st stage OutletPr = Inlet Pr - NewPD, 2nd stage OutPr = InPr2, OutPr2 =Inpr2- NewPD
            'pass this value to NoiseUnitCoversions and loop for calculations. 


            'If baffles are selected then Check Sequence - Baffle 3. Baffle 2, Baffle 1 then Cage and then Trim Noise.
            'Store the Noise Calculated of each parts of sequence in DT_NoiseAttenuation rows. 
            'When Baffle3 selected then pass Kv and then DT_Baffles- Inlet pressure will be calculated and Outlet pressure will be Valve Outlet pressure.
            'then Baffle3 Inlet pressure will Baffle2 Outlet Pressure. this will be passed in the DT_Baffles.
            'Below if - Endif Logic- The last Baffle gets the Outlet pressure. So as per selection of Baffle the Outletpressure 
            'Will be assigned. 


            NoiseAttenuationFlag = False
            Call NoiseUnitConversions()
            If cmbFluidType.Text = "InCompressible" Then
                Call NoiseCalculations()
            Else
                Call NoiseCalculationsForCompressible()
            End If



            '  Call FlowSeverity_Select(2)


            ' BASIC NOISE TO BE STORED
            DT_NoiseAttenuation.Rows(4).Item(0) = FinalNoiseLevelCase1
            DT_NoiseAttenuation.Rows(4).Item(1) = FinalNoiseLevelCase2
            DT_NoiseAttenuation.Rows(4).Item(2) = FinalNoiseLevelCase3

            If chkNoiseAttenuation.Checked = True Then
                NoiseAttenuationFlag = True
            End If



            'Fixed FL for Baffles
            FLCase1 = 0.8
            FLCase2 = 0.8
            FLCase3 = 0.8
            FDCase1 = 0.2
            FDCase2 = 0.2
            FDCase3 = 0.2

            If chkBaffleCase3.Checked = True Then
                DT_Baffles.Rows(0).Item(3) = FinalOutletPressureCase1
                DT_Baffles.Rows(0).Item(4) = FinalOutletPressureCase2
                DT_Baffles.Rows(0).Item(5) = FinaloutletPressureCase3
                Call Noise_Baffles(BaffleKVCase3, 1)
                Call FlowSeverity_Select(6)
                MFac_PR3 = 1
            ElseIf chkBaffleCase2.Checked = True Then
                DT_Baffles.Rows(1).Item(3) = FinalOutletPressureCase1
                DT_Baffles.Rows(1).Item(4) = FinalOutletPressureCase2
                DT_Baffles.Rows(1).Item(5) = FinaloutletPressureCase3
                MFac_PR3 = 0
            ElseIf chkBaffleCase1.Checked = True Then
                DT_Baffles.Rows(2).Item(3) = FinalOutletPressureCase1
                DT_Baffles.Rows(2).Item(4) = FinalOutletPressureCase2
                DT_Baffles.Rows(2).Item(5) = FinaloutletPressureCase3
                MFac_PR3 = 0
            Else
                MFac_PR3 = 0
            End If


            If chkBaffleCase2.Checked = True Then
                'For Compressible this is needed
                If cmbFluidType.SelectedIndex = 1 Then    'Compressible
                    FinalInletPressureCase1 = tempInletPressureCase1
                    FinalInletPressureCase2 = tempInletPressureCase2
                    FinalInletPressureCase3 = tempInletPressureCase3
                    FinalInletTemperatureCase1 = TemperatureCase1
                    FinalInletTemperatureCase2 = TemperatureCase2
                    FinalInletTemperatureCase3 = TemperatureCase3
                End If
                Call Noise_Baffles(BaffleKVCase2, 2)
                Call FlowSeverity_Select(5)
                MFac_PR3 = 1
                MFac_PR2 = 1
            Else
                MFac_PR2 = 0
            End If

            If chkBaffleCase1.Checked = True Then
                If cmbFluidType.SelectedIndex = 1 Then    'Compressible
                    FinalInletPressureCase1 = tempInletPressureCase1
                    FinalInletPressureCase2 = tempInletPressureCase2
                    FinalInletPressureCase3 = tempInletPressureCase3
                    FinalInletTemperatureCase1 = TemperatureCase1
                    FinalInletTemperatureCase2 = TemperatureCase2
                    FinalInletTemperatureCase3 = TemperatureCase3
                End If
                Call Noise_Baffles(BaffleKVCase1, 3)
                Call FlowSeverity_Select(4)
                MFac_PR3 = 1
                MFac_PR1 = 1
                FinalOutletPressureCase1 = DT_Baffles(2).Item(0)
                FinalOutletPressureCase2 = DT_Baffles(2).Item(1)
                FinaloutletPressureCase3 = DT_Baffles(2).Item(2)
            Else
                MFac_PR1 = 0
                FinalOutletPressureCase1 = tempOutletPressureCase1          'If No Baffle then load Trim outpressure as out
                FinalOutletPressureCase2 = tempOutletPressureCase2          'as outlet pressure for cage or normal noise. 
                FinaloutletPressureCase3 = tempOutletPressureCase3
            End If


            FinalInletPressureCase1 = tempInletPressureCase1
            FinalInletPressureCase2 = tempInletPressureCase2
            FinalInletPressureCase3 = tempInletPressureCase3

            FLCase1 = tempFLcase1
            FLCase2 = tempFLcase2
            FLCase3 = tempFLcase3


            'Now Check for Noise Cage Attenuation  - Note Cage not available for PR2 and PR3 
            If chkNoiseAttenuation.Checked = True And Not (cmbSelectedTrim.SelectedIndex = 3 Or cmbSelectedTrim.SelectedIndex = 4) Then
                FinalKVCase1 = TempKvCase1
                FinalKVCase2 = TempKvCase2
                FinalKVCase3 = TempKvCase3
                Call NoiseAttenuation()
                Call FlowSeverity_Select(1)
                MFac_Cage = 1
                '20200204 Checking
                FinalPressureDropCase1 = FinalInletPressureCase1 - Cage_PressureCase1
                FinalPressureDropCase2 = FinalInletPressureCase2 - Cage_PressureCase2
                FinalPressureDropCase3 = FinalInletPressureCase3 - Cage_PressureCase3
                Call Chokedflow((FLCase1 * FLCase1), (FLCase2 * FLCase2), (FLCase3 * FLCase3))
                Call CalculateKVCV()
                FPKVCase1 = FinalKVCase1
                FPKVCase2 = FinalKVCase2
                FPKVCase3 = FinalKVCase3
                Call FindFP()
                '20200204 Checking

            Else
                FinalPressureDropCase1 = FinalInletPressureCase1 - FinalOutletPressureCase1
                FinalPressureDropCase2 = FinalInletPressureCase2 - FinalOutletPressureCase2
                FinalPressureDropCase3 = FinalInletPressureCase3 - FinaloutletPressureCase3
                MFac_Cage = 0
                'then Calculate Normalm Noise. 
                If MFac_PR1 = 1 Then

                    Call Chokedflow((FLCase1 * FLCase1), (FLCase2 * FLCase2), (FLCase3 * FLCase3))
                    Call CalculateKVCV()
                    FPKVCase1 = FinalKVCase1
                    FPKVCase2 = FinalKVCase2
                    FPKVCase3 = FinalKVCase3
                    Call FindFP()
                    KVAttenuatedCase1 = FinalKVCase1
                    KVAttenuatedCase2 = FinalKVCase2
                    KVAttenuatedCase3 = FinalKVCase3
                    Call NoiseUnitConversions()
                    If cmbFluidType.Text = "InCompressible" Then
                        Call NoiseCalculations()
                    Else
                        Call NoiseCalculationsForCompressible()
                    End If
                    ' Call FlowSeverity_Select(2)
                End If
            End If
            ''''''    Changes  20201026 
            ' Noise add to Trim Noise as per Baffle and Noise Attn
            Dim DeltaLPE_Resistance As Single = (MFac_PR1 * 5) + (MFac_PR2 * 5) + (MFac_PR3 * 5) + (MFac_Cage * 5)

            If MFac_PR1 + MFac_PR2 + MFac_PR3 + MFac_Cage > 0 Then              'Any Baffle or Cage present 

                AttneuatedNoiseLevelCase1 = 10 * Math.Log10((MFac_PR3 * Math.Pow(10, (DT_NoiseAttenuation.Rows(0).Item(0) / 10))) + (MFac_PR2 * Math.Pow(10, (DT_NoiseAttenuation.Rows(1).Item(0) / 10))) + (MFac_PR1 * Math.Pow(10, (DT_NoiseAttenuation.Rows(2).Item(0) / 10))) + (MFac_Cage * Math.Pow(10, ((DT_NoiseAttenuation.Rows(3).Item(0) - DeltaLPE_Resistance) / 10))))
                AttneuatedNoiseLevelCase2 = 10 * Math.Log10((MFac_PR3 * Math.Pow(10, (DT_NoiseAttenuation.Rows(0).Item(1) / 10))) + (MFac_PR2 * Math.Pow(10, (DT_NoiseAttenuation.Rows(1).Item(1) / 10))) + (MFac_PR1 * Math.Pow(10, (DT_NoiseAttenuation.Rows(2).Item(1) / 10))) + (MFac_Cage * Math.Pow(10, ((DT_NoiseAttenuation.Rows(3).Item(1) - DeltaLPE_Resistance) / 10))))
                AttneuatedNoiseLevelCase3 = 10 * Math.Log10((MFac_PR3 * Math.Pow(10, (DT_NoiseAttenuation.Rows(0).Item(2) / 10))) + (MFac_PR2 * Math.Pow(10, (DT_NoiseAttenuation.Rows(1).Item(2) / 10))) + (MFac_PR1 * Math.Pow(10, (DT_NoiseAttenuation.Rows(2).Item(2) / 10))) + (MFac_Cage * Math.Pow(10, ((DT_NoiseAttenuation.Rows(3).Item(2) - DeltaLPE_Resistance) / 10))))
            Else
                AttneuatedNoiseLevelCase1 = 0
                AttneuatedNoiseLevelCase2 = 0
                AttneuatedNoiseLevelCase3 = 0
            End If
            frmTestingGrids.DGVBaffleNoise.Visible = True
            frmTestingGrids.DGVBaffleNoise.DataSource = DT_NoiseAttenuation

            frmTestingGrids.DGVPressures.Visible = True
            frmTestingGrids.DGVPressures.DataSource = DT_Baffles

            If chkInsulation.Checked = True Then
                NoiseInsulation = 12    '' Default Noise dB for 1 inch thickness
            End If

            'End If


            FinalDensityCase1 = tempDensityCase1
            FinalDensityCase2 = tempDensityCase2
            FinalDensityCase3 = tempDensityCase3

            ' AS the Baffles changes the Outlet PRessure for velocity calculations Toutpressure should be also changed, but only for temporary calculations
            If Model = 4 Or Model = 5 Or Model = 6 Then                           'Not applicable for PRDS
                ToutPressureCase1 = T_ph(FinalOutletPressureCase1, h_pT(FinalOutletPressureCase1, FinalInletTemperatureCase1)) + 0.1
                ToutPressureCase2 = T_ph(FinalOutletPressureCase2, h_pT(FinalOutletPressureCase2, FinalInletTemperatureCase2)) + 0.1
                ToutPressureCase3 = T_ph(FinaloutletPressureCase3, h_pT(FinaloutletPressureCase3, FinalInletTemperatureCase3)) + 0.1

            Else
                ToutPressureCase1 = T_ph(FinalOutletPressureCase1, h_pT(FinalInletPressureCase1, TemperatureCase1)) + 0.1
                ToutPressureCase2 = T_ph(FinalOutletPressureCase2, h_pT(FinalInletPressureCase2, TemperatureCase2)) + 0.1
                ToutPressureCase3 = T_ph(FinaloutletPressureCase3, h_pT(FinalInletPressureCase3, TemperatureCase3)) + 0.1

            End If

            Call CalculateFlowVelocity_ForNoise()
            Call ShowVelocity_forNoise()
            Call showNoise()

            FinalKVCase1 = TempKvCase1
            FinalKVCase2 = TempKvCase2
            FinalKVCase3 = TempKvCase3


            FinalInletTemperatureCase1 = TemperatureCase1
            FinalInletTemperatureCase2 = TemperatureCase2
            FinalInletTemperatureCase3 = TemperatureCase3

            FinalOutletPressureCase1 = tempOutletPressureCase1          'If No Baffle then load Trim outpressure as out
            FinalOutletPressureCase2 = tempOutletPressureCase2          'as outlet pressure for cage or normal noise. 
            FinaloutletPressureCase3 = tempOutletPressureCase3


            FinalInletPressureCase1 = tempInletPressureCase1
            FinalInletPressureCase2 = tempInletPressureCase2
            FinalInletPressureCase3 = tempInletPressureCase3
            FinalPressureDropCase1 = tempPressureDropCase1
            FinalPressureDropCase2 = tempPressureDropCase2
            FinalPressureDropCase3 = tempPressureDropCase3



            Kcase1 = tempKCase1
            Kcase2 = tempKCase2
            Kcase3 = tempKCase3

            Xcase1 = tempXCase1
            Xcase2 = tempXCase2
            Xcase3 = tempXCase3

            FDCase1 = tempFDCase1
            FDCase2 = tempFDCase2
            FDCase3 = tempFDCase3

            Zcase1 = tempZCase1
            Zcase2 = tempZCase2
            Zcase3 = tempZCase3

            FLCase1 = tempFLcase1
            FLCase2 = tempFLcase2
            FLCase3 = tempFLcase3
            FPKVCase1 = tempFPKVCase1
            FPKVCase2 = tempFPKVCase2
            FPKVCase3 = tempFPKVCase3

            FP = tempFP
            SoundVelocityCase1 = tempSoundVelCase1
            SoundVelocityCase2 = tempSoundVelCase2
            SoundVelocityCase3 = tempSoundVelCase3

            ToutPressureCase1 = tempToutPressureCase1
            ToutPressureCase2 = tempToutPressureCase2
            ToutPressureCase3 = tempToutPressureCase3
            Me.Cursor = Cursors.Default
            lblCalculating.Visible = False
            'CheckforPerforation(FinalKVCase1, FinalKVCase2, FinalKVCase3)
            '   End If
        Catch ex As Exception
            MsgBox("Calculate Noise:" & "  " & ex.Message)
        End Try
    End Sub
    Public Sub KVoverride()
        Try
            If LoadingForm = True Then
                If LoadingProjectFile = False Then
                    If Not txtSuggestedKV.Text = "" Then
                        If NoFPCalc = False Then
                            If Not cmbKVOverride.Text = "" And Not cmbKVOverride.Text = "--Select--" Then

                                '  Call CalculatefromKVseries()
                                'If cmbKVOverride.SelectedIndex > -1 Then
                                If cmbSelectedTrim.SelectedIndex < 2 Then   ' Only for PS1 and PS3
                                    If CSng(txtSuggestedKV.Text) > CSng(cmbKVOverride.Text) And Not cmbKVOverride.Text = "" Then
                                        GroupBox1.BackColor = Color.AntiqueWhite
                                        GroupBox2.BackColor = Color.AntiqueWhite
                                        GroupBox3.BackColor = Color.AntiqueWhite
                                    Else
                                        GroupBox1.BackColor = Color.LightSteelBlue
                                        GroupBox2.BackColor = Color.LightSteelBlue
                                        GroupBox3.BackColor = Color.LightSteelBlue
                                    End If
                                    If Not cmbKVOverride.Text = "" And Not cmbKVOverride.SelectedIndex < 0 And Not cmbSelectedTrim.SelectedIndex < 0 Then
                                        Call FindValveSize(SuggestedKVArray(cmbKVOverride.SelectedIndex), (cmbSelectedTrim.SelectedIndex + 1))                    'To calculate again the available valve sizes for the selected KVMAX
                                    End If
                                    FinalKVCase1 = FinalShowKVCase1(cmbKVOverride.SelectedIndex)
                                    FinalKVCase2 = FinalShowKVCase2(cmbKVOverride.SelectedIndex)
                                    FinalKVCase3 = FinalShowKVCase3(cmbKVOverride.SelectedIndex)


                                    FPKVCase1 = FinalShowKVCase1(cmbKVOverride.SelectedIndex)
                                    FPKVCase2 = FinalShowKVCase2(cmbKVOverride.SelectedIndex)
                                    FPKVCase3 = FinalShowKVCase3(cmbKVOverride.SelectedIndex)

                                    ' cmbValveSizeOverride.SelectedIndex = 0                                '15102020  Changes
                                    FinalKVmax_ValveSize = SuggestedKVArray(cmbKVOverride.SelectedIndex)
                                    lblKVMaxValue.Text = cmbKVOverride.Text
                                    'FinalValveSize = FinalValveSizeforNoise(cmbValveSizeOverride.SelectedIndex)  '15102020  Changes
                                    ' lblFinalValveSize.Text = cmbValveSizeOverride.Text                            '15102020  Changes 

                                    TurbulentCase1 = FlowTypeCase1(cmbKVOverride.SelectedIndex)
                                    TurbulentCase2 = FlowTypeCase2(cmbKVOverride.SelectedIndex)
                                    TurbulentCase3 = FlowTypeCase3(cmbKVOverride.SelectedIndex)

                                    FLCase1 = FLCase1_array(cmbKVOverride.SelectedIndex)
                                    FLCase2 = FLCase2_array(cmbKVOverride.SelectedIndex)
                                    FLCase3 = FLCase3_array(cmbKVOverride.SelectedIndex)

                                    FDCase1 = FDCase1_array(cmbKVOverride.SelectedIndex)
                                    FDCase2 = FDCase2_array(cmbKVOverride.SelectedIndex)
                                    FDCase3 = FDCase3_array(cmbKVOverride.SelectedIndex)
                                    Microtrim = MicroTrim_Array(cmbKVOverride.SelectedIndex)
                                    lblMicroTrim.Text = Microtrim
                                    If (cmbSelectedTrim.SelectedIndex < 2 And (Microtrim = "M1" Or Microtrim = "M3")) Then   ' For MicroTrim only FTC available
                                        cmbFlowDirection.SelectedIndex = 1       'FTC
                                        '  MsgBox("PR2 and PR3 not available for FT", , "Alert!")
                                        '  cmbSelectedTrim.SelectedIndex = 0
                                        ' Exit Sub
                                    Else
                                        cmbFlowDirection.SelectedIndex = 0        'FTO
                                        'MsgBox("PS1,PS3 and PR1 not available for FTC", , "Alert!")
                                        'cmbSelectedTrim.SelectedIndex = 0       'back to Parabolic
                                        'Exit Sub
                                    End If
                                    If Not cmbValveSizeOverride.SelectedIndex < 0 Then
                                        SeatDia = SeatDia_array(cmbValveSizeOverride.SelectedIndex)
                                        PrBl_SeatDia = PrBl_SeatDia_array(cmbValveSizeOverride.SelectedIndex) '

                                        cmbSeatDia.Items.Clear()
                                        If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                            cmbSeatDia.Items.Add(SeatDia)
                                        Else
                                            cmbSeatDia.Items.Add(Math.Round(SeatDia / 25.4, 2))
                                        End If
                                        cmbSeatDia.SelectedIndex = 0
                                    End If


                                    KVMaxAcceptButton = True
                                    btnValveSizeAccept.Enabled = True
                                Else
                                    If Not cmbValveSizeOverride.Text = "" And Not cmbValveSizeOverride.Text = "--Select--" Then 'Store the last value
                                        Dim Oldvalvesize As String = cmbValveSizeOverride.Text
                                        Dim OldFinalValveSize As String = FinalValveSize
                                        CheckKV(CSng(cmbKVOverride.Text), FinalValveSize, cmbSelectedTrim.SelectedIndex, 1)
                                        cmbValveSizeOverride.Text = Oldvalvesize
                                        FinalValveSize = OldFinalValveSize
                                    End If

                                End If
                            End If

                        End If
                    End If
                End If
            End If

        Catch ex As Exception
            ToolTip1.Show("KvOverride selection:" & "  " & ex.Message, cmbKVOverride, 5000)
        End Try
    End Sub

    Private Sub cmbKVOverride_Click(sender As Object, e As EventArgs) Handles cmbKVOverride.Click
        cmbKVOverride.BackColor = Color.White
    End Sub

    'Private Sub cmbKVOverride_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbKVOverride.SelectionChangeCommitted
    '    If LoadingForm = True Then
    '        If LoadingProjectFile = False Then
    '            cmbKVOverride.Text = cmbKVOverride.SelectedItem
    '            cmbKVOverride.SelectedIndex = cmbKVOverride.FindString(cmbKVOverride.Text)
    '            Call KVoverride()
    '            Call ValveSizeOverride()
    '        End If
    '    End If
    'End Sub

    'Private Sub cmbKVOverride_TextChanged(sender As Object, e As EventArgs) Handles cmbKVOverride.TextChanged
    '    If LoadingForm = True Then
    '        If LoadingProjectFile = False Then
    '            Call KVoverride()
    '            Call ValveSizeOverride()
    '        End If
    '    End If
    'End Sub

    Public Function ACCEPTKV()
        Try
            If LoadingProjectFile = False Then
                FinalKVmax_ValveSize = MaxKVsfromChart(0)

                FPKVCase1 = FinalShowKVCase1(0)
                FPKVCase2 = FinalShowKVCase2(0)
                FPKVCase3 = FinalShowKVCase3(0)
                TurbulentCase1 = FlowTypeCase1(0)
                TurbulentCase2 = FlowTypeCase2(0)
                TurbulentCase3 = FlowTypeCase3(0)
                FLCase1 = FLCase1_array(0)
                FLCase2 = FLCase2_array(0)
                FLCase3 = FLCase3_array(0)
                FDCase1 = FDCase1_array(0)
                FDCase2 = FDCase2_array(0)
                FDCase3 = FDCase3_array(0)
                SeatDia = SeatDia_array(0)
                PrBl_SeatDia = PrBl_SeatDia_array(0)
                Microtrim = MicroTrim_Array(0)
                'If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                '    lblSeatDia.Text = SeatDia
                'Else
                '    lblSeatDia.Text = Math.Round(SeatDia / 25.4, 2)
                'End If
                KVMaxAcceptButton = True
                '  lblKVMaxValue.Text = txtSuggestedKV.Text
                'If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                '    lblKVMaxValue.Text = MaxKVsfromChart(0)
                'Else
                '    lblKVMaxValue.Text = MaxCvsfromChart(0)
                'End If
                btnValveSizeAccept.Enabled = True

                'Call FindFP()
            End If
        Catch ex As Exception
            MsgBox("btnKVAccept_Click:  " & ex.Message)
        End Try
    End Function

    Private Sub btnKVAccept_Click(sender As Object, e As EventArgs) Handles btnKVAccept.Click
        Call ACCEPTKV()
    End Sub

    Public Function ConfirmValveSize()
        Try
            '  If KVMaxAcceptButton = False Then
            'MsgBox("Please Accept Selected KV or Select from KV options first.")
            'btnKVAccept.Focus()

            'Else

            'FinalValveSize = CSng(txtSuggestedValveSize.Text)
            Dim NoiseAttnCheckedState As Boolean
            If LoadingProjectFile = False Then
                FinalNoiseLevelCase1 = 0
                FinalNoiseLevelCase2 = 0
                FinalNoiseLevelCase3 = 0
                NoiseAttnCheckedState = chkNoiseAttenuation.Checked
                chkNoiseAttenuation.Checked = False
                FinalValveSize = FinalValveSizeforNoise(0)
                lblFinalValveSize.Text = txtSuggestedValveSize.Text
                DT_ActuatorInfo.Rows(0).Item(1) = lblFinalValveSize.Text
                Call CalculateNoise()
                Call FindFP()
                If NoiseAttnCheckedState = True Then
                    chkNoiseAttenuation.Checked = True
                End If
            End If
        Catch ex As Exception
            MsgBox("btnValveSizeAccept_Click:  " & ex.Message)
        End Try
    End Function
    Private Sub btnValveSizeAccept_Click(sender As Object, e As EventArgs) Handles btnValveSizeAccept.Click
        Call ConfirmValveSize()
    End Sub

    Public Sub LoadInletSchedule()
        Dim i, x, j As Int16
        Dim count As Byte
        Try
            If LoadingForm = True Then
                If Not lblSuggPipeSize.Text = "" Then
                    If Not cmbInletPipeSize.Text = "--Select--" Then
                        '20170623 workbook = APP.Workbooks.Open(AppPath & "\Database\PipeSchedule.xlsx")
                        ' worksheet = workbook.Worksheets("sheet1")
                        InletPipeSize = PipeInletSizeArray(cmbInletPipeSize.SelectedIndex)
                        PipeInletOD = PipeInletODArray(cmbInletPipeSize.SelectedIndex)
                        If cmbInletPipeSchedule.SelectedIndex < 0 Or LoadingProjectFile = True Then
                            cmbInletPipeSchedule.Items.Clear()
                            With DT_PipeSchedule1 'PipeSheet1_worksheet
                                LastRow = .Rows.Count - 2  '.Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                                LastColumn = .Columns.Count - 1    '.Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column
                                count = 0
                                For x = 4 To LastColumn
                                    ' If (CSng(.Cells((cmbInletPipeSize.SelectedIndex + 2), x).Value)) > 0 Then
                                    If (CSng(.Rows(cmbInletPipeSize.SelectedIndex).Item(x))) > 0 Then
                                        'cmbInletPipeSchedule.Items.Add(.Rows(0).Item(x)) '(.Cells(1, x).Value)
                                        'InletScheduleArray(count) = CSng(.Rows(cmbInletPipeSize.SelectedIndex).Item(x)) 'CSng(.Cells(cmbInletPipeSize.SelectedIndex + 2, x).Value)

                                        cmbInletPipeSchedule.Items.Add(.Columns(x).ColumnName.ToString()) '(.Cells(1, x).Value)
                                        InletScheduleArray(count) = CSng(.Rows(cmbInletPipeSize.SelectedIndex).Item(x)) 'CSng(.Cells(cmbInletPipeSize.SelectedIndex + 2, x).Value)

                                        count = count + 1
                                    End If
                                Next x
                                If cmbInletPipeSchedule.Items.Count = 0 Then
                                    'MsgBox("Wrong Inlet Pipe size,no schedule available")
                                    txtErrors.Text = txtErrors.Text & vbNewLine & "Wrong Inlet Pipe size,no schedule available"
                                Else
                                    txtErrors.Text = ""
                                End If
                                If InletPipeSelected = True Then
                                    cmbInletPipeSchedule.Text = "Sch 40"
                                    cmbInletPipeSchedule.SelectedIndex = cmbInletPipeSchedule.FindStringExact("Sch 40")
                                    If cmbInletPipeSchedule.SelectedIndex < 0 Then
                                        cmbInletPipeSchedule.Text = "Sch STD"
                                        cmbInletPipeSchedule.SelectedIndex = cmbInletPipeSchedule.FindString("Sch STD")
                                    End If
                                    If cmbInletPipeSchedule.SelectedIndex < 0 Then
                                        cmbInletPipeSchedule.Text = "Sch XS"
                                        cmbInletPipeSchedule.SelectedIndex = cmbInletPipeSchedule.FindString("Sch XS")
                                    End If
                                End If
                            End With
                        End If

                        If Not cmbInletPipeSchedule.SelectedIndex < 0 Then
                            InletPipeID = PipeInletOD - (2 * InletScheduleArray(cmbInletPipeSchedule.SelectedIndex))
                            InletPipeID = InletPipeID * 25.4 / 1000     ' meters
                        End If

                    End If

                End If
            End If
        Catch ex As Exception
            MsgBox(ex.TargetSite.ToString & "cmbInletPipeSize_SelectedIndexChanged:  " & ex.Message)
        End Try
    End Sub

    Private Sub cmbInletPipeSize_Click(sender As Object, e As EventArgs) Handles cmbInletPipeSize.Click
        cmbInletPipeSize.BackColor = Color.White
    End Sub
    Private Sub cmbInletPipeSize_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbInletPipeSize.SelectedIndexChanged
        If LoadingForm = True Then
            If LoadingProjectFile = False Then
                InletPipeSelected = True
                Call LoadInletSchedule()
                InletPipeSelected = False
                If Not txtSuggestedValveSize.Text = "" And Not txtSuggestedValveSize.Text = "0" Then '  And Not txtSuggested Then
                    Call ShowResults()
                End If
            End If
        End If
    End Sub

    Public Function AllCalculations()
        Try

            If LoadingProjectFile = False Then
                If cmbFluidType.Text = "InCompressible" Then
                    FL = 0.64
                Else

                    FL = 0.7
                End If
             
                CalculateDensity()
                If Model = 4 Or Model = 5 Or Model = 6 Then
                    CalcWaterFlowrate()
                End If

                Call Chokedflow(FL, FL, FL)
                Call CalculateKVCV()
                InitialKVCase1 = FinalKVCase1
                InitialKVCase2 = FinalKVCase2
                InitialKVCase3 = FinalKVCase3
                If FinalKVCase1 <> 0 Or FinalKVCase2 <> 0 Or FinalKVCase3 <> 0 Then
                    Call CalculateRatings()

                    Call ConfirmRating()
                    Call PipeSelection("Schedule")
                    'Call VelocityRule()
                    If (FinalPressureDropCase1 > 0 Or FinalPressureDropCase2 > 0 Or FinalPressureDropCase3 > 0) Then
                        Call RECalculate()

                        If Not txtAirPressure.Text = "" And Not cmbAirPressureUnits.SelectedIndex = -1 Then
                            Call ValveActuator()
                        End If
                    End If
                End If
                If InitialKVCase1 <> 0 And Not IsDBNull(InitialKVCase1) And Not Double.IsInfinity(InitialKVCase1) Then
                    lblApproxCVCase1.Text = Math.Round((InitialKVCase1 * 1.17), 2)
                    lblKVCase1.Text = Math.Round(InitialKVCase1, 2)
                Else
                    lblApproxCVCase1.Text = ""
                    lblKVCase1.Text = ""
                End If
                If InitialKVCase2 <> 0 And Not IsDBNull(InitialKVCase2) And Not Double.IsInfinity(InitialKVCase2) Then
                    lblApproxCVCase2.Text = Math.Round((InitialKVCase2 * 1.17), 2)
                    lblKVCase2.Text = Math.Round(InitialKVCase2, 2)
                Else
                    lblApproxCVCase2.Text = ""
                    lblKVCase2.Text = ""
                End If
                If InitialKVCase3 <> 0 And Not IsDBNull(InitialKVCase3) And Not Double.IsInfinity(InitialKVCase3) Then
                    lblApproxCVCase3.Text = Math.Round((InitialKVCase3 * 1.17), 2)
                    lblKVCase3.Text = Math.Round(InitialKVCase3, 2)
                Else
                    lblApproxCVCase3.Text = ""
                    lblKVCase3.Text = ""
                End If

          

            End If
        Catch ex As Exception
            MsgBox("AllCalculations  " & ex.Message)
        End Try

    End Function

    '******************************************************************************************************
    'Stage 3  Noise calculations and Noise Attenuations

    Public Function NoiseUnitConversions()

        
        '??????????????????????????????????????????????????????????/
        Try
            If LoadingProjectFile = False Then

                'MassFlowrate
                Noise_FlowrateCase1 = (FinalFlowrateCase1 * FinalDensityCase1 * 1000 / 3600)
                Noise_FlowrateCase2 = (FinalFlowrateCase2 * FinalDensityCase2 * 1000 / 3600)
                Noise_FlowrateCase3 = (FinalFlowrateCase3 * FinalDensityCase3 * 1000 / 3600)

                Noise_InletPressureCase1 = FinalInletPressureCase1 * 100000
                Noise_InletPressureCase2 = FinalInletPressureCase2 * 100000
                Noise_InletPressureCase3 = FinalInletPressureCase3 * 100000

                Noise_OutletPressureCase1 = FinalOutletPressureCase1 * 100000
                Noise_OutletPressureCase2 = FinalOutletPressureCase2 * 100000
                Noise_OutletPressureCase3 = FinaloutletPressureCase3 * 100000

                Noise_VapourPressureCase1 = FinalVapourPressureCase1 * 100000
                Noise_VapourPressureCase2 = FinalVapourPressureCase2 * 100000
                Noise_VapourPressureCase3 = FinalVapourPressureCase3 * 100000

                Noise_DensityCase1 = FinalDensityCase1 * 1000
                Noise_DensityCase2 = FinalDensityCase2 * 1000
                Noise_DensityCase3 = FinalDensityCase3 * 1000

                '20170623  workbook = APP.Workbooks.Open(AppPath & "\Database\PipeSchedule.xlsx")
                Dim i, j As Integer
                'worksheet = workbook.Worksheets("sheet2")  '' This sheet is made for special purpose to find the schedule and ratings as per valve size
                With DT_PipeSchedule2 'PipeSheet2_worksheet
                    LastRow = .Rows.Count - 2   '.Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                    LastColumn = .Columns.Count - 1 '.Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column
                    For i = 0 To LastRow

                        If FinalValveSize = .Rows(i).Item(1) Then  'CSng(.Cells(i, 2).value) Then
                            For j = 2 To LastColumn
                                If SuggestedRating = CInt(.Columns(j).ColumnName.ToString()) Then 'CSng(.Cells(1, j).value) Then
                                    Noise_ValveID = CSng(.Rows(i).Item(j).ToString()) / 1000  '(CSng(.Cells(i, j).value)) / 1000  ' in meters

                                    Exit For
                                End If
                            Next
                            Exit For
                        End If
                    Next
                End With



            End If
        Catch ex As Exception
            MsgBox("NoiseUnitConversions:  " & ex.Message)
        Finally
            '    APP.Workbooks.Close()
        End Try
        Return Nothing
    End Function
    Public Function FlowSeverity_Find(ByVal ChokedPressure As Single, ByVal InletPressure As Single, ByVal OutletPressure As Single, ByVal FL As Single, ByVal VapourPressure As Single) As String
        Try

            Dim a, N_B, N_Cavit_Pvc, PressureDrop As Single

            PressureDrop = InletPressure - OutletPressure
            a = FL * ChokedPressure
            N_B = ChokedPressure
            N_Cavit_Pvc = InletPressure - ((PressureDrop) / (FL * FL))
            If N_Cavit_Pvc < VapourPressure Then
                If ((a < PressureDrop) And (N_B < PressureDrop)) Then
                    FlowSeverity_Find = "Choke.Cavi."

                ElseIf ((a < PressureDrop) And (N_B > PressureDrop)) Then
                    FlowSeverity_Find = "SevereCavi"

                Else
                    FlowSeverity_Find = "Incp.Cavi."

                End If
            Else
                FlowSeverity_Find = " Normal"
            End If
        Catch ex As Exception
            MsgBox("FlowSeverity_Find:  " & ex.Message)
        End Try

    End Function
    Public Function FlowSeverity_Select(ByVal index As Byte)
        Try
            If FlowSeverityCase1 = "SevereCavi" Or FlowSeverityCase1 = "Choke.Cavi." Then
                DT_Flowtype.Rows(index).Item(1) = FlowSeverityCase1
            ElseIf N_FlowTypeCAse1 = 2 Then
                DT_Flowtype.Rows(index).Item(1) = "Inci.Cavit."
            Else
                DT_Flowtype.Rows(index).Item(1) = "Normal"
            End If
            If FlowSeverityCase2 = "SevereCavi" Or FlowSeverityCase2 = "Choke.Cavi." Then
                DT_Flowtype.Rows(index).Item(2) = FlowSeverityCase2
            ElseIf N_FlowTypeCAse2 = 2 Then
                DT_Flowtype.Rows(index).Item(2) = "Inci.Cavit."
            Else
                DT_Flowtype.Rows(index).Item(2) = "Normal"
            End If
            If FlowSeverityCase3 = "SevereCavi" Or FlowSeverityCase3 = "Choke.Cavi." Then
                DT_Flowtype.Rows(index).Item(3) = FlowSeverityCase3
            ElseIf N_FlowTypeCase3 = 2 Then
                DT_Flowtype.Rows(index).Item(3) = "Inci.Cavit."
            Else
                DT_Flowtype.Rows(index).Item(3) = "Normal"
            End If
        Catch ex As Exception
            MsgBox("SelectFlowType:  " & ex.Message)
        End Try

    End Function

    Public Function NoiseCalculations()
        Dim N_XF1Case1, N_XF1Case2, N_XF1Case3, N_DPCCase1, N_DPCCase2, N_DPCCase3, N_XFzCase1, N_XFzCase2, N_XFzCase3, N_XFzpCase1, N_XFzpCase2, N_XFzpCase3 As Single
        Dim N_DjCase1, N_DjCase2, N_DjCase3, N_UvcCase1, N_UvcCase2, N_UvcCase3, N_WmCase1, N_WmCase2, N_WmCase3, N_NturbCase1, N_NturbCase2, N_NturbCase3, N_NcavCase1, N_NcavCase2, N_NcavCase3 As Single
        Dim N_WaTurbCase1, N_WaTurbCase2, N_WaTurbCase3, N_WaCavCase1, N_WaCavCase2, N_WaCavCase3, N_LPiCase1, N_LPiCase2, N_LPiCase3, N_StrNoCase1, N_StrNoCase2, N_StrNoCase3 As Single
        Dim N_PeakSoundFreqTurbCase1, N_PeakSoundFreqTurbCase2, N_PeakSoundFreqTurbCase3, N_PeakSoundFreqCavCase1, N_PeakSoundFreqCavCase2, N_PeakSoundFreqCAvCase3 As Single
        Dim RingFreq, TransLossRingFreq As Single

        Dim StageNoiseCase1(3), StageNoiseCase2(3), StageNoiseCase3(3) As Single

        Dim FturbCase1(33), FturbCase2(33), FturbCase3(33), FcavCase1(33), FcavCase2(33), FcavCase3(33) As Single

        Dim NewPressureDropCase1, NewPressureDropCase2, NewPressureDropCase3 As Single
        Dim count As Byte
        Dim NoiseFLCase1, NoiseFLCase2, NoiseFLCase3, NoiseFDCase1, NoiseFDCase2, NoiseFDCase3 As Single
        Dim TempDifferentialCase1, TempDifferentialCase2, TempDifferentialCase3, TempDifferential2, TempWa As Single
        Try
            '20220920 If LoadingProjectFile = False Then

            ''**********************************************************************************************************************
            'Formulaes for Noise Calculations.
            'Parameters needed for Noise Calculations
            '1:      .Inlet Pressure - Noise_InletPressureCase1
            '2:      .Outlet Pressure - Noise_OutletPressureCase1
            '3:      .Vapour Pressure - Noise_VapourPressureCase1
            '4:     FLcase 
            '5      FDCase
            '6:     FinalKvCase
            '7:     Density
            '8:    Flowrate
            If cmbSelectedTrim.SelectedIndex > 0 Then          'For PS1 used Calculated from Chart. 
                NoiseFLCase1 = 0.93                      ' Taken for Multi stage Noise Calculations
                NoiseFLCase2 = 0.93
                NoiseFLCase3 = 0.93
                NoiseFDCase1 = 0.35
                NoiseFDCase2 = 0.35
                NoiseFDCase3 = 0.35
            Else
                NoiseFLCase1 = FLCase1                     ' For PS1
                NoiseFLCase2 = FLCase2
                NoiseFLCase3 = FLCase3
                NoiseFDCase1 = FDCase1
                NoiseFDCase2 = FDCase2
                NoiseFDCase3 = FDCase3
            End If

            NewPressureDropCase1 = (FinalPressureDropCase1 * 100000) / Stages
            NewPressureDropCase2 = (FinalPressureDropCase2 * 100000) / Stages
            NewPressureDropCase3 = (FinalPressureDropCase3 * 100000) / Stages
            Select Case Stages
                Case 1
                    Dt_NoisePrStages.Rows(0).Item(0) = Noise_InletPressureCase1
                    Dt_NoisePrStages.Rows(0).Item(1) = Noise_InletPressureCase2
                    Dt_NoisePrStages.Rows(0).Item(2) = Noise_InletPressureCase3

                    Dt_NoisePrStages.Rows(1).Item(0) = Noise_OutletPressureCase1
                    Dt_NoisePrStages.Rows(1).Item(1) = Noise_OutletPressureCase2
                    Dt_NoisePrStages.Rows(1).Item(2) = Noise_OutletPressureCase3
                Case 2
                    Dt_NoisePrStages.Rows(0).Item(0) = Noise_InletPressureCase1
                    Dt_NoisePrStages.Rows(1).Item(0) = (Noise_InletPressureCase1 - NewPressureDropCase1)
                    Dt_NoisePrStages.Rows(2).Item(0) = (Dt_NoisePrStages.Rows(1).Item(0))
                    Dt_NoisePrStages.Rows(3).Item(0) = Noise_OutletPressureCase1

                    Dt_NoisePrStages.Rows(0).Item(1) = Noise_InletPressureCase2
                    Dt_NoisePrStages.Rows(1).Item(1) = (Noise_InletPressureCase2 - NewPressureDropCase2)
                    Dt_NoisePrStages.Rows(2).Item(1) = (Dt_NoisePrStages.Rows(1).Item(1))
                    Dt_NoisePrStages.Rows(3).Item(1) = Noise_OutletPressureCase2

                    Dt_NoisePrStages.Rows(0).Item(2) = Noise_InletPressureCase3
                    Dt_NoisePrStages.Rows(1).Item(2) = (Noise_InletPressureCase3 - NewPressureDropCase3)
                    Dt_NoisePrStages.Rows(2).Item(2) = (Dt_NoisePrStages.Rows(1).Item(2))
                    Dt_NoisePrStages.Rows(3).Item(2) = Noise_OutletPressureCase3
                Case 3
                    Dt_NoisePrStages.Rows(0).Item(0) = Noise_InletPressureCase1
                    Dt_NoisePrStages.Rows(1).Item(0) = (Noise_InletPressureCase1 - NewPressureDropCase1)
                    Dt_NoisePrStages.Rows(2).Item(0) = (Dt_NoisePrStages.Rows(1).Item(0))
                    Dt_NoisePrStages.Rows(3).Item(0) = Dt_NoisePrStages.Rows(2).Item(0) - NewPressureDropCase1
                    Dt_NoisePrStages.Rows(4).Item(0) = Dt_NoisePrStages.Rows(3).Item(0)
                    Dt_NoisePrStages.Rows(5).Item(0) = Noise_OutletPressureCase1

                    Dt_NoisePrStages.Rows(0).Item(1) = Noise_InletPressureCase2
                    Dt_NoisePrStages.Rows(1).Item(1) = (Noise_InletPressureCase2 - NewPressureDropCase2)
                    Dt_NoisePrStages.Rows(2).Item(1) = (Dt_NoisePrStages.Rows(1).Item(1))
                    Dt_NoisePrStages.Rows(3).Item(1) = Dt_NoisePrStages.Rows(2).Item(1) - NewPressureDropCase2
                    Dt_NoisePrStages.Rows(4).Item(1) = Dt_NoisePrStages.Rows(3).Item(1)
                    Dt_NoisePrStages.Rows(5).Item(1) = Noise_OutletPressureCase2

                    Dt_NoisePrStages.Rows(0).Item(2) = Noise_InletPressureCase3
                    Dt_NoisePrStages.Rows(1).Item(2) = (Noise_InletPressureCase3 - NewPressureDropCase3)
                    Dt_NoisePrStages.Rows(2).Item(2) = (Dt_NoisePrStages.Rows(1).Item(2))
                    Dt_NoisePrStages.Rows(3).Item(2) = Dt_NoisePrStages.Rows(2).Item(2) - NewPressureDropCase3
                    Dt_NoisePrStages.Rows(4).Item(2) = Dt_NoisePrStages.Rows(3).Item(2)
                    Dt_NoisePrStages.Rows(5).Item(2) = Noise_OutletPressureCase3
            End Select



            For count = 1 To Stages

                '****************************************************************************
                'Calculate Noise for each Stages and change Inlet and Outlet Pressure at each stage. 
                Noise_InletPressureCase1 = Dt_NoisePrStages.Rows((count * 2) - 2).Item(0)
                Noise_OutletPressureCase1 = Dt_NoisePrStages.Rows((count * 2) - 1).Item(0)
                Noise_InletPressureCase2 = Dt_NoisePrStages.Rows((count * 2) - 2).Item(1)
                Noise_OutletPressureCase2 = Dt_NoisePrStages.Rows((count * 2) - 1).Item(1)
                Noise_InletPressureCase3 = Dt_NoisePrStages.Rows((count * 2) - 2).Item(2)
                Noise_OutletPressureCase3 = Dt_NoisePrStages.Rows((count * 2) - 1).Item(2)

                '************************************************************************

                'DIFFERENTIAL PRESSURE RATIO
                N_XF1Case1 = (Noise_InletPressureCase1 - Noise_OutletPressureCase1) / (Noise_InletPressureCase1 - Noise_VapourPressureCase1)
                N_XF1Case2 = (Noise_InletPressureCase2 - Noise_OutletPressureCase2) / (Noise_InletPressureCase2 - Noise_VapourPressureCase2)
                N_XF1Case3 = (Noise_InletPressureCase3 - Noise_OutletPressureCase3) / (Noise_InletPressureCase3 - Noise_VapourPressureCase3)

                Call Chokedflow(NoiseFLCase1 * NoiseFLCase1, NoiseFLCase2 * NoiseFLCase2, NoiseFLCase3 * NoiseFLCase3)

                FlowSeverityCase1 = FlowSeverity_Find(FinalChokedPressureCase1, FinalInletPressureCase1, FinalOutletPressureCase1, NoiseFLCase1, FinalVapourPressureCase1)
                FlowSeverityCase2 = FlowSeverity_Find(FinalChokedPressureCase2, FinalInletPressureCase2, FinalOutletPressureCase2, NoiseFLCase2, FinalVapourPressureCase2)
                FlowSeverityCase3 = FlowSeverity_Find(FinalChokedPressureCase3, FinalInletPressureCase3, FinaloutletPressureCase3, NoiseFLCase3, FinalVapourPressureCase3)

                TempDifferentialCase1 = Noise_InletPressureCase1 - Noise_OutletPressureCase1
                TempDifferential2 = NoiseFLCase1 * NoiseFLCase1 * (Noise_InletPressureCase1 - Noise_VapourPressureCase1)
                If TempDifferentialCase1 < TempDifferential2 Then
                    N_DPCCase1 = TempDifferentialCase1
                Else
                    N_DPCCase1 = TempDifferential2
                End If

                TempDifferentialCase2 = Noise_InletPressureCase2 - Noise_OutletPressureCase2
                TempDifferential2 = NoiseFLCase2 * NoiseFLCase2 * (Noise_InletPressureCase2 - Noise_VapourPressureCase2)
                If TempDifferentialCase2 < TempDifferential2 Then
                    N_DPCCase2 = TempDifferentialCase2
                Else
                    N_DPCCase2 = TempDifferential2
                End If

                'Differential Pressure  
                TempDifferentialCase3 = Noise_InletPressureCase3 - Noise_OutletPressureCase3
                TempDifferential2 = NoiseFLCase3 * NoiseFLCase3 * (Noise_InletPressureCase3 - Noise_VapourPressureCase3)
                If TempDifferentialCase3 < TempDifferential2 Then
                    N_DPCCase3 = TempDifferentialCase3
                Else
                    N_DPCCase3 = TempDifferential2
                End If

                'DIFFERENTIAL PRESSURE RATIO OF INCIPIENT CAVITATION NOISE (Xfz)
                N_XFzCase1 = 0.9 / (Math.Sqrt(1 + (3 * NoiseFDCase1) * (Math.Sqrt(FinalKVCase1 / NoiseFLCase1))))
                N_XFzCase2 = 0.9 / (Math.Sqrt(1 + (3 * NoiseFDCase2) * (Math.Sqrt(FinalKVCase2 / NoiseFLCase1))))
                N_XFzCase3 = 0.9 / (Math.Sqrt(1 + (3 * NoiseFDCase3) * (Math.Sqrt(FinalKVCase3 / NoiseFLCase3))))
                'N_XFzCase3 = 0.3543 'Temporary

                'DIFFERENTIAL PRESSURE RATIO CORRECTED FOR INLET PRESSURE 
                N_XFzpCase1 = N_XFzCase1 * ((600000 / Noise_InletPressureCase1) ^ 0.125)
                N_XFzpCase2 = N_XFzCase2 * ((600000 / Noise_InletPressureCase2) ^ 0.125)
                N_XFzpCase3 = N_XFzCase3 * ((600000 / Noise_InletPressureCase3) ^ 0.125)

                'JET DIAMETER
                N_DjCase1 = 0.0046 * NoiseFDCase1 * Math.Sqrt(FinalKVCase1 * 1.17 * NoiseFLCase1)
                N_DjCase2 = 0.0046 * NoiseFDCase2 * Math.Sqrt(FinalKVCase2 * 1.17 * NoiseFLCase2)
                N_DjCase3 = 0.0046 * NoiseFDCase3 * Math.Sqrt(FinalKVCase3 * 1.17 * NoiseFLCase3)

                'Vena Contracta Velocity
                N_UvcCase1 = (1 / NoiseFLCase1) * Math.Sqrt(2 * N_DPCCase1 / (FinalDensityCase1 * 1000))
                N_UvcCase2 = (1 / NoiseFLCase2) * Math.Sqrt(2 * N_DPCCase2 / (FinalDensityCase2 * 1000))
                N_UvcCase3 = (1 / NoiseFLCase3) * Math.Sqrt(2 * N_DPCCase3 / (FinalDensityCase3 * 1000))

                'MECHANICAL STREAM POWER
                N_WmCase1 = (Noise_FlowrateCase1 * (N_UvcCase1 * N_UvcCase1) * (NoiseFLCase1 * NoiseFLCase1)) / 2
                N_WmCase2 = (Noise_FlowrateCase2 * (N_UvcCase2 * N_UvcCase2) * (NoiseFLCase2 * NoiseFLCase2)) / 2
                N_WmCase3 = (Noise_FlowrateCase3 * (N_UvcCase3 * N_UvcCase3) * (NoiseFLCase3 * NoiseFLCase3)) / 2

                If N_DPCCase1 < (N_XFzpCase1 * (Noise_InletPressureCase1 - Noise_VapourPressureCase1)) Then

                    N_FlowTypeCAse1 = 1
                Else
                    N_FlowTypeCAse1 = 2

                End If

                If N_DPCCase2 < (N_XFzpCase2 * (Noise_InletPressureCase2 - Noise_VapourPressureCase2)) Then
                    N_FlowTypeCAse2 = 1
                Else
                    N_FlowTypeCAse2 = 2
                End If

                If N_DPCCase3 < (N_XFzpCase3 * (Noise_InletPressureCase3 - Noise_VapourPressureCase3)) Then
                    N_FlowTypeCase3 = 1
                Else
                    N_FlowTypeCase3 = 2
                End If

                Select Case (count)             ' Stage of trim 
                    Case 1
                        Call FlowSeverity_Select(1)
                    Case 2
                        Call FlowSeverity_Select(2)
                    Case 3
                        Call FlowSeverity_Select(3)
                End Select


                'ACOUSTIC EFFICIENCY FACTOR FOR TURBULENT
                'ACOUSTIC EFFICIENCY FACTOR FOR CAVITATING 
                N_NturbCase1 = (10 ^ (-4.6)) * (N_UvcCase1 / 1400)
                N_NcavCase1 = (0.32 * N_NturbCase1) * (Math.Sqrt(TempDifferentialCase1 / (N_DPCCase1 * N_XFzpCase1))) * (Math.Exp(5 * N_XFzpCase1))
                N_NcavCase1 = N_NcavCase1 * (Math.Sqrt((1 - N_XFzpCase1) / (1 - N_XFzCase1))) * (Math.Pow((N_XFzCase1 / N_XFzpCase1), 5)) * (Math.Pow((N_XF1Case1 - N_XFzpCase1), 1.5))

                N_NturbCase2 = (10 ^ (-4.6)) * (N_UvcCase2 / 1400)
                N_NcavCase2 = (0.32 * N_NturbCase2)
                N_NcavCase2 = N_NcavCase2 * (Math.Sqrt(TempDifferentialCase2 / (N_DPCCase2 * N_XFzpCase2)))
                N_NcavCase2 = N_NcavCase2 * (Math.Exp(5 * N_XFzpCase2))
                N_NcavCase2 = N_NcavCase2 * (Math.Sqrt((1 - N_XFzpCase2) / (1 - N_XFzCase2))) * (Math.Pow((N_XFzCase2 / N_XFzpCase2), 5)) * (Math.Pow((N_XF1Case2 - N_XFzpCase2), 1.5))


                N_NturbCase3 = (10 ^ (-4.6)) * (N_UvcCase3 / 1400)
                N_NcavCase3 = (0.32 * N_NturbCase3)
                N_NcavCase3 = N_NcavCase3 * (Math.Sqrt(TempDifferentialCase3 / (N_DPCCase3 * N_XFzpCase3)))
                N_NcavCase3 = N_NcavCase3 * (Math.Exp(5 * N_XFzpCase3))
                N_NcavCase3 = N_NcavCase3 * (Math.Sqrt((1 - N_XFzpCase3) / (1 - N_XFzCase3))) * (Math.Pow((N_XFzCase3 / N_XFzpCase3), 5)) * (Math.Pow((N_XF1Case3 - N_XFzpCase3), 1.5))
                'SOUND POWER FOR TURBULENT REGION
                N_WaTurbCase1 = N_NturbCase1 * N_WmCase1
                N_WaTurbCase2 = N_NturbCase2 * N_WmCase2
                N_WaTurbCase3 = N_NturbCase3 * N_WmCase3

                'SOUND POWER FOR CAVITATING REGION
                N_WaCavCase1 = (N_NturbCase1 + N_NcavCase1) * N_WmCase1
                N_WaCavCase2 = (N_NturbCase2 + N_NcavCase2) * N_WmCase2
                N_WaCavCase3 = (N_NturbCase3 + N_NcavCase3) * N_WmCase3

                'INTERNAL SOUND PRESSURE LEVEL (Lpi)
                If N_FlowTypeCAse1 = 1 Then
                    TempWa = N_WaTurbCase1
                Else
                    TempWa = N_WaCavCase1
                End If
                N_LPiCase1 = 10 * Math.Log10((3.2 * Math.Pow(10, 9) * TempWa * (FinalDensityCase1 * 1000) * 1400) / (Noise_ID * Noise_ID))

                If N_FlowTypeCAse2 = 1 Then
                    TempWa = N_WaTurbCase2
                Else
                    TempWa = N_WaCavCase2
                End If
                N_LPiCase2 = 10 * Math.Log10((3.2 * Math.Pow(10, 9) * TempWa * (FinalDensityCase2 * 1000) * 1400) / (Noise_ID * Noise_ID))

                If N_FlowTypeCase3 = 1 Then
                    TempWa = N_WaTurbCase3
                Else
                    TempWa = N_WaCavCase3
                End If
                N_LPiCase3 = 10 * Math.Log10((3.2 * Math.Pow(10, 9) * TempWa * (FinalDensityCase3 * 1000) * 1400) / (Noise_ID * Noise_ID))

                'STROUHAL NUMBER OF JET (Stp)
                N_StrNoCase1 = (0.036 * NoiseFLCase1 * NoiseFLCase1 * FinalKVCase1 * Math.Pow(NoiseFDCase1, 0.75)) / (Math.Pow(N_XFzpCase1, 1.5) * Noise_ValveID * (SeatDia / 1000))
                N_StrNoCase1 = N_StrNoCase1 * Math.Pow((1 / (Math.Abs(Noise_InletPressureCase1 - Noise_VapourPressureCase1))), 0.57)

                N_StrNoCase2 = (0.036 * NoiseFLCase2 * NoiseFLCase2 * FinalKVCase2 * Math.Pow(NoiseFDCase2, 0.75)) / (Math.Pow(N_XFzpCase2, 1.5) * Noise_ValveID * (SeatDia / 1000))
                N_StrNoCase2 = N_StrNoCase2 * Math.Pow((1 / (Math.Abs(Noise_InletPressureCase2 - Noise_VapourPressureCase2))), 0.57)

                N_StrNoCase3 = (0.036 * NoiseFLCase3 * NoiseFLCase3 * FinalKVCase3 * Math.Pow(NoiseFDCase3, 0.75)) / (Math.Pow(N_XFzpCase3, 1.5) * Noise_ValveID * (SeatDia / 1000))
                N_StrNoCase3 = N_StrNoCase3 * Math.Pow((1 / (Math.Abs(Noise_InletPressureCase3 - Noise_VapourPressureCase3))), 0.57)


                'Peak Sound Frequency
                N_PeakSoundFreqTurbCase1 = N_StrNoCase1 * N_UvcCase1 / N_DjCase1
                N_PeakSoundFreqTurbCase2 = N_StrNoCase2 * N_UvcCase2 / N_DjCase2
                N_PeakSoundFreqTurbCase3 = N_StrNoCase3 * N_UvcCase3 / N_DjCase3

                N_PeakSoundFreqCavCase1 = 6 * N_PeakSoundFreqTurbCase1 * Math.Pow((1 - N_XFzCase1) / (1 - N_XFzpCase1), 2) * Math.Pow((N_XFzpCase1 / N_XFzCase1), 2.5)
                N_PeakSoundFreqCavCase2 = 6 * N_PeakSoundFreqTurbCase2 * Math.Pow((1 - N_XFzCase2) / (1 - N_XFzpCase2), 2) * Math.Pow((N_XFzpCase2 / N_XFzCase2), 2.5)
                N_PeakSoundFreqCAvCase3 = 6 * N_PeakSoundFreqTurbCase3 * Math.Pow((1 - N_XFzCase3) / (1 - N_XFzpCase3), 2) * Math.Pow((N_XFzpCase3 / N_XFzCase3), 2.5)

                RingFreq = 5000 / (Math.PI * Noise_ID)
                TransLossRingFreq = -10 - 10 * Math.Log10((5000 * 7800 * Noise_Schedule) / (343 * 1.293 * Noise_ID))

                'CALCULATE FREQUENCY DISTRIBUTION FUNCTION FOR TURBULENT
                If NoiseAttenuationFlag = False Then
                    FinalNoiseLevelCase1 = 0
                    FinalNoiseLevelCase2 = 0
                    FinalNoiseLevelCase3 = 0
                    StageNoiseCase1(count) = 0
                    StageNoiseCase2(count) = 0
                    StageNoiseCase3(count) = 0
                End If
                For i = 0 To 32
                    FturbCase1(i) = -8 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase1), 3))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase1), -1)))
                    FturbCase2(i) = -8 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase2), 3))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase2), -1)))
                    FturbCase3(i) = -8 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase3), 3))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase3), -1)))



                    FcavCase1(i) = -9 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCavCase1), 1.5))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCavCase1), -1.5)))
                    FcavCase2(i) = -9 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCavCase2), 1.5))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCavCase2), -1.5)))
                    FcavCase3(i) = -9 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCAvCase3), 1.5))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCAvCase3), -1.5)))

                    N_LpiTurbCase1(i) = N_LPiCase1 + FturbCase1(i)
                    N_LpiTurbCase2(i) = N_LPiCase2 + FturbCase2(i)
                    N_LpiTurbCase3(i) = N_LPiCase3 + FturbCase3(i)

                    N_LpiCavCase1(i) = N_LPiCase1 + 10 * Math.Log10(((N_NturbCase1 / (N_NturbCase1 + N_NcavCase1)) * Math.Pow(10, (0.1 * FturbCase1(i)))) + ((N_NcavCase1 / (N_NturbCase1 + N_NcavCase1)) * Math.Pow(10, (0.1 * FcavCase1(i)))))
                    N_LpiCavCase2(i) = N_LPiCase2 + 10 * Math.Log10(((N_NturbCase2 / (N_NturbCase2 + N_NcavCase2)) * Math.Pow(10, (0.1 * FturbCase2(i)))) + ((N_NcavCase2 / (N_NturbCase2 + N_NcavCase2)) * Math.Pow(10, (0.1 * FcavCase2(i)))))
                    N_LpiCavCase3(i) = N_LPiCase3 + 10 * Math.Log10(((N_NturbCase3 / (N_NturbCase3 + N_NcavCase3)) * Math.Pow(10, (0.1 * FturbCase3(i)))) + ((N_NcavCase3 / (N_NturbCase3 + N_NcavCase3)) * Math.Pow(10, (0.1 * FcavCase3(i)))))

                    DeltaTL(i) = -20 * Math.Log10((RingFreq / FrequencyIndexBand(i)) + (Math.Pow((FrequencyIndexBand(i) / RingFreq), 1.5)))
                    TL(i) = TransLossRingFreq + DeltaTL(i)

                    If N_FlowTypeCAse1 = 1 Then
                        TempLpCase1 = N_LpiTurbCase1(i)
                    Else
                        TempLpCase1 = N_LpiCavCase1(i)
                    End If

                    If N_FlowTypeCAse2 = 1 Then
                        TempLpCase2 = N_LpiTurbCase2(i)
                    Else
                        TempLpCase2 = N_LpiCavCase2(i)
                    End If

                    If N_FlowTypeCase3 = 1 Then
                        TempLpCase3 = N_LpiTurbCase3(i)
                    Else
                        TempLpCase3 = N_LpiCavCase3(i)
                    End If

                    'in Db
                    N_LpeCase1(i) = TempLpCase1 + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))
                    N_LpeCase2(i) = TempLpCase2 + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))
                    N_LpeCase3(i) = TempLpCase3 + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))

                    If NoiseAttenuationFlag = False Then
                        StageNoiseCase1(count) = StageNoiseCase1(count) + Math.Pow(10, ((N_LpeCase1(i) + N_DeltaLA(i)) / 10))
                        StageNoiseCase2(count) = StageNoiseCase2(count) + Math.Pow(10, ((N_LpeCase2(i) + N_DeltaLA(i)) / 10))
                        StageNoiseCase3(count) = StageNoiseCase3(count) + Math.Pow(10, ((N_LpeCase3(i) + N_DeltaLA(i)) / 10))
                    End If
                Next


                'Final Overall Sound Pressure Level
                If NoiseAttenuationFlag = False Then

                    If StageNoiseCase1(count) < 5 Then
                        StageNoiseCase1(count) = 5
                    End If
                    If StageNoiseCase2(count) < 5 Then
                        StageNoiseCase2(count) = 5
                    End If
                    If StageNoiseCase3(count) < 5 Then
                        StageNoiseCase3(count) = 5
                    End If
                    StageNoiseCase1(count) = 10 * Math.Log10(StageNoiseCase1(count))
                    DT_StageWiseNoise.Rows(count - 1).Item(0) = StageNoiseCase1(count)
                    StageNoiseCase2(count) = 10 * Math.Log10(StageNoiseCase2(count))
                    DT_StageWiseNoise.Rows(count - 1).Item(1) = StageNoiseCase2(count)
                    StageNoiseCase3(count) = 10 * Math.Log10(StageNoiseCase3(count))
                    DT_StageWiseNoise.Rows(count - 1).Item(2) = StageNoiseCase3(count)


                End If
            Next                ' Loop of Stages calculations ends


            If NoiseAttenuationFlag = False Then
                Select Case Stages
                    Case 1
                        FinalNoiseLevelCase1 = StageNoiseCase1(1)      ' Only 1 stage
                        FinalNoiseLevelCase2 = StageNoiseCase2(1)      ' Only 1 stage
                        FinalNoiseLevelCase3 = StageNoiseCase3(1)     ' Only 1 stage
                    Case 2

                        FinalNoiseLevelCase1 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase1(1) / 10))) + (Math.Pow(10, (StageNoiseCase1(2) / 10))))
                        FinalNoiseLevelCase2 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase2(1) / 10))) + (Math.Pow(10, (StageNoiseCase2(2) / 10))))
                        FinalNoiseLevelCase3 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase3(1) / 10))) + (Math.Pow(10, (StageNoiseCase3(2) / 10))))
                    Case 3
                        FinalNoiseLevelCase1 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase1(1) / 10))) + (Math.Pow(10, (StageNoiseCase1(2) / 10))) + (Math.Pow(10, (StageNoiseCase1(3) / 10))))
                        FinalNoiseLevelCase2 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase2(1) / 10))) + (Math.Pow(10, (StageNoiseCase2(2) / 10))) + (Math.Pow(10, (StageNoiseCase2(3) / 10))))
                        FinalNoiseLevelCase3 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase3(1) / 10))) + (Math.Pow(10, (StageNoiseCase3(2) / 10))) + (Math.Pow(10, (StageNoiseCase3(3) / 10))))
                End Select
                If chkBaffleCase1.Checked = False Then          'as The baffle is used Outlet pressure will be different. 
                    DT_NoiseAttenuation.Rows(4).Item(0) = FinalNoiseLevelCase1
                    DT_NoiseAttenuation.Rows(4).Item(1) = FinalNoiseLevelCase2
                    DT_NoiseAttenuation.Rows(4).Item(2) = FinalNoiseLevelCase3
                Else
                    DT_NoiseAttenuation.Rows(3).Item(0) = FinalNoiseLevelCase1       ' Use same DT Row for With Cage and Without Cage
                    DT_NoiseAttenuation.Rows(3).Item(1) = FinalNoiseLevelCase2      'As they will be used in isolation and will not come tog
                    DT_NoiseAttenuation.Rows(3).Item(2) = FinalNoiseLevelCase3
                End If
                frmTestingGrids.DGVStageNoise.Visible = True
                frmTestingGrids.DGVStageNoise.DataSource = DT_StageWiseNoise
            End If
            '     End If
        Catch ex As DivideByZeroException
            MsgBox("Noise Calculations: Liquid : " & "  " & ex.Message)
        End Try
        Return Nothing
    End Function
    Public Function CalcNoiseForAttenuation()

        'This function is same as NoiseCalculation function, difference is that it does not consider stages of trim. 

        Dim N_XF1Case1, N_XF1Case2, N_XF1Case3, N_DPCCase1, N_DPCCase2, N_DPCCase3, N_XFzCase1, N_XFzCase2, N_XFzCase3, N_XFzpCase1, N_XFzpCase2, N_XFzpCase3 As Single
        Dim N_DjCase1, N_DjCase2, N_DjCase3, N_UvcCase1, N_UvcCase2, N_UvcCase3, N_WmCase1, N_WmCase2, N_WmCase3, N_NturbCase1, N_NturbCase2, N_NturbCase3, N_NcavCase1, N_NcavCase2, N_NcavCase3 As Single
        Dim N_WaTurbCase1, N_WaTurbCase2, N_WaTurbCase3, N_WaCavCase1, N_WaCavCase2, N_WaCavCase3, N_LPiCase1, N_LPiCase2, N_LPiCase3, N_StrNoCase1, N_StrNoCase2, N_StrNoCase3 As Single
        Dim N_PeakSoundFreqTurbCase1, N_PeakSoundFreqTurbCase2, N_PeakSoundFreqTurbCase3, N_PeakSoundFreqCavCase1, N_PeakSoundFreqCavCase2, N_PeakSoundFreqCAvCase3 As Single
        Dim RingFreq, TransLossRingFreq As Single
        Dim StageNoiseCase1(3), StageNoiseCase2(3), StageNoiseCase3(3) As Single
        Dim FturbCase1(33), FturbCase2(33), FturbCase3(33), FcavCase1(33), FcavCase2(33), FcavCase3(33) As Single
        Dim NoiseFL, NoiseFD As Single
        Dim TempDifferentialCase1, TempDifferentialCase2, TempDifferentialCase3, TempDifferential2, TempWa As Single

        Try


            ''**********************************************************************************************************************

            '20220920 If LoadingProjectFile = False Then

            NoiseFL = 0.8
            NoiseFD = 0.2

            ' DIFFERENTIAL PRESSURE RATIO
            N_XF1Case1 = (Noise_InletPressureCase1 - Noise_OutletPressureCase1) / (Noise_InletPressureCase1 - Noise_VapourPressureCase1)
            N_XF1Case2 = (Noise_InletPressureCase2 - Noise_OutletPressureCase2) / (Noise_InletPressureCase2 - Noise_VapourPressureCase2)
            N_XF1Case3 = (Noise_InletPressureCase3 - Noise_OutletPressureCase3) / (Noise_InletPressureCase3 - Noise_VapourPressureCase3)

            TempDifferentialCase1 = Noise_InletPressureCase1 - Noise_OutletPressureCase1
            TempDifferential2 = NoiseFL * NoiseFL * (Noise_InletPressureCase1 - Noise_VapourPressureCase1)
            If TempDifferentialCase1 < TempDifferential2 Then
                N_DPCCase1 = TempDifferentialCase1
            Else
                N_DPCCase1 = TempDifferential2
            End If

            TempDifferentialCase2 = Noise_InletPressureCase2 - Noise_OutletPressureCase2
            TempDifferential2 = NoiseFL * NoiseFL * (Noise_InletPressureCase2 - Noise_VapourPressureCase2)
            If TempDifferentialCase2 < TempDifferential2 Then
                N_DPCCase2 = TempDifferentialCase2
            Else
                N_DPCCase2 = TempDifferential2
            End If

            '  Differential Pressure  
            TempDifferentialCase3 = Noise_InletPressureCase3 - Noise_OutletPressureCase3
            TempDifferential2 = NoiseFL * NoiseFL * (Noise_InletPressureCase3 - Noise_VapourPressureCase3)
            If TempDifferentialCase3 < TempDifferential2 Then
                N_DPCCase3 = TempDifferentialCase3
            Else
                N_DPCCase3 = TempDifferential2
            End If

            ' DIFFERENTIAL PRESSURE RATIO OF INCIPIENT CAVITATION NOISE (Xfz)
            N_XFzCase1 = 0.9 / (Math.Sqrt(1 + (3 * NoiseFD) * (Math.Sqrt(FinalKVCase1 / NoiseFL))))
            N_XFzCase2 = 0.9 / (Math.Sqrt(1 + (3 * NoiseFD) * (Math.Sqrt(FinalKVCase2 / NoiseFL))))
            N_XFzCase3 = 0.9 / (Math.Sqrt(1 + (3 * NoiseFD) * (Math.Sqrt(FinalKVCase3 / NoiseFL))))


            ' DIFFERENTIAL PRESSURE RATIO CORRECTED FOR INLET PRESSURE 
            N_XFzpCase1 = N_XFzCase1 * ((600000 / Noise_InletPressureCase1) ^ 0.125)
            N_XFzpCase2 = N_XFzCase2 * ((600000 / Noise_InletPressureCase2) ^ 0.125)
            N_XFzpCase3 = N_XFzCase3 * ((600000 / Noise_InletPressureCase3) ^ 0.125)

            '  JET DIAMETER
            N_DjCase1 = 0.0046 * NoiseFD * Math.Sqrt(FinalKVCase1 * 1.17 * NoiseFL)
            N_DjCase2 = 0.0046 * NoiseFD * Math.Sqrt(FinalKVCase2 * 1.17 * NoiseFL)
            N_DjCase3 = 0.0046 * NoiseFD * Math.Sqrt(FinalKVCase3 * 1.17 * NoiseFL)

            'Vena Contracta Velocity
            N_UvcCase1 = (1 / NoiseFL) * Math.Sqrt(2 * N_DPCCase1 / (FinalDensityCase1 * 1000))
            N_UvcCase2 = (1 / NoiseFL) * Math.Sqrt(2 * N_DPCCase2 / (FinalDensityCase2 * 1000))
            N_UvcCase3 = (1 / NoiseFL) * Math.Sqrt(2 * N_DPCCase3 / (FinalDensityCase3 * 1000))

            '  MECHANICAL Stream POWER
            N_WmCase1 = (Noise_FlowrateCase1 * (N_UvcCase1 * N_UvcCase1) * (NoiseFL * NoiseFL)) / 2
            N_WmCase2 = (Noise_FlowrateCase2 * (N_UvcCase2 * N_UvcCase2) * (NoiseFL * NoiseFL)) / 2
            N_WmCase3 = (Noise_FlowrateCase3 * (N_UvcCase3 * N_UvcCase3) * (NoiseFL * NoiseFL)) / 2


            Call Chokedflow(NoiseFL * NoiseFL, NoiseFL * NoiseFL, NoiseFL * NoiseFL)

            FlowSeverityCase1 = FlowSeverity_Find(FinalChokedPressureCase1, FinalInletPressureCase1, FinalOutletPressureCase1, NoiseFL, FinalVapourPressureCase1)
            FlowSeverityCase2 = FlowSeverity_Find(FinalChokedPressureCase2, FinalInletPressureCase2, FinalOutletPressureCase2, NoiseFL, FinalVapourPressureCase2)
            FlowSeverityCase3 = FlowSeverity_Find(FinalChokedPressureCase3, FinalInletPressureCase3, FinaloutletPressureCase3, NoiseFL, FinalVapourPressureCase3)

            If N_DPCCase1 < (N_XFzpCase1 * (Noise_InletPressureCase1 - Noise_VapourPressureCase1)) Then

                N_FlowTypeCAse1 = 1
            Else
                N_FlowTypeCAse1 = 2

            End If

            If N_DPCCase2 < (N_XFzpCase2 * (Noise_InletPressureCase2 - Noise_VapourPressureCase2)) Then
                N_FlowTypeCAse2 = 1
            Else
                N_FlowTypeCAse2 = 2
            End If

            If N_DPCCase3 < (N_XFzpCase3 * (Noise_InletPressureCase3 - Noise_VapourPressureCase3)) Then
                N_FlowTypeCase3 = 1
            Else
                N_FlowTypeCase3 = 2
            End If

            'ACOUSTIC EFFICIENCY FACTOR FOR TURBULENT
            '     ACOUSTIC EFFICIENCY FACTOR FOR CAVITATING 
            N_NturbCase1 = (10 ^ (-4.6)) * (N_UvcCase1 / 1400)
            N_NcavCase1 = (0.32 * N_NturbCase1) * (Math.Sqrt(TempDifferentialCase1 / (N_DPCCase1 * N_XFzpCase1))) * (Math.Exp(5 * N_XFzpCase1))
            N_NcavCase1 = N_NcavCase1 * (Math.Sqrt((1 - N_XFzpCase1) / (1 - N_XFzCase1))) * (Math.Pow((N_XFzCase1 / N_XFzpCase1), 5)) * (Math.Pow((N_XF1Case1 - N_XFzpCase1), 1.5))

            N_NturbCase2 = (10 ^ (-4.6)) * (N_UvcCase2 / 1400)
            N_NcavCase2 = (0.32 * N_NturbCase2)
            N_NcavCase2 = N_NcavCase2 * (Math.Sqrt(TempDifferentialCase2 / (N_DPCCase2 * N_XFzpCase2)))
            N_NcavCase2 = N_NcavCase2 * (Math.Exp(5 * N_XFzpCase2))
            N_NcavCase2 = N_NcavCase2 * (Math.Sqrt((1 - N_XFzpCase2) / (1 - N_XFzCase2))) * (Math.Pow((N_XFzCase2 / N_XFzpCase2), 5)) * (Math.Pow((N_XF1Case2 - N_XFzpCase2), 1.5))


            N_NturbCase3 = (10 ^ (-4.6)) * (N_UvcCase3 / 1400)
            N_NcavCase3 = (0.32 * N_NturbCase3)
            N_NcavCase3 = N_NcavCase3 * (Math.Sqrt(TempDifferentialCase3 / (N_DPCCase3 * N_XFzpCase3)))
            N_NcavCase3 = N_NcavCase3 * (Math.Exp(5 * N_XFzpCase3))
            N_NcavCase3 = N_NcavCase3 * (Math.Sqrt((1 - N_XFzpCase3) / (1 - N_XFzCase3))) * (Math.Pow((N_XFzCase3 / N_XFzpCase3), 5)) * (Math.Pow((N_XF1Case3 - N_XFzpCase3), 1.5))
            ' SOUND POWER FOR TURBULENT REGION
            N_WaTurbCase1 = N_NturbCase1 * N_WmCase1
            N_WaTurbCase2 = N_NturbCase2 * N_WmCase2
            N_WaTurbCase3 = N_NturbCase3 * N_WmCase3

            ' SOUND POWER FOR CAVITATING REGION
            N_WaCavCase1 = (N_NturbCase1 + N_NcavCase1) * N_WmCase1
            N_WaCavCase2 = (N_NturbCase2 + N_NcavCase2) * N_WmCase2
            N_WaCavCase3 = (N_NturbCase3 + N_NcavCase3) * N_WmCase3

            'Internal SOUND PRESSURE LEVEL (Lpi)
            If N_FlowTypeCAse1 = 1 Then
                TempWa = N_WaTurbCase1
            Else
                TempWa = N_WaCavCase1
            End If
            N_LPiCase1 = 10 * Math.Log10((3.2 * Math.Pow(10, 9) * TempWa * (FinalDensityCase1 * 1000) * 1400) / (Noise_ID * Noise_ID))

            If N_FlowTypeCAse2 = 1 Then
                TempWa = N_WaTurbCase2
            Else
                TempWa = N_WaCavCase2
            End If
            N_LPiCase2 = 10 * Math.Log10((3.2 * Math.Pow(10, 9) * TempWa * (FinalDensityCase2 * 1000) * 1400) / (Noise_ID * Noise_ID))

            If N_FlowTypeCase3 = 1 Then
                TempWa = N_WaTurbCase3
            Else
                TempWa = N_WaCavCase3
            End If
            N_LPiCase3 = 10 * Math.Log10((3.2 * Math.Pow(10, 9) * TempWa * (FinalDensityCase3 * 1000) * 1400) / (Noise_ID * Noise_ID))

            ' STROUHAL Number OF JET (Stp)
            N_StrNoCase1 = (0.036 * NoiseFL * NoiseFL * FinalKVCase1 * Math.Pow(NoiseFD, 0.75)) / (Math.Pow(N_XFzpCase1, 1.5) * Noise_ValveID * (SeatDia / 1000))
            N_StrNoCase1 = N_StrNoCase1 * Math.Pow((1 / (Math.Abs(Noise_InletPressureCase1 - Noise_VapourPressureCase1))), 0.57)

            N_StrNoCase2 = (0.036 * NoiseFL * NoiseFL * FinalKVCase2 * Math.Pow(NoiseFD, 0.75)) / (Math.Pow(N_XFzpCase2, 1.5) * Noise_ValveID * (SeatDia / 1000))
            N_StrNoCase2 = N_StrNoCase2 * Math.Pow((1 / (Math.Abs(Noise_InletPressureCase2 - Noise_VapourPressureCase2))), 0.57)

            N_StrNoCase3 = (0.036 * NoiseFL * NoiseFL * FinalKVCase3 * Math.Pow(NoiseFD, 0.75)) / (Math.Pow(N_XFzpCase3, 1.5) * Noise_ValveID * (SeatDia / 1000))
            N_StrNoCase3 = N_StrNoCase3 * Math.Pow((1 / (Math.Abs(Noise_InletPressureCase3 - Noise_VapourPressureCase3))), 0.57)


            ' Peak Sound Frequency
            N_PeakSoundFreqTurbCase1 = N_StrNoCase1 * N_UvcCase1 / N_DjCase1
            N_PeakSoundFreqTurbCase2 = N_StrNoCase2 * N_UvcCase2 / N_DjCase2
            N_PeakSoundFreqTurbCase3 = N_StrNoCase3 * N_UvcCase3 / N_DjCase3

            N_PeakSoundFreqCavCase1 = 6 * N_PeakSoundFreqTurbCase1 * Math.Pow((1 - N_XFzCase1) / (1 - N_XFzpCase1), 2) * Math.Pow((N_XFzpCase1 / N_XFzCase1), 2.5)
            N_PeakSoundFreqCavCase2 = 6 * N_PeakSoundFreqTurbCase2 * Math.Pow((1 - N_XFzCase2) / (1 - N_XFzpCase2), 2) * Math.Pow((N_XFzpCase2 / N_XFzCase2), 2.5)
            N_PeakSoundFreqCAvCase3 = 6 * N_PeakSoundFreqTurbCase3 * Math.Pow((1 - N_XFzCase3) / (1 - N_XFzpCase3), 2) * Math.Pow((N_XFzpCase3 / N_XFzCase3), 2.5)

            RingFreq = 5000 / (Math.PI * Noise_ID)
            TransLossRingFreq = -10 - 10 * Math.Log10((5000 * 7800 * Noise_Schedule) / (343 * 1.293 * Noise_ID))

            'CALCULATE FREQUENCY DISTRIBUTION FUNCTION FOR TURBULENT
            'If NoiseAttenuationFlag = False Then
            FinalNoiseLevelCase1 = 0
            FinalNoiseLevelCase2 = 0
            FinalNoiseLevelCase3 = 0
            'End If
            For i = 0 To 32
                FturbCase1(i) = -8 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase1), 3))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase1), -1)))
                FturbCase2(i) = -8 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase2), 3))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase2), -1)))
                FturbCase3(i) = -8 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase3), 3))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqTurbCase3), -1)))



                FcavCase1(i) = -9 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCavCase1), 1.5))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCavCase1), -1.5)))
                FcavCase2(i) = -9 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCavCase2), 1.5))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCavCase2), -1.5)))
                FcavCase3(i) = -9 - 10 * Math.Log10((0.25 * (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCAvCase3), 1.5))) + (Math.Pow((FrequencyIndexBand(i) / N_PeakSoundFreqCAvCase3), -1.5)))

                N_LpiTurbCase1(i) = N_LPiCase1 + FturbCase1(i)
                N_LpiTurbCase2(i) = N_LPiCase2 + FturbCase2(i)
                N_LpiTurbCase3(i) = N_LPiCase3 + FturbCase3(i)

                N_LpiCavCase1(i) = N_LPiCase1 + 10 * Math.Log10(((N_NturbCase1 / (N_NturbCase1 + N_NcavCase1)) * Math.Pow(10, (0.1 * FturbCase1(i)))) + ((N_NcavCase1 / (N_NturbCase1 + N_NcavCase1)) * Math.Pow(10, (0.1 * FcavCase1(i)))))
                N_LpiCavCase2(i) = N_LPiCase2 + 10 * Math.Log10(((N_NturbCase2 / (N_NturbCase2 + N_NcavCase2)) * Math.Pow(10, (0.1 * FturbCase2(i)))) + ((N_NcavCase2 / (N_NturbCase2 + N_NcavCase2)) * Math.Pow(10, (0.1 * FcavCase2(i)))))
                N_LpiCavCase3(i) = N_LPiCase3 + 10 * Math.Log10(((N_NturbCase3 / (N_NturbCase3 + N_NcavCase3)) * Math.Pow(10, (0.1 * FturbCase3(i)))) + ((N_NcavCase3 / (N_NturbCase3 + N_NcavCase3)) * Math.Pow(10, (0.1 * FcavCase3(i)))))

                DeltaTL(i) = -20 * Math.Log10((RingFreq / FrequencyIndexBand(i)) + (Math.Pow((FrequencyIndexBand(i) / RingFreq), 1.5)))
                TL(i) = TransLossRingFreq + DeltaTL(i)

                If N_FlowTypeCAse1 = 1 Then
                    TempLpCase1 = N_LpiTurbCase1(i)
                Else
                    TempLpCase1 = N_LpiCavCase1(i)
                End If

                If N_FlowTypeCAse2 = 1 Then
                    TempLpCase2 = N_LpiTurbCase2(i)
                Else
                    TempLpCase2 = N_LpiCavCase2(i)
                End If

                If N_FlowTypeCase3 = 1 Then
                    TempLpCase3 = N_LpiTurbCase3(i)
                Else
                    TempLpCase3 = N_LpiCavCase3(i)
                End If

                'in Db
                N_LpeCase1(i) = TempLpCase1 + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))
                N_LpeCase2(i) = TempLpCase2 + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))
                N_LpeCase3(i) = TempLpCase3 + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))

                FinalNoiseLevelCase1 = FinalNoiseLevelCase1 + Math.Pow(10, ((N_LpeCase1(i) + N_DeltaLA(i)) / 10))
                FinalNoiseLevelCase2 = FinalNoiseLevelCase2 + Math.Pow(10, ((N_LpeCase2(i) + N_DeltaLA(i)) / 10))
                FinalNoiseLevelCase3 = FinalNoiseLevelCase3 + Math.Pow(10, ((N_LpeCase3(i) + N_DeltaLA(i)) / 10))
            Next

            If FinalNoiseLevelCase1 < 5 Then
                FinalNoiseLevelCase1 = 5
            End If
            If FinalNoiseLevelCase2 < 5 Then
                FinalNoiseLevelCase2 = 5
            End If
            If FinalNoiseLevelCase3 < 5 Then
                FinalNoiseLevelCase3 = 5
            End If
            FinalNoiseLevelCase1 = 10 * Math.Log10(FinalNoiseLevelCase1)
            FinalNoiseLevelCase2 = 10 * Math.Log10(FinalNoiseLevelCase2)
            FinalNoiseLevelCase3 = 10 * Math.Log10(FinalNoiseLevelCase3)

            ' End If



        Catch ex As DivideByZeroException
            MsgBox("CalcNoiseForAttenuation : " & "  " & ex.Message)
        End Try
        Return Nothing
    End Function

    Public Function NoiseCalculationsForCompressible()
        Dim i As Byte
        Dim tempLpe, SumofFrequencyLpeCase1, SumofFrequencyLpeCase2, SumofFrequencyLpeCase3 As Single
        Dim NoiseFLCase1, NoiseFLCase2, NoiseFLCase3, NoiseFDCase1, NoiseFDCase2, NoiseFDCase3, NewPressureDropCase1, NewPressureDropCase2, NewPressureDropCase3 As Single
        Dim StageNoiseCase1(3), StageNoiseCase2(3), StageNoiseCase3(3) As Single
        Try
            If LoadingProjectFile = False Then


                'Formulaes for Noise Calculations.
                'Parameters needed for Noise Calculations
                '1:      .Inlet Pressure - Noise_InletPressureCase1
                '2:      .Outlet Pressure - Noise_OutletPressureCase1
                '3:      .Vapour Pressure - Noise_VapourPressureCase1
                '4:     FLcase 
                '5      FDCase
                '6:     FinalKvCase
                '7:     Density
                '8:    Flowrate
                If cmbSelectedTrim.SelectedIndex > 0 Then          'For PS1 used Calculated from Chart. 
                    NoiseFLCase1 = 0.93 '0.93                      ' Taken for Multi stage Noise Calculations
                    NoiseFLCase2 = 0.93      '0.93
                    NoiseFLCase3 = 0.93      '0.93
                    NoiseFDCase1 = 0.19     '0.35
                    NoiseFDCase2 = 0.19     '0.35
                    NoiseFDCase3 = 0.19     '0.35
                Else
                    NoiseFLCase1 = FLCase1                     ' For PS1
                    NoiseFLCase2 = FLCase2
                    NoiseFLCase3 = FLCase3
                    NoiseFDCase1 = FDCase1
                    NoiseFDCase2 = FDCase2
                    NoiseFDCase3 = FDCase3
                End If
                'For a 3 stage Trim Pressure Drop in 1st stage- 55% 	2nd Stage – 30 %. 3rd Stage – 15% of the original pressure drop. 
                'For 2 stage Trim Pressure Drop in 1st stage- 65% 	2nd Stage – 35 %.of the original pressure drop.
                NewPressureDropCase1 = FinalPressureDropCase1 * 100000
                NewPressureDropCase2 = FinalPressureDropCase2 * 100000
                NewPressureDropCase3 = FinalPressureDropCase3 * 100000
                Select Case Stages
                    Case 1
                        Dt_NoisePrStages.Rows(0).Item(0) = Noise_InletPressureCase1
                        Dt_NoisePrStages.Rows(0).Item(1) = Noise_InletPressureCase2
                        Dt_NoisePrStages.Rows(0).Item(2) = Noise_InletPressureCase3

                        Dt_NoisePrStages.Rows(1).Item(0) = Noise_OutletPressureCase1
                        Dt_NoisePrStages.Rows(1).Item(1) = Noise_OutletPressureCase2
                        Dt_NoisePrStages.Rows(1).Item(2) = Noise_OutletPressureCase3
                    Case 2
                        Dt_NoisePrStages.Rows(0).Item(0) = Noise_InletPressureCase1
                        Dt_NoisePrStages.Rows(1).Item(0) = (Noise_InletPressureCase1 - (NewPressureDropCase1 * 0.65))
                        Dt_NoisePrStages.Rows(2).Item(0) = (Dt_NoisePrStages.Rows(1).Item(0))
                        Dt_NoisePrStages.Rows(3).Item(0) = Noise_OutletPressureCase1

                        Dt_NoisePrStages.Rows(0).Item(1) = Noise_InletPressureCase2
                        Dt_NoisePrStages.Rows(1).Item(1) = (Noise_InletPressureCase2 - (NewPressureDropCase2 * 0.65))
                        Dt_NoisePrStages.Rows(2).Item(1) = (Dt_NoisePrStages.Rows(1).Item(1))
                        Dt_NoisePrStages.Rows(3).Item(1) = Noise_OutletPressureCase2

                        Dt_NoisePrStages.Rows(0).Item(2) = Noise_InletPressureCase3
                        Dt_NoisePrStages.Rows(1).Item(2) = (Noise_InletPressureCase3 - (NewPressureDropCase3 * 0.65))
                        Dt_NoisePrStages.Rows(2).Item(2) = (Dt_NoisePrStages.Rows(1).Item(2))
                        Dt_NoisePrStages.Rows(3).Item(2) = Noise_OutletPressureCase3
                    Case 3
                        Dt_NoisePrStages.Rows(0).Item(0) = Noise_InletPressureCase1
                        Dt_NoisePrStages.Rows(1).Item(0) = (Noise_InletPressureCase1 - (NewPressureDropCase1 * 0.55))
                        Dt_NoisePrStages.Rows(2).Item(0) = Dt_NoisePrStages.Rows(1).Item(0)          'from 1st stage outlet
                        Dt_NoisePrStages.Rows(3).Item(0) = (Dt_NoisePrStages.Rows(2).Item(0) - (NewPressureDropCase1 * 0.3))
                        Dt_NoisePrStages.Rows(4).Item(0) = Dt_NoisePrStages.Rows(3).Item(0)
                        Dt_NoisePrStages.Rows(5).Item(0) = Noise_OutletPressureCase1

                        Dt_NoisePrStages.Rows(0).Item(1) = Noise_InletPressureCase2
                        Dt_NoisePrStages.Rows(1).Item(1) = (Noise_InletPressureCase2 - (NewPressureDropCase2 * 0.55))
                        Dt_NoisePrStages.Rows(2).Item(1) = Dt_NoisePrStages.Rows(1).Item(1)
                        Dt_NoisePrStages.Rows(3).Item(1) = (Dt_NoisePrStages.Rows(2).Item(1) - (NewPressureDropCase2 * 0.3))
                        Dt_NoisePrStages.Rows(4).Item(1) = Dt_NoisePrStages.Rows(3).Item(1)
                        Dt_NoisePrStages.Rows(5).Item(1) = Noise_OutletPressureCase2

                        Dt_NoisePrStages.Rows(0).Item(2) = Noise_InletPressureCase3
                        Dt_NoisePrStages.Rows(1).Item(2) = (Noise_InletPressureCase3 - (NewPressureDropCase3 * 0.55))
                        Dt_NoisePrStages.Rows(2).Item(2) = Dt_NoisePrStages.Rows(1).Item(2)
                        Dt_NoisePrStages.Rows(3).Item(2) = (Dt_NoisePrStages.Rows(2).Item(2) - (NewPressureDropCase3 * 0.3))
                        Dt_NoisePrStages.Rows(4).Item(2) = Dt_NoisePrStages.Rows(3).Item(2)
                        Dt_NoisePrStages.Rows(5).Item(2) = Noise_OutletPressureCase3
                End Select

                For count = 1 To Stages

                    '****************************************************************************
                    'Calculate Noise for each Stages and change Inlet and Outlet Pressure at each stage. 
                    Noise_InletPressureCase1 = Dt_NoisePrStages.Rows((count * 2) - 2).Item(0)
                    Noise_OutletPressureCase1 = Dt_NoisePrStages.Rows((count * 2) - 1).Item(0)
                    Noise_InletPressureCase2 = Dt_NoisePrStages.Rows((count * 2) - 2).Item(1)
                    Noise_OutletPressureCase2 = Dt_NoisePrStages.Rows((count * 2) - 1).Item(1)
                    Noise_InletPressureCase3 = Dt_NoisePrStages.Rows((count * 2) - 2).Item(2)
                    Noise_OutletPressureCase3 = Dt_NoisePrStages.Rows((count * 2) - 1).Item(2)

                    Xcase1 = (Noise_InletPressureCase1 - Noise_OutletPressureCase1) / Noise_InletPressureCase1
                    Xcase2 = (Noise_InletPressureCase2 - Noise_OutletPressureCase2) / Noise_InletPressureCase2
                    Xcase3 = (Noise_InletPressureCase3 - Noise_OutletPressureCase3) / Noise_InletPressureCase3


                    '************************************************************************

                    'Absolute Vena Contracta differential Pressure at subsonic flow conditions.
                    PvcCase1 = Noise_InletPressureCase1 * (1 - (Xcase1 / (NoiseFLCase1 * NoiseFLCase1)))
                    PvcCase2 = Noise_InletPressureCase2 * (1 - (Xcase2 / (NoiseFLCase2 * NoiseFLCase2)))
                    PvcCase3 = Noise_InletPressureCase3 * (1 - (Xcase3 / (NoiseFLCase3 * NoiseFLCase3)))

                    'Vena contracta differential pressure ratio at critical flow conditions.
                    XvccCase1 = 1 - (Math.Pow((2 / (Kcase1 + 1)), (Kcase1 / (Kcase1 - 1))))
                    XvccCase2 = 1 - (Math.Pow((2 / (Kcase2 + 1)), (Kcase2 / (Kcase2 - 1))))
                    XvccCase3 = 1 - (Math.Pow((2 / (Kcase3 + 1)), (Kcase3 / (Kcase3 - 1))))

                    'Differential Pressure ratio at critical flow condition
                    XcCase1 = NoiseFLCase1 * NoiseFLCase1 * XvccCase1
                    XcCase2 = NoiseFLCase2 * NoiseFLCase2 * XvccCase2
                    XcCase3 = NoiseFLCase3 * NoiseFLCase3 * XvccCase3

                    'Recovery correction factor.
                    aCase1 = (1 - XvccCase1) / (1 - XcCase1)
                    aCase2 = (1 - XvccCase2) / (1 - XcCase2)
                    aCase3 = (1 - XvccCase3) / (1 - XcCase3)

                    'Differential pressure ratio at break point 
                    XbCase1 = 1 - ((1 / aCase1) * (Math.Pow((1 / Kcase1), (Kcase1 / (Kcase1 - 1)))))
                    XbCase2 = 1 - ((1 / aCase2) * (Math.Pow((1 / Kcase2), (Kcase2 / (Kcase2 - 1)))))
                    XbCase3 = 1 - ((1 / aCase3) * (Math.Pow((1 / Kcase3), (Kcase3 / (Kcase3 - 1)))))

                    'Differential Pressure ratio where region of constant acoustical efficiency begins
                    XceCase1 = 1 - (1 / (22 * aCase1))
                    XceCase2 = 1 - (1 / (22 * aCase2))
                    XceCase3 = 1 - (1 / (22 * aCase3))

                    If NoiseAttenuation_Compressible_CageAsInlet_Flag = False Then
                        DjCase1 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase1 * Math.Sqrt((FinalKVCase1 * 1.17) * NoiseFLCase1)
                        DJcase2 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase2 * Math.Sqrt((FinalKVCase2 * 1.17) * NoiseFLCase2)
                        DJcase3 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase3 * Math.Sqrt((FinalKVCase3 * 1.17) * NoiseFLCase3)
                    Else
                        DjCase1 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase1 * Math.Sqrt((KvforCage * 1.17) * NoiseFLCase1)
                        DJcase2 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase2 * Math.Sqrt((KvforCage * 1.17) * NoiseFLCase2)
                        DJcase3 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase3 * Math.Sqrt((KvforCage * 1.17) * NoiseFLCase3)
                    End If
                    'Regime Checks from 1 to case


                    If Xcase1 <= XcCase1 Then
                        RegimeCase = 1
                    ElseIf XcCase1 < Xcase1 And Xcase1 <= XvccCase1 Then
                        RegimeCase = 2
                    ElseIf XvccCase1 < Xcase1 And Xcase1 <= XbCase1 Then
                        RegimeCase = 3
                    ElseIf XbCase1 < Xcase1 And Xcase1 <= XceCase1 Then
                        RegimeCase = 4
                    ElseIf XceCase1 <= Xcase1 Then
                        RegimeCase = 5
                    End If

                    Regime(RegimeCase, MvcCase1, R_NCase1, R_FpCase1, TvcCase1, R_CvCase1, WmCase1, WaCase1, Kcase1, Xcase1, XvccCase1, NoiseFLCase1, aCase1, (FinalInletTemperatureCase1 + 273), FinalDensityCase1, (FinalFlowrateCase1 / 3600), Noise_InletPressureCase1, DjCase1)


                    If Xcase2 <= XcCase2 Then
                        RegimeCase = 1
                    ElseIf XcCase2 < Xcase2 And Xcase2 <= XvccCase2 Then
                        RegimeCase = 2
                    ElseIf XvccCase2 < Xcase1 And Xcase2 <= XbCase2 Then
                        RegimeCase = 3
                    ElseIf XbCase2 < Xcase2 And Xcase2 <= XceCase2 Then
                        RegimeCase = 4
                    ElseIf XceCase2 <= Xcase2 Then
                        RegimeCase = 5
                    End If

                    Regime(RegimeCase, MvcCase2, R_NCase2, R_FpCase2, TvcCase2, R_CvCase2, WmCase2, WaCase2, Kcase2, Xcase2, XvccCase2, NoiseFLCase2, aCase2, (FinalInletTemperatureCase2 + 273), FinalDensityCase2, (FinalFlowrateCase2 / 3600), Noise_InletPressureCase2, DJcase2)


                    If Xcase3 <= XcCase3 Then
                        RegimeCase = 1
                    ElseIf XcCase3 < Xcase3 And Xcase3 <= XvccCase3 Then
                        RegimeCase = 2
                    ElseIf XvccCase3 < Xcase3 And Xcase3 <= XbCase3 Then
                        RegimeCase = 3
                    ElseIf XbCase3 < Xcase3 And Xcase3 <= XceCase3 Then
                        RegimeCase = 4
                    ElseIf XceCase3 <= Xcase3 Then
                        RegimeCase = 5
                    End If

                    Regime(RegimeCase, MvcCase3, R_NCase3, R_FpCase3, TvcCase3, R_CvCase3, WmCase3, WaCase3, Kcase3, Xcase3, XvccCase3, NoiseFLCase3, aCase3, (FinalInletTemperatureCase3 + 273), FinalDensityCase3, (FinalFlowrateCase3 / 3600), Noise_InletPressureCase3, DJcase3)


                    'Noise Calculations:
                    If cmbFluid.Text = "Steam" Then
                        OutletDensityCase1 = rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                        OutletDensityCase2 = rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                        OutletDensityCase3 = rho_pT(FinaloutletPressureCase3, ToutPressureCase3)
                    ElseIf cmbFluid.Text = "Gas" Then
                        OutletDensityCase1 = FinalDensityCase1 * (FinalOutletPressureCase1 / FinalInletPressureCase1)
                        OutletDensityCase2 = FinalDensityCase2 * (FinalOutletPressureCase2 / FinalInletPressureCase2)
                        OutletDensityCase3 = FinalDensityCase3 * (FinaloutletPressureCase3 / FinalInletPressureCase3)
                    End If


                    'Mach No at Valve Outlet
                    MachnoOutletCase1 = (4 * FinalFlowrateCase1) / (Math.PI * (Noise_ValveID * Noise_ValveID) * OutletDensityCase1 * SoundVelocityCase1 * 3600)
                    MachnoOutletCase2 = (4 * FinalFlowrateCase2) / (Math.PI * (Noise_ValveID * Noise_ValveID) * OutletDensityCase2 * SoundVelocityCase2 * 3600)
                    MachnoOutletCase3 = (4 * FinalFlowrateCase3) / (Math.PI * (Noise_ValveID * Noise_ValveID) * OutletDensityCase3 * SoundVelocityCase3 * 3600)
                    ''Mach No at Pipe Outlet
                    MachPipeOutletCase1 = (4 * FinalFlowrateCase1) / (Math.PI * (Noise_ID * Noise_ID) * OutletDensityCase1 * SoundVelocityCase1 * 3600)
                    MachPipeOutletCase2 = (4 * FinalFlowrateCase2) / (Math.PI * (Noise_ID * Noise_ID) * OutletDensityCase2 * SoundVelocityCase2 * 3600)
                    MachPipeOutletCase3 = (4 * FinalFlowrateCase3) / (Math.PI * (Noise_ID * Noise_ID) * OutletDensityCase3 * SoundVelocityCase3 * 3600)

                    If MachPipeOutletCase1 > 0.3 Then
                        MachPipeOutletCase1 = 0.3
                    End If
                    If MachPipeOutletCase2 > 0.3 Then
                        MachPipeOutletCase2 = 0.3
                    End If

                    If MachPipeOutletCase3 > 0.3 Then
                        MachPipeOutletCase3 = 0.3
                    End If


                    'Correction for Mach Number
                    LgCase1 = 16 * Math.Log10(1 / (1 - MachPipeOutletCase1))
                    LgCase2 = 16 * Math.Log10(1 / (1 - MachPipeOutletCase2))
                    LgCase3 = 16 * Math.Log10(1 / (1 - MachPipeOutletCase3))

                    'Overall internal sound pressure level

                    LpiCase1 = (10 * Math.Log10(((3.2 * Math.Pow(10, 9)) * WaCase1 * OutletDensityCase1 * 480) / (Noise_ID * Noise_ID))) + LgCase1
                    LpiCase2 = (10 * Math.Log10(((3.2 * Math.Pow(10, 9)) * WaCase2 * OutletDensityCase2 * 480) / (Noise_ID * Noise_ID))) + LgCase2
                    LpiCase3 = (10 * Math.Log10(((3.2 * Math.Pow(10, 9)) * WaCase3 * OutletDensityCase3 * 480) / (Noise_ID * Noise_ID))) + LgCase3

                    '  If NoiseAttenuation_Compressible_CageAsInlet_Flag = False Then
                    '****************Calculation if Machno > 0.3********************
                    An = -3.0
                    Stp = 0.2
                    If MachnoOutletCase1 > 0.3 Then
                        'Gas velocity in downstream pipe.
                        UpCase1 = (4 * FinalFlowrateCase1) / (Math.PI * OutletDensityCase1 * Noise_ID * Noise_ID * 3600)
                        If UpCase1 > (SoundVelocityCase1 * 0.8) Then
                            '   MsgBox("1: Wrong valve size; Machno is greater than 0.8")
                            txtErrors.Text = "1: Wrong valve size; Machno is greater than 0.8"
                        Else
                            '  txtErrors.Text = ""
                        End If
                        'Gas velocity in the inlet of diameter expander
                        UrCase1 = (UpCase1 * Noise_ID * Noise_ID) / (0.93 * Noise_ValveID * Noise_ValveID)
                        If UrCase1 > SoundVelocityCase1 Then
                            'MsgBox("Ur Case1 is greater than Sound Velocity")
                            txtErrors.Text = "Ur Case1 is greater than Sound Velocity"
                        Else
                            '  txtErrors.Text = ""
                        End If

                        'Converted stream power in the expander 
                        WmRCase1 = ((FinalFlowrateCase1 / 3600) * (UrCase1 * UrCase1) / 2) * ((Math.Pow((1 - ((Noise_ValveID * Noise_ValveID) / (Noise_ID * Noise_ID))), 2)) + 0.2)
                        'Peak frequency in valve outlet or reduced diameter of expander
                        fpRcase1 = Stp * UrCase1 / Noise_ValveID
                        'Mach number in the enterance to the expander
                        Mrcase1 = UrCase1 / SoundVelocityCase1
                        'Acoustical efficiency factor for noise created by outlet flow in expander. 
                        Nrcase1 = (1 * Math.Pow(10, An) * Math.Pow(Mrcase1, 3))

                        'Sound  power for noise generated by the outlet flow and propagating downstream
                        WarCase1 = Nrcase1 * WmRCase1
                        LpiRCase1 = (10 * Math.Log10(3.2 * Math.Pow(10, 9) * WarCase1 * OutletDensityCase1 * SoundVelocityCase1 / (Noise_ID * Noise_ID))) + LgCase1
                    End If


                    If MachnoOutletCase2 > 0.3 Then
                        UpCase2 = (4 * FinalFlowrateCase2) / (Math.PI * OutletDensityCase2 * Noise_ID * Noise_ID * 3600)
                        If UpCase2 > (SoundVelocityCase2 * 0.8) Then
                            'MsgBox("2: Wrong valve size; Machno is greater than 0.8")
                            txtErrors.Text = "2: Wrong valve size; Machno is greater than 0.8"
                        Else
                            txtErrors.Text = ""
                        End If

                        UrCase2 = (UpCase2 * Noise_ID * Noise_ID) / (0.93 * Noise_ValveID * Noise_ValveID)
                        If UrCase2 > SoundVelocityCase2 Then
                            'MsgBox("Ur Case2 is greater than Sound Velocity")
                            txtErrors.Text = "Ur Case2 is greater than Sound Velocity"
                        Else
                            txtErrors.Text = ""
                        End If
                        WmRCase2 = ((FinalFlowrateCase2 / 3600) * (UrCase2 * UrCase2) / 2) * ((Math.Pow((1 - ((Noise_ValveID * Noise_ValveID) / (Noise_ID * Noise_ID))), 2)) + 0.2)
                        fpRcase2 = Stp * UrCase2 / Noise_ValveID
                        Mrcase2 = UrCase2 / SoundVelocityCase2
                        Nrcase2 = (1 * Math.Pow(10, An) * Math.Pow(Mrcase2, 3))
                        WarCase2 = Nrcase2 * WmRCase2
                        LpiRCase2 = (10 * Math.Log10(3.2 * Math.Pow(10, 9) * WarCase2 * OutletDensityCase2 * SoundVelocityCase2 / (Noise_ID * Noise_ID))) + LgCase2
                    End If

                    If MachnoOutletCase3 > 0.3 Then
                        UpCase3 = (4 * FinalFlowrateCase3) / (Math.PI * OutletDensityCase3 * Noise_ID * Noise_ID * 3600)
                        If UpCase3 > (SoundVelocityCase3 * 0.8) Then
                            'MsgBox("3: Wrong valve size; Machno is greater than 0.8")
                            txtErrors.Text = " 3: Wrong valve size; Machno is greater than 0.8"
                        Else
                            txtErrors.Text = ""
                        End If
                        UrCase3 = (UpCase3 * Noise_ID * Noise_ID) / (0.93 * Noise_ValveID * Noise_ValveID)
                        If UrCase3 > SoundVelocityCase3 Then
                            'MsgBox("Ur Case3 is greater than Sound Velocity")
                            txtErrors.Text = "Ur Case3 is greater than Sound Velocity"
                        Else
                            txtErrors.Text = ""
                        End If
                        WmRCase3 = ((FinalFlowrateCase3 / 3600) * (UrCase3 * UrCase3) / 2) * ((Math.Pow((1 - ((Noise_ValveID * Noise_ValveID) / (Noise_ID * Noise_ID))), 2)) + 0.2)
                        fpRcase3 = Stp * UrCase3 / Noise_ValveID
                        Mrcase3 = UrCase3 / SoundVelocityCase3
                        Nrcase3 = (1 * Math.Pow(10, An) * Math.Pow(Mrcase3, 3))
                        WarCase3 = Nrcase3 * WmRCase3
                        LpiRCase3 = (10 * Math.Log10(3.2 * Math.Pow(10, 9) * WarCase3 * OutletDensityCase3 * SoundVelocityCase3 / (Noise_ID * Noise_ID))) + LgCase3
                    End If


                    RingFrequency = 5000 / (Math.PI * Noise_ID)
                    InternalCoincidenceFrequencyCase1 = (RingFrequency / 4) * (SoundVelocityCase1 / 343)
                    InternalCoincidenceFrequencyCase2 = (RingFrequency / 4) * (SoundVelocityCase2 / 343)
                    InternalCoincidenceFrequencyCase3 = (RingFrequency / 4) * (SoundVelocityCase3 / 343)

                    ExternalCoincidenceFrequency = Math.Sqrt(3) * (117649) / (Math.PI * Noise_Schedule * 5000)
                    If Noise_ValveID > 0.15 Then
                        Compressible_DeltaTL = 0
                    ElseIf Noise_ValveID >= 0.05 And Noise_ValveID <= 0.15 Then
                        Compressible_DeltaTL = (-16660 * Math.Pow(Noise_ValveID, 3)) + (6370 * Math.Pow(Noise_ValveID, 2)) - (813 * Noise_ValveID) + 35.8
                    ElseIf Noise_ValveID < 0.05 Then
                        Compressible_DeltaTL = 9
                    End If
                    '  End If
                    SumofFrequencyLpeCase1 = 0
                    SumofFrequencyLpeCase2 = 0
                    SumofFrequencyLpeCase3 = 0

                    For i = 0 To 32

                        'Frequency dependent internal sound pressure level (third octave bands 12.5 hz to 20000 Hz)
                        LpifiCase1(i) = LpiCase1 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * R_FpCase1)), 2.5))) * (1 + (Math.Pow((R_FpCase1 / (2 * FrequencyIndexBand(i))), 1.7)))))
                        LpifiCase2(i) = LpiCase2 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * R_FpCase2)), 2.5))) * (1 + (Math.Pow((R_FpCase2 / (2 * FrequencyIndexBand(i))), 1.7)))))
                        LpifiCase3(i) = LpiCase3 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * R_FpCase3)), 2.5))) * (1 + (Math.Pow((R_FpCase3 / (2 * FrequencyIndexBand(i))), 1.7)))))



                        If MachnoOutletCase1 > 0.3 Then
                            '  'Frequency dependent internal sound pressure level at pipe wall for noise created by outlet flow in expander (third octave bands 12.5 hz to 20000 Hz
                            LpiRfiCase1(i) = LpiRCase1 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * fpRcase1)), 2.5))) * (1 + (Math.Pow((fpRcase1 / (2 * FrequencyIndexBand(i))), 1.7)))))
                            'Combined internal sound pressure level at pipe wall, caused by valve trim and expander (third octave bands 12.5 hz to 20000 Hz)
                            LpiSfiCase1(i) = 10 * Math.Log10(Math.Pow(10, (LpifiCase1(i) / 10)) + Math.Pow(10, (LpiRfiCase1(i) / 10)))
                        End If

                        If MachnoOutletCase2 > 0.3 Then
                            LpiRfiCase2(i) = LpiRCase2 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * fpRcase2)), 2.5))) * (1 + (Math.Pow((fpRcase2 / (2 * FrequencyIndexBand(i))), 1.7)))))
                            LpiSfiCase2(i) = 10 * Math.Log10(Math.Pow(10, (LpifiCase2(i) / 10)) + Math.Pow(10, (LpiRfiCase2(i) / 10)))
                        End If
                        If MachnoOutletCase3 > 0.3 Then
                            LpiRfiCase3(i) = LpiRCase3 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * fpRcase3)), 2.5))) * (1 + (Math.Pow((fpRcase3 / (2 * FrequencyIndexBand(i))), 1.7)))))
                            LpiSfiCase3(i) = 10 * Math.Log10(Math.Pow(10, (LpifiCase3(i) / 10)) + Math.Pow(10, (LpiRfiCase3(i) / 10)))
                        End If

                        'Frequency factor Gx
                        If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase1 Then
                            GxCase1(i) = (Math.Pow((InternalCoincidenceFrequencyCase1 / RingFrequency), (2 / 3))) * (Math.Pow((FrequencyIndexBand(i) / InternalCoincidenceFrequencyCase1), 4))
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase1 And FrequencyIndexBand(i) < RingFrequency Then
                            GxCase1(i) = (Math.Pow((FrequencyIndexBand(i) / RingFrequency), (1 / 2)))
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase1 And FrequencyIndexBand(i) >= RingFrequency Then
                            GxCase1(i) = 1
                        End If


                        If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase2 Then
                            GxCase2(i) = (Math.Pow((InternalCoincidenceFrequencyCase2 / RingFrequency), (2 / 3))) * (Math.Pow((FrequencyIndexBand(i) / InternalCoincidenceFrequencyCase2), 4))
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase2 And FrequencyIndexBand(i) < RingFrequency Then
                            GxCase2(i) = (Math.Pow((FrequencyIndexBand(i) / RingFrequency), (1 / 2)))
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase2 And FrequencyIndexBand(i) >= RingFrequency Then
                            GxCase2(i) = 1
                        End If



                        If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase3 Then
                            GxCase3(i) = (Math.Pow((InternalCoincidenceFrequencyCase3 / RingFrequency), (2 / 3))) * (Math.Pow((FrequencyIndexBand(i) / InternalCoincidenceFrequencyCase3), 4))
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase3 And FrequencyIndexBand(i) < RingFrequency Then
                            GxCase3(i) = (Math.Pow((FrequencyIndexBand(i) / RingFrequency), (1 / 2)))
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase3 And FrequencyIndexBand(i) >= RingFrequency Then
                            GxCase3(i) = 1
                        End If


                        'frequency factor Gy
                        If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase1 And InternalCoincidenceFrequencyCase1 < ExternalCoincidenceFrequency Then
                            GyCase1(i) = InternalCoincidenceFrequencyCase1 / ExternalCoincidenceFrequency
                        ElseIf FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase1 And InternalCoincidenceFrequencyCase1 >= ExternalCoincidenceFrequency Then
                            GyCase1(i) = 1
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase1 And FrequencyIndexBand(i) < ExternalCoincidenceFrequency Then
                            GyCase1(i) = FrequencyIndexBand(i) / ExternalCoincidenceFrequency
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase1 And FrequencyIndexBand(i) >= ExternalCoincidenceFrequency Then
                            GyCase1(i) = 1
                        End If

                        If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase2 And InternalCoincidenceFrequencyCase2 < ExternalCoincidenceFrequency Then
                            GyCase2(i) = InternalCoincidenceFrequencyCase2 / ExternalCoincidenceFrequency
                        ElseIf FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase2 And InternalCoincidenceFrequencyCase2 >= ExternalCoincidenceFrequency Then
                            GyCase2(i) = 1
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase2 And FrequencyIndexBand(i) < ExternalCoincidenceFrequency Then
                            GyCase2(i) = FrequencyIndexBand(i) / ExternalCoincidenceFrequency
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase2 And FrequencyIndexBand(i) >= ExternalCoincidenceFrequency Then
                            GyCase2(i) = 1
                        End If

                        If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase3 And InternalCoincidenceFrequencyCase3 < ExternalCoincidenceFrequency Then
                            GyCase3(i) = InternalCoincidenceFrequencyCase3 / ExternalCoincidenceFrequency
                        ElseIf FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase3 And InternalCoincidenceFrequencyCase3 >= ExternalCoincidenceFrequency Then
                            GyCase3(i) = 1
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase3 And FrequencyIndexBand(i) < ExternalCoincidenceFrequency Then
                            GyCase3(i) = FrequencyIndexBand(i) / ExternalCoincidenceFrequency
                        ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase3 And FrequencyIndexBand(i) >= ExternalCoincidenceFrequency Then
                            GyCase3(i) = 1
                        End If

                        'Frequency dependent structural loss factor 
                        Ns(i) = Math.Sqrt(1 / (100 * FrequencyIndexBand(i)))
                        TLCase1(i) = (10 * Math.Log10(((8.25 * Math.Pow(10, -7)) * (Math.Pow(SoundVelocityCase1 / (Noise_Schedule * FrequencyIndexBand(i)), 2)) * GxCase1(i)) / (((OutletDensityCase1 * SoundVelocityCase1) + (2 * Math.PI * Noise_Schedule * FrequencyIndexBand(i) * 8000 * Ns(i))) / (415 * GyCase1(i)) + 1) * (1 / 1))) - Compressible_DeltaTL
                        TLCase2(i) = (10 * Math.Log10(((8.25 * Math.Pow(10, -7)) * (Math.Pow(SoundVelocityCase2 / (Noise_Schedule * FrequencyIndexBand(i)), 2)) * GxCase2(i)) / (((OutletDensityCase2 * SoundVelocityCase2) + (2 * Math.PI * Noise_Schedule * FrequencyIndexBand(i) * 8000 * Ns(i))) / (415 * GyCase2(i)) + 1) * (1 / 1))) - Compressible_DeltaTL
                        TLCase3(i) = (10 * Math.Log10(((8.25 * Math.Pow(10, -7)) * (Math.Pow(SoundVelocityCase3 / (Noise_Schedule * FrequencyIndexBand(i)), 2)) * GxCase3(i)) / (((OutletDensityCase3 * SoundVelocityCase3) + (2 * Math.PI * Noise_Schedule * FrequencyIndexBand(i) * 8000 * Ns(i))) / (415 * GyCase3(i)) + 1) * (1 / 1))) - Compressible_DeltaTL


                        If MachnoOutletCase1 <= 0.3 Then
                            tempLpe = LpifiCase1(i)
                        Else
                            tempLpe = LpiSfiCase1(i)
                        End If
                        LpeCase1(i) = tempLpe + TLCase1(i) - (10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule))))

                        If MachnoOutletCase2 <= 0.3 Then
                            tempLpe = LpifiCase2(i)
                        Else
                            tempLpe = LpiSfiCase2(i)
                        End If
                        LpeCase2(i) = tempLpe + TLCase2(i) - (10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule))))

                        If MachnoOutletCase3 <= 0.3 Then
                            tempLpe = LpifiCase3(i)
                        Else
                            tempLpe = LpiSfiCase3(i)
                        End If
                        LpeCase3(i) = tempLpe + TLCase3(i) - (10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule))))

                        SumofFrequencyLpeCase1 = SumofFrequencyLpeCase1 + Math.Pow(10, ((LpeCase1(i) + N_DeltaLA(i)) / 10))
                        SumofFrequencyLpeCase2 = SumofFrequencyLpeCase2 + Math.Pow(10, ((LpeCase2(i) + N_DeltaLA(i)) / 10))
                        SumofFrequencyLpeCase3 = SumofFrequencyLpeCase3 + Math.Pow(10, ((LpeCase3(i) + N_DeltaLA(i)) / 10))

                    Next
                    StageNoiseCase1(count) = 0
                    StageNoiseCase2(count) = 0
                    StageNoiseCase3(count) = 0
                    If NoiseAttenuation_Compressible_CageAsInlet_Flag = False Then
                        If NoiseAttenuationFlag = False Then
                            StageNoiseCase1(count) = 10 * Math.Log10(SumofFrequencyLpeCase1)
                            StageNoiseCase2(count) = 10 * Math.Log10(SumofFrequencyLpeCase2)
                            StageNoiseCase3(count) = 10 * Math.Log10(SumofFrequencyLpeCase3)
                            DT_StageWiseNoise.Rows(count - 1).Item(0) = StageNoiseCase1(count)
                            DT_StageWiseNoise.Rows(count - 1).Item(1) = StageNoiseCase2(count)
                            DT_StageWiseNoise.Rows(count - 1).Item(2) = StageNoiseCase3(count)

                        End If

                    ElseIf chkBaffleCase1.Checked = True Or NoiseAttenuationFlag = True Then
                        FinalNoiseLevelCase1 = 10 * Math.Log10(SumofFrequencyLpeCase1)
                        FinalNoiseLevelCase2 = 10 * Math.Log10(SumofFrequencyLpeCase2)
                        FinalNoiseLevelCase3 = 10 * Math.Log10(SumofFrequencyLpeCase3)
                    End If
                Next
               
                ' Total Noise = = 10 x log10 (10^(0.1*(Trim noise-5))+ 10^0.1(Attenuation noise))

                If NoiseAttenuationFlag = False Then
                    Select Case Stages
                        Case 1
                            FinalNoiseLevelCase1 = StageNoiseCase1(1)      ' Only 1 stage
                            FinalNoiseLevelCase2 = StageNoiseCase2(1)      ' Only 1 stage
                            FinalNoiseLevelCase3 = StageNoiseCase3(1)     ' Only 1 stage
                        Case 2

                            FinalNoiseLevelCase1 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase1(1) / 10))) + (Math.Pow(10, (StageNoiseCase1(2) / 10))))
                            FinalNoiseLevelCase2 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase2(1) / 10))) + (Math.Pow(10, (StageNoiseCase2(2) / 10))))
                            FinalNoiseLevelCase3 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase3(1) / 10))) + (Math.Pow(10, (StageNoiseCase3(2) / 10))))
                        Case 3
                            FinalNoiseLevelCase1 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase1(1) / 10))) + (Math.Pow(10, (StageNoiseCase1(2) / 10))) + (Math.Pow(10, (StageNoiseCase1(3) / 10))))
                            FinalNoiseLevelCase2 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase2(1) / 10))) + (Math.Pow(10, (StageNoiseCase2(2) / 10))) + (Math.Pow(10, (StageNoiseCase2(3) / 10))))
                            FinalNoiseLevelCase3 = 10 * Math.Log10((Math.Pow(10, (StageNoiseCase3(1) / 10))) + (Math.Pow(10, (StageNoiseCase3(2) / 10))) + (Math.Pow(10, (StageNoiseCase3(3) / 10))))
                    End Select
                End If

                If chkBaffleCase1.Checked = False And NoiseAttenuationFlag = False Then          'as The baffle is used Outlet pressure will be different. 
                    DT_NoiseAttenuation.Rows(4).Item(0) = FinalNoiseLevelCase1
                    DT_NoiseAttenuation.Rows(4).Item(1) = FinalNoiseLevelCase2
                    DT_NoiseAttenuation.Rows(4).Item(2) = FinalNoiseLevelCase3
                Else
                    DT_NoiseAttenuation.Rows(3).Item(0) = FinalNoiseLevelCase1       ' Use same DT Row for With Cage and Without Cage
                    DT_NoiseAttenuation.Rows(3).Item(1) = FinalNoiseLevelCase2      'As they will be used in isolation and will not come tog
                    DT_NoiseAttenuation.Rows(3).Item(2) = FinalNoiseLevelCase3
                    MFac_Cage = 1
                End If
                frmTestingGrids.DGVStageNoise.Visible = True
                frmTestingGrids.DGVStageNoise.DataSource = DT_StageWiseNoise
            End If

        Catch ex As DivideByZeroException
            MsgBox("Noise Calculations: Gas :" & "  " & ex.Message)
        End Try

    End Function

    Public Function NoiseforCompressibleBaffle(ByVal KvBaffle As Single)

        Dim i As Byte
        Dim tempLpe, SumofFrequencyLpeCase1, SumofFrequencyLpeCase2, SumofFrequencyLpeCase3 As Single
        Dim NoiseFLCase1, NoiseFLCase2, NoiseFLCase3, NoiseFDCase1, NoiseFDCase2, NoiseFDCase3 As Single
        Dim StageNoiseCase1(3), StageNoiseCase2(3), StageNoiseCase3(3) As Single
        Try
            If LoadingProjectFile = False Then



                NoiseFLCase1 = 0.93                      ' Taken for Multi stage Noise Calculations
                NoiseFLCase2 = 0.93
                NoiseFLCase3 = 0.93
                NoiseFDCase1 = 0.35
                NoiseFDCase2 = 0.35
                NoiseFDCase3 = 0.35


                '****************************************************************************
                'Calculate Noise for each Stages and change Inlet and Outlet Pressure at each stage. 

                Xcase1 = (Noise_InletPressureCase1 - Noise_OutletPressureCase1) / Noise_InletPressureCase1
                Xcase2 = (Noise_InletPressureCase2 - Noise_OutletPressureCase2) / Noise_InletPressureCase2
                Xcase3 = (Noise_InletPressureCase3 - Noise_OutletPressureCase3) / Noise_InletPressureCase3


                '************************************************************************

                'Absolute Vena Contracta differential Pressure at subsonic flow conditions.
                PvcCase1 = Noise_InletPressureCase1 * (1 - (Xcase1 / (NoiseFLCase1 * NoiseFLCase1)))
                PvcCase2 = Noise_InletPressureCase2 * (1 - (Xcase2 / (NoiseFLCase2 * NoiseFLCase2)))
                PvcCase3 = Noise_InletPressureCase3 * (1 - (Xcase3 / (NoiseFLCase3 * NoiseFLCase3)))

                'Vena contracta differential pressure ratio at critical flow conditions.
                XvccCase1 = 1 - (Math.Pow((2 / (Kcase1 + 1)), (Kcase1 / (Kcase1 - 1))))
                XvccCase2 = 1 - (Math.Pow((2 / (Kcase2 + 1)), (Kcase2 / (Kcase2 - 1))))
                XvccCase3 = 1 - (Math.Pow((2 / (Kcase3 + 1)), (Kcase3 / (Kcase3 - 1))))

                'Differential Pressure ratio at critical flow condition
                XcCase1 = NoiseFLCase1 * NoiseFLCase1 * XvccCase1
                XcCase2 = NoiseFLCase2 * NoiseFLCase2 * XvccCase2
                XcCase3 = NoiseFLCase3 * NoiseFLCase3 * XvccCase3

                'Recovery correction factor.
                aCase1 = (1 - XvccCase1) / (1 - XcCase1)
                aCase2 = (1 - XvccCase2) / (1 - XcCase2)
                aCase3 = (1 - XvccCase3) / (1 - XcCase3)

                'Differential pressure ratio at break point 
                XbCase1 = 1 - ((1 / aCase1) * (Math.Pow((1 / Kcase1), (Kcase1 / (Kcase1 - 1)))))
                XbCase2 = 1 - ((1 / aCase2) * (Math.Pow((1 / Kcase2), (Kcase2 / (Kcase2 - 1)))))
                XbCase3 = 1 - ((1 / aCase3) * (Math.Pow((1 / Kcase3), (Kcase3 / (Kcase3 - 1)))))

                'Differential Pressure ratio where region of constant acoustical efficiency begins
                XceCase1 = 1 - (1 / (22 * aCase1))
                XceCase2 = 1 - (1 / (22 * aCase2))
                XceCase3 = 1 - (1 / (22 * aCase3))

                If NoiseAttenuation_Compressible_CageAsInlet_Flag = False Then
                    DjCase1 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase1 * Math.Sqrt((FinalKVCase1 * 1.17) * NoiseFLCase1)
                    DJcase2 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase2 * Math.Sqrt((FinalKVCase2 * 1.17) * NoiseFLCase2)
                    DJcase3 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase3 * Math.Sqrt((FinalKVCase3 * 1.17) * NoiseFLCase3)
                Else
                    DjCase1 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase1 * Math.Sqrt((KvBaffle * 1.17) * NoiseFLCase1)
                    DJcase2 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase2 * Math.Sqrt((KvBaffle * 1.17) * NoiseFLCase2)
                    DJcase3 = (4.6 * Math.Pow(10, -3)) * NoiseFDCase3 * Math.Sqrt((KvBaffle * 1.17) * NoiseFLCase3)
                End If
                'Regime Checks from 1 to case


                If Xcase1 <= XcCase1 Then
                    RegimeCase = 1
                ElseIf XcCase1 < Xcase1 And Xcase1 <= XvccCase1 Then
                    RegimeCase = 2
                ElseIf XvccCase1 < Xcase1 And Xcase1 <= XbCase1 Then
                    RegimeCase = 3
                ElseIf XbCase1 < Xcase1 And Xcase1 <= XceCase1 Then
                    RegimeCase = 4
                ElseIf XceCase1 <= Xcase1 Then
                    RegimeCase = 5
                End If

                Regime(RegimeCase, MvcCase1, R_NCase1, R_FpCase1, TvcCase1, R_CvCase1, WmCase1, WaCase1, Kcase1, Xcase1, XvccCase1, NoiseFLCase1, aCase1, (FinalInletTemperatureCase1 + 273), FinalDensityCase1, (FinalFlowrateCase1 / 3600), Noise_InletPressureCase1, DjCase1)


                If Xcase2 <= XcCase2 Then
                    RegimeCase = 1
                ElseIf XcCase2 < Xcase2 And Xcase2 <= XvccCase2 Then
                    RegimeCase = 2
                ElseIf XvccCase2 < Xcase1 And Xcase2 <= XbCase2 Then
                    RegimeCase = 3
                ElseIf XbCase2 < Xcase2 And Xcase2 <= XceCase2 Then
                    RegimeCase = 4
                ElseIf XceCase2 <= Xcase2 Then
                    RegimeCase = 5
                End If

                Regime(RegimeCase, MvcCase2, R_NCase2, R_FpCase2, TvcCase2, R_CvCase2, WmCase2, WaCase2, Kcase2, Xcase2, XvccCase2, NoiseFLCase2, aCase2, (FinalInletTemperatureCase2 + 273), FinalDensityCase2, (FinalFlowrateCase2 / 3600), Noise_InletPressureCase2, DJcase2)


                If Xcase3 <= XcCase3 Then
                    RegimeCase = 1
                ElseIf XcCase3 < Xcase3 And Xcase3 <= XvccCase3 Then
                    RegimeCase = 2
                ElseIf XvccCase3 < Xcase3 And Xcase3 <= XbCase3 Then
                    RegimeCase = 3
                ElseIf XbCase3 < Xcase3 And Xcase3 <= XceCase3 Then
                    RegimeCase = 4
                ElseIf XceCase3 <= Xcase3 Then
                    RegimeCase = 5
                End If

                Regime(RegimeCase, MvcCase3, R_NCase3, R_FpCase3, TvcCase3, R_CvCase3, WmCase3, WaCase3, Kcase3, Xcase3, XvccCase3, NoiseFLCase3, aCase3, (FinalInletTemperatureCase3 + 273), FinalDensityCase3, (FinalFlowrateCase3 / 3600), Noise_InletPressureCase3, DJcase3)


                'Noise Calculations:
                If cmbFluid.Text = "Steam" Then
                    OutletDensityCase1 = rho_pT(FinalOutletPressureCase1, ToutPressureCase1)
                    OutletDensityCase2 = rho_pT(FinalOutletPressureCase2, ToutPressureCase2)
                    OutletDensityCase3 = rho_pT(FinaloutletPressureCase3, ToutPressureCase3)
                ElseIf cmbFluid.Text = "Gas" Then
                    OutletDensityCase1 = FinalDensityCase1 * (FinalOutletPressureCase1 / FinalInletPressureCase1)
                    OutletDensityCase2 = FinalDensityCase2 * (FinalOutletPressureCase2 / FinalInletPressureCase2)
                    OutletDensityCase3 = FinalDensityCase3 * (FinaloutletPressureCase3 / FinalInletPressureCase3)
                End If


                'Mach No at Valve Outlet
                MachnoOutletCase1 = (4 * FinalFlowrateCase1) / (Math.PI * (Noise_ValveID * Noise_ValveID) * OutletDensityCase1 * SoundVelocityCase1 * 3600)
                MachnoOutletCase2 = (4 * FinalFlowrateCase2) / (Math.PI * (Noise_ValveID * Noise_ValveID) * OutletDensityCase2 * SoundVelocityCase2 * 3600)
                MachnoOutletCase3 = (4 * FinalFlowrateCase3) / (Math.PI * (Noise_ValveID * Noise_ValveID) * OutletDensityCase3 * SoundVelocityCase3 * 3600)
                ''Mach No at Pipe Outlet
                MachPipeOutletCase1 = (4 * FinalFlowrateCase1) / (Math.PI * (Noise_ID * Noise_ID) * OutletDensityCase1 * SoundVelocityCase1 * 3600)
                MachPipeOutletCase2 = (4 * FinalFlowrateCase2) / (Math.PI * (Noise_ID * Noise_ID) * OutletDensityCase2 * SoundVelocityCase2 * 3600)
                MachPipeOutletCase3 = (4 * FinalFlowrateCase3) / (Math.PI * (Noise_ID * Noise_ID) * OutletDensityCase3 * SoundVelocityCase3 * 3600)

                If MachPipeOutletCase1 > 0.3 Then
                    MachPipeOutletCase1 = 0.3
                End If
                If MachPipeOutletCase2 > 0.3 Then
                    MachPipeOutletCase2 = 0.3
                End If

                If MachPipeOutletCase3 > 0.3 Then
                    MachPipeOutletCase3 = 0.3
                End If


                'Correction for Mach Number
                LgCase1 = 16 * Math.Log10(1 / (1 - MachPipeOutletCase1))
                LgCase2 = 16 * Math.Log10(1 / (1 - MachPipeOutletCase2))
                LgCase3 = 16 * Math.Log10(1 / (1 - MachPipeOutletCase3))

                'Overall internal sound pressure level

                LpiCase1 = (10 * Math.Log10(((3.2 * Math.Pow(10, 9)) * WaCase1 * OutletDensityCase1 * 480) / (Noise_ID * Noise_ID))) + LgCase1
                LpiCase2 = (10 * Math.Log10(((3.2 * Math.Pow(10, 9)) * WaCase2 * OutletDensityCase2 * 480) / (Noise_ID * Noise_ID))) + LgCase2
                LpiCase3 = (10 * Math.Log10(((3.2 * Math.Pow(10, 9)) * WaCase3 * OutletDensityCase3 * 480) / (Noise_ID * Noise_ID))) + LgCase3

                '  If NoiseAttenuation_Compressible_CageAsInlet_Flag = False Then
                '****************Calculation if Machno > 0.3********************
                An = -3.0
                Stp = 0.2
                If MachnoOutletCase1 > 0.3 Then
                    'Gas velocity in downstream pipe.
                    UpCase1 = (4 * FinalFlowrateCase1) / (Math.PI * OutletDensityCase1 * Noise_ID * Noise_ID * 3600)
                    If UpCase1 > (SoundVelocityCase1 * 0.8) Then
                        '   MsgBox("1: Wrong valve size; Machno is greater than 0.8")
                        txtErrors.Text = "1: Wrong valve size; Machno is greater than 0.8"
                    Else
                        '  txtErrors.Text = ""
                    End If
                    'Gas velocity in the inlet of diameter expander
                    UrCase1 = (UpCase1 * Noise_ID * Noise_ID) / (0.93 * Noise_ValveID * Noise_ValveID)
                    If UrCase1 > SoundVelocityCase1 Then
                        'MsgBox("Ur Case1 is greater than Sound Velocity")
                        txtErrors.Text = "Ur Case1 is greater than Sound Velocity"
                    Else
                        '  txtErrors.Text = ""
                    End If

                    'Converted stream power in the expander 
                    WmRCase1 = ((FinalFlowrateCase1 / 3600) * (UrCase1 * UrCase1) / 2) * ((Math.Pow((1 - ((Noise_ValveID * Noise_ValveID) / (Noise_ID * Noise_ID))), 2)) + 0.2)
                    'Peak frequency in valve outlet or reduced diameter of expander
                    fpRcase1 = Stp * UrCase1 / Noise_ValveID
                    'Mach number in the enterance to the expander
                    Mrcase1 = UrCase1 / SoundVelocityCase1
                    'Acoustical efficiency factor for noise created by outlet flow in expander. 
                    Nrcase1 = (1 * Math.Pow(10, An) * Math.Pow(Mrcase1, 3))

                    'Sound  power for noise generated by the outlet flow and propagating downstream
                    WarCase1 = Nrcase1 * WmRCase1
                    LpiRCase1 = (10 * Math.Log10(3.2 * Math.Pow(10, 9) * WarCase1 * OutletDensityCase1 * SoundVelocityCase1 / (Noise_ID * Noise_ID))) + LgCase1
                End If


                If MachnoOutletCase2 > 0.3 Then
                    UpCase2 = (4 * FinalFlowrateCase2) / (Math.PI * OutletDensityCase2 * Noise_ID * Noise_ID * 3600)
                    If UpCase2 > (SoundVelocityCase2 * 0.8) Then
                        'MsgBox("2: Wrong valve size; Machno is greater than 0.8")
                        txtErrors.Text = "2: Wrong valve size; Machno is greater than 0.8"
                    Else
                        txtErrors.Text = ""
                    End If

                    UrCase2 = (UpCase2 * Noise_ID * Noise_ID) / (0.93 * Noise_ValveID * Noise_ValveID)
                    If UrCase2 > SoundVelocityCase2 Then
                        'MsgBox("Ur Case2 is greater than Sound Velocity")
                        txtErrors.Text = "Ur Case2 is greater than Sound Velocity"
                    Else
                        txtErrors.Text = ""
                    End If
                    WmRCase2 = ((FinalFlowrateCase2 / 3600) * (UrCase2 * UrCase2) / 2) * ((Math.Pow((1 - ((Noise_ValveID * Noise_ValveID) / (Noise_ID * Noise_ID))), 2)) + 0.2)
                    fpRcase2 = Stp * UrCase2 / Noise_ValveID
                    Mrcase2 = UrCase2 / SoundVelocityCase2
                    Nrcase2 = (1 * Math.Pow(10, An) * Math.Pow(Mrcase2, 3))
                    WarCase2 = Nrcase2 * WmRCase2
                    LpiRCase2 = (10 * Math.Log10(3.2 * Math.Pow(10, 9) * WarCase2 * OutletDensityCase2 * SoundVelocityCase2 / (Noise_ID * Noise_ID))) + LgCase2
                End If

                If MachnoOutletCase3 > 0.3 Then
                    UpCase3 = (4 * FinalFlowrateCase3) / (Math.PI * OutletDensityCase3 * Noise_ID * Noise_ID * 3600)
                    If UpCase3 > (SoundVelocityCase3 * 0.8) Then
                        'MsgBox("3: Wrong valve size; Machno is greater than 0.8")
                        txtErrors.Text = " 3: Wrong valve size; Machno is greater than 0.8"
                    Else
                        txtErrors.Text = ""
                    End If
                    UrCase3 = (UpCase3 * Noise_ID * Noise_ID) / (0.93 * Noise_ValveID * Noise_ValveID)
                    If UrCase3 > SoundVelocityCase3 Then
                        'MsgBox("Ur Case3 is greater than Sound Velocity")
                        txtErrors.Text = "Ur Case3 is greater than Sound Velocity"
                    Else
                        txtErrors.Text = ""
                    End If
                    WmRCase3 = ((FinalFlowrateCase3 / 3600) * (UrCase3 * UrCase3) / 2) * ((Math.Pow((1 - ((Noise_ValveID * Noise_ValveID) / (Noise_ID * Noise_ID))), 2)) + 0.2)
                    fpRcase3 = Stp * UrCase3 / Noise_ValveID
                    Mrcase3 = UrCase3 / SoundVelocityCase3
                    Nrcase3 = (1 * Math.Pow(10, An) * Math.Pow(Mrcase3, 3))
                    WarCase3 = Nrcase3 * WmRCase3
                    LpiRCase3 = (10 * Math.Log10(3.2 * Math.Pow(10, 9) * WarCase3 * OutletDensityCase3 * SoundVelocityCase3 / (Noise_ID * Noise_ID))) + LgCase3
                End If


                RingFrequency = 5000 / (Math.PI * Noise_ID)
                InternalCoincidenceFrequencyCase1 = (RingFrequency / 4) * (SoundVelocityCase1 / 343)
                InternalCoincidenceFrequencyCase2 = (RingFrequency / 4) * (SoundVelocityCase2 / 343)
                InternalCoincidenceFrequencyCase3 = (RingFrequency / 4) * (SoundVelocityCase3 / 343)

                ExternalCoincidenceFrequency = Math.Sqrt(3) * (117649) / (Math.PI * Noise_Schedule * 5000)
                If Noise_ValveID > 0.15 Then
                    Compressible_DeltaTL = 0
                ElseIf Noise_ValveID >= 0.05 And Noise_ValveID <= 0.15 Then
                    Compressible_DeltaTL = (-16660 * Math.Pow(Noise_ValveID, 3)) + (6370 * Math.Pow(Noise_ValveID, 2)) - (813 * Noise_ValveID) + 35.8
                ElseIf Noise_ValveID < 0.05 Then
                    Compressible_DeltaTL = 9
                End If
                '  End If
                SumofFrequencyLpeCase1 = 0
                SumofFrequencyLpeCase2 = 0
                SumofFrequencyLpeCase3 = 0

                For i = 0 To 32

                    'Frequency dependent internal sound pressure level (third octave bands 12.5 hz to 20000 Hz)
                    LpifiCase1(i) = LpiCase1 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * R_FpCase1)), 2.5))) * (1 + (Math.Pow((R_FpCase1 / (2 * FrequencyIndexBand(i))), 1.7)))))
                    LpifiCase2(i) = LpiCase2 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * R_FpCase2)), 2.5))) * (1 + (Math.Pow((R_FpCase2 / (2 * FrequencyIndexBand(i))), 1.7)))))
                    LpifiCase3(i) = LpiCase3 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * R_FpCase3)), 2.5))) * (1 + (Math.Pow((R_FpCase3 / (2 * FrequencyIndexBand(i))), 1.7)))))



                    If MachnoOutletCase1 > 0.3 Then
                        '  'Frequency dependent internal sound pressure level at pipe wall for noise created by outlet flow in expander (third octave bands 12.5 hz to 20000 Hz
                        LpiRfiCase1(i) = LpiRCase1 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * fpRcase1)), 2.5))) * (1 + (Math.Pow((fpRcase1 / (2 * FrequencyIndexBand(i))), 1.7)))))
                        'Combined internal sound pressure level at pipe wall, caused by valve trim and expander (third octave bands 12.5 hz to 20000 Hz)
                        LpiSfiCase1(i) = 10 * Math.Log10(Math.Pow(10, (LpifiCase1(i) / 10)) + Math.Pow(10, (LpiRfiCase1(i) / 10)))
                    End If

                    If MachnoOutletCase2 > 0.3 Then
                        LpiRfiCase2(i) = LpiRCase2 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * fpRcase2)), 2.5))) * (1 + (Math.Pow((fpRcase2 / (2 * FrequencyIndexBand(i))), 1.7)))))
                        LpiSfiCase2(i) = 10 * Math.Log10(Math.Pow(10, (LpifiCase2(i) / 10)) + Math.Pow(10, (LpiRfiCase2(i) / 10)))
                    End If
                    If MachnoOutletCase3 > 0.3 Then
                        LpiRfiCase3(i) = LpiRCase3 - 8 - (10 * Math.Log10((1 + (Math.Pow((FrequencyIndexBand(i) / (2 * fpRcase3)), 2.5))) * (1 + (Math.Pow((fpRcase3 / (2 * FrequencyIndexBand(i))), 1.7)))))
                        LpiSfiCase3(i) = 10 * Math.Log10(Math.Pow(10, (LpifiCase3(i) / 10)) + Math.Pow(10, (LpiRfiCase3(i) / 10)))
                    End If

                    'Frequency factor Gx
                    If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase1 Then
                        GxCase1(i) = (Math.Pow((InternalCoincidenceFrequencyCase1 / RingFrequency), (2 / 3))) * (Math.Pow((FrequencyIndexBand(i) / InternalCoincidenceFrequencyCase1), 4))
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase1 And FrequencyIndexBand(i) < RingFrequency Then
                        GxCase1(i) = (Math.Pow((FrequencyIndexBand(i) / RingFrequency), (1 / 2)))
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase1 And FrequencyIndexBand(i) >= RingFrequency Then
                        GxCase1(i) = 1
                    End If


                    If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase2 Then
                        GxCase2(i) = (Math.Pow((InternalCoincidenceFrequencyCase2 / RingFrequency), (2 / 3))) * (Math.Pow((FrequencyIndexBand(i) / InternalCoincidenceFrequencyCase2), 4))
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase2 And FrequencyIndexBand(i) < RingFrequency Then
                        GxCase2(i) = (Math.Pow((FrequencyIndexBand(i) / RingFrequency), (1 / 2)))
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase2 And FrequencyIndexBand(i) >= RingFrequency Then
                        GxCase2(i) = 1
                    End If



                    If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase3 Then
                        GxCase3(i) = (Math.Pow((InternalCoincidenceFrequencyCase3 / RingFrequency), (2 / 3))) * (Math.Pow((FrequencyIndexBand(i) / InternalCoincidenceFrequencyCase3), 4))
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase3 And FrequencyIndexBand(i) < RingFrequency Then
                        GxCase3(i) = (Math.Pow((FrequencyIndexBand(i) / RingFrequency), (1 / 2)))
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase3 And FrequencyIndexBand(i) >= RingFrequency Then
                        GxCase3(i) = 1
                    End If


                    'frequency factor Gy
                    If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase1 And InternalCoincidenceFrequencyCase1 < ExternalCoincidenceFrequency Then
                        GyCase1(i) = InternalCoincidenceFrequencyCase1 / ExternalCoincidenceFrequency
                    ElseIf FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase1 And InternalCoincidenceFrequencyCase1 >= ExternalCoincidenceFrequency Then
                        GyCase1(i) = 1
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase1 And FrequencyIndexBand(i) < ExternalCoincidenceFrequency Then
                        GyCase1(i) = FrequencyIndexBand(i) / ExternalCoincidenceFrequency
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase1 And FrequencyIndexBand(i) >= ExternalCoincidenceFrequency Then
                        GyCase1(i) = 1
                    End If

                    If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase2 And InternalCoincidenceFrequencyCase2 < ExternalCoincidenceFrequency Then
                        GyCase2(i) = InternalCoincidenceFrequencyCase2 / ExternalCoincidenceFrequency
                    ElseIf FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase2 And InternalCoincidenceFrequencyCase2 >= ExternalCoincidenceFrequency Then
                        GyCase2(i) = 1
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase2 And FrequencyIndexBand(i) < ExternalCoincidenceFrequency Then
                        GyCase2(i) = FrequencyIndexBand(i) / ExternalCoincidenceFrequency
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase2 And FrequencyIndexBand(i) >= ExternalCoincidenceFrequency Then
                        GyCase2(i) = 1
                    End If

                    If FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase3 And InternalCoincidenceFrequencyCase3 < ExternalCoincidenceFrequency Then
                        GyCase3(i) = InternalCoincidenceFrequencyCase3 / ExternalCoincidenceFrequency
                    ElseIf FrequencyIndexBand(i) < InternalCoincidenceFrequencyCase3 And InternalCoincidenceFrequencyCase3 >= ExternalCoincidenceFrequency Then
                        GyCase3(i) = 1
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase3 And FrequencyIndexBand(i) < ExternalCoincidenceFrequency Then
                        GyCase3(i) = FrequencyIndexBand(i) / ExternalCoincidenceFrequency
                    ElseIf FrequencyIndexBand(i) >= InternalCoincidenceFrequencyCase3 And FrequencyIndexBand(i) >= ExternalCoincidenceFrequency Then
                        GyCase3(i) = 1
                    End If

                    'Frequency dependent structural loss factor 
                    Ns(i) = Math.Sqrt(1 / (100 * FrequencyIndexBand(i)))
                    TLCase1(i) = (10 * Math.Log10(((8.25 * Math.Pow(10, -7)) * (Math.Pow(SoundVelocityCase1 / (Noise_Schedule * FrequencyIndexBand(i)), 2)) * GxCase1(i)) / (((OutletDensityCase1 * SoundVelocityCase1) + (2 * Math.PI * Noise_Schedule * FrequencyIndexBand(i) * 8000 * Ns(i))) / (415 * GyCase1(i)) + 1) * (1 / 1))) - Compressible_DeltaTL
                    TLCase2(i) = (10 * Math.Log10(((8.25 * Math.Pow(10, -7)) * (Math.Pow(SoundVelocityCase2 / (Noise_Schedule * FrequencyIndexBand(i)), 2)) * GxCase2(i)) / (((OutletDensityCase2 * SoundVelocityCase2) + (2 * Math.PI * Noise_Schedule * FrequencyIndexBand(i) * 8000 * Ns(i))) / (415 * GyCase2(i)) + 1) * (1 / 1))) - Compressible_DeltaTL
                    TLCase3(i) = (10 * Math.Log10(((8.25 * Math.Pow(10, -7)) * (Math.Pow(SoundVelocityCase3 / (Noise_Schedule * FrequencyIndexBand(i)), 2)) * GxCase3(i)) / (((OutletDensityCase3 * SoundVelocityCase3) + (2 * Math.PI * Noise_Schedule * FrequencyIndexBand(i) * 8000 * Ns(i))) / (415 * GyCase3(i)) + 1) * (1 / 1))) - Compressible_DeltaTL


                    If MachnoOutletCase1 <= 0.3 Then
                        tempLpe = LpifiCase1(i)
                    Else
                        tempLpe = LpiSfiCase1(i)
                    End If
                    LpeCase1(i) = tempLpe + TLCase1(i) - (10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule))))

                    If MachnoOutletCase2 <= 0.3 Then
                        tempLpe = LpifiCase2(i)
                    Else
                        tempLpe = LpiSfiCase2(i)
                    End If
                    LpeCase2(i) = tempLpe + TLCase2(i) - (10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule))))

                    If MachnoOutletCase3 <= 0.3 Then
                        tempLpe = LpifiCase3(i)
                    Else
                        tempLpe = LpiSfiCase3(i)
                    End If
                    LpeCase3(i) = tempLpe + TLCase3(i) - (10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule))))

                    SumofFrequencyLpeCase1 = SumofFrequencyLpeCase1 + Math.Pow(10, ((LpeCase1(i) + N_DeltaLA(i)) / 10))
                    SumofFrequencyLpeCase2 = SumofFrequencyLpeCase2 + Math.Pow(10, ((LpeCase2(i) + N_DeltaLA(i)) / 10))
                    SumofFrequencyLpeCase3 = SumofFrequencyLpeCase3 + Math.Pow(10, ((LpeCase3(i) + N_DeltaLA(i)) / 10))

                Next

                FinalNoiseLevelCase1 = 10 * Math.Log10(SumofFrequencyLpeCase1)
                FinalNoiseLevelCase2 = 10 * Math.Log10(SumofFrequencyLpeCase2)
                FinalNoiseLevelCase3 = 10 * Math.Log10(SumofFrequencyLpeCase3)

            End If

        Catch ex As Exception
            MsgBox("NoiseforCompressibleBaffle: " & ex.Message)
        End Try
    End Function



    Public Function Regime(ByVal Regimetype As Byte, ByRef Mvc As Single, ByRef N As Single, ByRef R_Fp As Single, ByRef Tvc As Single, ByRef Cv As Single, ByRef Wm As Single, ByRef Wa As Single, ByRef K As Single, ByRef X As Single, ByRef Xvcc As Single, ByRef FL As Single, ByRef A As Single, ByRef Temperature As Single, ByRef Density As Single, ByRef Flowrate As Single, ByRef Pressure As Single, ByRef DJ As Single)
        Try
            If NoiseAttenuation_Compressible_CageAsInlet_Flag = False Then
                An = -4.2
                Stp = 0.19
            Else
                An = -4.8
                Stp = 0.2
            End If
            Select Case Regimetype
                Case 1
                    Mvc = Math.Sqrt((2 / (K - 1)) * ((Math.Pow((1 - (X / (FL * FL))), ((1 - K) / K))) - 1))
                    N = (1 * Math.Pow(10, An)) * FL * FL * Math.Pow(Mvc, 3)
                    Tvc = Temperature * (Math.Pow((1 - (X / (FL * FL))), ((K - 1) / K)))
                    Cv = Math.Sqrt(K * (Pressure / Density) * (Math.Pow((1 - (X / (FL * FL))), ((K - 1) / K))))
                    R_Fp = Stp * Mvc * Cv / DJ
                    Wm = (Flowrate * Math.Pow((Mvc * Cv), 2)) / 2
                    Wa = N * Wm
                Case 2
                    Mvc = Math.Sqrt((2 / (K - 1)) * ((Math.Pow((1 / (A * (1 - X))), ((K - 1) / K))) - 1))
                    N = (1 * Math.Pow(10, An)) * (X / Xvcc) * Math.Pow(Mvc, (6.6 * FL * FL))
                    Tvc = 2 * Temperature / (K + 1)
                    Cv = Math.Sqrt(((2 * K) / (K + 1)) * (Pressure / Density))
                    R_Fp = Stp * Mvc * Cv / DJ
                    Wm = Flowrate * Cv * Cv / 2
                    Wa = N * Wm
                Case 3
                    Mvc = Math.Sqrt((2 / (K - 1)) * ((Math.Pow((1 / (A * (1 - X))), ((K - 1) / K))) - 1))
                    N = (1 * Math.Pow(10, An)) * Math.Pow(Mvc, (6.6 * FL * FL))
                    Tvc = 2 * Temperature / (K + 1)
                    Cv = Math.Sqrt(((2 * K) / (K + 1)) * (Pressure / Density))
                    R_Fp = Stp * Mvc * Cv / DJ
                    Wm = Flowrate * Cv * Cv / 2
                    Wa = N * Wm
                Case 4
                    Mvc = Math.Sqrt((2 / (K - 1)) * ((Math.Pow((1 / (A * (1 - X))), ((K - 1) / K))) - 1))
                    N = (1 * Math.Pow(10, An)) * (Math.Pow(Mvc, 2) / 2) * Math.Pow((Math.Sqrt(2)), (6.6 * FL * FL))
                    Tvc = 2 * Temperature / (K + 1)
                    Cv = Math.Sqrt(((2 * K) / (K + 1)) * (Pressure / Density))
                    Wm = Flowrate * Cv * Cv / 2
                    R_Fp = (1.4 * Stp * Cv) / (DJ * (Math.Sqrt(Math.Pow(Mvc, 2) - 1)))
                    Wa = N * Wm
                Case 5
                    Mvc = Math.Sqrt((2 / (K - 1)) * ((Math.Pow(22, ((K - 1) / K))) - 1))
                    N = (1 * Math.Pow(10, An)) * (Math.Pow(Mvc, 2) / 2) * Math.Pow((Math.Sqrt(2)), (6.6 * FL * FL))
                    Tvc = 2 * Temperature / (K + 1)
                    Cv = Math.Sqrt(((2 * K) / (K + 1)) * (Pressure / Density))
                    Wm = Flowrate * Cv * Cv / 2
                    R_Fp = (1.4 * Stp * Cv) / (DJ * (Math.Sqrt((Math.Pow(Mvc, 2)) - 1)))
                    Wa = N * Wm

            End Select
        Catch ex As Exception
            MsgBox("Regime:  " & ex.Message)
        End Try

    End Function

    'Private Sub Button1_Click(sender As Object, e As EventArgs)
    '    Call NoiseUnitConversions()
    '    Call NoiseCalculations()

    'End Sub

    Public Function Noise_Baffles(ByVal BaffleKV As Single, ByVal index As Byte)
        Try
            Dim tempInletPressureCase1, tempInletPressureCase2, tempInletPressureCase3 As Single
            Dim LpiofTrimCase1(33), LpiofTrimCase2(33), LpiofTrimCase3(33), LpiofCageCase1(33), LpiofCageCase2(33), LpiofCageCase3(33), FinalLpi(33), FDCage As Single
            Dim PnCase1, PnCase2, PnCase3, TnCase1, TnCase2, TnCase3 As Single
            Dim Found1, Found2, Found3 As Boolean
            Dim i As UInteger



            Try
                If LoadingProjectFile = False Then

                    lblCalculating.Visible = True
                    If cmbFluidType.Text = "InCompressible" Then
                        '*******************************************************************************************************************
                        'Now calculate Pressure Drop and P2 for each Inlet Pressure Cases in Bar Absolute

                        DT_Baffles(index - 1).Item(0) = DT_Baffles(index - 1).Item(3) + (FinalDensityCase1 * Math.Pow((FinalFlowrateCase1 / BaffleKV), 2))
                        DT_Baffles(index - 1).Item(1) = DT_Baffles(index - 1).Item(4) + (FinalDensityCase2 * Math.Pow((FinalFlowrateCase2 / BaffleKV), 2))
                        DT_Baffles(index - 1).Item(2) = DT_Baffles(index - 1).Item(5) + (FinalDensityCase3 * Math.Pow((FinalFlowrateCase3 / BaffleKV), 2))

                        'Inletpressure of this baffle becomes outlet pressure for next baffle
                        If Not index = 3 Then                   'Not Applicable for 1st Baffle. 
                            DT_Baffles(index).Item(3) = DT_Baffles(index - 1).Item(0)
                            DT_Baffles(index).Item(4) = DT_Baffles(index - 1).Item(1)
                            DT_Baffles(index).Item(5) = DT_Baffles(index - 1).Item(2)
                        End If



                        '****************************************************************************************************
                        ' Trim KV calculations and Lpi(fi)


                        FinalInletPressureCase1 = DT_Baffles(index - 1).Item(0)
                        FinalInletPressureCase2 = DT_Baffles(index - 1).Item(1)
                        FinalInletPressureCase3 = DT_Baffles(index - 1).Item(2)

                        FinalOutletPressureCase1 = DT_Baffles(index - 1).Item(3)
                        FinalOutletPressureCase2 = DT_Baffles(index - 1).Item(4)
                        FinaloutletPressureCase3 = DT_Baffles(index - 1).Item(5)

                        'added on 2011_11_04

                        FinalPressureDropCase1 = FinalInletPressureCase1 - FinalOutletPressureCase1
                        FinalPressureDropCase2 = FinalInletPressureCase2 - FinalOutletPressureCase2
                        FinalPressureDropCase3 = FinalInletPressureCase3 - FinaloutletPressureCase3

                        Call Chokedflow((FLCase1 * FLCase1), (FLCase2 * FLCase2), (FLCase3 * FLCase3))
                        Call CalculateKVCV()



                        FPKVCase1 = FinalKVCase1
                        FPKVCase2 = FinalKVCase2
                        FPKVCase3 = FinalKVCase3

                        FP = 1
                        'Call FindFP()
                        'KVAttenuatedCase1 = FinalKVCase1
                        'KVAttenuatedCase2 = FinalKVCase2
                        'KVAttenuatedCase3 = FinalKVCase3

                        Call NoiseUnitConversions()
                        Call CalcNoiseForAttenuation()

                        'Final Overall Sound Pressure Level

                        DT_NoiseAttenuation.Rows(index - 1).Item(0) = FinalNoiseLevelCase1
                        DT_NoiseAttenuation.Rows(index - 1).Item(1) = FinalNoiseLevelCase2
                        DT_NoiseAttenuation.Rows(index - 1).Item(2) = FinalNoiseLevelCase3


                    ElseIf cmbFluidType.Text = "Compressible" Then   '***************************Noise Attenuation for steam and gas

                        'Approximate Pn calculation (Pn means inlet pressure of baffle)
                        'Pn=  W/(Kvbn * 110 *Y)  * sqrt ( T1 * Z / (Fy *XT* M)
                        'Z= Fy = 1

                        FinalOutletPressureCase1 = DT_Baffles.Rows(index - 1).Item(3)
                        FinalOutletPressureCase2 = DT_Baffles.Rows(index - 1).Item(4)
                        FinaloutletPressureCase3 = DT_Baffles.Rows(index - 1).Item(5)


                        PnCase1 = (FinalFlowrateCase1 / (110 * BaffleKV * 0.667)) * (Math.Sqrt(((FinalInletTemperatureCase1 + 273.15)) / (0.5 * MolecularWeightCase1)))
                        PnCase2 = (FinalFlowrateCase2 / (110 * BaffleKV * 0.667)) * (Math.Sqrt(((FinalInletTemperatureCase2 + 273.15)) / (0.5 * MolecularWeightCase2)))
                        PnCase3 = (FinalFlowrateCase3 / (110 * BaffleKV * 0.667)) * (Math.Sqrt(((FinalInletTemperatureCase3 + 273.15)) / (0.5 * MolecularWeightCase3)))

                        'Calculated Pn should be greater than P2
                        'if Pn < P2 then consider Pn = P2*1.01)

                        If PnCase1 < FinalOutletPressureCase1 Then PnCase1 = (FinalOutletPressureCase1 * 1.001)
                        If PnCase2 < FinalOutletPressureCase2 Then PnCase2 = (FinalOutletPressureCase2 * 1.001)
                        If PnCase3 < FinaloutletPressureCase3 Then PnCase3 = (FinaloutletPressureCase3 * 1.001)

                        Found1 = False
                        Found2 = False
                        Found3 = False
                        i = 0
                        'Now Loop for checking if BaffleKv matches with individual Kvs
                        Dim Adder As Single = 0.001
                        Dim DiffPercent1, DiffPercent2, DiffPercent3 As Single
                        ProgBarBaffle.Maximum = 500010     ' No Of Do while Iterations
                        ProgBarBaffle.Visible = True

                        'For Test. 
                        Percent1.Visible = True
                        Percent2.Visible = True
                        Percent3.Visible = True
                        LblCounter.Visible = True
                        'For test

                        Do While ((Found1 = False And Case1Present = True) Or (Found2 = False And Case2Present = True) Or (Found3 = False And Case3Present = True))


                            i = i + 1


                            If cmbFluid.SelectedIndex = 0 Then
                                If Model = 4 Or Model = 5 Or Model = 6 Then
                                    TnCase1 = T_ph(PnCase1, h_pT(tempOutletPressureCase1, ToutPressureCase1))
                                    TnCase2 = T_ph(PnCase2, h_pT(tempOutletPressureCase2, ToutPressureCase2))
                                    TnCase3 = T_ph(PnCase3, h_pT(tempOutletPressureCase3, ToutPressureCase3))
                                Else
                                    TnCase1 = T_ph(PnCase1, h_pT(FinalInletPressureCase1, FinalInletTemperatureCase1))
                                    TnCase2 = T_ph(PnCase2, h_pT(FinalInletPressureCase2, FinalInletTemperatureCase2))
                                    TnCase3 = T_ph(PnCase3, h_pT(FinalInletPressureCase3, FinalInletTemperatureCase3))
                                End If

                            Else
                                TnCase1 = FinalInletTemperatureCase1
                                TnCase2 = FinalInletTemperatureCase2
                                TnCase3 = FinalInletTemperatureCase3
                            End If
                            FinalInletPressureCase1 = PnCase1
                            FinalInletPressureCase2 = PnCase2
                            FinalInletPressureCase3 = PnCase3
                            FinalInletTemperatureCase1 = TnCase1
                            FinalInletTemperatureCase2 = TnCase2
                            FinalInletTemperatureCase3 = TnCase3
                            FinalPressureDropCase1 = FinalInletPressureCase1 - FinalOutletPressureCase1
                            FinalPressureDropCase2 = FinalInletPressureCase2 - FinalOutletPressureCase2
                            FinalPressureDropCase3 = FinalInletPressureCase3 - FinaloutletPressureCase3

                            Xcase1 = (FinalPressureDropCase1 / FinalInletPressureCase1)    'common change for steam and gas. 
                            Xcase2 = (FinalPressureDropCase2 / FinalInletPressureCase2)
                            Xcase3 = (FinalPressureDropCase3 / FinalInletPressureCase3)
                            If cmbFluid.Text = "Steam" Then
                                FinalDensityCase1 = rho_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)
                                FinalDensityCase2 = rho_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)
                                FinalDensityCase3 = rho_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)

                                Kcase1 = Cp_pT(FinalInletPressureCase1, FinalInletTemperatureCase1) / Cv_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)
                                Zcase1 = (FinalInletPressureCase1 * Math.Pow(10, 5)) / (FinalDensityCase1 * 461.8 * (FinalInletTemperatureCase1 + 273.15))

                                Kcase2 = Cp_pT(FinalInletPressureCase2, FinalInletTemperatureCase2) / Cv_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)
                                Zcase2 = (FinalInletPressureCase2 * Math.Pow(10, 5)) / (FinalDensityCase2 * 461.8 * (FinalInletTemperatureCase2 + 273.15))

                                Kcase3 = Cp_pT(FinalInletPressureCase3, FinalInletTemperatureCase3) / Cv_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)
                                Zcase3 = (FinalInletPressureCase3 * Math.Pow(10, 5)) / (FinalDensityCase3 * 461.8 * (FinalInletTemperatureCase3 + 273.15))
                            Else
                                FinalDensityCase1 = (FinalInletPressureCase1 * 100000 * MolecularWeightCase1) / (8314 * (FinalInletTemperatureCase1 + 273.15) * Zcase1)
                                FinalDensityCase2 = (FinalInletPressureCase2 * 100000 * MolecularWeightCase2) / (8314 * (FinalInletTemperatureCase2 + 273.15) * Zcase2)
                                FinalDensityCase3 = (FinalInletPressureCase3 * 100000 * MolecularWeightCase3) / (8314 * (FinalInletTemperatureCase3 + 273.15) * Zcase3)
                            End If

                            Call Chokedflow(0.5, 0.5, 0.5)
                            Call CalculateKVCV()


                            '--------------------------------------------------------------------------------------------------------------------------
                            ''First Check KvCase1 
                            DiffPercent1 = ((FinalKVCase1 - BaffleKV) / BaffleKV) * 100
                            Percent1.Text = DiffPercent1
                            If (FinalKVCase1 > (BaffleKV + (BaffleKV * 0.1))) Then
                                PnCase1 = PnCase1 + (Adder + (Adder * DiffPercent1 / 100))
                            ElseIf (FinalKVCase1 < (BaffleKV - (BaffleKV * 0.1))) Then
                                PnCase1 = PnCase1 - Math.Abs((Adder) + (Adder * (DiffPercent1 / 100)))
                            Else
                                Found1 = True
                            End If
                            DiffPercent2 = ((FinalKVCase2 - BaffleKV) / BaffleKV) * 100
                            Percent2.Text = DiffPercent2
                            If (FinalKVCase2 > (BaffleKV + (BaffleKV * 0.1))) Then
                                PnCase2 = PnCase2 + (Adder + (Adder * (DiffPercent2 / 100)))
                            ElseIf (FinalKVCase2 < (BaffleKV - (BaffleKV * 0.1))) Then
                                PnCase2 = PnCase2 - Math.Abs((Adder + (Adder * (DiffPercent2 / 100))))
                            Else
                                Found2 = True
                            End If
                            DiffPercent3 = ((FinalKVCase3 - BaffleKV) / BaffleKV) * 100
                            Percent3.Text = DiffPercent3
                            If (FinalKVCase3 > (BaffleKV + (BaffleKV * 0.1))) Then
                                PnCase3 = PnCase3 + (Adder + (Adder * (DiffPercent3 / 100)))
                            ElseIf (FinalKVCase3 < (BaffleKV - (BaffleKV * 0.1))) Then
                                PnCase3 = PnCase3 - Math.Abs((Adder + (Adder * (DiffPercent3 / 100))))
                            Else
                                Found3 = True
                            End If

                            LblCounter.Text = i


                            If PnCase1 < FinalOutletPressureCase1 Then PnCase1 = (FinalOutletPressureCase1 * 1.0001)
                            If PnCase2 < FinalOutletPressureCase2 Then PnCase2 = (FinalOutletPressureCase2 * 1.0001)
                            If PnCase3 < FinaloutletPressureCase3 Then PnCase3 = (FinaloutletPressureCase3 * 1.0001)


                            If (PnCase1 <= 0 And Case1Present = True) Or (PnCase2 <= 0 And Case2Present = True) Or (PnCase3 <= 0 And Case3Present = True) Then
                                ''   MsgBox("Wrong Baffle parameters entered!")
                                Exit Do

                            End If
                            ProgBarBaffle.Value = i


                            Application.DoEvents() ' For test
                            If StopBaffleCalc = True Then
                                StopBaffleCalc = False
                                Exit Do
                            End If
                            If i > 500000 Then
                                Exit Do
                            End If

                        Loop
                        'For Test. 
                        Percent1.Visible = False
                        Percent2.Visible = False
                        Percent3.Visible = False
                        LblCounter.Visible = False
                        'For test

                        If ((Found1 Or Case1Present = False) And (Found2 Or Case2Present = False) And (Found3 Or Case3Present = False)) Then
                            FinalInletPressureCase1 = PnCase1
                            FinalInletPressureCase2 = PnCase2
                            FinalInletPressureCase3 = PnCase3

                            DT_Baffles(index - 1).Item(0) = PnCase1
                            DT_Baffles(index - 1).Item(1) = PnCase2
                            DT_Baffles(index - 1).Item(2) = PnCase3

                            'Inletpressure of this baffle becomes outlet pressure for next baffle
                            If Not index = 3 Then                   'Not Applicable for 1st Baffle. 
                                DT_Baffles(index).Item(3) = PnCase1
                                DT_Baffles(index).Item(4) = PnCase2
                                DT_Baffles(index).Item(5) = PnCase3
                            End If


                            NoiseAttenuation_Compressible_CageAsInlet_Flag = True
                            NoiseAttenuationFlag = True
                            Call NoiseUnitConversions()
                            Call NoiseforCompressibleBaffle(BaffleKV)
                            NoiseAttenuation_Compressible_CageAsInlet_Flag = False
                            NoiseAttenuationFlag = False

                            DT_NoiseAttenuation.Rows(index - 1).Item(0) = FinalNoiseLevelCase1
                            DT_NoiseAttenuation.Rows(index - 1).Item(1) = FinalNoiseLevelCase2
                            DT_NoiseAttenuation.Rows(index - 1).Item(2) = FinalNoiseLevelCase3
                        Else
                            DT_NoiseAttenuation.Rows(index - 1).Item(0) = 0
                            DT_NoiseAttenuation.Rows(index - 1).Item(1) = 0
                            DT_NoiseAttenuation.Rows(index - 1).Item(2) = 0
                        End If

                    End If

                End If
                ProgBarBaffle.Visible = False
            Catch ex As DivideByZeroException

                MsgBox("Noise_Baffles: " & ex.Message)
            Finally
                lblCalculating.Visible = False
            End Try

        Catch ex As Exception
            MsgBox("Noise_Baffles : " & ex.Message)
        Finally
            lblCalculating.Visible = False
        End Try

    End Function

    Public Function NoiseAttenuation()

        Dim d, tempInletPressureCase1, tempInletPressureCase2, tempInletPressureCase3, tempOutletPressureCase1, tempOutletPressureCase2, tempOutletPressureCase3 As Single
        Dim TemperatureCase1, TemperatureCase2, TemperatureCase3 As Single
        Dim LpiofTrimCase1(33), LpiofTrimCase2(33), LpiofTrimCase3(33), LpiofCageCase1(33), LpiofCageCase2(33), LpiofCageCase3(33), FinalLpi(33), FDCage As Single
        Dim i As UInteger
        Dim tempFDCase1, tempFDCase2, tempFDCase3, tempPressureDropCase1, tempPressureDropCase2, tempPressureDropCase3, tempFLcase1, tempFLcase2, tempFLcase3 As Single
        Dim tempKCase1, tempKCase2, tempKCase3, tempDensityCase1, tempDensityCase2, tempDensityCase3, tempZCase1, tempZCase2, tempZCase3, tempXCase1, tempXCase2, tempXCase3 As Single
        Dim TempShowCagePressDropCase1, TempShowCagePressDropCase2, TempShowCagePressDropCase3 As Single
        Dim KVforCAGE_worksheet As DataTable

        Try
            If LoadingProjectFile = False Then
                ' If LoadingProjectFile = False Then
                TempKvCase1 = FinalKVCase1
                TempKvCase2 = FinalKVCase2
                TempKvCase3 = FinalKVCase3

                tempPressureDropCase1 = FinalPressureDropCase1
                tempPressureDropCase2 = FinalPressureDropCase2
                tempPressureDropCase3 = FinalPressureDropCase3

                tempInletPressureCase1 = FinalInletPressureCase1
                tempInletPressureCase2 = FinalInletPressureCase2
                tempInletPressureCase3 = FinalInletPressureCase3

                tempOutletPressureCase1 = FinalOutletPressureCase1
                tempOutletPressureCase2 = FinalOutletPressureCase2
                tempOutletPressureCase3 = FinaloutletPressureCase3

                TemperatureCase1 = FinalInletTemperatureCase1
                TemperatureCase2 = FinalInletTemperatureCase2
                TemperatureCase3 = FinalInletTemperatureCase3

                tempDensityCase1 = FinalDensityCase1
                tempDensityCase2 = FinalDensityCase2
                tempDensityCase3 = FinalDensityCase3

                tempKCase1 = Kcase1
                tempKCase2 = Kcase2
                tempKCase3 = Kcase3

                tempXCase1 = Xcase1
                tempXCase2 = Xcase2
                tempXCase3 = Xcase3

                tempFDCase1 = FDCase1
                tempFDCase2 = FDCase2
                tempFDCase3 = FDCase3

                'Zcase1 = 1
                'Zcase2 = 1
                'Zcase3 = 1
                tempZCase1 = Zcase1
                tempZCase2 = Zcase2
                tempZCase3 = Zcase3

                tempFLcase1 = FLCase1
                tempFLcase2 = FLCase2
                tempFLcase3 = FLCase3

                'KVforCAGE_workbook = APP.Workbooks.Open(AppPath & "\Database\KVforCAGE.xlsx")
                ' worksheet = workbook.Worksheets("Class150300")


                FinalOverrideRatings = SuggestedRating
                If FinalOverrideRatings < 600 Then
                    KVforCAGE_worksheet = DT_KvforCage150300
                ElseIf FinalOverrideRatings >= 600 And FinalOverrideRatings < 2500 Then
                    KVforCAGE_worksheet = DT_KvforCage600900
                ElseIf FinalOverrideRatings >= 2500 Then
                    KVforCAGE_worksheet = DT_KvforCage2500
                End If

                d = FinalValveSize

                With KVforCAGE_worksheet
                    LastRow = .Rows.Count - 2  '.Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row

                    For i = 0 To LastRow  'Start from second row of data 
                        If d = CSng(.Rows(i).Item(0)) Then 'CSng(.Cells(i, 1).value) Then
                            KvforCage = CSng(.Rows(i).Item(3)) '(.Cells(i, 4).value)
                            FDCage = CSng(.Rows(i).Item(4)) '.Cells(i, 5).value)

                            Exit For

                        End If
                    Next

                End With

                ' APP.ActiveWorkbook.Close()


                If cmbFluidType.Text = "InCompressible" Then
                    '*******************************************************************************************************************
                    'Now calculate Pressure Drop and P2 for each Inlet Pressure Cases in Bar Absolute

                    Cage_PressureCase1 = FinalOutletPressureCase1 + (FinalDensityCase1 * Math.Pow((FinalFlowrateCase1 / KvforCage), 2))
                    Cage_PressureCase2 = FinalOutletPressureCase2 + (FinalDensityCase2 * Math.Pow((FinalFlowrateCase2 / KvforCage), 2))
                    Cage_PressureCase3 = FinaloutletPressureCase3 + (FinalDensityCase3 * Math.Pow((FinalFlowrateCase3 / KvforCage), 2))





                    '****************************************************************************************************
                    ' Trim KV calculations and Lpi(fi)
                    FinalOutletPressureCase1 = Cage_PressureCase1
                    FinalOutletPressureCase2 = Cage_PressureCase2
                    FinaloutletPressureCase3 = Cage_PressureCase3
                    'added on 2011_11_04
                    FinalPressureDropCase1 = FinalInletPressureCase1 - FinalOutletPressureCase1
                    FinalPressureDropCase2 = FinalInletPressureCase2 - FinalOutletPressureCase2
                    FinalPressureDropCase3 = FinalInletPressureCase3 - FinaloutletPressureCase3
                    Call Chokedflow((FLCase1 * FLCase1), (FLCase2 * FLCase2), (FLCase3 * FLCase3))
                    Call CalculateKVCV()
                    FPKVCase1 = FinalKVCase1
                    FPKVCase2 = FinalKVCase2
                    FPKVCase3 = FinalKVCase3

                    Call FindFP()
                    KVAttenuatedCase1 = FinalKVCase1
                    KVAttenuatedCase2 = FinalKVCase2
                    KVAttenuatedCase3 = FinalKVCase3

                    Call NoiseUnitConversions()
                    Call NoiseCalculations()
                    'Call CalcNoiseForAttenuation()

                    For i = 0 To 32
                        If N_FlowTypeCAse1 = 1 Then
                            LpiofTrimCase1(i) = N_LpiTurbCase1(i)
                        Else
                            LpiofTrimCase1(i) = N_LpiCavCase1(i)
                        End If

                        If N_FlowTypeCAse2 = 1 Then
                            LpiofTrimCase2(i) = N_LpiTurbCase2(i)
                        Else
                            LpiofTrimCase2(i) = N_LpiCavCase2(i)
                        End If

                        If N_FlowTypeCase3 = 1 Then
                            LpiofTrimCase3(i) = N_LpiTurbCase3(i)
                        Else
                            LpiofTrimCase3(i) = N_LpiCavCase3(i)
                        End If
                    Next
                    '****************************************************************************************************
                    'Cage KV calculations and LPi(fi)
                    FinalInletPressureCase1 = Cage_PressureCase1
                    FinalInletPressureCase2 = Cage_PressureCase2
                    FinalInletPressureCase3 = Cage_PressureCase3

                    FinalOutletPressureCase1 = tempOutletPressureCase1
                    FinalOutletPressureCase2 = tempOutletPressureCase2
                    FinaloutletPressureCase3 = tempOutletPressureCase3

                    FDCase1 = FDCage
                    FDCase2 = FDCage
                    FDCase3 = FDCage

                    FinalPressureDropCase1 = FinalInletPressureCase1 - FinalOutletPressureCase1
                    FinalPressureDropCase2 = FinalInletPressureCase2 - FinalOutletPressureCase2
                    FinalPressureDropCase3 = FinalInletPressureCase3 - FinaloutletPressureCase3
                    If FinalPressureDropCase1 > 0 Then
                        lblAttnPressDropCase1.Text = Math.Round(FinalPressureDropCase1, 4)
                    Else
                        lblAttnPressDropCase1.Text = ""
                    End If
                    If FinalPressureDropCase2 > 0 Then
                        lblAttnPressDropCase2.Text = Math.Round(FinalPressureDropCase2, 4)
                    Else
                        lblAttnPressDropCase2.Text = ""
                    End If
                    If FinalPressureDropCase3 > 0 Then
                        lblAttnPressDropCase3.Text = Math.Round(FinalPressureDropCase3, 4)
                    Else
                        lblAttnPressDropCase3.Text = ""
                    End If
                    Call Chokedflow((0.9 * 0.9), (0.9 * 0.9), (0.9 * 0.9))
                    Call CalculateKVCV()

                    FDCase1 = tempFDCase1
                    FDCase2 = tempFDCase2
                    FDCase3 = tempFDCase3

                    FinalKVCase1 = FinalKVCase1 / FP
                    FinalKVCase2 = FinalKVCase2 / FP
                    FinalKVCase3 = FinalKVCase3 / FP

                    Call NoiseUnitConversions()
                    Call NoiseCalculations()
                    For i = 0 To 32
                        If N_FlowTypeCAse1 = 1 Then
                            LpiofCageCase1(i) = N_LpiTurbCase1(i)
                        Else
                            LpiofCageCase1(i) = N_LpiCavCase1(i)
                        End If

                        If N_FlowTypeCAse2 = 1 Then
                            LpiofCageCase2(i) = N_LpiTurbCase2(i)
                        Else
                            LpiofCageCase2(i) = N_LpiCavCase2(i)
                        End If

                        If N_FlowTypeCase3 = 1 Then
                            LpiofCageCase3(i) = N_LpiTurbCase3(i)
                        Else
                            LpiofCageCase3(i) = N_LpiCavCase3(i)
                        End If
                    Next

                    AttneuatedNoiseLevelCase1 = 0
                    AttneuatedNoiseLevelCase2 = 0
                    AttneuatedNoiseLevelCase3 = 0
                    For i = 0 To 32
                        LpiofCageCase1(i) = 10 * (Math.Log10((Math.Pow(10, (0.1 * LpiofTrimCase1(i)))) + (Math.Pow(10, (0.1 * LpiofCageCase1(i))))))
                        LpiofCageCase2(i) = 10 * (Math.Log10((Math.Pow(10, (0.1 * LpiofTrimCase2(i)))) + (Math.Pow(10, (0.1 * LpiofCageCase2(i))))))
                        LpiofCageCase3(i) = 10 * (Math.Log10((Math.Pow(10, (0.1 * LpiofTrimCase3(i)))) + (Math.Pow(10, (0.1 * LpiofCageCase3(i))))))

                        'LpiofCageCase1(i) = LpiofCageCase1(i)
                        'LpiofCageCase2(i) = LpiofCageCase2(i)
                        'LpiofCageCase3(i) = LpiofCageCase3(i)

                        N_LpeCase1(i) = LpiofCageCase1(i) + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))
                        N_LpeCase2(i) = LpiofCageCase2(i) + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))
                        N_LpeCase3(i) = LpiofCageCase3(i) + TL(i) - 10 * Math.Log10((Noise_ID + (2 * Noise_Schedule) + 2) / (Noise_ID + (2 * Noise_Schedule)))

                        AttneuatedNoiseLevelCase1 = AttneuatedNoiseLevelCase1 + Math.Pow(10, ((N_LpeCase1(i) + N_DeltaLA(i)) / 10))
                        AttneuatedNoiseLevelCase2 = AttneuatedNoiseLevelCase2 + Math.Pow(10, ((N_LpeCase2(i) + N_DeltaLA(i)) / 10))
                        AttneuatedNoiseLevelCase3 = AttneuatedNoiseLevelCase3 + Math.Pow(10, ((N_LpeCase3(i) + N_DeltaLA(i)) / 10))
                    Next

                    'Final Overall Sound Pressure Level

                    AttneuatedNoiseLevelCase1 = 10 * Math.Log10(AttneuatedNoiseLevelCase1)
                    AttneuatedNoiseLevelCase2 = 10 * Math.Log10(AttneuatedNoiseLevelCase2)
                    AttneuatedNoiseLevelCase3 = 10 * Math.Log10(AttneuatedNoiseLevelCase3)


                    DT_NoiseAttenuation.Rows(3).Item(0) = AttneuatedNoiseLevelCase1
                    DT_NoiseAttenuation.Rows(3).Item(1) = AttneuatedNoiseLevelCase2
                    DT_NoiseAttenuation.Rows(3).Item(2) = AttneuatedNoiseLevelCase2




                    ''Final Overall Sound Pressure Level
                    'DT_NoiseAttenuation.Rows(3).Item(0) = 10 * (Math.Log10((Math.Pow(10, (0.1 * (DT_NoiseAttenuation.Rows(4).Item(0) - 5)))) + (Math.Pow(10, (0.1 * FinalNoiseLevelCase1)))))
                    'DT_NoiseAttenuation.Rows(3).Item(1) = 10 * (Math.Log10((Math.Pow(10, (0.1 * (DT_NoiseAttenuation.Rows(4).Item(1) - 5)))) + (Math.Pow(10, (0.1 * FinalNoiseLevelCase2)))))
                    'DT_NoiseAttenuation.Rows(3).Item(2) = 10 * (Math.Log10((Math.Pow(10, (0.1 * (DT_NoiseAttenuation.Rows(4).Item(2) - 5)))) + (Math.Pow(10, (0.1 * FinalNoiseLevelCase3)))))




                    'If Not txtNoiseInsulation.Text = "" And chkInsulation.Checked = True Then
                    '    lblAttenuatedNoiseCase1.Text = Math.Round((AttneuatedNoiseLevelCase1 - NoiseInsulation), 1)
                    '    lblAttenuatedNoiseCase2.Text = Math.Round((AttneuatedNoiseLevelCase2 - NoiseInsulation), 1)
                    '    lblAttenuatedNoiseCase3.Text = Math.Round((AttneuatedNoiseLevelCase3 - NoiseInsulation), 1)
                    'Else
                    '    lblAttenuatedNoiseCase1.Text = Math.Round(AttneuatedNoiseLevelCase1, 1)
                    '    lblAttenuatedNoiseCase2.Text = Math.Round(AttneuatedNoiseLevelCase2, 1)
                    '    lblAttenuatedNoiseCase3.Text = Math.Round(AttneuatedNoiseLevelCase3, 1)
                    'End If


                ElseIf cmbFluidType.Text = "Compressible" Then   '***************************Noise Attenuation for steam and gas
                    NoiseAttenuation_Compressible_CageAsInlet_Flag = True
                    NoiseAttenuationFlag = True
                    'this value is of FL for cage
                    FLCase1 = 0.93
                    FLCase2 = 0.93
                    FLCase3 = 0.93


                    If (FinalInletPressureCase1 / FinalOutletPressureCase1) >= 2 Then
                        Cage_PressureCase1 = Math.Sqrt(Math.Pow((FinalInletPressureCase1 * FinalKVCase1) / (1.155 * KvforCage), 2) + (Math.Pow(FinalOutletPressureCase1, 2)))
                        If (Cage_PressureCase1 / FinalOutletPressureCase1) >= 2 Then
                            Cage_PressureCase1 = FinalInletPressureCase1 * (FinalKVCase1 / KvforCage)
                        End If
                    Else
                        Cage_PressureCase1 = Math.Sqrt(((Math.Pow((FinalKVCase1 / KvforCage), 2)) * ((FinalInletPressureCase1 * FinalInletPressureCase1) - (FinalOutletPressureCase1 * FinalOutletPressureCase1))) + (FinalOutletPressureCase1 * FinalOutletPressureCase1))
                    End If

                    If (FinalInletPressureCase2 / FinalOutletPressureCase2) >= 2 Then
                        Cage_PressureCase2 = Math.Sqrt(Math.Pow((FinalInletPressureCase2 * FinalKVCase2) / (1.155 * KvforCage), 2) + (Math.Pow(FinalOutletPressureCase2, 2)))
                        If (Cage_PressureCase2 / FinalOutletPressureCase2) >= 2 Then
                            Cage_PressureCase2 = FinalInletPressureCase2 * (FinalKVCase2 / KvforCage)
                        End If
                    Else
                        Cage_PressureCase2 = Math.Sqrt(((Math.Pow((FinalKVCase2 / KvforCage), 2)) * ((FinalInletPressureCase2 * FinalInletPressureCase2) - (FinalOutletPressureCase2 * FinalOutletPressureCase2))) + (FinalOutletPressureCase2 * FinalOutletPressureCase2))
                    End If

                    If (FinalInletPressureCase3 / FinaloutletPressureCase3) >= 2 Then
                        Cage_PressureCase3 = Math.Sqrt(Math.Pow(((FinalInletPressureCase3 * FinalKVCase3) / (1.155 * KvforCage)), 2) + (Math.Pow(FinaloutletPressureCase3, 2)))
                        If (Cage_PressureCase3 / FinaloutletPressureCase3) >= 2 Then
                            Cage_PressureCase3 = FinalInletPressureCase3 * (FinalKVCase3 / KvforCage)
                        End If
                    Else
                        Cage_PressureCase3 = Math.Sqrt(((Math.Pow((FinalKVCase3 / KvforCage), 2)) * ((FinalInletPressureCase3 * FinalInletPressureCase3) - (FinaloutletPressureCase3 * FinaloutletPressureCase3))) + (FinaloutletPressureCase3 * FinaloutletPressureCase3))
                    End If



                    FinalInletPressureCase1 = Cage_PressureCase1
                    FinalInletPressureCase2 = Cage_PressureCase2
                    FinalInletPressureCase3 = Cage_PressureCase3

                    Xcase1 = (Cage_PressureCase1 - FinalOutletPressureCase1) / Cage_PressureCase1
                    Xcase2 = (Cage_PressureCase2 - FinalOutletPressureCase2) / Cage_PressureCase2
                    Xcase3 = (Cage_PressureCase3 - FinaloutletPressureCase3) / Cage_PressureCase3

                    TempShowCagePressDropCase1 = Math.Round((Cage_PressureCase1 - FinalOutletPressureCase1), 4)
                    TempShowCagePressDropCase2 = Math.Round((Cage_PressureCase2 - FinalOutletPressureCase2), 4)
                    TempShowCagePressDropCase3 = Math.Round((Cage_PressureCase3 - FinaloutletPressureCase3), 4)

                    If TempShowCagePressDropCase1 > 0 Then
                        lblAttnPressDropCase1.Text = TempShowCagePressDropCase1
                    Else
                        lblAttnPressDropCase1.Text = ""
                    End If
                    If TempShowCagePressDropCase2 > 0 Then
                        lblAttnPressDropCase2.Text = TempShowCagePressDropCase2
                    Else
                        lblAttnPressDropCase2.Text = ""
                    End If
                    If TempShowCagePressDropCase3 > 0 Then
                        lblAttnPressDropCase3.Text = TempShowCagePressDropCase3
                    Else
                        lblAttnPressDropCase3.Text = ""
                    End If


                    If cmbFluid.Text = "Steam" Then                     ' aDDED 0.1:  WHEN TOUTPRESSURE = TSATOURPRESSURE SOFTWARE CANNOT CALCULATE Z,DENSITY AND SOUND VELOCITY
                        FinalInletTemperatureCase1 = T_ph(Cage_PressureCase1, h_pT(tempInletPressureCase1, FinalInletTemperatureCase1)) + 0.1
                        FinalInletTemperatureCase2 = T_ph(Cage_PressureCase2, h_pT(tempInletPressureCase2, FinalInletTemperatureCase2)) + 0.1
                        FinalInletTemperatureCase3 = T_ph(Cage_PressureCase3, h_pT(tempInletPressureCase3, FinalInletTemperatureCase3)) + 0.1

                        FinalDensityCase1 = rho_pT(Cage_PressureCase1, FinalInletTemperatureCase1)
                        FinalDensityCase2 = rho_pT(Cage_PressureCase2, FinalInletTemperatureCase2)
                        FinalDensityCase3 = rho_pT(Cage_PressureCase3, FinalInletTemperatureCase3)

                        Kcase1 = Cp_pT(Cage_PressureCase1, FinalInletTemperatureCase1) / Cv_pT(Cage_PressureCase1, FinalInletTemperatureCase1)
                        Kcase2 = Cp_pT(Cage_PressureCase2, FinalInletTemperatureCase2) / Cv_pT(Cage_PressureCase2, FinalInletTemperatureCase2)
                        Kcase3 = Cp_pT(Cage_PressureCase3, FinalInletTemperatureCase3) / Cv_pT(Cage_PressureCase3, FinalInletTemperatureCase3)

                        Zcase1 = (Cage_PressureCase1 * Math.Pow(10, 5)) / (FinalDensityCase1 * 461.8 * (FinalInletTemperatureCase1 + 273.15))
                        Zcase2 = (Cage_PressureCase2 * Math.Pow(10, 5)) / (FinalDensityCase2 * 461.8 * (FinalInletTemperatureCase2 + 273.15))
                        Zcase3 = (Cage_PressureCase3 * Math.Pow(10, 5)) / (FinalDensityCase3 * 461.8 * (FinalInletTemperatureCase3 + 273.15))
                    Else
                        FinalDensityCase1 = (Cage_PressureCase1 * 100000 * MolecularWeightCase1) / (8314 * (FinalInletTemperatureCase1 + 273.15) * Zcase1)
                        FinalDensityCase2 = (Cage_PressureCase2 * 100000 * MolecularWeightCase2) / (8314 * (FinalInletTemperatureCase2 + 273.15) * Zcase2)
                        FinalDensityCase3 = (Cage_PressureCase3 * 100000 * MolecularWeightCase3) / (8314 * (FinalInletTemperatureCase3 + 273.15) * Zcase3)
                    End If

                    FDCase1 = FDCage
                    FDCase2 = FDCage
                    FDCase3 = FDCage

                    FinalKVCase1 = KvforCage
                    FinalKVCase2 = KvforCage
                    FinalKVCase3 = KvforCage


                    Call NoiseUnitConversions()
                    Call NoiseCalculationsForCompressible()
                    NoiseAttenuation_Compressible_CageAsInlet_Flag = False
                    NoiseAttenuationFlag = False
                End If



                'If Not txtNoiseInsulation.Text = "" And chkInsulation.Checked = True Then
                '    AttneuatedNoiseLevelCase1 = Math.Round((AttneuatedNoiseLevelCase1 - NoiseInsulation), 1)
                '    AttneuatedNoiseLevelCase2 = Math.Round((AttneuatedNoiseLevelCase2 - NoiseInsulation), 1)
                '    AttneuatedNoiseLevelCase3 = Math.Round((AttneuatedNoiseLevelCase3 - NoiseInsulation), 1)
                'Else
                '    lblAttenuatedNoiseCase1.Text = Math.Round(AttneuatedNoiseLevelCase1, 1)
                '    lblAttenuatedNoiseCase2.Text = Math.Round(AttneuatedNoiseLevelCase2, 1)
                '    lblAttenuatedNoiseCase3.Text = Math.Round(AttneuatedNoiseLevelCase3, 1)
                'End If

                'If AttneuatedNoiseLevelCase1 < 5 Then
                '    AttneuatedNoiseLevelCase1 = 5
                'End If
                'If AttneuatedNoiseLevelCase2 < 5 Then
                '    AttneuatedNoiseLevelCase2 = 5
                'End If
                'If AttneuatedNoiseLevelCase3 < 5 Then
                '    AttneuatedNoiseLevelCase3 = 5
                'End If

                'lblAttenuatedNoiseCase1.Text = Math.Round(AttneuatedNoiseLevelCase1, 1)
                'lblAttenuatedNoiseCase2.Text = Math.Round(AttneuatedNoiseLevelCase2, 1)
                'lblAttenuatedNoiseCase3.Text = Math.Round(AttneuatedNoiseLevelCase3, 1)

                FinalInletPressureCase1 = tempInletPressureCase1
                FinalInletPressureCase2 = tempInletPressureCase2
                FinalInletPressureCase3 = tempInletPressureCase3

                FinalOutletPressureCase1 = tempOutletPressureCase1
                FinalOutletPressureCase2 = tempOutletPressureCase2
                FinaloutletPressureCase3 = tempOutletPressureCase3

                FinalKVCase1 = TempKvCase1
                FinalKVCase2 = TempKvCase2
                FinalKVCase3 = TempKvCase3

                FinalPressureDropCase1 = tempPressureDropCase1
                FinalPressureDropCase2 = tempPressureDropCase2
                FinalPressureDropCase3 = tempPressureDropCase3



                FinalInletTemperatureCase1 = TemperatureCase1
                FinalInletTemperatureCase2 = TemperatureCase2
                FinalInletTemperatureCase3 = TemperatureCase3

                FinalDensityCase1 = tempDensityCase1
                FinalDensityCase2 = tempDensityCase2
                FinalDensityCase3 = tempDensityCase3


                Kcase1 = tempKCase1
                Kcase2 = tempKCase2
                Kcase3 = tempKCase3

                Xcase1 = tempXCase1
                Xcase2 = tempXCase2
                Xcase3 = tempXCase3

                FDCase1 = tempFDCase1
                FDCase2 = tempFDCase2
                FDCase3 = tempFDCase3

                Zcase1 = tempZCase1
                Zcase2 = tempZCase2
                Zcase3 = tempZCase3

                FLCase1 = tempFLcase1
                FLCase2 = tempFLcase2
                FLCase3 = tempFLcase3

                'Call showNoise()
            End If
        Catch ex As DivideByZeroException

            MsgBox("NoiseAttenuation: " & ex.Message)

        End Try
        Return Nothing

    End Function
    


    Private Sub chkNoiseAttenuation_CheckedChanged(sender As Object, e As EventArgs) Handles chkNoiseAttenuation.CheckedChanged
        Try
            If LoadingForm = True Then
                If LoadingProjectFile = False Then

                    If chkNoiseAttenuation.Checked = True Then
                        If cmbModel.SelectedIndex > 1 Then
                            'MsgBox("Cage Attenuation not available for 3 way Models", , "Alert!")
                            ToolTip1.Show("Cage Attenuation not available for 3 way Models", chkNoiseAttenuation, 2)
                            ToolTip1.Show("Cage Attenuation not available for 3 way Models", chkNoiseAttenuation, 2000)
                            chkNoiseAttenuation.Checked = False
                        Else
                            If (cmbSelectedTrim.SelectedIndex = 3 Or cmbSelectedTrim.SelectedIndex = 4) Then
                                If cmbModel.SelectedIndex = 1 Then ' ecotrol
                                    '   MsgBox("Cage Attenuation not available for L2 & L3", , "Alert!")
                                    ToolTip1.Show("Cage Attenuation not available for L2 & L3", chkNoiseAttenuation, 2)
                                    ToolTip1.Show("Cage Attenuation not available for L2 & L3", chkNoiseAttenuation, 2000)
                                Else
                                    ' MsgBox("Cage Attenuation not available for PR2 & PR3", , "Alert!")
                                    ToolTip1.Show("Cage Attenuation not available for PR2 & PR3", chkNoiseAttenuation, 2)
                                    ToolTip1.Show("Cage Attenuation not available for PR2 & PR3", chkNoiseAttenuation, 2000)
                                End If

                                chkNoiseAttenuation.Checked = False
                            Else

                                NoiseAttenuationFlag = True
                                Call CalculateNoise()       'As all have to calculate with baffles 
                                'Call NoiseAttenuation()
                                'NoiseAttenuationFlag = False

                            End If
                        End If


                    Else
                        If Not chkBaffleCase1.Checked = True Then       ' If Baffle is not selected then clear labels
                            lblAttnPressDropCase1.Text = ""
                            lblAttnPressDropCase2.Text = ""
                            lblAttnPressDropCase3.Text = ""

                            NoiseAttenuationFlag = False
                            lblAttenuatedNoiseCase1.Text = ""
                            lblAttenuatedNoiseCase2.Text = ""
                            lblAttenuatedNoiseCase3.Text = ""
                        End If
                        'If cmbFluidType.Text = "InCompressible" Then
                        'FPKVCase1 = FinalKVCase1 * FP
                        'FPKVCase2 = FinalKVCase2 * FP
                        'FPKVCase3 = FinalKVCase3 * FP
                        Call CalculateNoise()
                        Call FindFP()
                        'showNoise()
                        'End If
                    End If

                    End If
                End If
        Catch ex As Exception
            MsgBox("chkNoiseAttenuation_CheckedChanged:  " & ex.Message)
        End Try
    End Sub

    Public Sub ValveSizeOverride()
        Try
            Dim NoiseAttnCheckedState As Boolean
            If LoadingProjectFile = False Then
                If Not txtSuggestedKV.Text = "" Then
                    If Not cmbValveSizeOverride.Text = "--Select--" Then
                        If NoFPCalc = False Then
                            'If KVMaxAcceptButton = False Then
                            '    'MsgBox("Please Accept Selected KV or Select from KV options first.")
                            '    txtErrors.Text = txtErrors.Text & vbNewLine & "Please Accept Selected Kv or Select from Kv options first."
                            '    btnKVAccept.Focus()

                            '' Else
                            FinalNoiseLevelCase1 = 0
                            FinalNoiseLevelCase2 = 0
                            FinalNoiseLevelCase3 = 0
                            NoiseAttnCheckedState = chkNoiseAttenuation.Checked
                            chkNoiseAttenuation.Checked = False
                            txtErrors.Text = ""
                            ''Changes 20201029 
                            Dim foundstring As Integer = cmbValveSizeOverride.FindStringExact(cmbValveSizeOverride.Text)

                            If foundstring = -1 And cmbValveSizeOverride.Items.Count > 0 Then
                                cmbValveSizeOverride.SelectedIndex = 0
                                cmbValveSizeOverride.BackColor = Color.Orange
                                lblCalculating.Visible = True
                                ToolTip2.Show("Selected Valve Size was not Available in this Kv/Cv.", cmbValveSizeOverride, 20)
                                ToolTip2.Show("Selected Valve Size was not Available in this Kv/Cv.", cmbValveSizeOverride, 2000)
                            Else
                                cmbValveSizeOverride.SelectedIndex = foundstring
                            End If


                            If cmbValveSizeOverride.SelectedIndex > -1 Then FinalValveSize = FinalValveSizeforNoise(cmbValveSizeOverride.SelectedIndex)
                            lblFinalValveSize.Text = cmbValveSizeOverride.Text
                            DT_ActuatorInfo.Rows(0).Item(1) = lblFinalValveSize.Text

                            If Not cmbInletPipeSize.Text = "--Select--" Then
                                If FinalValveSize > cmbInletPipeSize.Text Then
                                    'MsgBox("Inlet Pipe Size less than Valve Size. Please select greater Inlet Pipe Size")
                                    txtErrors.Text = txtErrors.Text & vbNewLine & "Inlet Pipe Size less than Valve Size. Please select greater Inlet Pipe Size"
                                Else
                                    txtErrors.Text = ""
                                End If
                            End If
                            CheckKV(CSng(cmbKVOverride.Text), FinalValveSize, cmbSelectedTrim.SelectedIndex, 2)

                            If cmbKVOverride.SelectedIndex > -1 Then '  And cmbValveSizeOverride.SelectedIndex > -1 Then    ' Only For PS1 and PS3
                                SeatDia = SeatDia_array(cmbValveSizeOverride.SelectedIndex)                 'Changes 22102020   
                                PrBl_SeatDia = PrBl_SeatDia_array(cmbValveSizeOverride.SelectedIndex)       'Changes 22102020   
                                cmbSeatDia.Items.Clear()
                                If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                    cmbSeatDia.Items.Add(SeatDia)
                                Else
                                    cmbSeatDia.Items.Add(Math.Round(SeatDia / 25.4, 1))
                                End If
                                cmbSeatDia.SelectedIndex = 0
                            End If
                            If cmbSelectedTrim.SelectedIndex > 1 Then
                                SeatDia = SeatDia_array(0)
                                PrBl_SeatDia = PrBl_SeatDia_array(0)
                            End If
                            Call CalculateNoise()
                            Call FindFP()
                            Call ValveActuator()
                            If NoiseAttnCheckedState = True Then
                                chkNoiseAttenuation.Checked = True
                            End If
                        End If
                    End If
                End If
            End If

        Catch ex As Exception
            MsgBox("Valve Size Override: " & "  " & ex.Message)
        End Try
    End Sub
    Public Function ShowResults()           'This function is used to display results when Pipe parameters are changed
        Dim NoiseAttnCheckedState As Boolean
        If Not cmbKVOverride.Text = "" And Not cmbKVOverride.Text = "--Select--" And Not cmbValveSizeOverride.Text = "" And Not cmbValveSizeOverride.Text = "--Select--" Then
            NoiseAttnCheckedState = chkNoiseAttenuation.Checked
            chkNoiseAttenuation.Checked = False
            Call CalculateNoise()
            Call FindFP()
            If NoiseAttnCheckedState = True Then
                chkNoiseAttenuation.Checked = True
            End If
        End If
        Return Nothing
    End Function

    Private Sub cmbValveSizeOverride_Click(sender As Object, e As EventArgs) Handles cmbValveSizeOverride.Click
        cmbValveSizeOverride.BackColor = Color.White
        lblCalculating.Text = "Calculating.."
        lblCalculating.Visible = False
    End Sub

    Private Sub cmbValveSizeOverride_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbValveSizeOverride.SelectionChangeCommitted
        Try
            cmbValveSizeOverride.Text = cmbValveSizeOverride.SelectedItem
            FinalValveSize = FinalValveSizeforNoise(cmbValveSizeOverride.SelectedIndex)
            lblFinalValveSize.Text = cmbValveSizeOverride.Text
            DT_ActuatorInfo.Rows(0).Item(1) = lblFinalValveSize.Text

            Call ValveSizeOverride()  'Success 
        Catch ex As Exception
            MsgBox("cmbValveSizeOverride_SelectionChangeCommitted:   " & ex.Message)
        End Try

    End Sub

    Private Sub cmbFluidType_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbFluidType.SelectedIndexChanged
        Dim txt As String
        Try
            'Incompressible -  Water and Liquid
            'Compressible  - Gas & Steam
            If Resetall = False Then
                txt = cmbFluidType.Text
                ' Call Reset_All()
                Call ChangeUnitsType(False)
                LoadingForm = False
                Select Case txt
                    Case "InCompressible"
                        'Below fields are not needed in Steam or gas

                        cmbFluidType.BackColor = Color.Aqua
                        cmbFluidType.ForeColor = Color.FromArgb(45, 54, 152)
                        lblVapourPressure.Visible = True
                        cmbVapourPressureUnits.Visible = True
                        txtVapourPressureCase1.Visible = True
                        ' txtVapourPressureCase1.BackColor = Color.Aqua
                        txtVapourPressureCase2.Visible = True
                        'txtVapourPressureCase2.BackColor = Color.Aqua
                        txtVapourPressureCase3.Visible = True
                        'txtVapourPressureCase3.BackColor = Color.Aqua

                        lblCriticalPressure.Visible = True
                        cmbCriticalPressureUnits.Visible = True
                        txtCriticalPressureCase1.Visible = True
                        txtCriticalPressureCase2.Visible = True
                        txtCriticalPressureCase3.Visible = True

                        lblTsatInletPress.Visible = False
                        txtTsatInletCase1.Visible = False
                        txtTsatInletCase2.Visible = False
                        txtTsatInletCase3.Visible = False


                        lblToutPressure.Visible = False
                        txtTOutPressureCase1.Visible = False
                        txtTOutPressureCase2.Visible = False
                        txtTOutPressureCase3.Visible = False

                        lblTsatoutPressure.Visible = False
                        txtTsatoutPressureCase1.Visible = False
                        txtTsatoutPressureCase2.Visible = False
                        txtTsatoutPressureCase3.Visible = False

                        lblK.Visible = False
                        txtK_Case1.Visible = False
                        txtK_Case2.Visible = False
                        txtK_Case3.Visible = False

                        lblZ.Visible = False
                        txtZ_Case1.Visible = False
                        txtZ_Case2.Visible = False
                        txtZ_Case3.Visible = False

                        lblX.Visible = False
                        txtX_Case1.Visible = False
                        txtX_Case2.Visible = False
                        txtX_Case3.Visible = False

                        cmbFluid.Items.Clear()
                        Me.cmbFluid.Items.Add("Standard Water")
                        Me.cmbFluid.Items.Add("Other Liquid")
                        If Not LoadingProjectFile = True Then Me.cmbFluid.SelectedIndex = 0 ' Dont set the index when file is loading 


                        lblMachnoPipe.Visible = False
                        lblMachnoValve.Visible = False

                        cmbVelocityRule.Items.Clear()
                        If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                            Me.cmbVelocityRule.Items.Add("6 m/s")
                            Me.cmbVelocityRule.Items.Add("8 m/s")
                        Else
                            Me.cmbVelocityRule.Items.Add("20 ft/s")
                            Me.cmbVelocityRule.Items.Add("25 ft/s")
                        End If
                        If Not LoadingProjectFile = True Then cmbVelocityRule.SelectedIndex = 0

                    Case "Compressible"
                        'Below fields are not needed in Steam or gas
                        cmbFluidType.BackColor = Color.FromArgb(247, 150, 70)

                        cmbFluidType.ForeColor = Color.FromArgb(255, 255, 255)
                        lblVapourPressure.Visible = False
                        cmbVapourPressureUnits.Visible = False
                        txtVapourPressureCase1.Visible = False
                        txtVapourPressureCase2.Visible = False
                        txtVapourPressureCase3.Visible = False

                        lblCriticalPressure.Visible = False
                        cmbCriticalPressureUnits.Visible = False
                        txtCriticalPressureCase1.Visible = False
                        txtCriticalPressureCase2.Visible = False
                        txtCriticalPressureCase3.Visible = False


                        lblK.Visible = True
                        txtK_Case1.Visible = True
                        txtK_Case2.Visible = True
                        txtK_Case3.Visible = True

                        lblZ.Visible = True
                        txtZ_Case1.Visible = True
                        txtZ_Case2.Visible = True
                        txtZ_Case3.Visible = True

                        lblX.Visible = True
                        txtX_Case1.Visible = True
                        txtX_Case2.Visible = True
                        txtX_Case3.Visible = True

                        cmbFluid.Items.Clear()
                        Me.cmbFluid.Items.Add("Steam")
                        Me.cmbFluid.Items.Add("Gas")
                        If Not LoadingProjectFile = True Then Me.cmbFluid.SelectedIndex = 0 ' Dont set the index when file is loading 
                        'Flow Units for steam and gas
                        cmbFlowrate.Items.Clear()

                        lblMachnoPipe.Visible = True
                        lblMachnoValve.Visible = True
                        cmbVelocityRule.Items.Clear()
                        Me.cmbVelocityRule.Items.Add("0.3")
                        Me.cmbVelocityRule.Items.Add("0.4")
                        If Not LoadingProjectFile = True Then cmbVelocityRule.SelectedIndex = 0
                      
                        chkNoiseAttenuation.Visible = True
                        lblFlashingCaseNoAttenuation.Visible = False
                        lblFlashingCaseNoAttenuation.Text = ""
                        chkNoiseAttenuation.Visible = True
                        lblFlashingCaseNoAttenuation.Visible = False
                        lblFlashingCaseNoAttenuation.Text = ""
                        chkBaffleCase1.Visible = True
                        chkBaffleCase2.Visible = True
                        chkBaffleCase3.Visible = True

                End Select
                If Not LoadingProjectFile = True Then Call SelectFlowUnits() ' if reading file dont call selectflowunits

                LoadingForm = True
            End If
        Catch ex As Exception
            MsgBox("cmbFluidType:   " & ex.Message)
        End Try
    End Sub

    Private Sub txtTOutPressureCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtK_Case1.KeyPress, txtK_Case2.KeyPress, txtK_Case3.KeyPress, txtZ_Case1.KeyPress, txtZ_Case2.KeyPress, txtZ_Case3.KeyPress, txtX_Case1.KeyPress, txtX_Case2.KeyPress, txtX_Case3.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("txtTOutPressureCase1_KeyPress:  " & ex.Message)
        End Try
    End Sub


    '*******************************************************************************************************************************************************
    'Steam valve Sizing
    '********************************************************************************************************************************************************

    Private Sub btnSelectP2DP_Click(sender As Object, e As EventArgs) Handles btnSelectP2DP.Click
        Try
            SelectP2orDP = Not SelectP2orDP     'Toggles the bit    

            If SelectP2orDP = False Then   'Énter Outlet Pressure
                btnSelectP2DP.Text = "Select DP"
                btnSelectP2DP.Location = New Point(115, 153)
                txtPressureDropCase1.ReadOnly = True
                txtPressureDropCase1.BackColor = Color.WhiteSmoke
                txtPressureDropCase2.ReadOnly = True
                txtPressureDropCase2.BackColor = Color.WhiteSmoke
                txtPressureDropCase3.ReadOnly = True
                txtPressureDropCase3.BackColor = Color.WhiteSmoke

                txtOutletPressure1.ReadOnly = False
                txtOutletPressure1.BackColor = Color.White
                txtOutletPressure2.ReadOnly = False
                txtOutletPressure2.BackColor = Color.White
                txtOutletPressure3.ReadOnly = False
                txtOutletPressure3.BackColor = Color.White
            Else
                btnSelectP2DP.Text = "Select P2"
                btnSelectP2DP.Location = New Point(115, 175)
                txtPressureDropCase1.ReadOnly = False
                txtPressureDropCase1.BackColor = Color.White
                txtPressureDropCase2.ReadOnly = False
                txtPressureDropCase2.BackColor = Color.White
                txtPressureDropCase3.ReadOnly = False
                txtPressureDropCase3.BackColor = Color.White

                txtOutletPressure1.ReadOnly = True
                txtOutletPressure1.BackColor = Color.WhiteSmoke
                txtOutletPressure2.ReadOnly = True
                txtOutletPressure2.BackColor = Color.WhiteSmoke
                txtOutletPressure3.ReadOnly = True
                txtOutletPressure3.BackColor = Color.WhiteSmoke


            End If
        Catch ex As Exception
            MsgBox("btnSelectP2DP_Click:  " & ex.Message)
        End Try
    End Sub

    Private Sub chkMolecularWeight_CheckedChanged(sender As Object, e As EventArgs) Handles chkMolecularWeight.CheckedChanged
        Try
            If chkMolecularWeight.Checked = True Then
                If cmbFluidType.Text = "Compressible" Then
                    lblDensity.Visible = False
                    cmbDensityUnits.Visible = False
                    txtDensityCase1.Visible = False
                    txtDensityCase2.Visible = False
                    txtDensityCase3.Visible = False
                End If
                txtMolecularWeight.Visible = True
                Call CalculateDensity()
            Else

                lblDensity.Visible = True
                cmbDensityUnits.Visible = True
                txtDensityCase1.Visible = True
                txtDensityCase2.Visible = True
                txtDensityCase3.Visible = True
                txtMolecularWeight.Visible = False
            End If

        Catch ex As Exception
            MsgBox("chkMolecularWeight_CheckedChanged: " & ex.Message)
        End Try
    End Sub
    Public Function CalculateDensity()
        Try
            If Not cmbFluid.SelectedIndex = 0 Then
                If chkMolecularWeight.Checked = True And cmbFluid.Text = "Gas" Then
                    If Not txtInletTemperatureCase1.Text = "" And Not txtInletPressureCase1.Text = "" And Not Zcase1 = 0 Then
                        FinalDensityCase1 = (FinalInletPressureCase1 * 100000 * MolecularWeightCase1) / (8314 * (FinalInletTemperatureCase1 + 273.15) * Zcase1)
                        txtDensityCase1.Text = FinalDensityCase1
                    End If
                    If Not txtInletTemperatureCase2.Text = "" And Not txtInletPressureCase2.Text = "" And Not Zcase2 = 0 Then
                        FinalDensityCase2 = (FinalInletPressureCase2 * MolecularWeightCase2 * 100000) / (8314 * (FinalInletTemperatureCase2 + 273.15) * Zcase2)
                        txtDensityCase2.Text = FinalDensityCase2
                    End If
                    If Not txtInletTemperatureCase3.Text = "" And Not txtInletPressureCase3.Text = "" And Not Zcase3 = 0 Then
                        FinalDensityCase3 = (FinalInletPressureCase3 * MolecularWeightCase3 * 100000) / (8314 * (FinalInletTemperatureCase3 + 273.15) * Zcase3)
                        txtDensityCase3.Text = FinalDensityCase3
                    End If
                Else
                    convertDensity(txtDensityCase1, FinalDensityCase1, cmbDensityUnits, FinalInletTemperatureCase1, FinalInletPressureCase1)
                    convertDensity(txtDensityCase2, FinalDensityCase2, cmbDensityUnits, FinalInletTemperatureCase2, FinalInletPressureCase2)
                    convertDensity(txtDensityCase3, FinalDensityCase3, cmbDensityUnits, FinalInletTemperatureCase3, FinalInletPressureCase3)

                End If
            End If
            'Molecular weight calculated from Density only for case 1, it will be common for all cases.
            If cmbFluidType.Text = "Compressible" Then
                If cmbFluid.Text = "Steam" Then
                    MolecularWeight = 18
                    MolecularWeightCase1 = 18
                    MolecularWeightCase2 = 18
                    MolecularWeightCase3 = 18
                Else
                    If Not FinalInletTemperatureCase1 = 0 And Not FinalInletPressureCase1 = 0 And Not Zcase1 = 0 And chkMolecularWeight.Checked = False Then
                        MolecularWeightCase1 = (FinalDensityCase1 * 8314 * (FinalInletTemperatureCase1 + 273.15) * Zcase1) / (FinalInletPressureCase1 * 100000)
                    End If
                    If Not FinalInletTemperatureCase2 = 0 And Not FinalInletPressureCase2 = 0 And Not Zcase2 = 0 And chkMolecularWeight.Checked = False Then
                        MolecularWeightCase2 = (FinalDensityCase2 * 8314 * (FinalInletTemperatureCase2 + 273.15) * Zcase2) / (FinalInletPressureCase2 * 100000)
                    End If
                    If Not FinalInletTemperatureCase3 = 0 And Not FinalInletPressureCase3 = 0 And Not Zcase3 = 0 And chkMolecularWeight.Checked = False Then
                        MolecularWeightCase3 = (FinalDensityCase3 * 8314 * (FinalInletTemperatureCase3 + 273.15) * Zcase3) / (FinalInletPressureCase3 * 100000)
                    End If
                End If
            End If


            If Not cmbFlowrate.Text = "--Select--" Then
                convertFlowrate(txtFlowrateCase1, FinalFlowrateCase1, cmbFlowrate, FinalDensityCase1, FinalInletTemperatureCase1, FinalInletPressureCase1)
                convertFlowrate(txtFlowrateCase2, FinalFlowrateCase2, cmbFlowrate, FinalDensityCase2, FinalInletTemperatureCase2, FinalInletPressureCase2)
                convertFlowrate(txtFlowrateCase3, FinalFlowrateCase3, cmbFlowrate, FinalDensityCase3, FinalInletTemperatureCase3, FinalInletPressureCase3)

                TempFlowrateCase1 = FinalFlowrateCase1
                TempFlowrateCase2 = FinalFlowrateCase2
                TempFlowrateCase3 = FinalFlowrateCase3


            End If
        Catch ex As Exception
            MsgBox("CalculateDensity:  " & ex.Message)
        End Try
        Return Nothing
    End Function
    Private Sub txtMolecularWeight_Validated(sender As Object, e As EventArgs) Handles txtMolecularWeight.Validated
        Try
            If Not txtMolecularWeight.Text = "" Then
                MolecularWeight = CSng(txtMolecularWeight.Text)
                MolecularWeightCase1 = MolecularWeight
                MolecularWeightCase2 = MolecularWeight
                MolecularWeightCase3 = MolecularWeight
                Call CalculateDensity()
            End If
        Catch ex As Exception
            MsgBox("txtMolecularWeight_Validated: " & ex.Message)
        End Try
    End Sub


    Private Sub txtZ_Case1_Validated(sender As Object, e As EventArgs) Handles txtZ_Case1.Validated, txtZ_Case2.Validated, txtZ_Case3.Validated
        Try
            If sender Is txtZ_Case1 Then
                If Not txtZ_Case1.Text = "" Then Zcase1 = CSng(txtZ_Case1.Text) Else Zcase1 = 0
            End If
            If sender Is txtZ_Case2 Then
                If Not txtZ_Case2.Text = "" Then Zcase2 = CSng(txtZ_Case2.Text) Else Zcase2 = 0
            End If
            If sender Is txtZ_Case3 Then
                If Not txtZ_Case3.Text = "" Then Zcase3 = CSng(txtZ_Case3.Text) Else Zcase3 = 0
            End If

            If Not cmbFluid.Text = "Steam" Then
                Call AllCalculations()
                'Call CalculateDensity()
                'If cmbFluidType.Text = "InCompressible" Then
                '    FL = 0.64
                'Else
                '    FL = 0.7
                'End If
                'Call Chokedflow(FL, FL, FL)
                'Call CalculateKVCV()
                'If FinalKVCase1 <> 0 Then
                '    lblApproxCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                '    lblKVCase1.Text = Math.Round(FinalKVCase1, 2)
                'Else
                '    lblApproxCVCase1.Text = ""
                '    lblKVCase1.Text = ""
                'End If
                'If FinalKVCase2 <> 0 Then
                '    lblApproxCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                '    lblKVCase2.Text = Math.Round(FinalKVCase2, 2)
                'Else
                '    lblApproxCVCase2.Text = ""
                '    lblKVCase2.Text = ""
                'End If
                'If FinalKVCase3 <> 0 Then
                '    lblApproxCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                '    lblKVCase3.Text = Math.Round(FinalKVCase3, 2)
                'Else
                '    lblApproxCVCase3.Text = ""
                '    lblKVCase3.Text = ""
                'End If
            End If

        Catch ex As Exception
            MsgBox("txtZ_Case1_Validated:  " & ex.Message)
        End Try
    End Sub


    Private Sub txtK_Case1_Validated(sender As Object, e As EventArgs) Handles txtK_Case1.Validated, txtK_Case2.Validated, txtK_Case3.Validated
        Try
            If sender Is txtK_Case1 Then
                If Not txtK_Case1.Text = "" Then Kcase1 = CSng(txtK_Case1.Text) Else Kcase1 = 0
            End If

            If sender Is txtK_Case2 Then
                If Not txtK_Case2.Text = "" Then Kcase2 = CSng(txtK_Case2.Text) Else Kcase2 = 0
            End If
            If sender Is txtK_Case3 Then
                If Not txtK_Case3.Text = "" Then Kcase3 = CSng(txtK_Case3.Text) Else Kcase3 = 0
            End If

            If Not cmbFluid.Text = "Steam" Then
                Call AllCalculations()
                'Call CalculateDensity()
                'If cmbFluidType.Text = "InCompressible" Then
                '    FL = 0.64
                'Else
                '    FL = 0.7
                'End If
                'Call Chokedflow(FL, FL, FL)
                'Call CalculateKVCV()
                'If FinalKVCase1 <> 0 Then
                '    lblApproxCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                '    lblKVCase1.Text = Math.Round(FinalKVCase1, 2)
                'Else
                '    lblApproxCVCase1.Text = ""
                '    lblKVCase1.Text = ""
                'End If
                'If FinalKVCase2 <> 0 Then
                '    lblApproxCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                '    lblKVCase2.Text = Math.Round(FinalKVCase2, 2)
                'Else
                '    lblApproxCVCase2.Text = ""
                '    lblKVCase2.Text = ""
                'End If
                'If FinalKVCase3 <> 0 Then
                '    lblApproxCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                '    lblKVCase3.Text = Math.Round(FinalKVCase3, 2)
                'Else
                '    lblApproxCVCase3.Text = ""
                '    lblKVCase3.Text = ""
                'End If
            End If
        Catch ex As Exception
            MsgBox("txtK_Case1_Validated:  " & ex.Message)
        End Try
    End Sub

    Public Function Interpolation(ByVal x As Single, ByVal x1 As Single, ByVal x2 As Single, ByVal y1 As Single, ByVal y2 As Single) As Single

        Dim y As Single
        Try
            y = y1 + ((x - x1) * (y2 - y1) / (x2 - x1))
            Return y
        Catch ex As Exception
            MsgBox("Interpolation:  " & ex.Message)
        End Try
    End Function

    Public Function Reset_All()
        Try
            Dim txt As Control
            Dim tempMedium As String = txtMedium.Text   '  Temporary copies the last medium stored
            txtErrors.Text = ""
            If LoadingForm = True Then
                LoadingForm = False

                cmbCharacterstics.SelectedIndex = -1            '13102020 Changes
                cmbBonnetType.SelectedIndex = -1
                cmbBalancing.SelectedIndex = -1
                cmbLeakage.SelectedIndex = -1

                'For Each txt In Me.GroupBox6.Controls
                For Each txt In Me.Panel1.Controls
                    If TypeOf txt Is TextBox Then
                        txt.Text = ""    'Clear all text
                    End If

                Next

                For Each txt In Me.Panel2.Controls
                    If TypeOf txt Is TextBox Then
                        txt.Text = ""    'Clear all text
                    End If
                    If TypeOf txt Is ComboBox Then
                        txt.Text = "--Select--"
                    End If

                Next
               

                FinalInletPressureCase1 = 0
                FinalInletPressureCase2 = 0
                FinalInletPressureCase3 = 0

                FinalOutletPressureCase1 = 0
                FinalOutletPressureCase2 = 0
                FinaloutletPressureCase3 = 0


                FinalPressureDropCase1 = 0
                FinalPressureDropCase2 = 0
                FinalPressureDropCase3 = 0

                FinalChokedPressureCase1 = 0
                FinalChokedPressureCase2 = 0
                FinalChokedPressureCase3 = 0

                FinalInletTemperatureCase1 = 0
                FinalInletTemperatureCase2 = 0
                FinalInletTemperatureCase3 = 0

                FinalFlowrateCase1 = 0
                FinalFlowrateCase2 = 0
                FinalFlowrateCase3 = 0

                FinalDensityCase1 = 0
                FinalDensityCase2 = 0
                FinalDensityCase3 = 0


                FinalKVCase1 = 0
                FinalKVCase2 = 0
                FinalKVCase3 = 0

                FinalCVCase1 = 0
                FinalCVCase2 = 0
                FinalCVCase3 = 0

                'Stage 2
                FinalDesignPressureInlet = 0
                FinalDesignPressureOutlet = 0
                FinalDesignTemperatureInlet = 0
                FinalDesignTemperatureOutlet = 0

                FinalKVmax_ValveSize = 0
                FinalValveSize = 0
                ID = 0

                TsatCase1 = 0
                TsatCase2 = 0
                TsatCase3 = 0
                ToutPressureCase1 = 0
                ToutPressureCase2 = 0
                ToutPressureCase3 = 0
                Kcase1 = 0
                Kcase2 = 0
                Kcase3 = 0
                Zcase1 = 0
                Zcase2 = 0
                Zcase3 = 0
                Xcase1 = 0
                Xcase2 = 0
                Xcase3 = 0
                SteamDensityCase1 = 0
                SteamDensityCase2 = 0
                SteamDensityCase3 = 0

                FinalVapourPressureCase1 = 0
                FinalVapourPressureCase2 = 0
                FinalVapourPressureCase3 = 0

                FinalViscosityCase1 = 0
                FinalViscosityCase2 = 0
                FinalViscosityCase3 = 0

                chkNoiseAttenuation.Visible = True
                chkInsulation.Visible = True

                Me.chkNoiseAttenuation.Checked = False

                GroupBox1.BackColor = Color.LightSteelBlue
                GroupBox2.BackColor = Color.LightSteelBlue
                GroupBox3.BackColor = Color.LightSteelBlue

                lblKVCase1.Text = ""
                lblKVCase2.Text = ""
                lblKVCase3.Text = ""

                lblApproxCVCase1.Text = ""
                lblApproxCVCase2.Text = ""
                lblApproxCVCase3.Text = ""

                FinalKVCase1 = 0
                FinalKVCase2 = 0
                FinalKVCase3 = 0

                FinalCVCase1 = 0
                FinalCVCase2 = 0
                FinalCVCase3 = 0

                lblSuggestedRating.Text = ""

                lblFinalKVCase1.Text = ""
                lblFinalKvCase2.Text = ""
                lblFinalKVcase3.Text = ""

                lblFinalCVCase1.Text = ""
                lblFinalCVCase2.Text = ""
                lblFinalCVCase3.Text = ""



                lblAttenuatedNoiseCase1.Text = ""
                lblAttenuatedNoiseCase2.Text = ""
                lblAttenuatedNoiseCase3.Text = ""
                lblAttnPressDropCase1.Text = ""
                lblAttnPressDropCase2.Text = ""
                lblAttnPressDropCase3.Text = ""

                lblSeverityCase1.Text = ""
                lblSeverityCase2.Text = ""
                lblSeverityCase3.Text = ""

                'lblFlowtypeCase1.Text = ""
                'lblFlowtypeCase2.Text = ""
                'lblFlowtypeCase3.Text = ""

                lblStrokeCase1.Text = ""
                lblStrokeCase2.Text = ""
                lblStrokeCase3.Text = ""

                lblVelocityValveInletCase1.Text = ""
                lblVelocityValveInletCase2.Text = ""
                lblVelocityValveInletCase3.Text = ""

                lblVelocityValveOutletCase1.Text = ""
                lblVelocityValveOutletCase2.Text = ""
                lblVelocityValveOutletCase3.Text = ""

                lblVelocityValveOutletCase1.ForeColor = Color.Black
                lblVelocityValveOutletCase2.ForeColor = Color.Black
                lblVelocityValveOutletCase3.ForeColor = Color.Black

                lblVelocityOutletPipeCase1.Text = ""
                lblVelocityOutletPipeCase2.Text = ""
                lblVelocityOutletPipeCase3.Text = ""

                lblVelocityOutletPipeCase1.ForeColor = Color.Black
                lblVelocityOutletPipeCase2.ForeColor = Color.Black
                lblVelocityOutletPipeCase3.ForeColor = Color.Black

                lblVelocityInletPipeCase1.Text = ""
                lblVelocityInletPipeCase2.Text = ""
                lblVelocityInletPipeCase3.Text = ""
                'lblFinalRating.Text = ""
                'lblKVMaxValue.Text = ""

                'lblFinalOutletPipe.Text = ""
                'lblFinalSizeUnits.Text = ""
                'lblFinalValveSize.Text = ""
                'lblFinalSizeUnits1.Text = ""

                lblNoiseCase1.Text = ""
                lblNoiseCase2.Text = ""
                lblNoiseCase3.Text = ""



                lblFlashingPercentage.Visible = False
                txtFlashingPercentageCase1.Visible = False
                txtFlashingPercentageCase2.Visible = False
                txtFlashingPercentageCase3.Visible = False


                DrynessFraction_LiquidCase1 = 0
                DrynessFraction_LiquidCase2 = 0
                DrynessFraction_LiquidCase3 = 0

                lblFlashingCaseNoAttenuation.Text = ""
                FlashingCase1 = False
                FlashingCase2 = False
                FlashingCase3 = False

                chkInsulation.Checked = False


                chkBaffleCase1.Checked = False
                chkBaffleCase2.Checked = False
                chkBaffleCase3.Checked = False
                txtBaffleKVCase1.Text = ""
                txtBaffleKVCase2.Text = ""
                txtBaffleKVCase3.Text = ""

                'lblFinalActuator.Text = ""

                lblFP.Text = ""
                lblFLCase1.Text = ""
                lblFLCase2.Text = ""
                lblFLCase3.Text = ""
                lblXTCase1.Text = ""
                lblXTCase2.Text = ""
                lblXTCase3.Text = ""
                lblMachNoPipeOutCase1.Text = ""
                lblMachNoPipeOutCase2.Text = ""
                lblMachNoPipeOutCase3.Text = ""

                lblMachNoPipeOutCase1.ForeColor = Color.Black
                lblMachNoPipeOutCase2.ForeColor = Color.Black
                lblMachNoPipeOutCase3.ForeColor = Color.Black


                lblMachNoVavleOutCase1.Text = ""
                lblMachNoVavleOutCase2.Text = ""
                lblMachNoVavleOutCase3.Text = ""

                lblMachNoVavleOutCase1.ForeColor = Color.Black
                lblMachNoVavleOutCase2.ForeColor = Color.Black
                lblMachNoVavleOutCase3.ForeColor = Color.Black

                lblFlowtypeCase1.Text = ""
                lblFlowtypeCase2.Text = ""
                lblFlowtypeCase3.Text = ""
                lblValveModel.Text = ""


                lblForceUnits.Text = ""
                lblSel0PercF.Text = ""
                lblSel100PerF.Text = ""
                ' lblSelForceUnit.Text = ""

             
                lblForce0perc.Text = ""
                lblForce100perc.Text = ""
                If LoadingForm = True Then
                    DT_ActuatorSelect.Rows(1).Item(2) = 0
                    DT_ActuatorSelect.Rows(1).Item(3) = 0
                    DT_ActuatorSelect.Rows(2).Item(2) = 0
                    DT_ActuatorSelect.Rows(2).Item(3) = 0
                    DT_ActuatorSelect.Rows(1).Item(1) = ""
                    DT_ActuatorSelect.Rows(2).Item(1) = ""
                End If

                'For Each txt In Me.Panel2.Controls
                '    If TypeOf txt Is ComboBox Then
                '        txt.Text = "--Select--"
                '    End If
                'Next
                lblSuggPipeSize.Text = ""

                'clear Actuator Group
                txtSuggActuator.Text = ""
                cmbSelectActuator.Items.Clear()
                cmbSelectActuator.Text = "--Select--"
                txtDPShutoff.Text = ""
                txtAirPressure.Text = ""
                'cmbAirPressureUnits.Items.Clear()
                'cmbAirPressureUnits.Text = "--Select--"
                cmbSeatDia.Items.Clear()
                cmbSeatDia.Text = ""
                lblForce0perc.Text = ""
                cmbActuatorType.Text = "--Select--"
                cmbBalancing.Text = "--Select--"
                cmbAirFailure.Text = "--Select--"
                cmbPacking.Text = "--Select--"
                cmbSealing.Text = "--Select--"
                cmbHandwheel.Text = "--Select--"
                cmbBonnetType.Text = "--Select--"
                cmbEndConnection.Text = "--Select--"
                cmbLeakage.Text = "--Select--"
                If ChangingUnitsType = False Then       ' True only when Function is called

                    ' cmbFluid.SelectedIndex = -1
                    'cmbFluid.Text = "--Select--"
                    cmbUnitsType.SelectedIndex = 0
                    'cmbUnitsType.Text = "--Select--"

                End If
                LoadingForm = False
                cmbModel.SelectedIndex = 1              'Changes '22102020   By Default Ecotrol
                cmbSelectedTrim.SelectedIndex = -1


                If ChangingUnitsType = False Then
                    If cmbFluidType.Text = "InCompressible" Then
                        lblTsatInletPress.Visible = False
                        txtTsatInletCase1.Visible = False
                        txtTsatInletCase2.Visible = False
                        txtTsatInletCase3.Visible = False


                        lblToutPressure.Visible = False
                        txtTOutPressureCase1.Visible = False
                        txtTOutPressureCase2.Visible = False
                        txtTOutPressureCase3.Visible = False

                        lblTsatoutPressure.Visible = False
                        txtTsatoutPressureCase1.Visible = False
                        txtTsatoutPressureCase2.Visible = False
                        txtTsatoutPressureCase3.Visible = False

                        lblK.Visible = False
                        txtK_Case1.Visible = False
                        txtK_Case2.Visible = False
                        txtK_Case3.Visible = False

                        lblZ.Visible = False
                        txtZ_Case1.Visible = False
                        txtZ_Case2.Visible = False
                        txtZ_Case3.Visible = False

                        lblX.Visible = False
                        txtX_Case1.Visible = False
                        txtX_Case2.Visible = False
                        txtX_Case3.Visible = False


                        '     lblKVerrordueToValve.Visible = False
                        'Else
                        '    chkMolecularWeight.Visible = True
                        '    txtMolecularWeight.Visible = True
                        '    lblMolecularUnit.Visible = True
                    End If

                End If

                lblFinalRating.Text = ""
                lblFinalOutletPipe.Text = ""
                lblKVMaxValue.Text = ""
                lblFinalValveSize.Text = ""

                lblFinalActuator.Text = ""

                If ChangingUnitsType = False Then
                    'General data


                    UserNotes1 = ""
                    UserNotes2 = ""
                    UserNotes3 = ""
                    If SameFileRecords = True Then
                        TagNo = ""
                        Revision = 1
                        SheetNo = 1
                        ItemNo = 1
                        QTY = 1

                    Else
                        TagNo = ""
                        Revision = 1
                        SheetNo = 1
                        ItemNo = 1
                        CustomerName = ""
                        ProjectName = ""
                        OfferNo = ""
                        QTY = 1
                        SalesEnggName = ""
                        CustomerRef = ""

                        frmCustomerDetails.txtRevNo.Text = ""
                        frmCustomerDetails.txtTagNo.Text = ""
                        frmCustomerDetails.txtQty.Text = ""
                    End If
                    QTY = 1


                    lblHelp.Text = "Help : "
                    frmUserNotes.txtUserNotes1.Text = "User Notes : "
                    lblDate.Text = ""
                    'lblCustomer.Text = ""
                    'lblProject.Text = ""
                    'lblTagNo.Text = ""
                    'lblQTY.Text = ""
                End If
                NoiseAttenuationFlag = False

                cmbAreaunits.Text = "NB"

                txtMedium.Text = tempMedium
                If txtMedium.Text = "Gas" Then
                    chkMolecularWeight.Visible = True
                    txtMolecularWeight.Visible = True
                    lblMolecularUnit.Visible = True
                    chkMolecularWeight.Checked = False

                End If
                'PRDS
                txtWaterPressure.Text = ""
                txtWaterTemperature.Text = ""
                txtWaterFlowCase1.Text = ""
                txtWaterFlowCase2.Text = ""
                txtWaterFlowCase3.Text = ""

                InletWaterPressure = 0
                OutletWaterPressureCase1 = 0
                OutletWaterPressureCase2 = 0
                OutletWaterPressureCase3 = 0
                InletWaterTemperature = 0
                WaterFlowRateCase1 = 0
                WaterFlowRateCase2 = 0
                WaterFlowRateCase3 = 0

                TempFlowrateCase1 = 0
                TempFlowrateCase2 = 0
                TempFlowrateCase3 = 0
                PRDS_IP_FlowrateForPipeDiaCase1 = 0
                PRDS_IP_FlowrateForPipeDiaCase2 = 0
                PRDS_IP_FlowrateForPipeDiaCase3 = 0
                PRDS_OP_FlowrateForPipeDiaCase1 = 0
                PRDS_OP_FlowrateForPipeDiaCase2 = 0
                PRDS_OP_FlowrateForPipeDiaCase3 = 0
                tempOutletPressureCase1 = 0
                tempOutletPressureCase2 = 0
                tempOutletPressureCase3 = 0
                PRDS_OutletTemperatureCase1 = 0
                PRDS_OutletTemperatureCase2 = 0
                PRDS_OutletTemperatureCase3 = 0
                MolecularWeightCase1 = 0
                MolecularWeightCase2 = 0
                MolecularWeightCase3 = 0





                'Call ChangeUnitsType()

                LoadingForm = True

            End If
        Catch ex As Exception
            MsgBox("Reset_All:  " & ex.Message)
        End Try
        Return Nothing
    End Function


    Private Sub chkViscosity_CheckedChanged(sender As Object, e As EventArgs) Handles chkViscosity.CheckedChanged
        If chkViscosity.Checked = True Then

            txtViscosityCase1.ReadOnly = False
            txtViscosityCase2.ReadOnly = False
            txtViscosityCase3.ReadOnly = False
            txtViscosityCase1.Visible = True
            txtViscosityCase2.Visible = True
            txtViscosityCase3.Visible = True

        Else
            txtViscosityCase1.Visible = False
            txtViscosityCase2.Visible = False
            txtViscosityCase3.Visible = False
            txtViscosityCase1.ReadOnly = True
            txtViscosityCase2.ReadOnly = True
            txtViscosityCase3.ReadOnly = True


        End If
    End Sub

    '*******************************************************************************************************************************************************
    'Other Liquids
    '********************************************************************************************************************************************************

    Private Sub txtFlashingPercentageCase1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtFlashingPercentageCase1.KeyPress, txtFlashingPercentageCase2.KeyPress, txtFlashingPercentageCase3.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("txtFlashingPercentageCase1_KeyPress:  " & ex.Message)
        End Try
    End Sub

    Private Sub txtFlashingPercentageCase1_Validated(sender As Object, e As EventArgs) Handles txtFlashingPercentageCase1.Validated, txtFlashingPercentageCase2.Validated, txtFlashingPercentageCase3.Validated
        Try

            If sender Is txtFlashingPercentageCase1 And Not txtFlashingPercentageCase1.Text = "" Then
                DrynessFraction_LiquidCase1 = CSng(txtFlashingPercentageCase1.Text)
            ElseIf sender Is txtFlashingPercentageCase2 And Not txtFlashingPercentageCase2.Text = "" Then
                DrynessFraction_LiquidCase2 = CSng(txtFlashingPercentageCase2.Text)
            ElseIf sender Is txtFlashingPercentageCase3 And Not txtFlashingPercentageCase3.Text = "" Then
                DrynessFraction_LiquidCase3 = CSng(txtFlashingPercentageCase3.Text)
            End If
            Call AllCalculations()
        Catch ex As Exception
            MsgBox("txtFlashingPercentageCase1_Validated: " & ex.Message)
        End Try

    End Sub

    Private Sub cmbQW_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbQW.SelectionChangeCommitted
        ResetFlowarateIndex = True
    End Sub

    Private Sub cmbQW_TextChanged(sender As Object, e As EventArgs) Handles cmbQW.TextChanged
        Try
            If LoadingForm = True Then

                Call SelectFlowUnits()
                Call AllCalculations()

            End If
        Catch ex As Exception
            MsgBox("cmbQW_TextChanged" & ex.Message)
        End Try

    End Sub




    Private Sub cmbModel_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbModel.SelectedIndexChanged
        Try
            '   If LoadingForm = True Then       'Changes 22102020  
            Model = cmbModel.SelectedIndex

            If Model = 0 Or Model = 4 Or Model = 5 Then
                cmbMOC.Items.Clear()


                Me.cmbMOC.Items.Add("A216WCB")
                Me.cmbMOC.Items.Add("A217WC6")
                Me.cmbMOC.Items.Add("A351CF8M")
                Me.cmbMOC.Items.Add("A216WCC")
                Me.cmbMOC.Items.Add("A351 CF3")
                Me.cmbMOC.Items.Add("A351CF3M")
                Me.cmbMOC.Items.Add("A217WC9")
                Me.cmbMOC.Items.Add("A351 CF8")
                Me.cmbMOC.Items.Add("A352LCB")
                Me.cmbMOC.Items.Add("A217 C5")
                Me.cmbMOC.Items.Add("A351 Gr.CD4MCu")
                Me.cmbMOC.Items.Add("A217 C12A")
                Me.cmbMOC.Items.Add("A351 CN7M")
                Me.cmbMOC.Items.Add("A494 Gr.CW-12MW")
                Me.cmbMOC.Items.Add("A105")
                Me.cmbMOC.Items.Add("A350 Gr.LF2")
                cmbSelectedTrim.Items.Clear()
                cmbSelectedTrim.Items.Add("PS1")
                cmbSelectedTrim.Items.Add("PS3")
                cmbSelectedTrim.Items.Add("PR1")
                cmbSelectedTrim.Items.Add("PR2")
                cmbSelectedTrim.Items.Add("PR3")
            ElseIf Model = 1 Then
                cmbSelectedTrim.Items.Clear()
                cmbSelectedTrim.Items.Add("P1")
                cmbSelectedTrim.Items.Add("P3")
                cmbSelectedTrim.Items.Add("L1")
                cmbSelectedTrim.Items.Add("L2")
                cmbSelectedTrim.Items.Add("L3")
            ElseIf Model = 2 Or Model = 3 Or Model = 6 Then     ' 3WAY AND PRDS PARABOLIC Then
                cmbSelectedTrim.Items.Clear()
                cmbSelectedTrim.Items.Add("PS1")
                chkViscosity.Checked = False

                'ElseIf Model = 4 Then              ' TE PRDS  No PS1,PS3, PR1 only FM Models
                '    cmbSelectedTrim.Items.Clear()
                '    cmbSelectedTrim.Items.Add("PR2")
                '    cmbSelectedTrim.Items.Add("PR3")
                'ElseIf Model = 5 Then                            'BE PRDS  No PS1,PS3, PR1 only FM Models
                '    cmbSelectedTrim.Items.Clear()
                '    cmbSelectedTrim.Items.Add("PS1")
                '    cmbSelectedTrim.Items.Add("PR2")
                '    cmbSelectedTrim.Items.Add("PR3")

            End If


            If Model = 4 Or Model = 5 Or Model = 6 Then '  Viscocity and TsatPressure not needed in PRDS
                cmbFluidType.SelectedIndex = 1
                chkViscosity.Checked = False
                chkViscosity.Visible = False
                lblViscosity.Visible = False
                cmbViscosityUnits.Visible = False
                txtTsatoutPressureCase1.Visible = False
                txtTsatoutPressureCase2.Visible = False
                txtTsatoutPressureCase3.Visible = False
                lblTsatoutPressure.Visible = False
                lblTsatInletPress.Location = New Point(16, 300)
                txtTsatInletCase1.Location = New Point(215, 300)
                txtTsatInletCase2.Location = New Point(283, 300)
                txtTsatInletCase3.Location = New Point(351, 300)
                lblToutPressure.Location = New Point(16, 325)
                txtTOutPressureCase1.Location = New Point(215, 325)
                txtTOutPressureCase2.Location = New Point(283, 325)
                txtTOutPressureCase3.Location = New Point(351, 325)
                lblK.Location = New Point(16, 351)
                txtK_Case1.Location = New Point(215, 351)
                txtK_Case2.Location = New Point(283, 351)
                txtK_Case3.Location = New Point(351, 351)
                PanelPRDS.Visible = True
                txtTOutPressureCase1.ReadOnly = False
                txtTOutPressureCase2.ReadOnly = False
                txtTOutPressureCase3.ReadOnly = False
                txtTOutPressureCase1.BackColor = Color.White
                txtTOutPressureCase2.BackColor = Color.White
                txtTOutPressureCase3.BackColor = Color.White

            Else
                chkViscosity.Visible = True
                If cmbFluidType.Text = "InCompressible" Then
                    txtTsatoutPressureCase1.Visible = False
                    txtTsatoutPressureCase2.Visible = False
                    txtTsatoutPressureCase3.Visible = False
                    lblTsatoutPressure.Visible = False
                Else
                    txtTsatoutPressureCase1.Visible = True
                    txtTsatoutPressureCase2.Visible = True
                    txtTsatoutPressureCase3.Visible = True
                    lblTsatoutPressure.Visible = True
                End If

                lblViscosity.Visible = True
                cmbViscosityUnits.Visible = True

                lblTsatInletPress.Location = New Point(16, 325)
                txtTsatInletCase1.Location = New Point(215, 325)
                txtTsatInletCase2.Location = New Point(283, 325)
                txtTsatInletCase3.Location = New Point(351, 325)
                lblToutPressure.Location = New Point(16, 373)
                txtTOutPressureCase1.Location = New Point(215, 373)
                txtTOutPressureCase2.Location = New Point(283, 373)
                txtTOutPressureCase3.Location = New Point(351, 373)
                lblK.Location = New Point(16, 398)
                txtK_Case1.Location = New Point(215, 398)
                txtK_Case2.Location = New Point(283, 398)
                txtK_Case3.Location = New Point(351, 398)
                PanelPRDS.Visible = False
                txtTOutPressureCase1.ReadOnly = True
                txtTOutPressureCase2.ReadOnly = True
                txtTOutPressureCase3.ReadOnly = True
                txtTOutPressureCase1.BackColor = SystemColors.Control
                txtTOutPressureCase2.BackColor = SystemColors.Control
                txtTOutPressureCase3.BackColor = SystemColors.Control
            End If
            If LoadingForm = True Then
                DT_ActuatorInfo.Rows(0).Item(1) = cmbModel.Text
            End If

        Catch ex As Exception
            MsgBox("cmbModel_SelectedIndexChange:    " & ex.Message)
        End Try
    End Sub

    Public Function ValidateCalcActuator() As Boolean
        If txtAirPressure.Text = "" Or txtDPShutoff.Text = "" Or cmbActuatorType.SelectedIndex < 0 Or cmbBalancing.SelectedIndex < 0 Or cmbAirFailure.SelectedIndex < 0 Or cmbLeakage.SelectedIndex < 0 Or cmbPacking.SelectedIndex < 0 Or cmbAreaunits.SelectedIndex < 0 Then
            ValidateCalcActuator = True
        Else
            ValidateCalcActuator = False
        End If

    End Function
    Public Function ValveActuator()

        Dim i, j, Column, StartColumn, Acc_count, Typeof_Spring_Direction As Byte
        Dim Force_Close_0Perc, Force_Open_100Perc, SpringEndRange, NomialPressureValue, CompareForce, AirThrust, SpringThrust, Thrust_0Perc, Thrust_100Perc, ActuatorTravel, Fluidforce_100Perc As Single
        Dim RatingClass_worksheet, Actuator_worksheet As DataTable
        Dim Select_Actuator As Boolean = False
        Try
            '  Actuator_workbook = APP.Workbooks.Open(AppPath & "\Database\Actuator.xlsx", , True)
            If ValidateCalcActuator() = True Then
                'MsgBox("Jop Jhali ka?")
                txtSuggActuator.Text = ""
                Exit Function
            End If

            '   If LoadingProjectFile = False Then
            '     If cmbSelectedTrim.SelectedIndex > 1 Then     'For Perforation only
            FinalOverrideRatings = SuggestedRating
            If FinalOverrideRatings < 600 Then
                RatingClass_worksheet = DT_RatingClass_150300
            ElseIf FinalOverrideRatings >= 600 And FinalOverrideRatings < 2500 Then
                RatingClass_worksheet = DT_RatingClass_600900
            ElseIf FinalOverrideRatings >= 2500 Then
                RatingClass_worksheet = DT_PR12500KV
            End If

            ' For All Trims Data for Stem Dia and Sleeve Dia is same.  
            ' For #2500 the Stem Dia has Pressure Balance coloumn.
            If FinalOverrideRatings >= 2500 Then
                With RatingClass_worksheet
                    LastRow = .Rows.Count - 2 '  .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                    For i = 2 To LastRow
                        If FinalValveSize = CSng(.Rows(i).Item(0)) Then ' .Cells(i, 1).value) Then
                            If cmbBalancing.SelectedIndex = 0 Then ''Non Pressure Balanacing 
                                StemDia = CSng(.Rows(i).Item(4))   '.Cells(i, 6).value)  '6th column is stem diameter Np. BL
                            Else
                                StemDia = CSng(.Rows(i).Item(5))   '.Cells(i, 6).value)  '7th column is stem diameter Pr BL
                            End If

                            SleeveDia = CSng(.Rows(i).Item(7)) ' .Cells(i, 7).value)   '8th column is sleeve diameter 
                            Exit For
                        End If
                    Next
                End With
            Else
                With RatingClass_worksheet
                    LastRow = .Rows.Count - 2 '  .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                    For i = 2 To LastRow
                        If FinalValveSize = CSng(.Rows(i).Item(0)) Then ' .Cells(i, 1).value) Then
                            StemDia = CSng(.Rows(i).Item(5))   '.Cells(i, 6).value)  '6th column is stem diameter
                            SleeveDia = CSng(.Rows(i).Item(6)) ' .Cells(i, 7).value)   '7th column is sleeve diameter
                            Exit For
                        End If
                    Next
                End With
            End If
            If i > LastRow Then 'Not found
                StemDia = 0
            End If




            ''--------------Fluid Force calculations-----------------------------------.


            If cmbBalancing.SelectedIndex = 0 Then                                                     ''Non Pressure Balanacing 
                If Not cmbSeatDia.Text = "" Then
                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                        SeatDia = CSng(cmbSeatDia.Text)
                    Else
                        SeatDia = CSng(cmbSeatDia.Text) * 25.4          ' To convert into mm
                    End If
                End If
                If cmbFlowDirection.Text = "FTC" Then
                    If StemDia >= SeatDia Then
                        Fluidforce = (Math.PI / 4) * DPShutoff * ((StemDia * StemDia) / 100) * 9.80665          ' Changed on " 28022023 "
                    Else
                        Fluidforce = (Math.PI / 4) * DPShutoff * (StemDia * StemDia) / 100 * 9.80665
                        Fluidforce_100Perc = (Math.PI / 4) * DPShutoff * (SeatDia * SeatDia) / 100 * 9.80665 * 0.101972 * 1.15
                    End If
                Else
                    If StemDia >= SeatDia Then
                        Fluidforce = (Math.PI / 4) * DPShutoff * ((StemDia * StemDia) / 100) * 9.80665
                    Else
                        Fluidforce = (Math.PI / 4) * DPShutoff * ((SeatDia * SeatDia) / 100) * 9.80665
                    End If
                End If


            Else                                                                                        'Pressure Balancing
                Fluidforce = (Math.PI / 4) * DPShutoff * ((StemDia * StemDia) / 100) * 9.80665          ' Changed on " 28022023 "0
                If Not cmbSeatDia.Text = "" Then
                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                        SeatDia = CSng(cmbSeatDia.Text)
                    Else
                        SeatDia = CSng(cmbSeatDia.Text) * 25.4    ' convert to mm
                    End If
                End If


            End If

            ''--------------Seating Force Calculations---------------------------------

            If cmbLeakage.Text = "CLASS IV" Then
                SeatingForce = Math.PI * SeatDia * 6        'Changed on " 28022023
            ElseIf cmbLeakage.Text = "CLASS V" Then
                If cmbBalancing.SelectedIndex = 0 Then
                    SeatingForce = Math.PI * SeatDia * 16  'was 26
                Else
                    SeatingForce = Math.PI * SeatDia * 20
                End If
            ElseIf cmbLeakage.Text = "CLASS VI" Then
                If cmbBalancing.SelectedIndex = 0 Then
                    SeatingForce = Math.PI * SeatDia * 23.12
                Else
                    SeatingForce = Math.PI * SeatDia * 25
                End If
            End If


            ''--------------Friction Force Calculations---------------------------------

            'FRICTION FORCE  / PACKING BOX = FRs
            'FrS=KA x MY x dS x hP x (150 +PNV)
            'FrS=KA x MY x dS x hP x (150 +PNV)
            '3.1.1.	FRICTION FORCE  FOR PRESSURE BALANCE TRIM= FrD
            'FrD =KR x dS    …..N      (UNIT IN NEWTON)
            '   Kr =  PRESSURE BALANCE TRIM FACTOR
            'ANSIS PNV
            '150	21
            '300	53
            '600	104 
            '900	155
            '1500   260
            '2500   450
            Select Case FinalOverrideRatings
                Case 150
                    NomialPressureValue = 21
                Case 300
                    NomialPressureValue = 53
                Case 600
                    NomialPressureValue = 104
                Case 900
                    NomialPressureValue = 155
                Case 1500
                    NomialPressureValue = 260
                Case 2500
                    NomialPressureValue = 450
            End Select
            If StemDia < 16 Then
                PackingHeight = 25
            ElseIf StemDia < 22 Then
                PackingHeight = 30
            ElseIf StemDia < 30 Then
                PackingHeight = 40
            ElseIf StemDia < 40 Then
                PackingHeight = 50
            ElseIf StemDia < 65 Then
                PackingHeight = 75
            End If

            If cmbPacking.SelectedIndex < 3 Then
                PackingMaterialFactor = 0.051            ' PTFE 
            Else
                PackingMaterialFactor = 0.11         ' Graphite
            End If
            PackingTypeFactor = 0.15
            ' Friction Force same for Non and Pressure Balance.
            FrictionForce = PackingTypeFactor * PackingMaterialFactor * StemDia * PackingHeight * (150 + NomialPressureValue) * 0.101972 * 1.15   'FACTOR OF SAFETY
            DT_ActuatorInfo.Rows(7).Item(1) = Math.Round(FrictionForce, 2)     ' Packing Force

            If cmbBalancing.SelectedIndex = 0 Then ''Non Pressure Balanacing 
                SealingForce = 0
            Else

                Select Case cmbBalancing.SelectedIndex          'Changed on '28022023
                    Case 1
                        SealingForce = 15 * SeatDia     'EPDM
                    Case 2
                        SealingForce = 15 * SeatDia     'Viton          
                    Case 3
                        SealingForce = 20 * SeatDia     'Piston ring      Factor of safety included 
                End Select
            End If
            SealingForce = SealingForce * 1.15 * 0.101972   ' Add Factor of Safety 
            SeatingForce = SeatingForce * 1.15 * 0.101972
            Fluidforce = Fluidforce * 1.15 * 0.101972  'Add Factor of Safety  28022023
            FrictionForce = (FrictionForce + SealingForce)

            FinalForce = (Fluidforce + SeatingForce + FrictionForce)
            'Convert from Newton to kgf or lbs
            DT_ActuatorInfo.Rows(8).Item(1) = Math.Round(SeatingForce, 0)
            DT_ActuatorInfo.Rows(9).Item(1) = Math.Round(Fluidforce, 0)
            DT_ActuatorInfo.Rows(10).Item(1) = Math.Round(FinalForce, 0)


            '**-------------------------Valve Travel-----------------------------------

            If FinalOverrideRatings < 600 Then
                Actuator_worksheet = DT_Travel150300 'Actuator_workbook.Worksheets("Travel150300")
            ElseIf FinalOverrideRatings >= 600 And FinalOverrideRatings < 2500 Then
                Actuator_worksheet = DT_Travel6001500 'Actuator_workbook.Worksheets("Travel6001500")
            ElseIf FinalOverrideRatings >= 2500 Then
                Actuator_worksheet = DT_Travel2500 'Actuator_workbook.Worksheets("Travel6001500")
            End If

            With Actuator_worksheet
                LastRow = .Rows.Count - 2
                For i = 0 To LastRow

                    If FinalValveSize = CSng(.Rows(i).Item(0)) Then '  CSng(.Cells(i, 1).value) Then
                        Travel = CSng(.Rows(i).Item(2)) ' CSng(.Cells(i, 3).value)
                        Exit For
                    End If
                Next
            End With
            Dim found As Boolean
            found = False

            DT_ActuatorInfo.Rows(1).Item(1) = Math.Round(SuggestedRating, 0)
            DT_ActuatorInfo.Rows(2).Item(1) = cmbBalancing.Text
            DT_ActuatorInfo.Rows(3).Item(1) = SeatDia
            DT_ActuatorInfo.Rows(4).Item(1) = StemDia
            DT_ActuatorInfo.Rows(5).Item(1) = cmbFlowDirection.Text
            DT_ActuatorInfo.Rows(6).Item(1) = cmbAirFailure.Text

            



            Actuator = ""

            '///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            Typeof_Spring_Direction = 0

            If cmbBalancing.SelectedIndex = 0 And cmbFlowDirection.Text = "FTO" And cmbAirFailure.SelectedIndex = 1 Then  'AirFail 1 means Air to Open       '   Unbalanced FTO valve
                Typeof_Spring_Direction = 1
            ElseIf cmbBalancing.SelectedIndex = 0 And cmbFlowDirection.Text = "FTC" And cmbAirFailure.SelectedIndex = 1 And SeatDia > StemDia Then
                Typeof_Spring_Direction = 2
            ElseIf cmbBalancing.SelectedIndex = 0 And cmbFlowDirection.Text = "FTC" And cmbAirFailure.SelectedIndex = 1 And SeatDia <= StemDia Then
                Typeof_Spring_Direction = 3
            ElseIf cmbBalancing.SelectedIndex = 0 And cmbFlowDirection.Text = "FTO" And cmbAirFailure.SelectedIndex = 0 Then        'AirFail 1 means Air to close
                Typeof_Spring_Direction = 4
            ElseIf cmbBalancing.SelectedIndex = 0 And cmbFlowDirection.Text = "FTC" And cmbAirFailure.SelectedIndex = 0 And SeatDia > StemDia Then
                Typeof_Spring_Direction = 5
            ElseIf cmbBalancing.SelectedIndex = 0 And cmbFlowDirection.Text = "FTC" And cmbAirFailure.SelectedIndex = 0 And SeatDia <= StemDia Then
                Typeof_Spring_Direction = 6
            ElseIf cmbBalancing.SelectedIndex > 0 And cmbFlowDirection.Text = "FTO" And cmbAirFailure.SelectedIndex = 1 Then
                Typeof_Spring_Direction = 7
            ElseIf cmbBalancing.SelectedIndex > 0 And cmbFlowDirection.Text = "FTC" And cmbAirFailure.SelectedIndex = 1 Then
                Typeof_Spring_Direction = 8
            ElseIf cmbBalancing.SelectedIndex > 0 And cmbFlowDirection.Text = "FTO" And cmbAirFailure.SelectedIndex = 0 Then
                Typeof_Spring_Direction = 9
            ElseIf cmbBalancing.SelectedIndex > 0 And cmbFlowDirection.Text = "FTC" And cmbAirFailure.SelectedIndex = 0 Then
                Typeof_Spring_Direction = 10
            End If

            '///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            '///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            'Typeof_Spring_Direction = 1
            'Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81                                               Eq3   < Air Thrust 
            'FinalForce = Total force for unbalanced FTO valve in Kgf = Fluid force + Seating force + Friction Force --- Eq4   < Spring Thrust

            'Typeof_Spring_Direction = 2
            'Total force for unbalanced FTC valve in Kgf = Seating force + Friction Force - Fluid force --- Eq8 < Spring Thrust
            'Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81 --- Eq7 + Fluid force = (pi/4 * (ds * ds - d sp * d sp ) * P1* 1.019 * 1.1) / 100     - Eq5  < Air Thrust
            'Final Force = Total force for unbalanced FTC valve in Kgf = Seating force + Friction Force +Fluid force --- Eq E  < Spring Thrust
            'Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81                                           --  Eq D < Air Thrust   

            'Typeof_Spring_Direction = 3
            'Total force for unbalanced FTO valve in Kgf = Fluid force + Seating force + Friction Force --- Eq4  < Air Thrust   
            'Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81                                           --- Eq3  < Spring Thrust

            'Typeof_Spring_Direction = 4
            'Total force for unbalanced FTC valve in Kgf = Seating force + Friction Force - Fluid force --- Eq8     < Air Thrust   
            'Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81 --- Eq7 + Fluid force = (pi/4 * (ds * ds - d sp * d sp ) * P1* 1.019 * 1.1) / 100     - Eq5  < Spring Thrust

            'Typeof_Spring_Direction = 5 
            'Total Force in Kgf, Balanced FTO valve= Fluid force + Seating force + Friction Force+ Friction Force2 Eq13   < Spring Thrust
            '   Friction Force 2 = Pp * d s *1.1 /9.81    ----   Eq12   +  Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81 --  Eq11    < Air Thrust   

            'Typeof_Spring_Direction = 6 
            'Total Force in Kgf, Balanced FTO valve= Fluid force + Seating force + Friction Force+ Friction Force2 Eq13   < Spring Thrust
            '   Friction Force 2 = Pp * d s *1.1 /9.81    ----   Eq12   +  Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81 --  Eq11    < Air Thrust   

            'Typeof_Spring_Direction = 7 
            'Total Force in Kgf, Balanced FTO valve= Fluid force + Seating force + Friction Force+ Friction Force2 Eq13             < Air Thrust   
            '   Friction Force 2 = Pp * d s *1.1 /9.81    ----   Eq12   +  Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81 --  Eq11 < Spring Thrust

            'Typeof_Spring_Direction = 8 
            'Total Force in Kgf, Balanced FTO valve= Fluid force + Seating force + Friction Force+ Friction Force2 Eq13             < Air Thrust   
            '   Friction Force 2 = Pp * d s *1.1 /9.81    ----   Eq12   +  Friction Force = Pt * d sp * U * Z*0.15*1.1/9.81 --  Eq11  < Spring Thrust



            'DT_ActuatorSelect.Columns.Add("ValveType", GetType(String))
            'DT_ActuatorSelect.Columns.Add("Flow Direction", GetType(String))
            'DT_ActuatorSelect.Columns.Add("Actuator Action", GetType(String))
            'DT_ActuatorSelect.Columns.Add("ValveTravel", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("ActuatorTravel", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("0% Force", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("0% Thrust", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("100% Force", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("100% Thrust", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("Match", GetType(Boolean))
            'DT_ActuatorSelect.Columns.Add("FrictionF", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("FluidF", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("SeatingF", GetType(Single))
            'DT_ActuatorSelect.Columns.Add("SealingF", GetType(Single))




            '///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            'DT_ActuatorSelect.Rows(0).Item(0) = cmbBalancing.Text
            'DT_ActuatorSelect.Rows(0).Item(1) = cmbFlowDirection.Text
            'DT_ActuatorSelect.Rows(0).Item(2) = cmbAirFailure.Text
            Thrust_0Perc = 0
            Thrust_100Perc = 0

            '**-------------------------Actuator Selection-----------------------------------
            If Not cmbActuatorType.Text = "NA" And Not cmbActuatorType.Text = "Manual" Then         'Dont do any actuator search if NA and Manual selected
                If cmbAirFailure.SelectedIndex = 1 Then             ' Air to Open or Air Fail mode -  CLose
                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                        StartColumn = 0
                    Else
                        StartColumn = 8
                    End If

                    If cmbActuatorType.Text = "SINGLE SPRING" Then
                        If cmbModel.SelectedIndex = 1 Then   'Ecotrol  
                            Actuator_worksheet = DT_AFCSingleSpringE
                        Else
                            Actuator_worksheet = DT_AFCSingleSpring
                        End If
                    ElseIf cmbActuatorType.Text = "MULTI SPRING" Then
                        If cmbModel.SelectedIndex = 1 Then   'Ecotrol  
                            Actuator_worksheet = DT_AFCMultiSpringE
                        Else
                            Actuator_worksheet = DT_AFCMultiSpring
                        End If
                    End If
                    cmbSelectActuator.Items.Clear()
                    Acc_count = 0
                    With Actuator_worksheet
                        LastRow = FindLastRow(Actuator_worksheet, 0)
                        For i = 0 To LastRow
                            If Travel = CSng(.Rows(i).Item(StartColumn)) Then             'Lift 
                                cmbSelectActuator.Items.Add(CStr(.Rows(i).Item(StartColumn + 1)))       'Actuator Name

                                SpringEndRange = CSng(.Rows(i).Item(2))            ''Spring End Range           
                                DiaphragmArea = CSng(.Rows(i).Item(3))                  'Diaphragm Area

                                Spring_Initial(Acc_count) = .Rows(i).Item(StartColumn + 4)
                                Spring_Final(Acc_count) = .Rows(i).Item(StartColumn + 5)
                                MKSSpring_Initial(Acc_count) = .Rows(i).Item(4)
                                MKSSpring_Final(Acc_count) = .Rows(i).Item(5)
                                Spring_Numbers(Acc_count) = .Rows(i).Item(15)


                                AirThrust = (SupplyAirPressure - SpringEndRange) * DiaphragmArea          ' Air Thrust
                                F_AirThrust(Acc_count) = AirThrust
                                SpringThrust = CSng(.Rows(i).Item(6))
                                F_SpringThrust(Acc_count) = SpringThrust

                                Select Case (Typeof_Spring_Direction)
                                    Case 1
                                        Force_Close_0Perc = FinalForce
                                        Force_Open_100Perc = FrictionForce
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < SpringThrust And Force_Open_100Perc < AirThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = SpringThrust
                                            Thrust_100Perc = AirThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                    Case 2
                                        Force_Close_0Perc = (SeatingForce + FrictionForce + Fluidforce)
                                        Force_Open_100Perc = (FrictionForce + Fluidforce_100Perc)
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Open_100Perc < SpringThrust And Force_Open_100Perc < AirThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = SpringThrust
                                            Thrust_100Perc = AirThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                    Case 3
                                        Force_Close_0Perc = FinalForce
                                        Force_Open_100Perc = FrictionForce
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < SpringThrust And Force_Open_100Perc < AirThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = SpringThrust
                                            Thrust_100Perc = AirThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                    Case 7
                                        Force_Close_0Perc = FinalForce
                                        Force_Open_100Perc = FrictionForce
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < SpringThrust And Force_Open_100Perc < AirThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = SpringThrust
                                            Thrust_100Perc = AirThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                    Case 8
                                        Force_Close_0Perc = FinalForce
                                        Force_Open_100Perc = FrictionForce
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < SpringThrust And Force_Open_100Perc < AirThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = SpringThrust
                                            Thrust_100Perc = AirThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                End Select

                                'If cmbFlowDirection.Text = "FTC" Then
                                '    AirThrust = (SupplyAirPressure - SpringEndRange) * DiaphragmArea          ' Air Thrust
                                '    SelectedForce(Acc_count) = CalculatedForce
                                'Else
                                '    CalculatedForce = CSng(.Rows(i).Item(6))                                    ' Spring Thrust
                                '    SelectedForce(Acc_count) = CalculatedForce
                                'End If
                                '   DT_ActuatorSelect.Rows(0).Item(3) = Travel
                                DT_ActuatorSelect.Rows(0).Item(2) = Math.Round(Force_Close_0Perc, 0)
                                DT_ActuatorSelect.Rows(0).Item(3) = Math.Round(Force_Open_100Perc, 0)
                                DT_ActuatorInfo.Rows(10).Item(1) = Math.Round(FrictionForce - SealingForce, 0)
                                DT_ActuatorInfo.Rows(11).Item(1) = Math.Round(SeatingForce, 0)
                                DT_ActuatorInfo.Rows(12).Item(1) = Math.Round(Fluidforce, 0)
                                DT_ActuatorInfo.Rows(13).Item(1) = Math.Round(SealingForce, 0)



                                If Select_Actuator Then '  CSng(.Rows(i).Item(StartColumn + 6)) And found = False Then   'Actuator  Force   
                                    If found = False Then
                                        Actuator = CStr(.Rows(i).Item(StartColumn + 1))                   'Actuator  Name 
                                        MKSActuator = CStr(.Rows(i).Item(1))
                                        InitialSpringRange = .Rows(i).Item(StartColumn + 4)
                                        FinalSpringRange = .Rows(i).Item(StartColumn + 5)
                                        MKSInitialSpringRange = .Rows(i).Item(4)
                                        MKSFinalSpringRange = .Rows(i).Item(5)
                                        NoofSprings = .Rows(i).Item(15)
                                        ActuatorTravel = CSng(.Rows(i).Item(StartColumn))

                                        '  DT_ActuatorSelect.Rows(0).Item(4) = ActuatorTravel
                                        DT_ActuatorSelect.Rows(1).Item(2) = Math.Round(Thrust_0Perc, 0)

                                        DT_ActuatorSelect.Rows(1).Item(3) = Math.Round(Thrust_100Perc, 0)


                                        'If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then                    'changes 22102020
                                        '    lblSuggForce.Text = Math.Round(F_AirThrust(Acc_count), 0)           'only for sceen display
                                        'Else
                                        '    lblSuggForce.Text = Math.Round(F_AirThrust(Acc_count) * 2.2, 0)           'only for sceen display
                                        'End If
                                        found = True
                                        ' DT_ActuatorSelect.Rows(0).Item(9) = found
                                    End If
                                End If
                                Acc_count = Acc_count + 1
                            End If
                        Next
                    End With
                ElseIf cmbAirFailure.SelectedIndex = 0 Then             ' Air to close or Air Fail mode -  Open Then
                    If cmbActuatorType.Text = "SINGLE SPRING" Then
                        If cmbModel.SelectedIndex = 1 Then   'Ecotrol  
                            Actuator_worksheet = DT_AFOSingleSpringE
                        Else
                            Actuator_worksheet = DT_AFOSingleSpring
                        End If

                    ElseIf cmbActuatorType.Text = "MULTI SPRING" Then
                        If cmbModel.SelectedIndex = 1 Then   'Ecotrol  
                            Actuator_worksheet = DT_AFOMultiSpringE
                        Else
                            Actuator_worksheet = DT_AFOMultiSpring
                        End If

                    End If
                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                        StartColumn = 0
                    Else
                        StartColumn = 8
                    End If

                    cmbSelectActuator.Items.Clear()
                    Acc_count = 0
                    With Actuator_worksheet
                        LastRow = FindLastRow(Actuator_worksheet, 0)
                        For i = 0 To LastRow
                            If Travel <= CSng(.Rows(i).Item(StartColumn)) Then                    'Lift 
                                cmbSelectActuator.Items.Add(CStr(.Rows(i).Item(StartColumn + 1)))     'Actuator name    
                                SpringEndRange = CSng(.Rows(i).Item(2))                 ''Spring End Range           
                                DiaphragmArea = CSng(.Rows(i).Item(3))                    'Diaphragm Area
                                Spring_Initial(Acc_count) = .Rows(i).Item(StartColumn + 4)
                                Spring_Final(Acc_count) = .Rows(i).Item(StartColumn + 5)
                                MKSSpring_Initial(Acc_count) = .Rows(i).Item(4)
                                MKSSpring_Final(Acc_count) = .Rows(i).Item(5)
                                Spring_Numbers(Acc_count) = .Rows(i).Item(15)

                                AirThrust = (SupplyAirPressure - SpringEndRange) * DiaphragmArea          ' Air Thrust
                                F_AirThrust(Acc_count) = AirThrust
                                SpringThrust = CSng(.Rows(i).Item(6))
                                F_SpringThrust(Acc_count) = SpringThrust

                                Select Case (Typeof_Spring_Direction)
                                    Case 4
                                        Force_Close_0Perc = FinalForce
                                        Force_Open_100Perc = FrictionForce
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < AirThrust And Force_Open_100Perc < SpringThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = AirThrust
                                            Thrust_100Perc = SpringThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                    Case 5
                                        Force_Close_0Perc = (SeatingForce + FrictionForce + Fluidforce)
                                        Force_Open_100Perc = (FrictionForce + Fluidforce_100Perc)
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < AirThrust And Force_Open_100Perc < SpringThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = AirThrust
                                            Thrust_100Perc = SpringThrust

                                        Else
                                            Select_Actuator = False
                                        End If
                                    Case 6
                                        Force_Close_0Perc = FinalForce
                                        Force_Open_100Perc = FrictionForce
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < AirThrust And Force_Open_100Perc < SpringThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = AirThrust
                                            Thrust_100Perc = SpringThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                    Case 9
                                        Force_Close_0Perc = FinalForce
                                        Force_Open_100Perc = FrictionForce
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < AirThrust And Force_Open_100Perc < SpringThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = AirThrust
                                            Thrust_100Perc = SpringThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                    Case 10
                                        Force_Close_0Perc = FinalForce
                                        Force_Open_100Perc = FrictionForce
                                        If cmbModel.SelectedIndex = 3 Or cmbModel.SelectedIndex = 2 Then
                                            Force_Open_100Perc = Force_Close_0Perc
                                        End If
                                        If Force_Close_0Perc < AirThrust And Force_Open_100Perc < SpringThrust Then
                                            Select_Actuator = True
                                            Thrust_0Perc = AirThrust
                                            Thrust_100Perc = SpringThrust
                                        Else
                                            Select_Actuator = False
                                        End If
                                End Select



                                'If cmbFlowDirection.Text = "FTC" Then
                                '    CalculatedForce = CSng(.Rows(i).Item(6))                                            ' Spring Thrust 
                                '    SelectedForce(Acc_count) = CalculatedForce
                                'Else
                                '    CalculatedForce = (SupplyAirPressure - SpringEndRange) * DiaphragmArea              ' Air thrust
                                '    SelectedForce(Acc_count) = CalculatedForce
                                'End If
                               

                                DT_ActuatorSelect.Rows(0).Item(2) = Math.Round(Force_Close_0Perc, 0)
                                DT_ActuatorSelect.Rows(0).Item(3) = Math.Round(Force_Open_100Perc, 0)
                                DT_ActuatorInfo.Rows(10).Item(1) = Math.Round(FrictionForce - SealingForce, 0)
                                DT_ActuatorInfo.Rows(11).Item(1) = Math.Round(SeatingForce, 0)
                                DT_ActuatorInfo.Rows(12).Item(1) = Math.Round(Fluidforce, 0)
                                DT_ActuatorInfo.Rows(12).Item(1) = Math.Round(SealingForce, 0)

                                If Select_Actuator Then
                                    If found = False Then
                                        Actuator = CStr(.Rows(i).Item(StartColumn + 1))                     'Actuator Name 
                                        MKSActuator = CStr(.Rows(i).Item(1))
                                        InitialSpringRange = .Rows(i).Item(StartColumn + 4)
                                        FinalSpringRange = .Rows(i).Item(StartColumn + 5)
                                        MKSInitialSpringRange = .Rows(i).Item(4)
                                        MKSFinalSpringRange = .Rows(i).Item(5)
                                        NoofSprings = .Rows(i).Item(15)
                                        ActuatorTravel = CSng(.Rows(i).Item(StartColumn))
                                        ' DT_ActuatorSelect.Rows(0).Item(4) = ActuatorTravel
                                        DT_ActuatorSelect.Rows(1).Item(2) = Math.Round(Thrust_0Perc, 0)
                                        DT_ActuatorSelect.Rows(1).Item(3) = Math.Round(Thrust_100Perc, 0)
                                        If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                            '  lblSuggForce.Text = Math.Round(F_AirThrust(Acc_count), 0)           'only for sceen display
                                        Else
                                            '  lblSuggForce.Text = Math.Round(F_AirThrust(Acc_count) * 2.2, 0)           'only for sceen display
                                        End If

                                        found = True

                                    End If
                                End If
                                Acc_count = Acc_count + 1

                            End If

                        Next
                    End With
                End If
            End If
            If found = False Then
                Actuator = "Check for Pressure Balancing Option. "
                txtErrors.Text = txtErrors.Text & vbNewLine & "Actuator not found. Check for Pressure Balancing Option. "
            Else
                txtErrors.Text = ""
            End If
            If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then            ' MKS or ALL
                ' FinalForce = FinalForce * 0.101972 'in kgf
                lblForce0perc.Text = Math.Round(Force_Close_0Perc, 0)
                lblForce100perc.Text = Math.Round(Force_Open_100Perc, 0)
                lblForceUnits.Text = "kgf"
                '  lblSelForceUnit.Text = "kgf"
                '  lblSuggAcc_units.Text = "kgf"
            Else                                                                            ' FPS

                lblForce0perc.Text = Math.Round((Force_Close_0Perc * 0.224809), 0)  'in lbs     'first it was : lblFinalForce.Text = Math.Round((FinalForce * 0.224809), 1)
                lblForce100perc.Text = Math.Round((Force_Open_100Perc * 0.224809), 0)
                ' FinalForce = FinalForce * 0.101972 'in kgf
                lblForceUnits.Text = "lbs"
                '  lblSelForceUnit.Text = "lbs"
                ' lblSuggAcc_units.Text = "lbs"
            End If

            ' 20201031 Temporary
            txtSuggActuator.Text = Actuator
            DT_ActuatorSelect.Rows(1).Item(1) = Actuator

            'FinalActuator = Actuator
            'lblFinalActuator.Text = FinalActuator
            'cmbSelectActuator.Text = FinalActuator
            'cmbSelectActuator.SelectedIndex = cmbSelectActuator.FindString(FinalActuator)
            '   End If
            'lblSel0PercF.Text = ""
            'lblSel100PerF.Text = ""
            If Not cmbSelectActuator.Text = "--Select--" Or Not cmbSelectActuator.Text = "" Then
                cmbSelectActuator.SelectedIndex = cmbSelectActuator.FindString(cmbSelectActuator.Text)

            End If
        Catch ex As Exception
            MsgBox("ValveActuator:   " & ex.Message)
        End Try

        Return Nothing
    End Function


    Public Function SelectFlowUnits()
        Dim TempItemSelected As String
        Dim TempFlag As Boolean = False
        Try
            If cmbFlowrate.SelectedIndex >= 0 Then
                TempItemSelected = cmbFlowrate.Text
                TempFlag = True
            End If

            LoadingForm = False
            cmbFlowrate.Items.Clear()
            If Not cmbUnitsType.SelectedIndex = -1 Then
                Select Case cmbUnitsType.SelectedIndex
                    Case 0                               'MKS/SI
                        If cmbQW.SelectedIndex = 0 Then
                            Me.cmbFlowrate.Items.Add("m3/hr")
                            Me.cmbFlowrate.Items.Add("l/h")
                            Me.cmbFlowrate.Items.Add("l/m")
                        Else
                            cmbFlowrate.Items.Add("kg/hr")
                            cmbFlowrate.Items.Add("t/h")
                            cmbFlowrate.Items.Add("t/h(US)")
                            cmbFlowrate.Items.Add("t/h(UK)")
                            cmbFlowrate.Items.Add("t/d")
                        End If

                    Case 1                               'FPS

                        If cmbQW.SelectedIndex = 0 Then
                            Me.cmbFlowrate.Items.Add("cf/h")
                            Me.cmbFlowrate.Items.Add("cf/m")
                            Me.cmbFlowrate.Items.Add("GPM(US)")
                            Me.cmbFlowrate.Items.Add("bbl/day(US)")
                        Else
                            Me.cmbFlowrate.Items.Add("lbs/s")
                            Me.cmbFlowrate.Items.Add("lbs/h")
                        End If
                    Case 2                              'All
                        If cmbQW.Text = "Q" Then
                            Me.cmbFlowrate.Items.Add("m3/hr")
                            Me.cmbFlowrate.Items.Add("m3/day")
                            Me.cmbFlowrate.Items.Add("m3/s")
                            Me.cmbFlowrate.Items.Add("l/h")
                            Me.cmbFlowrate.Items.Add("l/m")
                            Me.cmbFlowrate.Items.Add("l/s")
                            Me.cmbFlowrate.Items.Add("cf/h")
                            Me.cmbFlowrate.Items.Add("cf/m")
                            Me.cmbFlowrate.Items.Add("GPM(US)")
                            Me.cmbFlowrate.Items.Add("GPS(US)")
                            Me.cmbFlowrate.Items.Add("GPH(US)")
                            Me.cmbFlowrate.Items.Add("gal/day(US)")
                            Me.cmbFlowrate.Items.Add("gal/year(US)")
                            Me.cmbFlowrate.Items.Add("GPM(UK)")
                            Me.cmbFlowrate.Items.Add("GPS(UK)")
                            Me.cmbFlowrate.Items.Add("GPH(UK)")
                            Me.cmbFlowrate.Items.Add("gal/day(UK)")
                            Me.cmbFlowrate.Items.Add("gal/year(UK)")
                            Me.cmbFlowrate.Items.Add("bbl/day(US)")
                            Me.cmbFlowrate.Items.Add("dm3/h")
                        ElseIf cmbQW.Text = "W" Then
                            Me.cmbFlowrate.Items.Add("kg/hr")
                            Me.cmbFlowrate.Items.Add("kg/s")
                            Me.cmbFlowrate.Items.Add("kg/min")
                            Me.cmbFlowrate.Items.Add("g/s")
                            Me.cmbFlowrate.Items.Add("g/min")
                            Me.cmbFlowrate.Items.Add("t/h")
                            Me.cmbFlowrate.Items.Add("t/d")
                            Me.cmbFlowrate.Items.Add("lbs/h")

                            Me.cmbFlowrate.Items.Add("lbs/s")
                            Me.cmbFlowrate.Items.Add("t/h(US)")
                            Me.cmbFlowrate.Items.Add("t/d(US)")
                            Me.cmbFlowrate.Items.Add("t/m(US)")
                            Me.cmbFlowrate.Items.Add("t/s(US)")
                            Me.cmbFlowrate.Items.Add("t/h(UK)")
                            Me.cmbFlowrate.Items.Add("t/d(UK)")
                            Me.cmbFlowrate.Items.Add("t/m(UK)")
                            Me.cmbFlowrate.Items.Add("t/s(UK)")
                        End If
                        If cmbFluid.Text = "Gas" And cmbQW.Text = "Q" Then
                            Me.cmbFlowrate.Items.Add("Nm3/h(0°C)")
                            Me.cmbFlowrate.Items.Add("Nm3/h(15°C)")
                            Me.cmbFlowrate.Items.Add("Nm3/h(25°C)")
                            Me.cmbFlowrate.Items.Add("MMSCFD")
                            Me.cmbFlowrate.Items.Add("MMSCFH")
                            Me.cmbFlowrate.Items.Add("SCFD")
                            Me.cmbFlowrate.Items.Add("SCFM")
                        End If
                End Select

                If TempFlag = True And ResetFlowarateIndex = False Then
                    cmbFlowrate.SelectedIndex = cmbFlowrate.FindStringExact(TempItemSelected)
                Else
                    cmbFlowrate.SelectedIndex = 0
                    ResetFlowarateIndex = False
                End If

            End If
            LoadingForm = True
        Catch ex As Exception
            MsgBox("SelectFlowUnits: " & ex.Message)
        End Try
        Return Nothing
    End Function

    'Called in cmbFluidtype-Selection of Incompressible and Compressible Reset Type- False 
    'Called in when Units are changed- FPS and MKS -  ResetType True 
    Public Function ChangeUnitsType(ByVal ResetType As Boolean)
        Try
            Dim index As Int16
            index = cmbUnitsType.SelectedIndex
            ChangingUnitsType = True

            If ResetType = True Then Call Reset_All() 'Only call when units physically changed.

            cmbUnitsType.SelectedIndex = index
            txtMedium.Text = cmbFluid.Text
            ChangingUnitsType = False
            If Not cmbUnitsType.SelectedIndex = -1 Then

                cmbTemperatureUnits.Items.Clear()
                cmbPressureUnits.Items.Clear()
                cmbAirPressureUnits.Items.Clear()
                cmbDensityUnits.Items.Clear()
                cmbVapourPressureUnits.Items.Clear()
                cmbCriticalPressureUnits.Items.Clear()
                cmbViscosityUnits.Items.Clear()
                cmbAirPressureUnits.Items.Clear()
                cmbVelocityRule.Items.Clear()
                Select Case cmbUnitsType.SelectedIndex
                    Case 0                               'MKS/SI
                        cmbTemperatureUnits.Items.Add("°C")
                        cmbTemperatureUnits.Items.Add("°K")

                        Me.cmbPressureUnits.Items.Add("barA")
                        Me.cmbPressureUnits.Items.Add("barg")
                        Me.cmbPressureUnits.Items.Add("kg/cm2A")
                        Me.cmbPressureUnits.Items.Add("kg/cm2g")
                        Me.cmbPressureUnits.Items.Add("Pascal")

                        Me.cmbAirPressureUnits.Items.Add("barA")
                        Me.cmbAirPressureUnits.Items.Add("barg")
                        Me.cmbAirPressureUnits.Items.Add("kg/cm2A")
                        Me.cmbAirPressureUnits.Items.Add("kg/cm2g")
                        Me.cmbAirPressureUnits.Items.Add("Pascal")


                        Me.cmbVapourPressureUnits.Items.Add("barA")
                        Me.cmbVapourPressureUnits.Items.Add("barg")
                        Me.cmbVapourPressureUnits.Items.Add("kg/cm2A")
                        Me.cmbVapourPressureUnits.Items.Add("kg/cm2g")
                        Me.cmbVapourPressureUnits.Items.Add("Pascal")

                        Me.cmbCriticalPressureUnits.Items.Add("barA")
                        Me.cmbCriticalPressureUnits.Items.Add("barg")
                        Me.cmbCriticalPressureUnits.Items.Add("kg/cm2A")
                        Me.cmbCriticalPressureUnits.Items.Add("kg/cm2g")
                        Me.cmbCriticalPressureUnits.Items.Add("Pascal")

                        If cmbFluidType.Text = "InCompressible" Then
                            Me.cmbDensityUnits.Items.Add("Sp.Gravity")
                        End If
                        Me.cmbDensityUnits.Items.Add("kg/m3")
                        Me.cmbDensityUnits.Items.Add("kg/l")
                        Me.cmbDensityUnits.Items.Add("g/cm3")
                        If cmbFluidType.Text = "Compressible" Then
                            Me.cmbDensityUnits.Items.Add("kg/m3(0°C)")
                            Me.cmbDensityUnits.Items.Add("kg/m3(15°C)")
                        End If

                        Me.cmbViscosityUnits.Items.Add("m2/s")
                        Me.cmbViscosityUnits.Items.Add("mPa s")
                        Me.cmbViscosityUnits.Items.Add("cP")
                        Me.cmbViscosityUnits.Items.Add("cSt")

                        lblVelocityunit.Text = "m/s"

                        If cmbFluidType.Text = "InCompressible" Then
                            cmbVelocityRule.Items.Add("6 m/s")
                            cmbVelocityRule.Items.Add("8 m/s")
                        Else
                            cmbVelocityRule.Items.Add("0.3")
                            cmbVelocityRule.Items.Add("0.4")
                        End If


                        lblCalculatedCV.Visible = False
                        lblApproxCVCase1.Visible = False
                        lblApproxCVCase2.Visible = False
                        lblApproxCVCase3.Visible = False

                        lblCorrectedCV.Visible = False
                        lblFinalCVCase1.Visible = False
                        lblFinalCVCase2.Visible = False
                        lblFinalCVCase3.Visible = False

                        'lblCvMax.Visible = False
                        lblCvSelected.Visible = False
                        lblCVSugg.Visible = False
                        lblSelectedCV.Visible = False




                        lblCalculatedKV.Visible = True
                        lblKVCase1.Visible = True
                        lblKVCase2.Visible = True
                        lblKVCase2.Visible = True

                        lblCorrectedKV.Visible = True
                        lblFinalKVCase1.Visible = True
                        lblFinalKvCase2.Visible = True
                        lblFinalKVcase3.Visible = True

                        'lblKvMax.Visible = True
                        lblKvSugg.Visible = True
                        lblKvSelected.Visible = True
                        lblSelectedKV.Visible = True
                        lblBaffleKV.Visible = True

                        lblSeatDiaUnits.Text = "mm"

                        cmbAreaunits.SelectedIndex = 0
                        lblFlowWaterUnit.Text = "kg/hr"

                    Case 1                               'FPS
                        cmbTemperatureUnits.Items.Add("°F")
                        cmbTemperatureUnits.Items.Add("°R")

                        Me.cmbPressureUnits.Items.Add("psiA")
                        Me.cmbPressureUnits.Items.Add("psig")
                        Me.cmbPressureUnits.Items.Add("lb/ft2A")
                        Me.cmbPressureUnits.Items.Add("lb/ft2g")


                        Me.cmbAirPressureUnits.Items.Add("psiA")
                        Me.cmbAirPressureUnits.Items.Add("psig")
                        Me.cmbAirPressureUnits.Items.Add("lb/ft2A")
                        Me.cmbAirPressureUnits.Items.Add("lb/ft2g")


                        Me.cmbVapourPressureUnits.Items.Add("psiA")
                        Me.cmbVapourPressureUnits.Items.Add("psig")
                        Me.cmbVapourPressureUnits.Items.Add("lb/ft2A")
                        Me.cmbVapourPressureUnits.Items.Add("lb/ft2g")


                        Me.cmbCriticalPressureUnits.Items.Add("psiA")
                        Me.cmbCriticalPressureUnits.Items.Add("psig")
                        Me.cmbCriticalPressureUnits.Items.Add("lb/ft2A")
                        Me.cmbCriticalPressureUnits.Items.Add("lb/ft2g")


                        If cmbFluidType.Text = "InCompressible" Then
                            Me.cmbDensityUnits.Items.Add("Sp.Gravity")
                        End If
                        Me.cmbDensityUnits.Items.Add("lb/ft3")
                        Me.cmbDensityUnits.Items.Add("lb/in3")
                        Me.cmbDensityUnits.Items.Add("lb/gal(US)")
                        Me.cmbDensityUnits.Items.Add("lb/gal(UK)")


                        Me.cmbViscosityUnits.Items.Add("ft2/s")
                        Me.cmbViscosityUnits.Items.Add("lbfs/ft2")
                        Me.cmbViscosityUnits.Items.Add("lbfh/ft2")

                        lblVelocityunit.Text = "ft/s"

                        If cmbFluidType.Text = "InCompressible" Then
                            cmbVelocityRule.Items.Add("20 ft/s")
                            cmbVelocityRule.Items.Add("25 ft/s")
                        Else
                            cmbVelocityRule.Items.Add("0.3")
                            cmbVelocityRule.Items.Add("0.4")
                        End If


                        lblCalculatedCV.Visible = True
                        lblApproxCVCase1.Visible = True
                        lblApproxCVCase2.Visible = True
                        lblApproxCVCase3.Visible = True

                        lblCorrectedCV.Visible = True
                        lblFinalCVCase1.Visible = True
                        lblFinalCVCase2.Visible = True
                        lblFinalCVCase3.Visible = True
                        lblBaffleCv.Visible = True

                        'lblCvMax.Visible = True
                        lblCvSelected.Visible = True
                        lblCVSugg.Visible = True
                        lblSelectedCV.Visible = True

                        lblCalculatedKV.Visible = False
                        lblKVCase1.Visible = False
                        lblKVCase2.Visible = False
                        lblKVCase2.Visible = False

                        lblCorrectedKV.Visible = False
                        lblFinalKVCase1.Visible = False
                        lblFinalKvCase2.Visible = False
                        lblFinalKVcase3.Visible = False

                        'lblKvMax.Visible = False
                        lblKvSugg.Visible = False
                        lblKvSelected.Visible = False
                        lblSelectedKV.Visible = False
                        cmbAreaunits.SelectedIndex = 1
                        lblSeatDiaUnits.Text = "inch"
                        lblBaffleKV.Visible = False
                        lblFlowWaterUnit.Text = "lb/hr"

                    Case 2                              'All
                        cmbTemperatureUnits.Items.Add("°C")
                        cmbTemperatureUnits.Items.Add("°K")
                        cmbTemperatureUnits.Items.Add("°F")
                        cmbTemperatureUnits.Items.Add("°R")

                        Me.cmbPressureUnits.Items.Add("barA")
                        Me.cmbPressureUnits.Items.Add("barg")
                        Me.cmbPressureUnits.Items.Add("kg/cm2A")
                        Me.cmbPressureUnits.Items.Add("kg/cm2g")
                        Me.cmbPressureUnits.Items.Add("Pascal")
                        Me.cmbPressureUnits.Items.Add("lb/ft2A")
                        Me.cmbPressureUnits.Items.Add("lb/ft2g")
                        Me.cmbPressureUnits.Items.Add("psiA")
                        Me.cmbPressureUnits.Items.Add("psig")
                        Me.cmbPressureUnits.Items.Add("kPaA")
                        Me.cmbPressureUnits.Items.Add("kPag")
                        Me.cmbPressureUnits.Items.Add("MPaA")
                        Me.cmbPressureUnits.Items.Add("MPag")

                        Me.cmbAirPressureUnits.Items.Add("barA")
                        Me.cmbAirPressureUnits.Items.Add("barg")
                        Me.cmbAirPressureUnits.Items.Add("kg/cm2A")
                        Me.cmbAirPressureUnits.Items.Add("kg/cm2g")
                        Me.cmbAirPressureUnits.Items.Add("Pascal")
                        Me.cmbAirPressureUnits.Items.Add("lb/ft2A")
                        Me.cmbAirPressureUnits.Items.Add("lb/ft2g")
                        Me.cmbAirPressureUnits.Items.Add("psiA")
                        Me.cmbAirPressureUnits.Items.Add("psig")
                        Me.cmbAirPressureUnits.Items.Add("kPaA")
                        Me.cmbAirPressureUnits.Items.Add("kPag")
                        Me.cmbAirPressureUnits.Items.Add("MPaA")
                        Me.cmbAirPressureUnits.Items.Add("MPag")


                        Me.cmbVapourPressureUnits.Items.Add("barA")
                        Me.cmbVapourPressureUnits.Items.Add("barg")
                        Me.cmbVapourPressureUnits.Items.Add("kg/cm2A")
                        Me.cmbVapourPressureUnits.Items.Add("kg/cm2g")
                        Me.cmbVapourPressureUnits.Items.Add("Pascal")
                        Me.cmbVapourPressureUnits.Items.Add("lb/ft2A")
                        Me.cmbVapourPressureUnits.Items.Add("lb/ft2g")
                        Me.cmbVapourPressureUnits.Items.Add("psiA")
                        Me.cmbVapourPressureUnits.Items.Add("psig")
                        Me.cmbVapourPressureUnits.Items.Add("kPaA")
                        Me.cmbVapourPressureUnits.Items.Add("kPag")
                        Me.cmbVapourPressureUnits.Items.Add("MPaA")
                        Me.cmbVapourPressureUnits.Items.Add("MPag")


                        Me.cmbCriticalPressureUnits.Items.Add("barA")
                        Me.cmbCriticalPressureUnits.Items.Add("barg")
                        Me.cmbCriticalPressureUnits.Items.Add("kg/cm2A")
                        Me.cmbCriticalPressureUnits.Items.Add("kg/cm2g")
                        Me.cmbCriticalPressureUnits.Items.Add("Pascal")
                        Me.cmbCriticalPressureUnits.Items.Add("lb/ft2A")
                        Me.cmbCriticalPressureUnits.Items.Add("lb/ft2g")
                        Me.cmbCriticalPressureUnits.Items.Add("psiA")
                        Me.cmbCriticalPressureUnits.Items.Add("psig")
                        Me.cmbCriticalPressureUnits.Items.Add("kPaA")
                        Me.cmbCriticalPressureUnits.Items.Add("kPag")
                        Me.cmbCriticalPressureUnits.Items.Add("MPaA")
                        Me.cmbCriticalPressureUnits.Items.Add("MPag")

                        If cmbFluidType.Text = "InCompressible" Then
                            Me.cmbDensityUnits.Items.Add("Sp.Gravity")
                        End If
                        Me.cmbDensityUnits.Items.Add("kg/m3")
                        Me.cmbDensityUnits.Items.Add("kg/l")
                        Me.cmbDensityUnits.Items.Add("g/cm3")
                        Me.cmbDensityUnits.Items.Add("grain/ft3")
                        Me.cmbDensityUnits.Items.Add("lb/ft3")
                        Me.cmbDensityUnits.Items.Add("lb/in3")
                        Me.cmbDensityUnits.Items.Add("lb/gal(US)")
                        Me.cmbDensityUnits.Items.Add("lb/gal(UK)")
                        Me.cmbDensityUnits.Items.Add("oz/in3")
                        Me.cmbDensityUnits.Items.Add("oz/gal(US)")
                        Me.cmbDensityUnits.Items.Add("oz/gal(UK)")

                        Me.cmbDensityUnits.Items.Add("Slug/ft3")
                        'Me.cmbDensityUnits.Items.Add("tonl/yd3")
                        'Me.cmbDensityUnits.Items.Add("tons/yd3")

                        If cmbFluidType.Text = "Compressible" Then
                            Me.cmbDensityUnits.Items.Add("kg/m3(0°C)")
                            Me.cmbDensityUnits.Items.Add("kg/m3(15°C)")
                        End If

                        Me.cmbViscosityUnits.Items.Add("m2/s")
                        Me.cmbViscosityUnits.Items.Add("mPa s")
                        Me.cmbViscosityUnits.Items.Add("cP")
                        Me.cmbViscosityUnits.Items.Add("cSt")
                        Me.cmbViscosityUnits.Items.Add("lbfs/ft2")
                        Me.cmbViscosityUnits.Items.Add("lbfh/ft2")
                        Me.cmbViscosityUnits.Items.Add("ft2/s")

                        lblVelocityunit.Text = "m/s"

                        If cmbFluidType.Text = "InCompressible" Then
                            cmbVelocityRule.Items.Add("6 m/s")
                            cmbVelocityRule.Items.Add("8 m/s")
                        Else
                            cmbVelocityRule.Items.Add("0.3")
                            cmbVelocityRule.Items.Add("0.4")
                        End If





                        lblCalculatedCV.Visible = False
                        lblApproxCVCase1.Visible = False
                        lblApproxCVCase2.Visible = False
                        lblApproxCVCase3.Visible = False

                        lblCorrectedCV.Visible = False
                        lblFinalCVCase1.Visible = False
                        lblFinalCVCase2.Visible = False
                        lblFinalCVCase3.Visible = False

                        'lblCvMax.Visible = False
                        lblCvSelected.Visible = False
                        lblCVSugg.Visible = False
                        lblSelectedCV.Visible = False

                        lblCalculatedKV.Visible = True
                        lblKVCase1.Visible = True
                        lblKVCase2.Visible = True
                        lblKVCase2.Visible = True

                        lblCorrectedKV.Visible = True
                        lblFinalKVCase1.Visible = True
                        lblFinalKvCase2.Visible = True
                        lblFinalKVcase3.Visible = True

                        'lblKvMax.Visible = True
                        lblKvSugg.Visible = True
                        lblKvSelected.Visible = True
                        lblSelectedKV.Visible = True
                        cmbAreaunits.SelectedIndex = 0
                        lblSeatDiaUnits.Text = "mm"
                        lblBaffleKV.Visible = True

                        lblFlowWaterUnit.Text = "kg/hr"

                End Select

                cmbTemperatureUnits.SelectedIndex = 0
                cmbTemperatureUnits.Text = cmbTemperatureUnits.SelectedItem
                lblDesignTemperature.Text = cmbTemperatureUnits.Text                 'changes 22102020
                lblTwUnit.Text = cmbTemperatureUnits.Text

                cmbPressureUnits.SelectedIndex = 0
                cmbPressureUnits.Text = cmbPressureUnits.SelectedItem
                lblDesignPressure.Text = cmbPressureUnits.Text                              'changes 22102020
                lblDPShutoffUnits.Text = cmbPressureUnits.Text
                lblPwUnits.Text = cmbPressureUnits.Text

                cmbPressureUnits.SelectedItem = cmbPressureUnits.Text

                cmbAirPressureUnits.SelectedIndex = 1
                cmbAirPressureUnits.Text = cmbAirPressureUnits.SelectedItem

                cmbVapourPressureUnits.SelectedIndex = 0
                cmbVapourPressureUnits.Text = cmbVapourPressureUnits.SelectedItem

                cmbCriticalPressureUnits.SelectedIndex = 0
                cmbCriticalPressureUnits.Text = cmbCriticalPressureUnits.SelectedItem

                cmbDensityUnits.SelectedIndex = 0
                cmbDensityUnits.Text = cmbDensityUnits.SelectedItem


                cmbViscosityUnits.SelectedIndex = 0
                cmbViscosityUnits.Text = cmbViscosityUnits.SelectedItem

            End If
            If Not LoadingProjectFile = True Then Call SelectFlowUnits()
        Catch ex As Exception
            MsgBox("cmbUnitsType :  " & ex.Message)
        End Try
        Return Nothing

    End Function

    Private Sub cmbUnitsType_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbUnitsType.SelectionChangeCommitted
        '  Call ChangeUnitsType()
        ResetFlowarateIndex = True
    End Sub


    Private Sub cmbUnitsType_TextChanged(sender As Object, e As EventArgs) Handles cmbUnitsType.TextChanged
        Call ChangeUnitsType(True)

    End Sub


    Private Sub txtAirPressure_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtAirPressure.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                MsgBox("Please enter integers only")
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("AirPressure KeyPress:    " & ex.Message)
        End Try
    End Sub

    Private Sub cmbBalancing_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbBalancing.KeyPress, cmbViscosityUnits.KeyPress
        e.Handled = True
    End Sub


    Private Sub cmbBalancing_Validated(sender As Object, e As EventArgs) Handles cmbBalancing.Validated
        If LoadingForm = True Then
            If (sender Is cmbBalancing And FinalValveSize <= 2.5 And Not FinalValveSize = 0 And Not cmbBalancing.SelectedIndex = 0) Then
                ' MsgBox("Valve size below 2.5 inch use Non-Pressure Balance Option ONLY")
                cmbBalancing.SelectedIndex = 0
                ' cmbBalancing.Focus()
            End If
            If (sender Is cmbBalancing And cmbModel.SelectedIndex > 1 And Not cmbBalancing.SelectedIndex = 0) Then ' or If 3 way selected
                cmbBalancing.SelectedIndex = 0
                ' cmbBalancing.Focus()
            End If
        End If
    End Sub



    Private Sub cmbActuatorType_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbActuatorType.KeyPress, cmbInletPipeSchedule.KeyPress, cmbInletPipeSize.KeyPress, cmbKVseries.KeyPress, cmbLeakage.KeyPress, cmbUnitsType.KeyPress, cmbValveSizeOverride.KeyPress, cmbVapourPressureUnits.KeyPress, cmbVelocityRule.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbSelectActuator_Click(sender As Object, e As EventArgs) Handles cmbSelectActuator.Click
        cmbSelectActuator.BackColor = Color.White
    End Sub



    Private Sub cmbAirFailure_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbAirFailure.KeyPress, cmbMOC.KeyPress, cmbModel.KeyPress, cmbPacking.KeyPress, cmbPipeDia.KeyPress, cmbPressureUnits.KeyPress, cmbQW.KeyPress, cmbSchedule.KeyPress, cmbSealing.KeyPress, cmbSelectActuator.KeyPress, cmbSuggestedRating.KeyPress, cmbTemperatureUnits.KeyPress
        e.Handled = True
    End Sub

   

    Private Sub txtAirPressure_Validated(sender As Object, e As EventArgs) Handles txtDPShutoff.Validated, txtAirPressure.Validated, cmbActuatorType.TextChanged, cmbBalancing.TextChanged, cmbAirFailure.TextChanged, cmbPacking.TextChanged, cmbSealing.TextChanged, cmbSeatDia.SelectionChangeCommitted
        Dim count As Byte

        Try
            If LoadingForm = True Then
                If LoadingProjectFile = False Then
                    If sender Is cmbBalancing And Not cmbBalancing.SelectedIndex = -1 Then
                        If FinalValveSize <= 2.5 And Not FinalValveSize = 0 And Not cmbBalancing.SelectedIndex = 0 Then
                            'MsgBox("Valve size below 2.5 inch use Non-Pressure Balance Option ONLY")
                            txtErrors.Text = "Valve size below 2.5 inch use Non-Pressure Balance Option ONLY"
                            cmbBalancing.SelectedIndex = 0
                        Else
                            txtErrors.Text = ""
                        End If
                        cmbSeatDia.Items.Clear()

                        If Not cmbBalancing.SelectedIndex = 0 Then
                            'lblSeatDia.Text = PrBl_SeatDia
                            If cmbSelectedTrim.SelectedIndex > 1 Then   ' For Multistage  
                                If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                    cmbSeatDia.Items.Add(PrBl_SeatDia_array(0))
                                Else        'FPS
                                    cmbSeatDia.Items.Add(Math.Round((PrBl_SeatDia_array(0) / 25.4), 1))
                                End If

                            Else
                                If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                    cmbSeatDia.Items.Add(PrBl_SeatDia)
                                Else        'FPS
                                    cmbSeatDia.Items.Add(Math.Round((PrBl_SeatDia / 25.4), 1))
                                End If

                            End If
                            SeatDia = PrBl_SeatDia          ' For Actuator Calculations
                            cmbSeatDia.SelectedIndex = 0
                            cmbLeakage.Items.Clear()
                            cmbLeakage.Items.Add("CLASS IV")
                            cmbLeakage.SelectedIndex = 0

                        Else

                            'lblSeatDia.Text = SeatDia

                            If cmbSelectedTrim.SelectedIndex > 1 Then   ' For Multistage  
                                For count = 0 To SeatDia_array.Length - 1
                                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                        cmbSeatDia.Items.Add(SeatDia_array(count))
                                    Else        'FPS
                                        cmbSeatDia.Items.Add(Math.Round((SeatDia_array(count) / 25.4), 1))
                                    End If
                                Next
                            Else
                                If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                    cmbSeatDia.Items.Add(SeatDia)
                                Else        'FPS
                                    cmbSeatDia.Items.Add(Math.Round((SeatDia / 25.4), 1))
                                End If

                            End If
                            cmbSeatDia.SelectedIndex = 0

                            cmbLeakage.Items.Clear()
                            cmbLeakage.Items.Add("CLASS IV")
                            cmbLeakage.Items.Add("CLASS V")
                            cmbLeakage.Items.Add("CLASS VI")
                            cmbLeakage.SelectedIndex = 0
                        End If
                        ' Now find Model type
                        Call FindValveModel()
                    End If
                    If sender Is cmbSeatDia Then
                        cmbSeatDia.Text = cmbSeatDia.SelectedItem
                    End If
                    If sender Is txtDPShutoff Then
                        If txtDPShutoff.Text = "" Then
                            DPShutoff = 0
                        Else
                            If CSng(txtDPShutoff.Text) < MaxPressure Then
                                txtDPShutoff.Text = txtDesignPressureInlet.Text
                            End If
                            convertPressure(txtDPShutoff, DPShutoff, cmbPressureUnits)
                            DPShutoff = (DPShutoff - 1.013) * 1.019716213
                        End If

                    End If
                    If sender Is cmbActuatorType Then
                        If frmAccessories.cmbRobotor.SelectedIndex > 0 And cmbActuatorType.SelectedIndex = 1 Then
                            cmbActuatorType.SelectedIndex = 0
                        End If
                    End If
                    If Not txtAirPressure.Text = "" And Not cmbAirPressureUnits.SelectedIndex = -1 Then
                        convertPressure(txtAirPressure, SupplyAirPressure, cmbAirPressureUnits)
                        SupplyAirPressure = (SupplyAirPressure - 1.013) * 1.019716213
                        If txtDPShutoff.Text = "" Then
                            DPShutoff = 0
                        Else
                            If CSng(txtDPShutoff.Text) < MaxPressure Then
                                txtDPShutoff.Text = txtDesignPressureInlet.Text
                            End If
                            convertPressure(txtDPShutoff, DPShutoff, cmbPressureUnits)
                            DPShutoff = (DPShutoff - 1.013) * 1.019716213
                        End If
                        Call ValveActuator()
                    Else
                        txtSuggActuator.Text = ""
                    End If
                End If
            End If

        Catch ex As Exception
            MsgBox("AirPressureValidation:   " & ex.Message)
        End Try

    End Sub


    Private Sub cmbLeakage_Validating(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles cmbLeakage.Validating
        If cmbLeakage.Text = "Class VI" Then
            If cmbModel.SelectedIndex > 1 Then    'If 3 way model
                ToolTip1.Show("Leakage Class VI not available 3 way Models", cmbLeakage, 10)
                ToolTip1.Show("Leakage Class VI not available 3 way Models", cmbLeakage, 3000)
                cmbLeakage.Focus()
            End If
            If FinalDesignTemperatureInlet > 200 Then
                If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                    'MsgBox("Leakage Class VI not available for Temperature above 200°C")
                    ToolTip1.Show("Leakage Class VI not available for Temperature above 200°C", cmbLeakage, 2)
                    ToolTip1.Show("Leakage Class VI not available for Temperature above 200°C", cmbLeakage, 2000)
                Else
                    '     MsgBox("Leakage Class VI not available for Temperature above 392°F")
                    ToolTip1.Show("Leakage Class VI not available for Temperature above 392°F", cmbLeakage, 2)
                    ToolTip1.Show("Leakage Class VI not available for Temperature above 392°F", cmbLeakage, 2000)
                End If
                cmbLeakage.Focus()

            End If
        End If
    End Sub
    Private Sub cmbLeakage_TextChanged(sender As Object, e As EventArgs) Handles cmbLeakage.TextChanged
        Try
            If LoadingForm = True Then
                If LoadingProjectFile = False Then

                    If cmbLeakage.Text = "CLASS VI" Then
                        If cmbModel.SelectedIndex > 1 Then    'If 3 way model
                            ToolTip1.Show("Leakage Class VI not available 3 way Models", cmbLeakage, 2)
                            ToolTip1.Show("Leakage Class VI not available 3 way Models", cmbLeakage, 2000)
                            cmbLeakage.Focus()
                            Exit Sub
                        Else
                            cmbSealing.Items.Clear()
                            cmbSealing.Items.Add("PTFE/EPDM 140Grd")
                            cmbSealing.Items.Add("PTFE/VITON 180Grd")
                            'cmbSealing.Items.Add("PTFE-Trapez 200Grd")
                            'cmbSealing.Items.Add("PEEK 250Grd")
                            'cmbSealing.Items.Add("PEEK/plug")
                            cmbSealing.SelectedIndex = 0
                        End If
                    Else
                        cmbSealing.Items.Clear()
                        cmbSealing.Items.Add("Metal")
                        cmbSealing.Text = "Metal"
                        cmbSealing.SelectedIndex = cmbSealing.FindString("Metal")
                    End If
                    If cmbLeakage.Text = "CLASS VI" Or cmbLeakage.Text = "CLASS V" Then

                        cmbBalancing.Text = "Non Pr.Bal"
                        cmbBalancing.SelectedIndex = cmbBalancing.FindString(cmbBalancing.Text)
                    End If
                End If
            End If
            ' Now find Model type
            Call FindValveModel()
        Catch ex As Exception
            MsgBox("cmbLeakage_TextChanged :  " & ex.Message)
        End Try
    End Sub

    Private Sub txtDPShutoff_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtDPShutoff.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("txtDPShutoff Keypress:  " & ex.Message)
        End Try

    End Sub


    Private Sub btnAcceptActuator_Click(sender As Object, e As EventArgs)
        Try
            FinalActuator = Actuator
            lblFinalActuator.Text = FinalActuator
            cmbSelectActuator.Text = FinalActuator
            cmbSelectActuator.SelectedIndex = cmbSelectActuator.FindString(FinalActuator)
        Catch ex As Exception
            MsgBox("btnAcceptActuator_Click : " & ex.Message, , "")
        End Try

    End Sub

    Private Sub cmbSelectActuator_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbSelectActuator.SelectionChangeCommitted
        Try
            If LoadingForm = True Then
                If LoadingProjectFile = False Then
                    cmbSelectActuator.Text = cmbSelectActuator.SelectedItem
                    FinalActuator = cmbSelectActuator.Text
                    lblFinalActuator.Text = FinalActuator
                    If Not cmbSelectActuator.SelectedIndex < 0 Then InitialSpringRange = Spring_Initial(cmbSelectActuator.SelectedIndex)
                    If Not cmbSelectActuator.SelectedIndex < 0 Then FinalSpringRange = Spring_Final(cmbSelectActuator.SelectedIndex)
                    If Not cmbSelectActuator.SelectedIndex < 0 Then MKSInitialSpringRange = MKSSpring_Initial(cmbSelectActuator.SelectedIndex)
                    If Not cmbSelectActuator.SelectedIndex < 0 Then MKSFinalSpringRange = MKSSpring_Final(cmbSelectActuator.SelectedIndex)
                    If Not cmbSelectActuator.SelectedIndex < 0 Then
                        If cmbAirFailure.SelectedIndex = 1 Then       ' ATO
                            lblSel0PercF.Text = CStr(Math.Round(F_SpringThrust(cmbSelectActuator.SelectedIndex), 0))
                            lblSel100PerF.Text = CStr(Math.Round(F_AirThrust(cmbSelectActuator.SelectedIndex), 0))
                        Else
                            lblSel0PercF.Text = CStr(Math.Round(F_AirThrust(cmbSelectActuator.SelectedIndex), 0))
                            lblSel100PerF.Text = CStr(Math.Round(F_SpringThrust(cmbSelectActuator.SelectedIndex), 0))
                        End If
                        DT_ActuatorSelect.Rows(2).Item(2) = CSng(lblSel0PercF.Text)
                        DT_ActuatorSelect.Rows(2).Item(3) = CSng(lblSel100PerF.Text)

                        If DT_ActuatorSelect.Rows(2).Item(2) < DT_ActuatorSelect.Rows(1).Item(2) Then
                            lblSel0PercF.ForeColor = Color.Red
                        Else
                            lblSel0PercF.ForeColor = Color.Green
                        End If
                        If DT_ActuatorSelect.Rows(2).Item(3) < DT_ActuatorSelect.Rows(1).Item(3) Then
                            lblSel100PerF.ForeColor = Color.Red
                        Else
                            lblSel100PerF.ForeColor = Color.Green
                        End If
                    End If

                    ' If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                    '    lblSelForce.Text = Math.Round(F_AirThrust(cmbSelectActuator.SelectedIndex), 0)          'only for sceen display
                    '  Else
                    '  lblSelForce.Text = Math.Round(F_AirThrust(cmbSelectActuator.SelectedIndex) * 2.2, 0)         'only for sceen display
                    '  End If


                    DT_ActuatorSelect.Rows(2).Item(1) = FinalActuator
                    DT_ActuatorInfo.Rows(11).Item(1) = FinalActuator

                End If
            End If

        Catch ex As Exception
            MsgBox("cmbSelectActuator_TextChanged : " & ex.Message, , "")
        End Try

    End Sub


   

    Public Function showNoise()
        Dim temp_KVAttenuatedCase1, temp_KVAttenuatedCase2, temp_KVAttenuatedCase3 As Single
        Try
            If LoadingProjectFile = False Then
                If LoadingForm = True Then
                    If chkInsulation.Checked = True Then
                        tempNoiseCase1 = Math.Round((DT_NoiseAttenuation.Rows(4).Item(0) - NoiseInsulation), 1)
                        tempNoiseCase2 = Math.Round((DT_NoiseAttenuation.Rows(4).Item(1) - NoiseInsulation), 1)
                        tempNoiseCase3 = Math.Round((DT_NoiseAttenuation.Rows(4).Item(2) - NoiseInsulation), 1)
                    Else
                        tempNoiseCase1 = Math.Round(DT_NoiseAttenuation.Rows(4).Item(0), 1)
                        tempNoiseCase2 = Math.Round(DT_NoiseAttenuation.Rows(4).Item(1), 1)
                        tempNoiseCase3 = Math.Round(DT_NoiseAttenuation.Rows(4).Item(2), 1)
                    End If
                    If tempNoiseCase1 < 5 Then
                        tempNoiseCase1 = 5
                    End If
                    If tempNoiseCase2 < 5 Then
                        tempNoiseCase2 = 5
                    End If
                    If tempNoiseCase3 < 5 Then
                        tempNoiseCase3 = 5
                    End If
                    If FinalPressureDropCase1 > 0 Then lblNoiseCase1.Text = Math.Round(tempNoiseCase1, 1) Else lblNoiseCase1.Text = ""
                    If FinalPressureDropCase2 > 0 Then lblNoiseCase2.Text = Math.Round(tempNoiseCase2, 1) Else lblNoiseCase2.Text = ""
                    If FinalPressureDropCase3 > 0 Then lblNoiseCase3.Text = Math.Round(tempNoiseCase3, 1) Else lblNoiseCase3.Text = ""


                    If chkNoiseAttenuation.Checked = True Or chkBaffleCase1.Checked = True Then     'Check Only baffle1 as 2 and 3 1 should be present.
                        tempAttenuationNoiseCase1 = AttneuatedNoiseLevelCase1
                        tempAttenuationNoiseCase2 = AttneuatedNoiseLevelCase2
                        tempAttenuationNoiseCase3 = AttneuatedNoiseLevelCase3


                        If chkInsulation.Checked = True Then
                            tempAttenuationNoiseCase1 = Math.Round((tempAttenuationNoiseCase1 - NoiseInsulation), 1)
                            tempAttenuationNoiseCase2 = Math.Round((tempAttenuationNoiseCase2 - NoiseInsulation), 1)
                            tempAttenuationNoiseCase3 = Math.Round((tempAttenuationNoiseCase3 - NoiseInsulation), 1)
                        Else
                            tempAttenuationNoiseCase1 = Math.Round(tempAttenuationNoiseCase1, 1)
                            tempAttenuationNoiseCase2 = Math.Round(tempAttenuationNoiseCase2, 1)
                            tempAttenuationNoiseCase3 = Math.Round(tempAttenuationNoiseCase3, 1)
                        End If

                        If tempAttenuationNoiseCase1 < 5 Then
                            tempAttenuationNoiseCase1 = 5
                        End If
                        If tempAttenuationNoiseCase2 < 5 Then
                            tempAttenuationNoiseCase2 = 5
                        End If
                        If tempAttenuationNoiseCase3 < 5 Then
                            tempAttenuationNoiseCase3 = 5
                        End If

                        If Case1Present = True Then lblAttenuatedNoiseCase1.Text = Math.Round(tempAttenuationNoiseCase1, 1) Else lblAttenuatedNoiseCase1.Text = ""
                        If Case2Present = True Then lblAttenuatedNoiseCase2.Text = Math.Round(tempAttenuationNoiseCase2, 1) Else lblAttenuatedNoiseCase2.Text = ""
                        If Case3Present = True Then lblAttenuatedNoiseCase3.Text = Math.Round(tempAttenuationNoiseCase3, 1) Else lblAttenuatedNoiseCase3.Text = ""

                        If cmbFluidType.Text = "Compressible" Then
                            KVAttenuatedCase1 = FinalKVCase1
                            KVAttenuatedCase2 = FinalKVCase2
                            KVAttenuatedCase3 = FinalKVCase3

                        End If
                        'Now recalculate Kv from the changed kv because of noise. Avoiding Divide/0 so if loops.
                        If Case1Present = True Then
                            If FinalKVCase1 <> 0 Then
                                'temp_KVAttenuatedCase1 = Math.Pow(KVAttenuatedCase1, -2)
                                'If KvforCage <> 0 Then
                                '    temp_KVAttenuatedCase1 = temp_KVAttenuatedCase1 + Math.Pow(KvforCage, -2)
                                'End If
                                'If BaffleKVCase1 <> 0 Then
                                '    temp_KVAttenuatedCase1 = temp_KVAttenuatedCase1 + Math.Pow(BaffleKVCase1, -2)
                                '    If BaffleKVCase2 <> 0 Then
                                '        temp_KVAttenuatedCase1 = temp_KVAttenuatedCase1 + Math.Pow(BaffleKVCase2, -2)
                                '        If BaffleKVCase3 <> 0 Then
                                '            temp_KVAttenuatedCase1 = temp_KVAttenuatedCase1 + Math.Pow(BaffleKVCase3, -2)
                                '        End If
                                '    End If
                                'End If
                                'If temp_KVAttenuatedCase1 <> 0 Then
                                '    temp_KVAttenuatedCase1 = Math.Sqrt(1 / temp_KVAttenuatedCase1)
                                'End If
                                lblFinalCVCase1.Text = Math.Round((KVAttenuatedCase1 * 1.17), 2)
                                lblFinalKVCase1.Text = Math.Round(KVAttenuatedCase1, 2)
                            Else
                                lblFinalCVCase1.Text = ""
                                lblFinalKVCase1.Text = ""
                            End If
                        End If
                        If Case2Present = True Then
                            If FinalKVCase2 <> 0 Then
                                lblFinalCVCase2.Text = Math.Round((KVAttenuatedCase2 * 1.17), 2)
                                lblFinalKvCase2.Text = Math.Round(KVAttenuatedCase2, 2)
                            Else
                                lblFinalCVCase2.Text = ""
                                lblFinalKvCase2.Text = ""
                            End If
                        End If
                        If Case3Present = True Then
                            If FinalKVCase3 <> 0 Then
                                lblFinalCVCase3.Text = Math.Round((KVAttenuatedCase3 * 1.17), 2)
                                lblFinalKVcase3.Text = Math.Round(KVAttenuatedCase3, 2)
                            Else
                                lblFinalCVCase3.Text = ""
                                lblFinalKVcase3.Text = ""
                            End If
                        End If
                        '  Call CheckforPerforation(KVAttenuatedCase1, KVAttenuatedCase2, KVAttenuatedCase3)
                    Else
                        lblAttenuatedNoiseCase1.Text = ""
                        lblAttenuatedNoiseCase2.Text = ""
                        lblAttenuatedNoiseCase3.Text = ""

                        If Case1Present = True Then
                            If FinalKVCase1 <> 0 Then
                                lblFinalCVCase1.Text = Math.Round((FinalKVCase1 * 1.17), 2)
                                lblFinalKVCase1.Text = Math.Round(FinalKVCase1, 2)
                            Else
                                lblFinalCVCase1.Text = ""
                                lblFinalKVCase1.Text = ""
                            End If
                        End If
                        If Case2Present = True Then
                            If FinalKVCase2 <> 0 Then
                                lblFinalCVCase2.Text = Math.Round((FinalKVCase2 * 1.17), 2)
                                lblFinalKvCase2.Text = Math.Round(FinalKVCase2, 2)
                            Else
                                lblFinalCVCase2.Text = ""
                                lblFinalKvCase2.Text = ""
                            End If

                        End If
                        If Case3Present = True Then
                            If FinalKVCase3 <> 0 Then
                                lblFinalCVCase3.Text = Math.Round((FinalKVCase3 * 1.17), 2)
                                lblFinalKVcase3.Text = Math.Round(FinalKVCase3, 2)
                            Else
                                lblFinalCVCase3.Text = ""
                                lblFinalKVcase3.Text = ""
                            End If
                        End If
                    End If
                End If
            End If

        Catch ex As Exception
            MsgBox("ShowNoise:  " & ex.Message)
        End Try

        Return Nothing

    End Function


    Private Sub chkInsulation_CheckedChanged(sender As Object, e As EventArgs) Handles chkInsulation.CheckedChanged
        Try
            If chkInsulation.Checked = True Then
                NoiseInsulation = 12    '' Default Noise dB for 4 inch thickness
                lblInsulationMessage.Visible = True
                lblInsulationMessage.Text = "Insulation Thickness of 4 inch"
            Else
                NoiseInsulation = 0
                lblInsulationMessage.Visible = False
                lblInsulationMessage.Text = ""
            End If
            showNoise()
        Catch ex As Exception
            MsgBox("chkInsulation_CheckedChanged : " & ex.Message, , "")
        End Try

    End Sub

    Private Sub cmbAirPressureUnits_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbAirPressureUnits.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbAirPressureUnits_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbAirPressureUnits.SelectedIndexChanged
        Try
            If LoadingForm = True Then
                If Not txtAirPressure.Text = "" Then
                    Call convertPressure(txtAirPressure, SupplyAirPressure, cmbAirPressureUnits)
                    SupplyAirPressure = (SupplyAirPressure - 1.013) * 1.019716213
                    Call ValveActuator()
                End If
            End If
        Catch ex As Exception
            MsgBox(" cmbAirPressureUnits_SelectedIndexChanged: " & ex.Message)
        End Try

    End Sub

    Private Sub cmbBonnetType_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbBonnetType.KeyPress
        e.Handled = True
    End Sub


    Private Sub cmbBonnetType_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbBonnetType.SelectedIndexChanged
        If cmbBonnetType.Text = "STD." And FinalDesignTemperatureInlet > 300 Then
            'MsgBox("Above 200 deg C Ext Top recommended")
            If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                ToolTip1.Show("Above 300°C Ext Top recommended", cmbBonnetType, 2)
                ToolTip1.Show("Above 300°C Ext Top recommended", cmbBonnetType, 2000)
            Else
                ToolTip1.Show("Above 572°F Ext Top recommended", cmbBonnetType, 2)
                ToolTip1.Show("Above 572°F Ext Top recommended", cmbBonnetType, 2000)
            End If

            cmbBonnetType.Text = "EXT."
            cmbBonnetType.SelectedIndex = cmbBonnetType.FindString("EXT.")

        End If
        BonnetType = cmbBonnetType.Text
        ' Now find Model type
        Call FindValveModel()
    End Sub

    Private Sub cmbEndConnection_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbEndConnection.SelectedIndexChanged
        EndConnection = cmbEndConnection.Text
    End Sub

    Private Sub cmbHandwheel_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbHandwheel.SelectedIndexChanged
        Handwheel = cmbHandwheel.Text
    End Sub

    'Private Sub txtDesignPressureInlet_TextChanged(sender As Object, e As EventArgs) Handles txtDesignPressureInlet.TextChanged
    '    Try

    '    Catch ex As Exception
    '        MsgBox("txtDesignPressureInlet_TextChanged: " & ex.Message)
    '    End Try

    'End Sub

    'Private Sub txtDesignTemperatureInlet_TextChanged(sender As Object, e As EventArgs) Handles txtDesignTemperatureInlet.TextChanged
    '    Try

    '    Catch ex As Exception
    '        MsgBox("txtDesignTemperatureInlet_TextChanged: " & ex.Message)
    '    End Try
    'End Sub

    'Public Function CheckforPerforation()
    '    Try




    'txtErrors.Text = ""
    'If cmbFluidType.Text = "InCompressible" Then
    '    If ((FinalFlowrateCase1 * 11.57407407) / KV1) > 40 And FinalPressureDropCase1 > 0 Then
    '        '  MsgBox("Minimum flow : Single stage parabolic trim is not suitable for high pressure drop.")
    '        txtErrors.Text = txtErrors.Text & vbNewLine & "Minimum flow : Single stage parabolic trim is not suitable for high pressure drop."
    '    End If
    '    If ((FinalFlowrateCase2 * 11.57407407) / KV2) > 40 And FinalPressureDropCase2 > 0 Then
    '        ' MsgBox("Average flow : Single stage parabolic trim is not suitable for high pressure drop.")
    '        txtErrors.Text = txtErrors.Text & vbNewLine & "Average flow : Single stage parabolic trim is not suitable for high pressure drop."
    '    End If
    '    If ((FinalFlowrateCase3 * 11.57407407) / KV3) > 40 And FinalPressureDropCase3 > 0 Then
    '        'MsgBox("Maximum flow : Single stage parabolic trim is not suitable for high pressure drop.")
    '        txtErrors.Text = txtErrors.Text & vbNewLine & "Maximum flow : Single stage parabolic trim is not suitable for high pressure drop."
    '    End If
    'Else
    '    If ((FlowrateForPipeDiaCalcCase1 * 11.57407407) / (KV1 * SoundVelocityCase1)) > 1 And FinalPressureDropCase1 > 0 Then
    '        'MsgBox("Minimum flow : Single stage parabolic trim is not suitable for high pressure drop.")
    '        txtErrors.Text = txtErrors.Text & vbNewLine & "Minimum flow : Single stage parabolic trim is not suitable for high pressure drop."
    '    End If
    '    If ((FlowrateForPipeDiaCalcCase2 * 11.57407407) / (KV2 * SoundVelocityCase2)) > 1 And FinalPressureDropCase2 > 0 Then
    '        ' MsgBox("Average flow : Single stage parabolic trim is not suitable for high pressure drop.")
    '        txtErrors.Text = txtErrors.Text & vbNewLine & "Average flow : Single stage parabolic trim is not suitable for high pressure drop."
    '    End If
    '    If ((FlowrateForPipeDiaCalcCase3 * 11.57407407) / (KV3 * SoundVelocityCase3)) > 1 And FinalPressureDropCase3 > 0 Then
    '        'MsgBox("Maximum flow : Single stage parabolic trim is not suitable for high pressure drop.")
    '        txtErrors.Text = txtErrors.Text & vbNewLine & "Maximum flow : Single stage parabolic trim is not suitable for high pressure drop."""
    '    End If



    '    Catch ex As Exception
    '        MsgBox("CheckforPerforation : " & ex.Message)
    '    End Try

    '    Return Nothing
    'End Function



    ''----------------------------------------------------------------------------------------------------------
    'Help Section
    ''------------------------------------------------------------------------------------------------------------

    Private Sub cmbValveSizeOverride_GotFocus(sender As Object, e As EventArgs) Handles cmbValveSizeOverride.GotFocus
        lblHelp.Text = ""

        lblHelp.Text = "Help : user can override the valve size with available sizes with respect to Kv/Cv shown in dropdown list. After Selection Press Tab for Results."
    End Sub
    Private Sub cmbValveSizeOverride_LostFocus(sender As Object, e As EventArgs) Handles cmbValveSizeOverride.LostFocus
        lblHelp.Text = ""
    End Sub

    Private Sub cmbFluidType_GotFocus(sender As Object, e As EventArgs) Handles cmbFluidType.GotFocus
        lblHelp.Text = ""
        lblHelp.Text = "Help : If fluid is water or liquid, select Incompressible. For steam and gas, select Compressible. Change in selection resets all the data including field parameters."
    End Sub
    Private Sub cmbFluidType_LostFocus(sender As Object, e As EventArgs) Handles cmbFluidType.LostFocus
        lblHelp.Text = "Help"
    End Sub
    Private Sub cmbUnitsType_GotFocus(sender As Object, e As EventArgs) Handles cmbUnitsType.GotFocus
        lblHelp.Text = "Help: Select Unit system based on availble service data units. For special units and different combinationsselect 'ALL' option "
    End Sub
    Private Sub cmbUnitsType_LostFocus(sender As Object, e As EventArgs) Handles cmbUnitsType.LostFocus
        lblHelp.Text = "Help"
    End Sub
    Private Sub cmbFluid_GotFocus(sender As Object, e As EventArgs) Handles cmbFluid.GotFocus
        lblHelp.Text = "Help : For Water and Steam, all fluid properties will be selected by software as per process condtions. For other liquids and gases user needs to enter fluid properties."
    End Sub

    Private Sub cmbModel_GotFocus(sender As Object, e As EventArgs) Handles cmbModel.GotFocus
        lblHelp.Text = "Help : FMValve for standard sizes and materials. "
    End Sub
    Private Sub cmbQW_GotFocus(sender As Object, e As EventArgs) Handles cmbQW.GotFocus
        lblHelp.Text = "Help : Select Flow type : Q for Volumetric, W for Mass Flow. The units will be available based on this selection. Use Tab for selecting next field."
    End Sub
    Private Sub cmbFlowrate_GotFocus(sender As Object, e As EventArgs) Handles cmbFlowrate.GotFocus, cmbPressureUnits.GotFocus, cmbTemperatureUnits.GotFocus, cmbDensityUnits.GotFocus, cmbViscosityUnits.GotFocus
        lblHelp.Text = "Help : Units available as per Units type and Flow type selected. For all Units select All option in Units type. Change in units will change selected Kv/Cv. Use Tab for selecting next field."
    End Sub
    Private Sub txtFlowrateCase1_GotFocus(sender As Object, e As EventArgs) Handles txtFlowrateCase1.GotFocus, txtFlowrateCase2.GotFocus, txtFlowrateCase3.GotFocus
        If sender Is txtFlowrateCase1 Then
            lblHelp.Text = "Help : Enter positive numeric value only. Flowrate should be minimum or less than average flowrate. Flowrate should be as per units selected. Use Tab for selecting next field and to find Calculated Kv/Cv. Data for all 3 cases needs to be entered. "
        ElseIf sender Is txtFlowrateCase2 Then
            lblHelp.Text = "Help : Enter positive numeric value only. Flowrate should average of all flowrates, greater than minimum and less than maximum. Flowrate should be as per units selected. Use Tab for selecting next field and to find Calculated Kv/Cv. Data for all 3 cases needs to be entered."
        Else
            lblHelp.Text = "Help : Enter positive numeric value only. Flowrate greater than average flowrate. Flowrate should be as per units selected. Use Tab for selecting next field and to find Calculated Kv/Cv. Data for all 3 cases needs to be entered."
        End If
    End Sub

    Private Sub txtInletPressureCase1_GotFocus(sender As Object, e As EventArgs) Handles txtInletPressureCase1.GotFocus, txtInletPressureCase2.GotFocus, txtInletPressureCase3.GotFocus, txtOutletPressure1.GotFocus, txtOutletPressure2.GotFocus, txtOutletPressure3.GotFocus
        lblHelp.Text = "Help : Enter positive numeric value only. Pressure should be as per units selected. Use Tab for selecting next field and to find Calculated Kv/Cv.Data for all 3 cases needs to be entered."
    End Sub
    Private Sub txtInletTemperatureCase1_GotFocus(sender As Object, e As EventArgs) Handles txtInletTemperatureCase1.GotFocus, txtInletTemperatureCase2.GotFocus, txtInletTemperatureCase2.GotFocus, txtInletTemperatureCase3.GotFocus
        lblHelp.Text = "Help : Enter positive numeric value only. Temperature should be as per units selected. Use Tab for selecting next field and to find Calculated Kv/Cv.Data for all 3 cases needs to be entered."
    End Sub

    Private Sub chkViscosity_GotFocus(sender As Object, e As EventArgs) Handles chkViscosity.GotFocus
        lblHelp.Text = "Help :  If Viscosity is checked the user needs to enter the Viscosity for other liquid and gas. The Corrected Kv/Cv depends on Viscosity."
    End Sub

    Private Sub chkMolecularWeight_GotFocus(sender As Object, e As EventArgs) Handles chkMolecularWeight.GotFocus
        lblHelp.Text = "Help : If Molecular Weight option is checked, user does not need to enter density. Use tab to enter Molecular Weight."
    End Sub
    Private Sub txtZ_Case1_GotFocus(sender As Object, e As EventArgs) Handles txtZ_Case1.GotFocus, txtZ_Case2.GotFocus, txtZ_Case3.GotFocus, txtK_Case1.GotFocus, txtK_Case2.GotFocus, txtK_Case3.GotFocus
        lblHelp.Text = "Help : Enter positive numeric value. Use tab to go to next field and also find Calculated Kv/Cv"
    End Sub
    Private Sub cmbMOC_GotFocus(sender As Object, e As EventArgs) Handles cmbMOC.GotFocus
        lblHelp.Text = "Help : Select Material type for Valve. On selection Rating will be suggested with respect to displayed design pressure/temperature. Use select button for accepting suggested ratings or select from drop down list and press tab to move to next field. On selection pipe size will be calculated and displayed."
    End Sub

    Private Sub btnOverrideRating_GotFocus(sender As Object, e As EventArgs) Handles btnOverrideRating.GotFocus
        lblHelp.Text = "Help : On pressing button the suggested rating will be selected and pipe size will be calculated and displayed. User will have to click on this button in case of any change in field parameters."
    End Sub

    Private Sub btnAcceptVelocityRule_GotFocus(sender As Object, e As EventArgs) Handles btnAcceptVelocityRule.GotFocus, cmbPipeDia.GotFocus, cmbSchedule.GotFocus
        lblHelp.Text = "Help : On Selection, the displayed pipe size will be selected.User needs to select schedule. ID of pipe will be calculated from pipe size and schedule and compared with predecided Velocity rule.User will have to click on pipe select button in case of any change in field parameters."
    End Sub


    Private Sub cmbVelocityRule_GotFocus(sender As Object, e As EventArgs) Handles cmbVelocityRule.GotFocus
        lblHelp.Text = "Help : On Selection, software will suggest valve which will have velocity/mach no. less than selection."
    End Sub

    Private Sub btnKVAccept_GotFocus(sender As Object, e As EventArgs) Handles btnKVAccept.GotFocus
        lblHelp.Text = "Help : On Selection suggested Kv/Cv will be selected for Valve size calculations. User will have to click on this button in case of any change in field parameters. "
    End Sub

    Private Sub btnValveSizeAccept_GotFocus(sender As Object, e As EventArgs) Handles btnValveSizeAccept.GotFocus
        lblHelp.Text = "Help : On Selection, suggested Valve size will be selected. User will have to click on this button in case of any change in field parameters. "
    End Sub


    Private Sub cmbKVOverride_GotFocus(sender As Object, e As EventArgs) Handles cmbKVOverride.GotFocus
        lblHelp.Text = "Help : User can override the suggested Kv/Cv with available Kv/Cv in dropdown. The selected item will be displayed in the output window."
    End Sub

    ' Private Sub cmbCharacterstics_GotFocus(sender As Object, e As EventArgs) Handles cmbCharacterstics.GotFocus
    '    txtHelp.Text = "Help : On Selection of characterstics option default Stroke Limit is selected by which Kv/Cv is suggested with respective available valve sizes. For all options default Stroke is 80%"
    'End Sub

    Private Sub cmbKVseries_GotFocus(sender As Object, e As EventArgs) Handles cmbKVseries.GotFocus
        lblHelp.Text = "Help : On Selection, softwares calculates the available Kv/Cv for the field parameters, pipe and rating with respect to characterstics. The software takes few seconds. If no Kv/Cv is found then the Sugg Kv/Cv field is kept blank."
    End Sub


    Private Sub cmbPacking_Validated(sender As Object, e As EventArgs) Handles cmbPacking.Validated


        If cmbPacking.SelectedIndex < 3 And FinalDesignTemperatureInlet > 180 Then        '' For PTFE
            If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                ToolTip1.Show("PTFE material suitable up to 180 degC ", cmbPacking, 2)
                ToolTip1.Show("PTFE material suitable up to 180 degC ", cmbPacking, 2000)
                txtErrors.Text = "PTFE material suitable up to 180 °C"
            Else
                ToolTip1.Show("PTFE material suitable up to 356 deg F", cmbPacking, 2)
                ToolTip1.Show("PTFE material suitable up to 356 deg F", cmbPacking, 2000)
                txtErrors.Text = "PTFE material suitable up to 356°F/ 815.6°R  "

            End If
        Else
            txtErrors.Text = ""
        End If

        If cmbPacking.Text = "PTFE V-Ring+EPDM" And FinalDesignTemperatureInlet > 140 Then
            If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                ToolTip1.Show("PTFE V-Ring+EPDM not available for design temperature more than 140 deg C .", cmbPacking, 2)
                ToolTip1.Show("PTFE V-Ring+EPDM not available for design temperature more than 140 deg C .", cmbPacking, 2000)
            End If
            cmbPacking.Text = "PTFE V-Ring+VITON"
            cmbPacking.SelectedIndex = cmbPacking.FindString("PTFE V-Ring+VITON")
        End If

    End Sub

    Private Sub cmbSealing_Validated(sender As Object, e As EventArgs) Handles cmbSealing.Validated
        If cmbLeakage.Text = "CLASS VI" Then
            If cmbSealing.SelectedIndex < 3 And FinalDesignTemperatureInlet > 180 Then
                If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                    'MsgBox("PTFE material suitable up to 180 degC ")
                    txtErrors.Text = "PTFE material suitable up to 180 °C"
                Else
                    ' MsgBox("PTFE material suitable up to 87 deg F")
                    txtErrors.Text = "PTFE material suitable up to  356°F/ 815.6°R "
                End If
            End If
        Else
            txtErrors.Text = ""
        End If
    End Sub


    Private Sub SaveToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SaveToolStripMenuItem.Click
        Try
            ' Check if any Unsaved data exists.


            If XMLFilename = "" Then     ' Check if file is absent or the file is default file like Vibtrans_default.
                Call SaveAsToolStripMenuItem_Click(sender, e)               ' If yes, then show Save AS dialog box
            Else
                Call SaveXLS(XMLFilename)                 ' If no, then overwrite data of current xml file.

                'Call OpenOfficeWriteDatasheetData()


                'Dim objODSWrite As ODCWORK.OdsReaderWriter = New ODCWORK.OdsReaderWriter()
                'Call objODSWrite.WriteOdsFile(ds_OpenOffice, XMLFilename)
                'Call DrawDatasheet()
            End If

        Catch ex As Exception
            MsgBox("Exception occurred at (" & Reflection.MethodInfo.GetCurrentMethod.Name & ") : " & ex.Message, MsgBoxStyle.Critical, " Software")
        End Try
    End Sub

    Public Sub NewDataBaseFile()
        Dim dt_NewDatasheet As DataTable
        Dim NewFileName As String
        Try

            Dlg_SaveAs.Title = "Save  Project File as.."            ' Save As dialog box title.
            Dlg_SaveAs.DefaultExt = ".ods"                                                   ' Set default type of file being displayed. 
            Dlg_SaveAs.Filter = "Open Office files|*ods*|All files|*.*"                      ' Apply XMl filter. Only xml files will be seen.

            If Dlg_SaveAs.ShowDialog = Windows.Forms.DialogResult.OK Then
                NewFileName = Dlg_SaveAs.FileName          ' if OK, then get the selected filename.
                FileName = System.IO.Path.GetFileNameWithoutExtension(NewFileName)
                DirectoryName = System.IO.Path.GetDirectoryName(NewFileName)
                FilenameExt = System.IO.Path.GetFileName(NewFileName)
                FullPath = System.IO.Path.GetFullPath(NewFileName)
                If Not XMLFilename = "" Then
                    XMLFilename = NewFileName
                    ' Check if filename is empty.
                Else
                    XMLFilename = NewFileName
                    ds_OpenOffice = New DataSet()
                    dt_OpenOffice = New DataTable()
                    dt_OpenOffice = ds_OpenOffice.Tables.Add("Records")
                    Call DatabaseFileHeader(XMLFilename)

                    ' frmRecordsGrid.DGV_Records.DataSource = dt_OpenOffice
                    Database_LastRow = dt_OpenOffice.Rows.Count - 1
                    HScrollBar_Records.Maximum = Database_LastRow
                    Database_Rowno = 1  '  The records starts from 2nd row of dataset
                    HScrollBar_Records.Minimum = 1
                    dt_OpenOffice.Rows.Add(dt_OpenOffice.NewRow())

                    'For i = 1 To 10 Step 1
                    '    Database_Rowno = i
                    'dttemp = New DataTable
                    '    ds_OpenOffice.Tables.Add(dttemp)

                    '    With dttemp

                    '        For x = 0 To 30 Step 1
                    '            .Columns.Add()
                    '        Next

                    '        For x = 0 To 64 Step 1
                    '            .Rows.Add(.NewRow())
                    '        Next
                    '    End With


                    'Call OpenOfficeWriteDatasheetData()
                    'Next
                    'Dim objODSWrite As ODCWORK.OdsReaderWriter = New ODCWORK.OdsReaderWriter()
                    'Call objODSWrite.WriteOdsFile(ds_OpenOffice, XMLFilename)
                    'Call DrawDatasheet()

                    lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                    txtJumpToRecord.Text = Database_Rowno
                End If
                Call SaveXLS(XMLFilename)       ' Write data on the selected filename.
            End If


        Catch ex As Exception
            MsgBox("Exception occurred at (" & Reflection.MethodInfo.GetCurrentMethod.Name & ") : " & ex.Message, MsgBoxStyle.Critical, " Software")
        End Try
    End Sub
    Private Sub SaveAsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SaveAsToolStripMenuItem.Click
        Call NewDataBaseFile()
    End Sub

    Public Function LoadDatabaseFile_XLS()
        Dim FileisOpen As Boolean
        Try
            Dlg_OpenXML.Title = "Load  Project File.."               ' Open Dialog box title.
            Dlg_OpenXML.DefaultExt = "*xls"                                                ' Set default type of file being displayed.
            Dlg_OpenXML.Filter = "Microsoft Excel files|*xls*|All files|*.*"                   ' Apply Xls filter. Only xls files will be seen.
            Dlg_OpenXML.FileName = Dlg_OpenXML.SafeFileName   ' The Filename entry should show only name of file & not the complete path.
            If Dlg_OpenXML.ShowDialog = Windows.Forms.DialogResult.OK Then
                XMLFilename = Dlg_OpenXML.FileName              ' Get the name of selected filename.
                FileName = System.IO.Path.GetFileNameWithoutExtension(XMLFilename)
                DirectoryName = System.IO.Path.GetDirectoryName(XMLFilename)
                FilenameExt = System.IO.Path.GetFileName(XMLFilename)
                FullPath = System.IO.Path.GetFullPath(XMLFilename)
                Database_Rowno = 1
                '   HScrollBar_Records.Value = Database_Rowno
                'FileisOpen = CheckForFileOpen(XMLFilename)
                'If FileisOpen = True Then
                '    MsgBox("File already open outside the software. Kindly close it.File Will not be updated.")
                'End If
                ' Database_LastRow = dt_Excel.Rows.Count - 1
                'frmRecordsGrid.ShowDialog ()

                'Dim MyConnection As System.Data.OleDb.OleDbConnection
                'Dim ds_Excel As System.Data.DataSet
                'Dim MyCommand As System.Data.OleDb.OleDbDataAdapter
                'Dim dt As New DataTable

                'MyConnection = New System.Data.OleDb.OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source='E:\neha.xls';Extended Properties=Excel 12.0;")
                'MyCommand = New System.Data.OleDb.OleDbDataAdapter("select * from [Records$] ", MyConnection)
                'MyConnection.Open()

                'MyCommand.TableMappings.Add("Table", "TestTable")
                'ds_Excel = New System.Data.DataSet
                'MyCommand.Fill(ds_Excel)

                'frmRecordsGrid.DGV_Records.DataSource = ds_Excel.Tables(0)


                'Call ReadXLS(XMLFilename)
                'lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                'txtJumpToRecord.Text = Database_Rowno
                'lblFileName.Text = "FileName: " & FileName

                'MyConnection.Close()
            End If

        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Function
    Public Sub LoadDatabaseFile_OO()
        Dim FileisOpen As Boolean
        Try

            Dlg_OpenXML.Title = "Load  Project File.."               ' Open Dialog box title.
            Dlg_OpenXML.DefaultExt = "ods"                                                ' Set default type of file being displayed.
            Dlg_OpenXML.Filter = "Open Office files|*.ods*|All files|*.*"                   ' Apply Xls filter. Only xls files will be seen.
            Dlg_OpenXML.FileName = Dlg_OpenXML.SafeFileName   ' The Filename entry should show only name of file & not the complete path.
            If Dlg_OpenXML.ShowDialog = Windows.Forms.DialogResult.OK Then
                XMLFilename = Dlg_OpenXML.FileName              ' Get the name of selected filename.
                FileName = System.IO.Path.GetFileNameWithoutExtension(XMLFilename)
                DirectoryName = System.IO.Path.GetDirectoryName(XMLFilename)
                FilenameExt = System.IO.Path.GetFileName(XMLFilename)
                FullPath = System.IO.Path.GetFullPath(XMLFilename)
                Database_Rowno = 1

                FileisOpen = CheckForFileOpen(XMLFilename)
                If FileisOpen = True Then
                    MsgBox("File already open outside the software. Kindly close it.File Will not be updated.")
                    Exit Sub
                End If

                ds_OpenOffice = New ODCWORK.OdsReaderWriter().ReadOdsFile(XMLFilename)
                dt_OpenOffice = New DataTable()

                dt_OpenOffice = ds_OpenOffice.Tables(0)

                frmRecordsGrid.DGV_Records.DataSource = dt_OpenOffice
                Database_LastRow = dt_OpenOffice.Rows.Count - 1
                HScrollBar_Records.Maximum = Database_LastRow
                HScrollBar_Records.Minimum = 1
                '   Call ReadXLS(XMLFilename)
                lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                'HScrollBar_Records.Value = Database_Rowno
                txtJumpToRecord.Text = Database_Rowno
                lblFileName.Text = "FileName: " & FileName
                frmRecordsGrid.ShowDialog()

                'dt_OpenOffice = Nothing
                'ds_OpenOffice = Nothing
            End If


        Catch ex As Exception
            MsgBox("Exception occurred at (" & Reflection.MethodInfo.GetCurrentMethod.Name & ") : " & ex.Message, MsgBoxStyle.Critical, "")
        End Try

    End Sub

    Private Sub LoadToolStripMenuItem_Click(sender As Object, e As EventArgs)
        Call LoadDatabaseFile_OO()
    End Sub

    Private Sub ExitToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ExitToolStripMenuItem.Click
        Me.Close()
    End Sub

    'Public Sub CheckForSheetExist(Workbook As excel.Workbook, SheetName As String)
    '    Dim x
    '    On Error Resume Next
    '    x = Workbook.Worksheets(SheetName).Name
    '    If Not Err.Number = 0 Then Workbook.Worksheets.Add.Name = SheetName
    '    On Error GoTo 0
    'End Sub


    Private Sub DatasheetToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles DatasheetToolStripMenuItem.Click

        '******************************OPEN OFFICE***************************************
        Try
            Me.Cursor = Cursors.WaitCursor

            ds_OpenOfficePrint = New DataSet

            For i = 1 To dt_OpenOffice.Rows.Count - 1 Step 1
                dttemp = New DataTable
                ds_OpenOfficePrint.Tables.Add(dttemp)


                With dttemp

                    For x = 0 To 30 Step 1
                        .Columns.Add()
                    Next

                    For x = 0 To 64 Step 1
                        .Rows.Add(.NewRow())
                    Next

                End With
            Next
            Call OpenOfficeWriteDatasheetData()

            Dim PrintFileName As String = DirectoryName & "\" & "Datasheet_" & FileName & "_Print" & ".ods"
            Dim objODSWrite As ODCWORK.OdsReaderWriter = New ODCWORK.OdsReaderWriter()
            Call objODSWrite.WriteOdsFile(ds_OpenOfficePrint, PrintFileName)
            MsgBox("Datasheet_" & FileName & "_Print" & ".ods" & " file will close after Printing.")
            Call DrawDatasheet(PrintFileName)

            Me.Cursor = Cursors.Default


        Catch ex As Exception
            MsgBox("Datasheet cannot be printed ")
            Me.Cursor = Cursors.Default
        Finally
            lblDatasheetPrinting.Visible = False
            lblPrintRecordNo.Visible = False
        End Try
    End Sub
    '************************************************EXCEL CODE*******************************************************************************************************************'
    '' Pending 1. Section Dividing lines. 2.Reduce Font Size 3. Second column last section without name 


    ''Dim DATASheetApp As New excel.Application
    'Dim CHECKMOLECULAR, CHECKNOISEATTN, CHECKINSULATION, FileisOpen As Boolean
    'Dim Rowno, Columnno, NowRecord As UInt32
    'Dim SheetString, UNITSTYPE, FLUIDTYPE, FLUID, MODEL, MEDIUM As String
    ''Dim formatRange As excel.Range
    'Dim dttemp As DataTable = ds_OpenOffice.Tables(CInt(Database_Rowno))
    'Dim Datasheet_Rowno, x As Integer
    ''Dim shape As excel.Shape
    'Dim Database_Columnno As Integer
    'Dim Temp_TagName, TempTagName1 As String
    'Dim TempArray(,) As Object 'currently 269 used
    'Try
    '        lblFileName.Text = "FileName: " & FileName
    '        If XMLFilename = "" Then
    '            MsgBox("Please Load Project File")
    '            Exit Sub
    '        End If

    '        frmPrintDatasheet.ShowDialog()
    '        If ConfirmedPrinting = False Then
    '            MsgBox("No Printing Done")
    '            Exit Sub
    '        End If
    '        If PrintFromRecordNo > 0 And PrintToRecordNo > 0 Then
    '            '     MsgBox("Selected Record: " & PrintFromRecordNo & " to  " & PrintToRecordNo)

    '        Else
    '            Exit Sub
    '        End If

    '    Datasheet_workbook = DATASheetApp.Workbooks.Open(XMLFilename)

    '    Database_worksheet = Datasheet_workbook.Worksheets("Records")
    '    lblDatasheetPrinting.Visible = True
    '    lblPrintRecordNo.Visible = True


    '    With dt_OpenOffice
    '        dttemp = ("A" & (PrintFromRecordNo + 1) & ":JI" & (PrintToRecordNo + 1)).Value
    '    End With

    '    Datasheet_Rowno = 1
    '    For NowRecord = PrintFromRecordNo To PrintToRecordNo
    '       Dim watch As Stopwatch = Stopwatch.StartNew()


    '    SheetString = "Sheet" & (NowRecord)
    '        lblPrintRecordNo.Text = NowRecord
    '    'If Not Datasheet_worksheet.Name = Temp_TagName Then


    '    Temp_TagName = dt_OpenOffice(Datasheet_Rowno)(DataSection1_Field + 5) 'Tag No.
    '    If Not Temp_TagName = "" Then
    '            If Temp_TagName.Length > 15 Then
    '                TempTagName1 = Temp_TagName.Substring(0, 14)
    '            Else
    '                TempTagName1 = Temp_TagName
    '                'End If
    '            End If
    '        Else
    '            TempTagName1 = SheetString
    '    End If


    '    Call CheckForSheetExist(Datasheet_workbook, TempTagName1)
    '    Dim totalSheets As Integer = Datasheet_workbook.Sheets.Count
    '    Datasheet_worksheet = Datasheet_workbook.Worksheets(TempTagName1)
    '    Datasheet_worksheet.Move(After:=Datasheet_workbook.Sheets(totalSheets))

    '    formatRange = Datasheet_worksheet.Range("A1:AE65")
    '    formatRange.Delete()

    '    For Each shape In Datasheet_worksheet.Shapes
    '        shape.Delete()
    '    Next


    '    With dttemp
    '    FM LOGO    

    '    With .PageSetup
    '        .PaperSize = excel.XlPaperSize.xlPaperA4
    '        .PrintArea = "A1:AE65"
    '        .Orientation = excel.XlPageOrientation.xlPortrait
    '        .Zoom = False
    '        .FitToPagesTall = 1
    '        .FitToPagesWide = 1
    '        .LeftMargin = APP.InchesToPoints(0.5)
    '        .RightMargin = APP.InchesToPoints(0.75)
    '        .TopMargin = APP.InchesToPoints(1.5)
    '        .BottomMargin = APP.InchesToPoints(1)
    '        .HeaderMargin = APP.InchesToPoints(0.5)
    '        .FooterMargin = APP.InchesToPoints(0.5)

    '    End With
    '    formatRange = .Range("B3")
    '    formatRange.Parent.Shapes.AddPicture(AppPath & "\images\FMLogo.jpg", True, True, formatRange.Left, formatRange.Top, -1, -1)
    '    .Range("A1:H8").Merge()

    '    formatRange = .Range("A1:AE1")
    '    formatRange.ColumnWidth = 3.5          'Make Entire Page column width as 3 
    '    formatRange.Font.Name = "Arial"        'All sheet of Arial font
    '    formatRange.Font.Size = 9              'Size 9
    '    formatRange.BorderAround2()



    '     *************************************************START SHOWING DATA **********************************
    '    .Range("I1:W1").Merge()
    '    .Range("I2:W2").Merge()
    '    .Range("I1:W1").Font.Size = 11

    '    .Range("I1:W1").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '    .Range("I1:W1").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '    .Range("I1").Font.Bold = True
    '    .Range("I1").Value = "CONTROL VALVE DATASHEET"

    '    .Range("I3:L3").Merge()
    '    .Range("I4:L4").Merge()
    '    .Range("I5:L5").Merge()
    '    .Range("I6:L6").Merge()

    '    .Range("X1:Z1").Merge()
    '    .Range("X2:Z2").Merge()
    '    .Range("X3:Z3").Merge()
    '    .Range("X4:Z4").Merge()
    '    .Range("X5:Z5").Merge()
    '    .Range("X6:Z6").Merge()
    '    .Range("X7:Z7").Merge()
    '    .Range("X8:Z8").Merge()

    '    .Range("X1.AE1").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft
    '    .Range("I2:AE8").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft
    '    .Range("I3").Value = "Calculation Std.:"
    '    .Range("I4").Value = "Customer Name:"
    '    .Range("I5").Value = "Project:"
    '    .Range("I6").Value = "Tag No.:"


    '    .Range("M3:W3").Merge()
    '    .Range("M4:W4").Merge()
    '    .Range("M5:W5").Merge()
    '    .Range("M6:W6").Merge()
    '    .Range("AA1:AE1").Merge()
    '    .Range("AA2:AE2").Merge()
    '    .Range("AA3:AE3").Merge()
    '    .Range("AA4:AE4").Merge()
    '    .Range("AA5:AE5").Merge()
    '    .Range("AA6:AE6").Merge()
    '    .Range("AA7:AE7").Merge()
    '    .Range("AA8:AE8").Merge()

    '    Database_Columnno = DataSection1_Field
    '    '.Range("M3").Value = "ISA 75.01.01"
    '    .Rows(3)(12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 1) 'Customer
    '    .Rows(4)(12) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 2) 'Project 

    '    .Rows(5)(12) = dt_OpenOffice(Temp_TagName)


    '    .Range("X1").Value = "Offer No.:"
    '    .Range("X2").Value = "Item Sr.No.:"
    '    .Range("X3").Value = "Sheet"
    '    .Range("X4").Value = "Customer Ref.:"
    '    .Range("X5").Value = "Revision:"
    '    .Range("X6").Value = "Quantity:"
    '    .Range("X7").Value = "Date:"
    '    .Range("X8").Value = "Sales Engg.:  "

    '    .Rows(1)(26) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 3)   'Offer no.
    '    .Rows(2)(26) = dt_OpenOffice(Datasheet_Rowno)(2)       'Serial No in the Database
    '    .Rows(3)(26) = dt_OpenOffice(Datasheet_Rowno)(3)                                             ' Sheet No
    '    '.Rows(4)(26) = ""
    '    .Rows(5)(26) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 4)  'Revision No 
    '    .Rows(6)(26) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 6) 'Quantity
    '    .Rows(7)(26) = Now.Date
    '    .Rows(8)(26) = ""




    '    .Rows(1)(44) = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 3)

    '    .Range(.Cells(10, 1), .Cells(29, 1)).Merge()
    '        .Range("A10").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '        .Range("A10").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '        .Range("A10").Orientation = 90
    '        .Range("A10").Font.Bold = True
    '        .Cells(10, 1) = "SERVICE CONDITIONS"

    '    Label Cells Merging
    '    .Range("B10:H10").Merge()
    '    .Range("B11:H11").Merge()
    '    .Range("B12:H12").Merge()
    '    .Range("B13:H13").Merge()
    '    .Range("B14:H14").Merge()
    '    .Range("B15:H15").Merge()
    '    .Range("B16:H16").Merge()
    '    .Range("B17:H17").Merge()
    '    .Range("B18:H18").Merge()
    '    .Range("B19:H19").Merge()
    '    .Range("B20:H20").Merge()
    '    .Range("B21:H21").Merge()
    '    .Range("B22:H22").Merge()
    '    .Range("B23:H23").Merge()
    '    .Range("B24:H24").Merge()
    '    .Range("B25:H25").Merge()
    '    .Range("B26:H26").Merge()
    '    .Range("B27:H27").Merge()
    '    .Range("B28:H28").Merge()
    '    .Range("B29:H29").Merge()

    '    Units cells merger
    '    .Range("I10:L10").Merge()
    '    .Range("I11:L11").Merge()
    '    .Range("I12:L12").Merge()
    '    .Range("I13:L13").Merge()
    '    .Range("I14:L14").Merge()
    '    .Range("I15:L15").Merge()
    '    .Range("I16:L16").Merge()
    '    .Range("I17:L17").Merge()
    '    .Range("I18:L18").Merge()
    '    .Range("I19:L19").Merge()
    '    .Range("I20:L20").Merge()
    '    .Range("I21:L21").Merge()
    '    .Range("I22:L22").Merge()
    '    .Range("I23:L23").Merge()
    '    .Range("I24:L24").Merge()
    '    .Range("I25:L25").Merge()
    '    .Range("I26:L26").Merge()
    '    .Range("I27:L27").Merge()
    '    .Range("I28:L28").Merge()
    '    .Range("I29:L29").Merge()

    '    Minumum Flow Merger 
    '    .Range("M10:P10").Merge()
    '    .Range("M11:P11").Merge()
    '    .Range("M12:P12").Merge()
    '    .Range("M13:P13").Merge()
    '    .Range("M14:P14").Merge()
    '    .Range("M15:P15").Merge()
    '    .Range("M16:P16").Merge()
    '    .Range("M17:P17").Merge()
    '    .Range("M18:P18").Merge()
    '    .Range("M19:P19").Merge()
    '    .Range("M20:P20").Merge()
    '    .Range("M21:P21").Merge()
    '    .Range("M22:P22").Merge()
    '    .Range("M23:P23").Merge()
    '    .Range("M24:P24").Merge()
    '    .Range("M25:P25").Merge()
    '    .Range("M26:P26").Merge()
    '    .Range("M27:P27").Merge()
    '    .Range("M28:N28").Merge()
    '    .Range("M29:N29").Merge()
    '    .Range("O28:P28").Merge()
    '    .Range("O29:P29").Merge()

    '    Normal flow merger
    '    .Range("Q10:T10").Merge()
    '    .Range("Q11:T11").Merge()
    '    .Range("Q12:T12").Merge()
    '    .Range("Q13:T13").Merge()
    '    .Range("Q14:T14").Merge()
    '    .Range("Q15:T15").Merge()
    '    .Range("Q16:T16").Merge()
    '    .Range("Q17:T17").Merge()
    '    .Range("Q18:T18").Merge()
    '    .Range("Q19:T19").Merge()
    '    .Range("Q20:T20").Merge()
    '    .Range("Q21:T21").Merge()
    '    .Range("Q22:T22").Merge()
    '    .Range("Q23:T23").Merge()
    '    .Range("Q24:T24").Merge()
    '    .Range("Q25:T25").Merge()
    '    .Range("Q26:T26").Merge()
    '    .Range("Q27:T27").Merge()
    '    .Range("Q28:R28").Merge()
    '    .Range("Q29:R29").Merge()
    '    .Range("S28:T28").Merge()
    '    .Range("S29:T29").Merge()

    '    Max flow merger
    '    .Range("U10:X10").Merge()
    '    .Range("U11:X11").Merge()
    '    .Range("U12:X12").Merge()
    '    .Range("U13:X13").Merge()
    '    .Range("U14:X14").Merge()
    '    .Range("U15:X15").Merge()
    '    .Range("U16:X16").Merge()
    '    .Range("U17:X17").Merge()
    '    .Range("U18:X18").Merge()
    '    .Range("U19:X19").Merge()
    '    .Range("U20:X20").Merge()
    '    .Range("U21:X21").Merge()
    '    .Range("U22:X22").Merge()
    '    .Range("U23:X23").Merge()
    '    .Range("U24:X24").Merge()
    '    .Range("U25:X25").Merge()
    '    .Range("U26:X26").Merge()
    '    .Range("U27:X27").Merge()
    '    .Range("U28:V28").Merge()
    '    .Range("U29:V29").Merge()
    '    .Range("W28:X28").Merge()
    '    .Range("W29:X29").Merge()

    '    .Range("B10:X29").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft
    '    .Range("B30:P58").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft
    '    .Range("R30:AE58").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft
    '    .Range("B59:AE65").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft


    '    BLANK
    '    .Range("Y10:AE10").Merge()
    '    .Range("Y11:AE11").Merge()
    '    .Range("Y12:AE12").Merge()
    '    .Range("Y13:AE13").Merge()
    '    .Range("Y14:AE14").Merge()
    '    .Range("Y15:AE15").Merge()
    '    .Range("Y16:AE16").Merge()
    '    .Range("Y17:AE17").Merge()
    '    .Range("Y18:AE18").Merge()
    '    .Range("Y19:AE19").Merge()
    '    .Range("Y20:AE20").Merge()
    '    .Range("Y21:AE21").Merge()
    '    .Range("Y22:AE22").Merge()
    '    .Range("Y23:AE23").Merge()
    '    .Range("Y24:AE24").Merge()
    '    .Range("Y25:AE25").Merge()
    '    .Range("Y26:AE26").Merge()
    '        .Range("Y27:AE27").Merge()
    '    .Range("Y28:AE28").Merge()
    '    .Range("Y27:AE27").Merge()
    '    .Range("Y28:AE28").Merge()


    '        UNITSTYPE = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 11)
    '        FLUIDTYPE = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 9)
    '        FLUID = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 10)
    '        MODEL = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 12)
    '        MEDIUM = dt_OpenOffice(Datasheet_Rowno)(Database_Columnno + 13)

    '    End With

    '    Initial Important Values
    '            .Range("B9:D9").Merge()
    '            .Range("B9").Value = "MEDIUM"
    '            .Range("E9:H9").Merge()
    '            .Range("E9").Value = TempArray(Datasheet_Rowno, Database_Columnno + 13)
    '            .Range("I9:L9").Merge()
    '            .Range("I9").Value = "PCritcal"
    '            .Range("M9:R9").Merge()
    '            If FLUIDTYPE = "InCompressible" Then
    '                .Range("M9").Value = TempArray(Datasheet_Rowno, Database_Columnno + 50) & "  " & TempArray(Datasheet_Rowno, Database_Columnno + 49) 'units'Critical Pressure
    '            End If
    '            .Range("S9:U9").Merge()
    '            .Range("S9").Value = "Mol.Weight"
    '            .Range("V9:X9").Merge()
    '            .Range("V9").Value = TempArray(Datasheet_Rowno, Database_Columnno + 34)
    '            .Range("Y9").Value = "kg/kmol"

    '            .Range("A9:AE9").Font.Bold = True







    '            .Range("I10").Value = "Unit"
    '            .Range("M10").Value = "Min Flow"
    '            .Range("Q10").Value = "Avg Flow"
    '            .Range("U10").Value = "Max Flow"

    '            Rowno = 10
    '            Columnno = 0
    '            '  TempArray(Database_Rowno, Database_Columnno + 1)()
    '            .Cells(Rowno + 1, Columnno + 2) = "Flowrate"


    '            .Cells(Rowno + 1, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 14)
    '            .Cells(Rowno + 1, Columnno + 13) = TempArray(Datasheet_Rowno, Database_Columnno + 15)
    '            .Cells(Rowno + 1, Columnno + 17) = TempArray(Datasheet_Rowno, Database_Columnno + 16)
    '            .Cells(Rowno + 1, Columnno + 21) = TempArray(Datasheet_Rowno, Database_Columnno + 17)



    '            .Cells(Rowno + 2, Columnno + 2) = "Inlet Pressure(P1)"
    '            .Cells(Rowno + 2, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 22)
    '            .Cells(Rowno + 2, Columnno + 13) = TempArray(Datasheet_Rowno, Database_Columnno + 23)
    '            .Cells(Rowno + 2, Columnno + 17) = TempArray(Datasheet_Rowno, Database_Columnno + 24)
    '            .Cells(Rowno + 2, Columnno + 21) = TempArray(Datasheet_Rowno, Database_Columnno + 25)

    '            .Cells(Rowno + 3, Columnno + 2) = "Outlet Pressure(P1)"
    '            .Cells(Rowno + 3, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 22)
    '            .Cells(Rowno + 3, Columnno + 13) = TempArray(Datasheet_Rowno, Database_Columnno + 26)
    '            .Cells(Rowno + 3, Columnno + 17) = TempArray(Datasheet_Rowno, Database_Columnno + 27)
    '            .Cells(Rowno + 3, Columnno + 21) = TempArray(Datasheet_Rowno, Database_Columnno + 28)


    '            .Cells(Rowno + 4, Columnno + 2) = "Pressure Drop"
    '            .Cells(Rowno + 4, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 22)
    '            .Cells(Rowno + 4, Columnno + 13) = TempArray(Datasheet_Rowno, Database_Columnno + 29)
    '            .Cells(Rowno + 4, Columnno + 17) = TempArray(Datasheet_Rowno, Database_Columnno + 30)
    '            .Cells(Rowno + 4, Columnno + 21) = TempArray(Datasheet_Rowno, Database_Columnno + 31)


    '            .Cells(Rowno + 5, Columnno + 2) = "Temperature (T1)"
    '            .Cells(Rowno + 5, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 18)
    '            .Cells(Rowno + 5, Columnno + 13) = TempArray(Datasheet_Rowno, Database_Columnno + 19)
    '            .Cells(Rowno + 5, Columnno + 17) = TempArray(Datasheet_Rowno, Database_Columnno + 20)
    '            .Cells(Rowno + 5, Columnno + 21) = TempArray(Datasheet_Rowno, Database_Columnno + 21)

    '            CHECKMOLECULAR = TempArray(Datasheet_Rowno, Database_Columnno + 32)
    '            If CHECKMOLECULAR = False Then
    '                .Cells(Rowno + 6, Columnno + 2) = "Density/Sp.Gravity"
    '                If FLUIDTYPE = "InCompressible" And FLUID = "Water" Then
    '                    .Cells(Rowno + 6, Columnno + 9) = "Sp.Gravity"
    '                ElseIf FLUIDTYPE = "Compressible" And FLUID = "Steam" Then
    '                    If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
    '                        .Cells(Rowno + 6, Columnno + 9) = "kg/m3"
    '                    Else
    '                        .Cells(Rowno + 6, Columnno + 9) = "lb/ft3"
    '                    End If

    '                Else
    '                    .Cells(Rowno + 6, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 33)
    '                End If
    '                If Not TempArray(Datasheet_Rowno, Database_Columnno + 35) = 0 Then .Cells(Rowno + 6, Columnno + 13) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 35)), 2) Else .Cells(Rowno + 6, Columnno + 13) = ""
    '                If Not TempArray(Datasheet_Rowno, Database_Columnno + 36) = 0 Then .Cells(Rowno + 6, Columnno + 17) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 36)), 2) Else .Cells(Rowno + 6, Columnno + 17) = ""
    '                If Not TempArray(Datasheet_Rowno, Database_Columnno + 37) = 0 Then .Cells(Rowno + 6, Columnno + 21) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 37)), 2) Else .Cells(Rowno + 6, Columnno + 21) = ""
    '                ' Else
    '                '    .Cells(Rowno + 6, Columnno) = "Mol. Weight"
    '                '   .Cells(Rowno + 6, Columnno + 2) = TempArray(Database_Rowno, Database_Columnno + 34)
    '            End If

    '            .Cells(Rowno + 7, Columnno + 2) = "Vapour Pressure"
    '            '   If chkViscosity.Checked = True Then
    '            .Cells(Rowno + 7, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 53)

    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 54) = 0 Then .Cells(Rowno + 7, Columnno + 13) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 54)), 2) Else .Cells(Rowno + 7, Columnno + 13) = ""
    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 55) = 0 Then .Cells(Rowno + 7, Columnno + 17) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 55)), 2) Else .Cells(Rowno + 7, Columnno + 17) = ""
    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 56) = 0 Then .Cells(Rowno + 7, Columnno + 21) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 56)), 2) Else .Cells(Rowno + 7, Columnno + 21) = ""


    '            .Cells(Rowno + 8, Columnno + 2) = "Viscosity"
    '            .Cells(Rowno + 8, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 39)
    '            .Cells(Rowno + 8, Columnno + 13) = Format((TempArray(Datasheet_Rowno, Database_Columnno + 40)), "0.00E-00")
    '            .Cells(Rowno + 8, Columnno + 17) = Format((TempArray(Datasheet_Rowno, Database_Columnno + 41)), "0.00E-00")
    '            .Cells(Rowno + 8, Columnno + 21) = Format((TempArray(Datasheet_Rowno, Database_Columnno + 42)), "0.00E-00")


    '            .Cells(Rowno + 9, Columnno + 2) = "Isentropic Expansion (K)"
    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 63) = 0 Then .Cells(Rowno + 9, Columnno + 13) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 63)), 2) Else .Cells(Rowno + 9, Columnno + 13) = ""
    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 64) = 0 Then .Cells(Rowno + 9, Columnno + 17) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 64)), 2) Else .Cells(Rowno + 9, Columnno + 17) = ""
    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 65) = 0 Then .Cells(Rowno + 9, Columnno + 21) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 65)), 2) Else .Cells(Rowno + 9, Columnno + 21) = ""

    '            .Cells(Rowno + 10, Columnno + 2) = "Compressibility (Z)"
    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 57) = 0 Then .Cells(Rowno + 10, Columnno + 13) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 57)), 2) Else .Cells(Rowno + 10, Columnno + 13) = ""
    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 58) = 0 Then .Cells(Rowno + 10, Columnno + 17) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 58)), 2) Else .Cells(Rowno + 10, Columnno + 17) = ""
    '            If Not TempArray(Datasheet_Rowno, Database_Columnno + 59) = 0 Then .Cells(Rowno + 10, Columnno + 21) = Math.Round((TempArray(Datasheet_Rowno, Database_Columnno + 59)), 2) Else .Cells(Rowno + 10, Columnno + 21) = ""



    '            'If cmbFluidType.Text = "Compressible" And cmbFluid.Text = "Steam" Then
    '            'Change Row  Numbers for TsatInletPressure
    '            .Cells(Rowno + 11, Columnno + 2) = "Tsat at InletPress."
    '            .Cells(Rowno + 11, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 18)
    '            .Cells(Rowno + 11, Columnno + 13) = TempArray(Datasheet_Rowno, Database_Columnno + 69)
    '            .Cells(Rowno + 11, Columnno + 17) = TempArray(Datasheet_Rowno, Database_Columnno + 70)
    '            .Cells(Rowno + 11, Columnno + 21) = TempArray(Datasheet_Rowno, Database_Columnno + 71)

    '            .Cells(Rowno + 12, Columnno + 2) = "Tsat at OutletPress."
    '            .Cells(Rowno + 12, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 18) 'Temp units
    '            .Cells(Rowno + 12, Columnno + 13) = TempArray(Datasheet_Rowno, Database_Columnno + 46)
    '            .Cells(Rowno + 12, Columnno + 17) = TempArray(Datasheet_Rowno, Database_Columnno + 47)
    '            .Cells(Rowno + 12, Columnno + 21) = TempArray(Datasheet_Rowno, Database_Columnno + 48)

    '            .Cells(Rowno + 13, Columnno + 2) = "T at OutletPress.(T2)"
    '            .Cells(Rowno + 13, Columnno + 9) = TempArray(Datasheet_Rowno, Database_Columnno + 18) 'Temp units
    '            .Cells(Rowno + 13, Columnno + 13) = (TempArray(Datasheet_Rowno, Database_Columnno + 43))
    '            .Cells(Rowno + 13, Columnno + 17) = (TempArray(Datasheet_Rowno, Database_Columnno + 44))
    '            .Cells(Rowno + 13, Columnno + 21) = (TempArray(Datasheet_Rowno, Database_Columnno + 45))



    '            ' End If


    '            If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
    '                .Cells(Rowno + 14, Columnno + 2) = "Calculated Kv"
    '                .Cells(Rowno + 14, Columnno + 9) = "m3/h"
    '                .Cells(Rowno + 14, Columnno + 13) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 10)
    '                .Cells(Rowno + 14, Columnno + 17) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 11)
    '                .Cells(Rowno + 14, Columnno + 21) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 12)
    '            Else    'FPS
    '                .Cells(Rowno + 14, Columnno + 2) = "Calculated Cv"
    '                .Cells(Rowno + 14, Columnno + 9) = "gpm"
    '                .Cells(Rowno + 14, Columnno + 13) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 7)
    '                .Cells(Rowno + 14, Columnno + 17) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 8)
    '                .Cells(Rowno + 14, Columnno + 21) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 9)
    '            End If

    '            .Cells(Rowno + 15, Columnno + 2) = "Stroke"
    '            .Cells(Rowno + 15, Columnno + 9) = "%"
    '            .Cells(Rowno + 15, Columnno + 13) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 13)
    '            .Cells(Rowno + 15, Columnno + 17) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 14)
    '            .Cells(Rowno + 15, Columnno + 21) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 15)


    '            .Cells(Rowno + 16, Columnno + 2) = "Flow Severity"
    '            .Cells(Rowno + 16, Columnno + 13) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 19)
    '            .Cells(Rowno + 16, Columnno + 17) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 20)
    '            .Cells(Rowno + 16, Columnno + 21) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 21)

    '            '.Cells(Rowno + 16, Columnno + 2) = "Flashing"
    '            '.Cells(Rowno + 16, Columnno + 13) = TempArray(Datasheet_Rowno, Database_Columnno + 66)
    '            '.Cells(Rowno + 16, Columnno + 17) = TempArray(Datasheet_Rowno, Database_Columnno + 67)
    '            '.Cells(Rowno + 16, Columnno + 21) = TempArray(Datasheet_Rowno, Database_Columnno + 68)

    '            CHECKNOISEATTN = TempArray(Datasheet_Rowno, DataSection6_Output2 + 4)

    '            If CHECKNOISEATTN = False Then
    '                .Cells(Rowno + 17, Columnno + 2) = "Predicted Noise"
    '                .Cells(Rowno + 17, Columnno + 9) = "dB(A)"
    '                .Cells(Rowno + 17, Columnno + 13) = TempArray(Datasheet_Rowno, DataSection6_Output2 + 1)
    '                .Cells(Rowno + 17, Columnno + 17) = TempArray(Datasheet_Rowno, DataSection6_Output2 + 2)
    '                .Cells(Rowno + 17, Columnno + 21) = TempArray(Datasheet_Rowno, DataSection6_Output2 + 3)
    '            Else
    '                .Cells(Rowno + 17, Columnno + 2) = "Predicted Noise"
    '                .Cells(Rowno + 17, Columnno + 9) = "dB(A) Attenuated"
    '                .Cells(Rowno + 17, Columnno + 13) = Math.Round((TempArray(Datasheet_Rowno, DataSection6_Output2 + 5)), 1)
    '                .Cells(Rowno + 17, Columnno + 17) = Math.Round((TempArray(Datasheet_Rowno, DataSection6_Output2 + 6)), 1)
    '                .Cells(Rowno + 17, Columnno + 21) = Math.Round((TempArray(Datasheet_Rowno, DataSection6_Output2 + 7)), 1)
    '            End If

    '            'Inlet velocites

    '            .Cells(Rowno + 18, Columnno + 2) = "Velocity Valve Inlet/Pipe Inlet"
    '            If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
    '                .Cells(Rowno + 18, Columnno + 9) = "m/s"
    '            Else
    '                .Cells(Rowno + 18, Columnno + 9) = "ft/s"
    '            End If
    '            'valve Inlet
    '            .Cells(Rowno + 18, Columnno + 13) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 22)
    '            .Cells(Rowno + 18, Columnno + 17) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 23)
    '            .Cells(Rowno + 18, Columnno + 21) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 24)

    '            'Pipe Inlet
    '            .Cells(Rowno + 18, Columnno + 15) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 28)
    '            .Cells(Rowno + 18, Columnno + 19) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 29)
    '            .Cells(Rowno + 18, Columnno + 23) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 30)


    '            'Outlet Velocities
    '            .Cells(Rowno + 19, Columnno + 2) = "Velocity Valve Outlet/Pipe Outlet"
    '            If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
    '                .Cells(Rowno + 19, Columnno + 9) = "m/s"
    '            Else
    '                .Cells(Rowno + 19, Columnno + 9) = "ft/s"
    '            End If
    '            .Cells(Rowno + 19, Columnno + 13) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 25)
    '            .Cells(Rowno + 19, Columnno + 17) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 26)
    '            .Cells(Rowno + 19, Columnno + 21) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 27)

    '            .Cells(Rowno + 19, Columnno + 15) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 31)
    '            .Cells(Rowno + 19, Columnno + 19) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 32)
    '            .Cells(Rowno + 19, Columnno + 23) = TempArray(Datasheet_Rowno, DataSection5_Output1 + 33)

    '            '***********************************************************************************************************************
    '            .Range(.Cells(30, 1), .Cells(32, 1)).Merge()
    '            .Range("A30").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("A30").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("A30").Orientation = 90
    '            .Range("A30").Font.Bold = True
    '            .Range("A30").Font.Size = 10
    '            .Cells(30, 1) = "LINE"

    '            .Range("B30:D31").Merge()
    '            .Range("B30").Value = "Pipe Size & Schedule"
    '            .Range("B30:D31").WrapText = True
    '            .Range("E30:H30").Merge()
    '            .Range("E31:H31").Merge()
    '            .Range("I30:L30").Merge()
    '            .Range("I31:L31").Merge()
    '            .Range("M30:P30").Merge()
    '            .Range("M31:P31").Merge()

    '            .Range("B32:H32").Merge()


    '            .Range("E30").Value = "In"
    '            .Range("E31").Value = "Out"
    '            .Range("B32").Value = "Pipe Insulation dBA"
    '            Rowno = 30
    '            'Inlet Pipe and area units
    '            .Range("I30").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 8) & " " & TempArray(Datasheet_Rowno, DataSection2_MOC + 7)
    '            .Range("M30").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 13) 'Outlet Schedule

    '            .Range("I31").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 10) & " " & TempArray(Datasheet_Rowno, DataSection2_MOC + 7)
    '            .Range("M31").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 12) ' Outlet Schedule

    '            CHECKINSULATION = TempArray(Datasheet_Rowno, DataSection6_Output2 + 8)

    '            If CHECKINSULATION = True Then
    '                .Range("I32").Value = "4 Thickness Considered (-12dBA)"
    '            Else
    '                .Range("I32").Value = "No"
    '            End If

    '            .Range(.Cells(33, 1), .Cells(42, 1)).Merge()
    '            .Range("A33").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("A33").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("A33").Orientation = 90
    '            .Range("A33").Font.Bold = True
    '            .Range("A33").Font.Size = 10
    '            .Cells(33, 1) = "VALVE BODY/BONNET"
    '            '*************************************************************************************
    '            .Range("B33:H33").Merge()
    '            .Range("B34:H34").Merge()
    '            .Range("B35:H35").Merge()
    '            .Range("B36:H36").Merge()
    '            .Range("B37:H37").Merge()
    '            .Range("B38:H38").Merge()
    '            .Range("B39:H39").Merge()
    '            .Range("B40:H40").Merge()
    '            .Range("B41:H41").Merge()
    '            .Range("B42:H42").Merge()
    '            .Range("B43:H43").Merge()
    '            .Range("B44:H44").Merge()
    '            .Range("B45:H45").Merge()
    '            .Range("B46:H46").Merge()
    '            .Range("B47:H47").Merge()
    '            .Range("B48:H48").Merge()
    '            .Range("B49:H49").Merge()
    '            .Range("B50:H50").Merge()
    '            .Range("B51:H51").Merge()
    '            .Range("B52:H52").Merge()
    '            .Range("B53:H53").Merge()
    '            .Range("B54:H55").Merge()
    '            .Range("B56:H56").Merge()
    '            .Range("B33").Value = "Design. Press/Temp"
    '            .Range("I33:J33").Merge()
    '            .Range("I33").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 2)  'design Pressure
    '            .Range("K33:L33").Merge()
    '            .Range("K33").Value = TempArray(Datasheet_Rowno, DataSection1_Field + 22) ' Pressure UNITS
    '            .Range("M33:N33").Merge()
    '            .Range("M33").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 3) 'design temperature
    '            .Range("O33:P33").Merge()
    '            .Range("O33").Value = TempArray(Datasheet_Rowno, DataSection1_Field + 18)
    '            .Range("B34").Value = "Model Code & Type"
    '            .Range("I34").Value = TempArray(Datasheet_Rowno, DataSection6_Output2 + 25) & " Globe"
    '            .Range("B35").Value = "Size & Rating"
    '            .Range("I35:J35").Merge()
    '            .Range("I35").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 30) 'final valve size
    '            .Range("K35:L35").Merge()
    '            .Range("K35").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 7)  'Area Units
    '            .Range("M35:P35").Merge()
    '            .Range("M35").Value = "#" & TempArray(Datasheet_Rowno, DataSection2_MOC + 6) 'Final Ratings
    '            .Range("B36").Value = "Bonnet Type"
    '            .Range("I36:P36").Merge()
    '            .Range("I36:P36").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 31)

    '            .Range("B37").Value = "Inlet Connection"
    '            .Range("I37:P37").Merge()
    '            .Range("I37").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 32)
    '            .Range("B38").Value = "Outlet Connection"
    '            .Range("I38:P38").Merge()
    '            .Range("I38").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 32)
    '            .Range("B39").Value = "Body Material"
    '            .Range("I39:P39").Merge()
    '            .Range("I39").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 1)
    '            .Range("B40").Value = "Body Bonnet Gasket "
    '            .Range("I40:P40").Merge()
    '            .Range("I40").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 5)
    '            .Range("I41:P41").Merge() ' Blank
    '            .Range("I42:P42").Merge() ' Blank
    '            '*****************************************************************************************************

    '            .Range(.Cells(43, 1), .Cells(53, 1)).Merge()
    '            .Range("A43").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("A43").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("A43").Orientation = 90
    '            .Range("A43").Font.Bold = True
    '            .Range("A43").Font.Size = 10
    '            .Cells(43, 1) = "TRIM/INTERNALS"

    '            .Range("B43").Value = "Plug Material"
    '            .Range("B44").Value = "Seat Material"
    '            .Range("B45").Value = "Trim Style"
    '            .Range("B46").Value = "Kv Characterstics"
    '            .Range("B47").Value = "Noise Attenuation Stage"
    '            .Range("B48").Value = "LeakCI/Bal"
    '            .Range("B49").Value = "Sealing"
    '            .Range("B50").Value = "Seat Diameter"
    '            .Range("B51").Value = "Packing/Gasket"
    '            .Range("B52").Value = "Required force to open valve"

    '            .Range("B54").Value = "Material Certification"
    '            .Range("B56").Value = "Valve Test"

    '            .Range("I43:P43").Merge()
    '            .Range("I43").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 2)  'Plug  Material
    '            .Range("I44:P44").Merge()
    '            .Range("I44").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 3) 'Seat Material

    '            .Range("I45:P45").Merge()
    '            .Range("I45").Value = "PS1  " & TempArray(Datasheet_Rowno, DataSection2_MOC + 22)

    '            .Range("I46:L46").Merge()
    '            .Range("M46:P46").Merge()
    '            .Range("I46").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 29)   'Max Kv/Cv selected
    '            .Range("M46").Value = TempArray(Datasheet_Rowno, DataSection2_MOC + 23)      'Characterstics

    '            .Range("I47:P47").Merge()
    '            If (TempArray(Datasheet_Rowno, DataSection6_Output2 + 4)) = True Then
    '                .Range("I47").Value = "YES"
    '            Else
    '                .Range("I47").Value = "NO"
    '            End If

    '            .Range("I48:P48").Merge()
    '            .Range("I48").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 4) & " / " & TempArray(Datasheet_Rowno, DataSection3_Actuator + 2) 'Leak CI / Balancing
    '            .Range("I49:P49").Merge()
    '            .Range("I49").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 6)   'Sealing
    '            .Range("I50:L50").Merge()
    '            .Range("I50").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 10)
    '            .Range("M50:P50").Merge()
    '            If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
    '                .Range("M50").Value = "mm"  'Seat diameter  Units 
    '            Else
    '                .Range("M50").Value = "inch"
    '            End If

    '            .Range("I51:P51").Merge()
    '            .Range("I51").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 5) & "/" & TempArray(Datasheet_Rowno, DataSection4_Materials + 5)   'Packing / Gasket

    '            'cmbActuatorType.Text = .Cells(Database_Rowno, 104 + 1)

    '            'cmbAirFailure.Text = .Cells(Database_Rowno, Database_Columnno + 3)

    '            'cmbPacking.Text = .Cells(Database_Rowno, Database_Columnno + 5)
    '            Dim forceunit, springunit As String
    '            If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
    '                forceunit = "kgf"
    '                springunit = "kg/cm2"
    '            Else
    '                forceunit = "lbs"
    '                springunit = "psiG"
    '            End If
    '            .Range("I52:P52").Merge()
    '            .Range("I52").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 11) & " " & forceunit 'Force

    '            .Range("I54:P55").Merge()
    '            .Range("I56:P56").Merge()
    '            .Range("I54").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 18)
    '            .Range("I54").WrapText = True

    '            'First Column complete  
    '            '**********************************************************************************************************************

    '            '*************************************************************************************************
    '            'Actuator
    '            .Range("Q30:Q39").Merge()
    '            .Range("Q30").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("Q30").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("Q30").Orientation = 90
    '            .Range("Q30").Font.Bold = True
    '            .Range("Q30").Font.Size = 10
    '            .Range("Q30").Value = "ACTUATOR"

    '            ' .Range("R29:W29").Merge()
    '            .Range("R30:W30").Merge()
    '            .Range("R31:W31").Merge()
    '            .Range("R32:W32").Merge()
    '            .Range("R33:W33").Merge()
    '            .Range("R34:W34").Merge()
    '            .Range("R35:W35").Merge()
    '            .Range("R36:W36").Merge()
    '            .Range("R37:W37").Merge()
    '            .Range("R38:W38").Merge()
    '            .Range("R39:W39").Merge()
    '            .Range("R40:W40").Merge()
    '            .Range("R41:W41").Merge()
    '            .Range("R42:W42").Merge()
    '            .Range("R43:W43").Merge()
    '            .Range("R44:W44").Merge()
    '            .Range("R45:W45").Merge()
    '            .Range("R46:W46").Merge()
    '            .Range("R47:W47").Merge()
    '            .Range("R48:W48").Merge()
    '            .Range("R49:W49").Merge()
    '            .Range("R50:W50").Merge()
    '            .Range("R51:W51").Merge()
    '            .Range("R52:W52").Merge()


    '            .Range("X30:AE30").Merge()
    '            .Range("R30").Value = "Shutoff Pressure"
    '            .Range("X30").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 7) & " " & TempArray(Datasheet_Rowno, DataSection1_Field + 22) ' Shutoff Pressure + units
    '            .Range("R31").Value = "Type"
    '            .Range("X31:AE31").Merge()
    '            .Range("X31").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 1) 'Actuator  type 
    '            .Range("R32").Value = "Model"
    '            .Range("X32:AE32").Merge()
    '            .Range("X32").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 15) 'Model
    '            .Range("R33").Value = "Air Fail Mode"
    '            .Range("X33:AE33").Merge()
    '            .Range("X33").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 3) 'FailurePosition
    '            .Range("R34").Value = "Max Allow.Air Pressure"
    '            .Range("X34:AE34").Merge()

    '            If UNITSTYPE = "MKS&SI" Or UNITSTYPE = "ALL" Then
    '                .Range("X34").Value = "6 barg "  'Max Pressure
    '            Else
    '                .Range("X34").Value = "90 psiG" 'Max Pressure
    '            End If

    '            .Range("R35").Value = "Available Air Supply Press."
    '            .Range("X35:AE35").Merge()
    '            .Range("X35").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 9) & " " & TempArray(Datasheet_Rowno, DataSection3_Actuator + 8)
    '            .Range("R36").Value = "Spring Range"
    '            .Range("X36:AE36").Merge()
    '            .Range("X36").Value = Math.Round(TempArray(Datasheet_Rowno, DataSection3_Actuator + 16), 2) & " to " & Math.Round(TempArray(Datasheet_Rowno, DataSection3_Actuator + 17), 2) & " " & springunit
    '            .Range("R37").Value = "Orientation"
    '            .Range("X37:AE37").Merge()
    '            .Range("X37").Value = "Vertical"
    '            .Range("R38").Value = "Handwheel Type"
    '            .Range("X38:AE38").Merge()
    '            .Range("X38").Value = TempArray(Datasheet_Rowno, DataSection3_Actuator + 12)

    '            .Range(.Cells(40, 17), .Cells(44, 17)).Merge()
    '            .Range("Q44").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("Q44").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("Q44").Orientation = 90
    '            .Range("Q44").Font.Bold = True
    '            .Range("Q44").Font.Size = 10
    '            .Cells(40, 17) = "POSITIONER"

    '            .Range("R40").Value = "Type"
    '            .Range("X40:AE40").Merge()
    '            .Range("X40").Value = ""
    '            .Range("R41").Value = "Model"
    '            .Range("X41:AE41").Merge()
    '            .Range("X41").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 7)
    '            .Range("R42").Value = "Input&Output Signal"
    '            .Range("X42:AE42").Merge()
    '            .Range("X42").Value = ""

    '            .Range(.Cells(45, 17), .Cells(47, 17)).Merge()
    '            .Range("Q45").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("Q45").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("Q45").Orientation = 90
    '            .Range("Q45").Font.Bold = True
    '            .Range("Q45").Font.Size = 10
    '            .Cells(45, 17) = "AIRSET"

    '            .Range("R45").Value = "Make"
    '            .Range("X45:AE45").Merge()
    '            .Range("X45").Value = ""
    '            .Range("R46").Value = "Model"
    '            .Range("X46:AE46").Merge()
    '            .Range("X46").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 9) 'AFR 
    '            .Range("R47").Value = "Gauges provided"
    '            .Range("X47:AE47").Merge()
    '            .Range("X47").Value = ""



    '            'Solenoid Valve
    '            .Range(.Cells(48, 17), .Cells(50, 17)).Merge()
    '            .Range("Q48").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("Q48").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("Q48").Orientation = 90
    '            .Range("Q48").Font.Bold = True
    '            .Range("Q48").Font.Size = 9
    '            .Cells(48, 17) = "SWITCHES"

    '            .Range("R48").Value = "Make"
    '            .Range("X48:AE48").Merge()
    '            .Range("X48").Value = ""
    '            .Range("R49").Value = "Model"
    '            .Range("X49:AE49").Merge()
    '            .Range("X49").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 11)




    '            'Switches
    '            .Range(.Cells(51, 17), .Cells(53, 17)).Merge()
    '            .Range("Q51").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("Q51").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("Q51").Orientation = 90
    '            .Range("Q51").Font.Bold = True
    '            .Range("Q51").Font.Size = 10
    '            .Cells(51, 17) = "SOV"

    '            .Range("R51").Value = "Make"
    '            .Range("X51:AE51").Merge()
    '            .Range("X51").Value = ""
    '            .Range("R52").Value = "Model"
    '            .Range("X52:AE52").Merge()
    '            .Range("X52").Value = TempArray(Datasheet_Rowno, DataSection4_Materials + 8)
    '            .Range("R53:W53").Merge()
    '            .Range("X53:AE53").Merge()

    '            ' Accessories User Data Entry
    '            .Range(.Cells(54, 17), .Cells(58, 17)).Merge()
    '            .Range("Q54").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("Q54").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("Q54").Orientation = 90
    '            .Range("Q54").Font.Bold = True
    '            .Range("Q54").Font.Size = 10
    '            .Cells(54, 17) = "ACCESSORIES"
    '            .Range("R54:W54").Merge()
    '            .Range("X54:AE54").Merge()
    '            .Range("R55:W55").Merge()
    '            .Range("X55:AE55").Merge()
    '            .Range("R56:W56").Merge()
    '            .Range("X56:AE56").Merge()
    '            .Range("R57:W57").Merge()
    '            .Range("X57:AE57").Merge()
    '            .Range("R58:W58").Merge()
    '            .Range("X58:AE58").Merge()


    '            .Range(.Cells(59, 1), .Cells(65, 1)).Merge()
    '            .Range("A59").HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
    '            .Range("A59").VerticalAlignment = excel.XlVAlign.xlVAlignCenter
    '            .Range("A59").Orientation = 90
    '            .Range("A59").Font.Bold = True
    '            .Range("A59").Font.Size = 10
    '            .Cells(59, 1) = "NOTES"
    '            .Cells(59, 2) = TempArray(Datasheet_Rowno, DataSection6_Output2 + 35)
    '            .Cells(61, 2) = TempArray(Datasheet_Rowno, DataSection6_Output2 + 36)
    '            .Cells(63, 2) = TempArray(Datasheet_Rowno, DataSection6_Output2 + 37)
    '            .Range("B59:AE60").Merge()
    '            .Range("B59").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft
    '            .Range("B59").VerticalAlignment = excel.XlVAlign.xlVAlignTop
    '            .Range("B59").WrapText = True
    '            .Range("B61:AE62").Merge()
    '            .Range("B61").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft
    '            .Range("B61").VerticalAlignment = excel.XlVAlign.xlVAlignTop
    '            .Range("B61").WrapText = True
    '            .Range("B63:AE64").Merge()
    '            .Range("B63").HorizontalAlignment = excel.XlHAlign.xlHAlignLeft
    '            .Range("B63").VerticalAlignment = excel.XlVAlign.xlVAlignTop
    '            .Range("B63").WrapText = True

    '            'All Borders ****************************************************************************************************************
    '            Dim aRng As excel.Range

    '            aRng = .Range("A1:AE65")
    '            With aRng



    '                'Apply new borders
    '                .BorderAround(excel.XlLineStyle.xlContinuous, excel.XlBorderWeight.xlHairline, 0)
    '                With .Borders(excel.XlBordersIndex.xlInsideVertical)
    '                    .LineStyle = excel.XlLineStyle.xlContinuous
    '                    .ColorIndex = 0
    '                    .Weight = excel.XlBorderWeight.xlHairline
    '                End With
    '                With .Borders(excel.XlBordersIndex.xlInsideHorizontal)
    '                    .LineStyle = excel.XlLineStyle.xlContinuous
    '                    .ColorIndex = 0
    '                    .Weight = excel.XlBorderWeight.xlHairline
    '                End With
    '            End With


    '            aRng = .Range("A10:A58")
    '            aRng.BorderAround2(excel.XlLineStyle.xlContinuous, excel.XlBorderWeight.xlMedium, excel.XlColorIndex.xlColorIndexNone)
    '            aRng = .Range("Q30:Q58")
    '            aRng.BorderAround2(excel.XlLineStyle.xlContinuous, excel.XlBorderWeight.xlMedium, excel.XlColorIndex.xlColorIndexNone)

    '            aRng = .Range("A9:AE9")
    '            aRng.BorderAround2(excel.XlLineStyle.xlContinuous, excel.XlBorderWeight.xlMedium, excel.XlColorIndex.xlColorIndexNone)


    '            aRng = .Range("A29:AE29")
    '            With aRng.Borders(excel.XlBordersIndex.xlEdgeBottom)
    '                .LineStyle = excel.XlLineStyle.xlContinuous
    '                .ColorIndex = 0
    '                .Weight = excel.XlBorderWeight.xlMedium
    '            End With
    '            aRng = .Range("A58:AE58")
    '            With aRng.Borders(excel.XlBordersIndex.xlEdgeBottom)
    '                .LineStyle = excel.XlLineStyle.xlContinuous
    '                .ColorIndex = 0
    '                .Weight = excel.XlBorderWeight.xlMedium
    '            End With

    '            aRng = .Range("A1:AE65")
    '            aRng.BorderAround2(excel.XlLineStyle.xlContinuous, excel.XlBorderWeight.xlThick, excel.XlColorIndex.xlColorIndexNone)
    '            'Colors*************************************************************************************************************************************
    '            .Range("M11:X29").Font.Color = System.Drawing.Color.DarkBlue
    '            .Range("M4:W6").Font.Color = System.Drawing.Color.DarkBlue
    '            .Range("AA4:AE8").Font.Color = System.Drawing.Color.DarkBlue
    '            .Range("I30:P55").Font.Color = System.Drawing.Color.DarkBlue
    '            .Range("X30:AE55").Font.Color = System.Drawing.Color.DarkBlue
    '            .Range("B59:AE65").Font.Color = System.Drawing.Color.DarkBlue

    '            With .PageSetup
    '                .PaperSize = excel.XlPaperSize.xlPaperA4
    '                .PrintArea = "A1:AE65"
    '                .Orientation = excel.XlPageOrientation.xlPortrait
    '                .Zoom = False
    '                .FitToPagesTall = 1
    '                .FitToPagesWide = 1
    '            End With
    '            'watch.Stop()
    '            ' MsgBox(FinalKVCount & " :  " & watch.Elapsed.TotalMilliseconds)
    '        End With


    '        '~~> Display Excel
    '        Datasheet_Rowno = Datasheet_Rowno + 1
    '    Next
    '    lblDatasheetPrinting.Visible = False
    '    lblPrintRecordNo.Visible = False

    '    DATASheetApp = Datasheet_workbook.Parent
    '    DATASheetApp.Visible = True
    '    ' Datasheet_workbook.Save()



    'Catch ex As Exception
    '    MsgBox("btnPrintToExcel :   " & ex.Message)

    '    Datasheet_workbook.Close()
    'Finally
    '    releaseObject(Datasheet_worksheet)
    '    releaseObject(Database_worksheet)
    '    releaseObject(Datasheet_workbook)
    'End Try




    Private Sub NewToolStripMenuItem_Click(sender As Object, e As EventArgs)
        Try
            If MsgBox("DO you want to create a new file?", MsgBoxStyle.YesNoCancel, "Valve Sizing - Alert!") = MsgBoxResult.Yes Then

                XMLFilename = ""
                Database_Rowno = 0
                HScrollBar_Records.Minimum = 0
                Database_LastRow = 0
                HScrollBar_Records.Maximum = 0
                lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow   'New Row


                Resetall = True
                cmbFluidType.SelectedIndex = -1
                cmbFluidType.Text = "--Select--"
                Call Reset_All()
                lblFileName.Text = ""
                txtJumpToRecord.Text = 0
                Resetall = False
            End If

        Catch ex As Exception
            MsgBox("NewToolStripMenuItem_Click:  " & ex.Message)
        End Try


    End Sub

    Private Sub MaterialsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles MaterialsToolStripMenuItem.Click
        My.Forms.frmMaterials.ShowDialog()
    End Sub

    Private Sub AccessoriesToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AccessoriesToolStripMenuItem.Click
        My.Forms.frmAccessories.ShowDialog()
    End Sub

    Private Sub cmbInletPipeSchedule_TextChanged(sender As Object, e As EventArgs) Handles cmbInletPipeSchedule.TextChanged
        Try
            If LoadingForm = True Then
                If cmbInletPipeSize.SelectedIndex >= 0 And cmbInletPipeSchedule.SelectedIndex >= 0 Then
                    Dim TEMP As Single = InletScheduleArray(cmbInletPipeSchedule.SelectedIndex)
                    InletPipeID = PipeInletOD - (2 * InletScheduleArray(cmbInletPipeSchedule.SelectedIndex))
                    InletPipeID = InletPipeID * 25.4 / 1000     ' meters
                    If Not cmbValveSizeOverride.Text = "--Select--" Then
                        Call ShowResults()
                    End If
                End If
            End If

        Catch ex As Exception
            MsgBox(ex.TargetSite.ToString & " cmbInletPipeSchedule_TextChanged:  " & ex.Message)
        End Try
    End Sub

    Public Sub ReadSQL()
        Dim constr As String = "Data Source=.\SQLEXPRESS;Initial Catalog=FinalDB;Integrated Security=true"
        Dim cmd As SqlCommand
        Dim adapter As New SqlDataAdapter
        Dim query As String = "select * from storage_table where customer = '" + CustomerName + "' and TagNo ='" + TagNo + "' and CustomerRef = '" + CustomerRef + "';"
        Dim drr As DataRow

        Using con As New SqlConnection(constr)
            cmd = New SqlCommand(query, con)
            adapter.SelectCommand = cmd
            adapter.Fill(dtr)
            drr = dtr.Rows(0)
        End Using

        'MessageBox.Show(drr.Item("Sr_No").ToString)

    End Sub

    Public Sub ReadXLS(XLSFilename As String)

        'If Not CustomerName = Nothing And Not CustomerRef = Nothing And Not TagNo = Nothing Then
        '    ReadSQL()
        'End If

        'Dim xlWorkBook As excel.Workbook
        'Dim xlWorkSheet As excel.Worksheet
        Dim Database_Columnno As Integer
        Dim FileisOpen As Boolean = False
        Dim TempPD1, TempPD2, TempPD3 As Single
        Dim Temprow As Long
        ' Dim ExcelProcess() As Process = System.Diagnostics.Process.GetProcessesByName("EXCEL")
        Try

            LoadingProjectFile = True

            Temprow = Database_Rowno
            Database_LastRow = dt_OpenOffice.Rows.Count - 1
            HScrollBar_Records.Maximum = Database_LastRow
            'xlWorkBook = APP.Workbooks.Open(XLSFilename)
            'xlWorkSheet = xlWorkBook.Worksheets("Records")
            With dt_OpenOffice
                'Database_LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                'Database_LastColumn = .Cells(1, .Columns.Count).End(excel.XlDirection.xlToLeft).Column


                'If Database_Rowno > Database_LastRow Then
                '    Call Reset_All()
                'Else


                Database_Columnno = DataSection1_Field
                cmbFluidType.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 9)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 9))
                cmbFluid.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 10)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 10))
                cmbUnitsType.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 11)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 11))
                cmbModel.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 12))
                txtMedium.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 13)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 13))

                Dim forceunit As String                             '13102020   Changes
                If cmbUnitsType.Text = "MKS&SI" Or cmbUnitsType.Text = "ALL" Then
                    lblForceUnits.Text = "kgf"
                    ' lblSelForceUnit.Text = "kgf"
                    '  lblSuggAcc_units.Text = "kgf"

                Else
                    lblForceUnits.Text = "lbs"
                    'lblSelForceUnit.Text = "lbs"
                    'lblSuggAcc_units.Text = "lbs"
                End If


                'DateTimePicker1.Value = .Cells(Database_Rowno, Database_Columnno + 7).value
                ''taken later because values reset when Fluid Type Changes 

                cmbQW.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 73)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 73))

                CustomerName = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 1)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 1))
                ProjectName = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 2)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 2))
                OfferNo = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 3)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 3))
                Revision = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 4)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 4))
                TagNo = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 5)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 5))
                QTY = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)), 0, .Rows(Temprow).Item(Database_Columnno + 6))
                SheetNo = If(IsDBNull(.Rows(Temprow).Item(3)), 0, .Rows(Temprow).Item(3))
                ItemNo = If(IsDBNull(.Rows(Temprow).Item(2)), 0, .Rows(Temprow).Item(2))

                '  lblCustomer.Text = CustomerName
                txtCustomerMain.Text = CustomerName
                '  lblProject.Text = ProjectName
                txtProjectMain.Text = ProjectName
                '    lblTagNo.Text = TagNo
                txtTagNoMain.Text = TagNo
                '    lblQTY.Text = QTY
                txtQTYMain.Text = QTY
                txtOfferNoMain.Text = OfferNo
                txtRevisionNoMain.Text = Revision
                txtSheetNo.Text = SheetNo
                txtItemNoMain.Text = ItemNo


                frmCustomerDetails.txtCustomer.Text = CustomerName

                frmCustomerDetails.txtProject.Text = ProjectName
                frmCustomerDetails.txtOffferNo.Text = OfferNo

                frmCustomerDetails.txtRevNo.Text = Revision
                frmCustomerDetails.txtTagNo.Text = TagNo
                frmCustomerDetails.txtQty.Text = QTY
                frmCustomerDetails.txtSheetNo.Text = SheetNo
                frmCustomerDetails.txtItemNo.Text = ItemNo

                cmbFlowrate.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 14)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 14))
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 15)) Then
                    txtFlowrateCase1.Text = .Rows(Temprow).Item(Database_Columnno + 15)
                Else
                    txtFlowrateCase1.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 16)) Then
                    txtFlowrateCase2.Text = .Rows(Temprow).Item(Database_Columnno + 16)
                Else
                    txtFlowrateCase2.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 17)) Then
                    txtFlowrateCase3.Text = .Rows(Temprow).Item(Database_Columnno + 17)
                Else
                    txtFlowrateCase3.Text = String.Empty
                End If

                'FinalFlowrateCase1 = DRow("MinFlow")
                'FinalFlowrateCase2 = DRow("AvgFlow")
                'FinalFlowrateCase3 = DRow("MaxFlow")



                cmbPressureUnits.Text = .Rows(Temprow).Item(Database_Columnno + 22).ToString
                lblDesignPressure.Text = cmbPressureUnits.Text
                lblDPShutoffUnits.Text = cmbPressureUnits.Text
                lblPwUnits.Text = cmbPressureUnits.Text
                lblTwUnit.Text = cmbTemperatureUnits.Text
                cmbPressureUnits.Text = cmbPressureUnits.Text


                'FinalInletPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), 0, .Rows(Temprow).Item(Database_Columnno + 23)) 'CSng(.Rows(Temprow).Item(Database_Columnno + 23))
                'FinalInletPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)), 0, .Rows(Temprow).Item(Database_Columnno + 24))
                'FinalInletPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 25)), 0, .Rows(Temprow).Item(Database_Columnno + 25))
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)) Then
                    txtInletPressureCase1.Text = ""
                Else
                    txtInletPressureCase1.Text = .Rows(Temprow).Item(Database_Columnno + 23)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)) Then
                    txtInletPressureCase2.Text = ""
                Else

                    txtInletPressureCase2.Text = .Rows(Temprow).Item(Database_Columnno + 24)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 25)) Then
                    txtInletPressureCase3.Text = ""
                Else
                    txtInletPressureCase3.Text = .Rows(Temprow).Item(Database_Columnno + 25)
                End If


                'FinalOutletPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)), 0, .Rows(Temprow).Item(Database_Columnno + 26))
                'FinalOutletPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 27)), 0, .Rows(Temprow).Item(Database_Columnno + 27))
                'FinaloutletPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 28)), 0, .Rows(Temprow).Item(Database_Columnno + 28))
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)) Then
                    txtOutletPressure1.Text = ""
                Else
                    txtOutletPressure1.Text = .Rows(Temprow).Item(Database_Columnno + 26)
                End If

                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 27)) Then
                    txtOutletPressure2.Text = ""
                Else
                    txtOutletPressure2.Text = .Rows(Temprow).Item(Database_Columnno + 27)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 28)) Then
                    txtOutletPressure3.Text = ""
                Else
                    txtOutletPressure3.Text = .Rows(Temprow).Item(Database_Columnno + 28)
                End If


                'TempPD1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 29)), 0, .Rows(Temprow).Item(Database_Columnno + 29))
                'TempPD2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 30)), 0, .Rows(Temprow).Item(Database_Columnno + 30))
                'TempPD3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 31)), 0, .Rows(Temprow).Item(Database_Columnno + 31))
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 29)) Then
                    txtPressureDropCase1.Text = ""
                Else
                    txtPressureDropCase1.Text = .Rows(Temprow).Item(Database_Columnno + 29)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 30)) Then
                    txtPressureDropCase2.Text = ""
                Else
                    txtPressureDropCase2.Text = .Rows(Temprow).Item(Database_Columnno + 30)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 31)) Then
                    txtPressureDropCase3.Text = ""
                Else
                    txtPressureDropCase3.Text = .Rows(Temprow).Item(Database_Columnno + 31)
                End If


                cmbTemperatureUnits.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 18)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 18))
                lblDesignTemperature.Text = cmbTemperatureUnits.Text
                'FinalInletTemperatureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 19)), 0, .Rows(Temprow).Item(Database_Columnno + 19))
                'FinalInletTemperatureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 20)), 0, .Rows(Temprow).Item(Database_Columnno + 20))
                'FinalInletTemperatureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)), 0, .Rows(Temprow).Item(Database_Columnno + 21))
                lblTwUnit.Text = cmbTemperatureUnits.Text


                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 19)) Then
                    txtInletTemperatureCase1.Text = ""
                Else

                    txtInletTemperatureCase1.Text = .Rows(Temprow).Item(Database_Columnno + 19)
                End If

                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 20)) Then
                    txtInletTemperatureCase2.Text = ""
                Else
                    txtInletTemperatureCase2.Text = .Rows(Temprow).Item(Database_Columnno + 20)
                End If

                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)) Then
                    txtInletTemperatureCase3.Text = ""
                Else
                    txtInletTemperatureCase3.Text = .Rows(Temprow).Item(Database_Columnno + 21)
                End If




                'MolecularWeight = If(IsNumeric(CSng(.Rows(Temprow).Item(Database_Columnno + 34))), 0, .Rows(Temprow).Item(Database_Columnno + 34))
                ' MolecularWeight = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 34)), 0, .Rows(Temprow).Item(Database_Columnno + 34))
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 34)) Then
                    txtMolecularWeight.Text = ""
                Else
                    txtMolecularWeight.Text = .Rows(Temprow).Item(Database_Columnno + 34)
                    MolecularWeight = CSng(txtMolecularWeight.Text)
                End If

                chkMolecularWeight.Checked = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 32)), 0, .Rows(Temprow).Item(Database_Columnno + 32))
                cmbDensityUnits.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 33)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 33))



                'FinalDensityCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 35)), 0, .Rows(Temprow).Item(Database_Columnno + 35))
                'FinalDensityCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 36)), 0, .Rows(Temprow).Item(Database_Columnno + 36))
                'FinalDensityCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 37)), 0, .Rows(Temprow).Item(Database_Columnno + 37))
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 35)) Then
                    txtDensityCase1.Text = ""
                Else
                    txtDensityCase1.Text = .Rows(Temprow).Item(Database_Columnno + 35)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 36)) Then
                    txtDensityCase2.Text = ""
                Else
                    txtDensityCase2.Text = .Rows(Temprow).Item(Database_Columnno + 36)
                End If

                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 37)) Then
                    txtDensityCase3.Text = ""
                Else
                    txtDensityCase3.Text = .Rows(Temprow).Item(Database_Columnno + 37)
                End If



                chkViscosity.Checked = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 38)), 0, .Rows(Temprow).Item(Database_Columnno + 38))
                cmbViscosityUnits.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 39)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 39))
                'FinalViscosityCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 40)), 0, .Rows(Temprow).Item(Database_Columnno + 40))
                'FinalViscosityCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 41)), 0, .Rows(Temprow).Item(Database_Columnno + 41))
                'FinalViscosityCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 42)), 0, .Rows(Temprow).Item(Database_Columnno + 42))

                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 40)) Then
                    txtViscosityCase1.Text = ""
                Else
                    txtViscosityCase1.Text = .Rows(Temprow).Item(Database_Columnno + 40)
                End If

                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 41)) Then
                    txtViscosityCase2.Text = ""
                Else
                    txtViscosityCase2.Text = .Rows(Temprow).Item(Database_Columnno + 41)
                End If

                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 42)) Then
                    txtViscosityCase3.Text = ""
                Else
                    txtViscosityCase3.Text = .Rows(Temprow).Item(Database_Columnno + 42)
                End If

                ToutPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 43)), 0, .Rows(Temprow).Item(Database_Columnno + 43))
                ToutPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 44)), 0, .Rows(Temprow).Item(Database_Columnno + 44))
                ToutPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 45)), 0, .Rows(Temprow).Item(Database_Columnno + 45))

                If ToutPressureCase1 <= 0 Then
                    txtTOutPressureCase1.Text = ""
                Else
                    txtTOutPressureCase1.Text = ToutPressureCase1
                End If
                If ToutPressureCase2 <= 0 Then
                    txtTOutPressureCase2.Text = ""
                Else
                    txtTOutPressureCase2.Text = ToutPressureCase2
                End If
                If ToutPressureCase3 <= 0 Then
                    txtTOutPressureCase3.Text = ""
                Else
                    txtTOutPressureCase3.Text = ToutPressureCase3
                End If

                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 46)) Then
                    txtTsatoutPressureCase1.Text = If(.Rows(Temprow).Item(Database_Columnno + 46) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 46))
                Else
                    txtTsatoutPressureCase1.Text = ""
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 47)) Then
                    txtTsatoutPressureCase2.Text = If(.Rows(Temprow).Item(Database_Columnno + 47) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 47))
                Else
                    txtTsatoutPressureCase1.Text = ""
                End If

                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 48)) Then
                    txtTsatoutPressureCase3.Text = If(.Rows(Temprow).Item(Database_Columnno + 48) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 48))
                Else
                    txtTsatoutPressureCase3.Text = ""
                End If

                cmbCriticalPressureUnits.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 49)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 49))

                'FinalCriticalPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 50)), 0, .Rows(Temprow).Item(Database_Columnno + 50))
                'FinalCriticalPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 51)), 0, .Rows(Temprow).Item(Database_Columnno + 51))
                'FinalCriticalPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 52)), 0, .Rows(Temprow).Item(Database_Columnno + 52))
                Dim TempCriticPressure As Single = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 52)), 0, .Rows(Temprow).Item(Database_Columnno + 52))
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 50)) Then
                    txtCriticalPressureCase1.Text = ""
                Else
                    txtCriticalPressureCase1.Text = .Rows(Temprow).Item(Database_Columnno + 50)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 51)) Then
                    txtCriticalPressureCase2.Text = ""
                Else
                    txtCriticalPressureCase2.Text = .Rows(Temprow).Item(Database_Columnno + 51)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 52)) Then
                    txtCriticalPressureCase3.Text = ""
                Else
                    txtCriticalPressureCase3.Text = .Rows(Temprow).Item(Database_Columnno + 52)
                End If


                cmbVapourPressureUnits.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 53)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 53))
                'FinalVapourPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 54)), 0, .Rows(Temprow).Item(Database_Columnno + 54))
                'FinalVapourPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 55)), 0, .Rows(Temprow).Item(Database_Columnno + 55))
                'FinalVapourPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 56)), 0, .Rows(Temprow).Item(Database_Columnno + 56))
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 54)) Then
                    txtVapourPressureCase1.Text = ""
                Else
                    txtVapourPressureCase1.Text = .Rows(Temprow).Item(Database_Columnno + 54)
                End If
                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 55)) Then
                    txtVapourPressureCase2.Text = ""
                Else
                    txtVapourPressureCase2.Text = .Rows(Temprow).Item(Database_Columnno + 55)
                End If

                If IsDBNull(.Rows(Temprow).Item(Database_Columnno + 56)) Then
                    txtVapourPressureCase3.Text = ""
                Else
                    txtVapourPressureCase3.Text = .Rows(Temprow).Item(Database_Columnno + 56)
                End If


                Zcase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 57)), 0, .Rows(Temprow).Item(Database_Columnno + 57))
                Zcase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 58)), 0, .Rows(Temprow).Item(Database_Columnno + 58))
                Zcase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 59)), 0, .Rows(Temprow).Item(Database_Columnno + 59))
                If Zcase1 <= 0 Then
                    txtZ_Case1.Text = ""
                Else
                    txtZ_Case1.Text = Math.Round(Zcase1, 2)
                End If
                If Zcase2 <= 0 Then
                    txtZ_Case2.Text = ""
                Else
                    txtZ_Case2.Text = Math.Round(Zcase2, 2)
                End If
                If Zcase3 <= 0 Then
                    txtZ_Case3.Text = ""
                Else
                    txtZ_Case3.Text = Math.Round(Zcase3, 2)
                End If

                Xcase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 60)), 0, .Rows(Temprow).Item(Database_Columnno + 60))
                Xcase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 61)), 0, .Rows(Temprow).Item(Database_Columnno + 61))
                Xcase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 62)), 0, .Rows(Temprow).Item(Database_Columnno + 62))
                If Xcase1 <= 0 Then
                    txtX_Case1.Text = ""
                Else
                    txtX_Case1.Text = Math.Round(Xcase1, 2)
                End If
                If Xcase2 <= 0 Then
                    txtX_Case2.Text = ""
                Else
                    txtX_Case2.Text = Math.Round(Xcase2, 2)
                End If
                If Xcase3 <= 0 Then
                    txtX_Case3.Text = ""
                Else
                    txtX_Case3.Text = Math.Round(Xcase3, 2)
                End If



                Kcase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 63)), 0, .Rows(Temprow).Item(Database_Columnno + 63))
                Kcase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 64)), 0, .Rows(Temprow).Item(Database_Columnno + 64))
                Kcase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 65)), 0, .Rows(Temprow).Item(Database_Columnno + 65))
                If Kcase1 <= 0 Then
                    txtK_Case1.Text = ""
                Else
                    txtK_Case1.Text = Math.Round(Kcase1, 2)
                End If
                If Kcase2 <= 0 Then
                    txtK_Case2.Text = ""
                Else
                    txtK_Case2.Text = Math.Round(Kcase2, 2)
                End If
                If Kcase3 <= 0 Then
                    txtK_Case3.Text = ""
                Else
                    txtK_Case3.Text = Math.Round(Kcase3, 2)
                End If



                DrynessFraction_LiquidCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 66)), 0, .Rows(Temprow).Item(Database_Columnno + 66))
                DrynessFraction_LiquidCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 67)), 0, .Rows(Temprow).Item(Database_Columnno + 67))
                DrynessFraction_LiquidCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 68)), 0, .Rows(Temprow).Item(Database_Columnno + 68))
                If DrynessFraction_LiquidCase1 <= 0 Then
                    txtFlashingPercentageCase1.Text = ""
                Else
                    txtFlashingPercentageCase1.Text = DrynessFraction_LiquidCase1
                End If
                If DrynessFraction_LiquidCase2 <= 0 Then
                    txtFlashingPercentageCase2.Text = ""
                Else
                    txtFlashingPercentageCase2.Text = DrynessFraction_LiquidCase2
                End If

                If DrynessFraction_LiquidCase3 <= 0 Then
                    txtFlashingPercentageCase3.Text = ""
                Else
                    txtFlashingPercentageCase3.Text = DrynessFraction_LiquidCase3
                End If

                If DrynessFraction_LiquidCase1 > 0 Then
                    txtFlashingPercentageCase1.Visible = True
                End If
                If DrynessFraction_LiquidCase2 > 0 Then
                    txtFlashingPercentageCase2.Visible = True
                End If
                If DrynessFraction_LiquidCase3 > 0 Then
                    txtFlashingPercentageCase3.Visible = True
                End If


                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 69)) Then
                    txtTsatInletCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 69)) Or .Rows(Temprow).Item(Database_Columnno + 69) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 69))
                Else
                    txtTsatInletCase1.Text = ""
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 70)) Then
                    txtTsatInletCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 70)) Or .Rows(Temprow).Item(Database_Columnno + 70) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 70))
                Else
                    txtTsatInletCase2.Text = ""
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 71)) Then
                    txtTsatInletCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 71)) Or .Rows(Temprow).Item(Database_Columnno + 71) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 71))
                Else
                    txtTsatInletCase3.Text = ""
                End If

                SelectP2orDP = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 72)), 0, .Rows(Temprow).Item(Database_Columnno + 72))
                If SelectP2orDP = False Then  'Enter Outlet Pressure
                    btnSelectP2DP.Text = "Select DP"
                    btnSelectP2DP.Location = New Point(115, 153)
                    txtPressureDropCase1.ReadOnly = True
                    txtPressureDropCase1.BackColor = Color.WhiteSmoke
                    txtPressureDropCase2.ReadOnly = True
                    txtPressureDropCase2.BackColor = Color.WhiteSmoke
                    txtPressureDropCase3.ReadOnly = True
                    txtPressureDropCase3.BackColor = Color.WhiteSmoke

                    txtOutletPressure1.ReadOnly = False
                    txtOutletPressure1.BackColor = Color.White
                    txtOutletPressure2.ReadOnly = False
                    txtOutletPressure2.BackColor = Color.White
                    txtOutletPressure3.ReadOnly = False
                    txtOutletPressure3.BackColor = Color.White
                Else
                    btnSelectP2DP.Text = "Select P2"
                    btnSelectP2DP.Location = New Point(115, 175)
                    txtPressureDropCase1.ReadOnly = False
                    txtPressureDropCase1.BackColor = Color.White
                    txtPressureDropCase2.ReadOnly = False
                    txtPressureDropCase2.BackColor = Color.White
                    txtPressureDropCase3.ReadOnly = False
                    txtPressureDropCase3.BackColor = Color.White

                    txtOutletPressure1.ReadOnly = True
                    txtOutletPressure1.BackColor = Color.WhiteSmoke
                    txtOutletPressure2.ReadOnly = True
                    txtOutletPressure2.BackColor = Color.WhiteSmoke
                    txtOutletPressure3.ReadOnly = True
                    txtOutletPressure3.BackColor = Color.WhiteSmoke

                End If


                SalesEnggName = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 74)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 74))
                frmCustomerDetails.txtSalesEngg.Text = SalesEnggName
                lblSalesEngg.Text = SalesEnggName
                txtEnggNameMain.Text = SalesEnggName
                CustomerRef = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 75)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 75))
                frmCustomerDetails.txtSalesEngg.Text = CustomerRef
                txtCustomerRefMain.Text = CustomerRef
                '***************************************************
                '---------------------------------- 
                Database_Columnno = DataSection2_MOC
                cmbMOC.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 1)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 1))
                FinalDesignPressureInlet = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 2)), 0, .Rows(Temprow).Item(Database_Columnno + 2))
                txtDesignPressureInlet.Text = FinalDesignPressureInlet
                FinalDesignTemperatureInlet = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 3)), 0, .Rows(Temprow).Item(Database_Columnno + 3))
                txtDesignTemperatureInlet.Text = FinalDesignTemperatureInlet

                SuggestedRating = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 4)), 0, .Rows(Temprow).Item(Database_Columnno + 4))
                lblSuggestedRating.Text = SuggestedRating

                '  Call CalculateRatings()

                cmbSuggestedRating.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 5)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 5))
                lblFinalRating.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 6))
                cmbAreaunits.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 7)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 7))
                cmbInletPipeSize.Items.Clear()
                cmbPipeDia.Items.Clear()
                For i = 0 To 35
                    If cmbAreaunits.Text = "NB" Then
                        cmbInletPipeSize.Items.Add(NB_PipeDIa(i))
                        cmbPipeDia.Items.Add(NB_PipeDIa(i))
                    Else
                        cmbInletPipeSize.Items.Add(INCH_PipeDia(i))
                        cmbPipeDia.Items.Add(INCH_PipeDia(i))
                    End If
                Next
                'Call ConfirmRating()
                cmbInletPipeSize.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 8)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 8))


                lblSuggPipeSize.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 9)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 9))
                cmbPipeDia.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 10)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 10))

                lblFinalOutletPipe.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 11)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 11))

                If Not cmbInletPipeSize.Text = "--Select--" And Not cmbInletPipeSize.Text = "" Then
                    Call LoadInletSchedule()
                    ' to fill the Schedule Drop down List
                End If
                If Not cmbPipeDia.Text = "--Select--" And Not cmbPipeDia.Text = "" Then
                    Call CheckSelectedID(CSng(cmbPipeDia.Text), "Pipedia")                                   ' to fill the Schedule Drop down List
                End If

                cmbSchedule.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 12))
                cmbInletPipeSchedule.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 13)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 13))
                Noise_ValveID = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 14)), 0, .Rows(Temprow).Item(Database_Columnno + 14))
                Noise_ID = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 15)), 0, .Rows(Temprow).Item(Database_Columnno + 15))
                Noise_Schedule = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 16)), 0, .Rows(Temprow).Item(Database_Columnno + 16))
                Noise_OutletPipeDia = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 17)), 0, .Rows(Temprow).Item(Database_Columnno + 17))
                InletPipeSize = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 18)), 0, .Rows(Temprow).Item(Database_Columnno + 18))
                InletPipeID = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 19)), 0, .Rows(Temprow).Item(Database_Columnno + 19))

                Label26.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 20)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 20))
                cmbVelocityRule.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 21))
                cmbFlowDirection.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 22)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 22))
                cmbCharacterstics.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 23))
                cmbKVseries.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 24))
                txtSuggestedKV.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 25)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 25))
                txtSuggestedValveSize.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 26))
                cmbKVOverride.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 27)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 27))
                cmbValveSizeOverride.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 28)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 28))
                lblKVMaxValue.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 29)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 29))
                lblFinalValveSize.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 30)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 30))
                DT_ActuatorInfo.Rows(0).Item(1) = lblFinalValveSize.Text
                cmbBonnetType.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 31)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 31))
                cmbEndConnection.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 32)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 32))
                ' 33 Used by FinalDesignTemperatureInlet
                txtSuggTrim.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 34)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 34))
                cmbSelectedTrim.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 35)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 35))
                chkBaffleCase1.Checked = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 36)), 0, .Rows(Temprow).Item(Database_Columnno + 36))
                txtBaffleKVCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 39)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 39))
                chkBaffleCase2.Checked = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 37)), 0, .Rows(Temprow).Item(Database_Columnno + 37))
                txtBaffleKVCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 40)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 40))
                chkBaffleCase3.Checked = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 38)), 0, .Rows(Temprow).Item(Database_Columnno + 38))
                txtBaffleKVCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 41)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 41))
                lblMicroTrim.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 42)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 42))

                ''****************************************************
                ' Actuator(section)
                Database_Columnno = DataSection3_Actuator

                cmbActuatorType.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 1)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 1))
                cmbBalancing.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 2)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 2))
                cmbAirFailure.SelectedValue = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 3)), -1, .Rows(Temprow).Item(Database_Columnno + 3))
                cmbAirFailure.SelectedIndex = cmbAirFailure.SelectedValue - 1 '
                'cmbAirFailure.Text = If((cmbAirFailure.SelectedIndex < 0), cmbAirFailure.GetItemText(cmbAirFailure.Items(cmbAirFailure.SelectedIndex)), "")

                If cmbAirFailure.SelectedIndex < 0 Then
                    cmbAirFailure.Text = ""
                Else
                    cmbAirFailure.Text = cmbAirFailure.GetItemText(cmbAirFailure.Items(cmbAirFailure.SelectedIndex))
                End If

                cmbLeakage.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 4)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 4))
                cmbPacking.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 5)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 5))
                cmbSealing.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 6))
                txtDPShutoff.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 7)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 7))
                cmbAirPressureUnits.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 8)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 8))
                txtAirPressure.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 9)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 9))

                cmbSeatDia.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 10)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 10))

                lblForce0perc.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 11)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 11))
                'cmbHandwheel.SelectedValue = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)), -1, .Rows(Temprow).Item(Database_Columnno + 12))
                If Not (IsNumeric(.Rows(Temprow).Item(Database_Columnno + 12))) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(20).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 12) Then
                            cmbHandwheel.SelectedValue = row.Item("SR_NO")
                        End If
                    Next
                Else
                    cmbHandwheel.SelectedValue = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)), -1, .Rows(Temprow).Item(Database_Columnno + 12))
                End If
                cmbHandwheel.SelectedIndex = cmbHandwheel.SelectedValue - 1 '
                cmbHandwheel.Text = If((cmbHandwheel.SelectedIndex < 0), cmbHandwheel.GetItemText(cmbHandwheel.Items(cmbHandwheel.SelectedIndex)), "")

                txtSuggActuator.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 13)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 13))
                cmbSelectActuator.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 14)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 14))
                lblFinalActuator.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 15)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 15))
                InitialSpringRange = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 16)), 0, .Rows(Temprow).Item(Database_Columnno + 16))
                FinalSpringRange = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 17)), 0, .Rows(Temprow).Item(Database_Columnno + 17))
                NoofSprings = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 18)), 0, .Rows(Temprow).Item(Database_Columnno + 18))
                MKSActuator = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 19)), 0, .Rows(Temprow).Item(Database_Columnno + 19))
                MKSInitialSpringRange = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 20)), 0, .Rows(Temprow).Item(Database_Columnno + 20))
                MKSFinalSpringRange = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)), 0, .Rows(Temprow).Item(Database_Columnno + 21))
                lblSel0PercF.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 22)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 22))
                lblSel100PerF.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 23))
                lblForce100perc.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 24))

                'Materials 
                Database_Columnno = DataSection4_Materials

                'BodyMaterial = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 1)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 1))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 1)) Then
                    If cmbModel.SelectedIndex = 0 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(30).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 1) Then
                                BodyMaterial = row.Item("SR_NO")
                                Exit For
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 1 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(2).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 1) Then
                                BodyMaterial = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 2 Or cmbModel.SelectedIndex = 3 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(35).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 1) Then
                                BodyMaterial = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 4 Or cmbModel.SelectedIndex = 5 Or cmbModel.SelectedIndex = 6 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(40).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 1) Then
                                BodyMaterial = row.Item("SR_NO")
                            End If
                        Next
                    End If
                Else
                    BodyMaterial = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 1)), -1, .Rows(Temprow).Item(Database_Columnno + 1))
                End If

                'Plug = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 2)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 2))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 2)) Then
                    If cmbModel.SelectedIndex = 0 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(32).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 2) Then
                                Plug = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 1 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(3).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 2) Then
                                Plug = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 2 Or cmbModel.SelectedIndex = 3 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(37).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 2) Then
                                Plug = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 4 Or cmbModel.SelectedIndex = 5 Or cmbModel.SelectedIndex = 6 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(42).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 2) Then
                                Plug = row.Item("SR_NO")
                            End If
                        Next
                    End If
                Else
                    Plug = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 2)), -1, .Rows(Temprow).Item(Database_Columnno + 2))
                End If

                'Seat = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 3)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 3))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 3)) Then
                    If cmbModel.SelectedIndex = 0 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(33).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 3) Then
                                Seat = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 1 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(4).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 3) Then
                                Seat = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 2 Or cmbModel.SelectedIndex = 3 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(38).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 3) Then
                                Seat = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 4 Or cmbModel.SelectedIndex = 5 Or cmbModel.SelectedIndex = 6 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(43).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 3) Then
                                Seat = row.Item("SR_NO")
                            End If
                        Next
                    End If
                Else
                    Seat = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 3)), -1, .Rows(Temprow).Item(Database_Columnno + 3))
                End If

                'TopMaterials = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 4)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 4))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 4)) Then
                    If cmbModel.SelectedIndex = 0 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(31).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 4) Then
                                TopMaterials = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 1 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(5).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 4) Then
                                TopMaterials = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 2 Or cmbModel.SelectedIndex = 3 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(36).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 4) Then
                                TopMaterials = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 4 Or cmbModel.SelectedIndex = 5 Or cmbModel.SelectedIndex = 6 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(41).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 4) Then
                                TopMaterials = row.Item("SR_NO")
                            End If
                        Next
                    End If
                Else
                    TopMaterials = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 4)), -1, .Rows(Temprow).Item(Database_Columnno + 4))
                End If

                'Gasket = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 5)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 5))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 5)) Then
                    If cmbModel.SelectedIndex = 0 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(34).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 5) Then
                                Gasket = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 1 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(6).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 5) Then
                                Gasket = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 2 Or cmbModel.SelectedIndex = 3 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(39).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 5) Then
                                Gasket = row.Item("SR_NO")
                            End If
                        Next
                    ElseIf cmbModel.SelectedIndex = 4 Or cmbModel.SelectedIndex = 5 Or cmbModel.SelectedIndex = 6 Then
                        For Each row As DataRow In ds_AccessoriesMat.Tables(44).Rows
                            If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 5) Then
                                Gasket = row.Item("SR_NO")
                            End If
                        Next
                    End If
                Else
                    Gasket = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 5)), -1, .Rows(Temprow).Item(Database_Columnno + 5))
                End If

                'Painting = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 6))
                'Painting_ACC = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 28)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 28))
                If Not (IsNumeric(.Rows(Temprow).Item(Database_Columnno + 6))) Then
                    For Each row In ds_AccessoriesMat.Tables(7).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 6) Then
                            Painting = row.Item("SR_NO")
                            Painting_ACC = row.Item("SR_NO")
                        End If
                    Next
                Else
                    Painting = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)), -1, .Rows(Temprow).Item(Database_Columnno + 6))
                    Painting_ACC = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)), -1, .Rows(Temprow).Item(Database_Columnno + 6))
                End If

                frmMaterials.cmbBodyMaterial.SelectedValue = BodyMaterial
                frmMaterials.cmbPlug.SelectedValue = Plug
                frmMaterials.cmbSeat.SelectedValue = Seat
                frmMaterials.cmbTopMaterials.SelectedValue = TopMaterials
                frmMaterials.cmbGasket.SelectedValue = Gasket
                frmMaterials.cmbPainitng.Text = Painting
                frmMaterials.cmbPaintingACC.Text = Painting_ACC

                'Positioner = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 7)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 7))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 7)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(8).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 7) Then
                            Positioner = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    Positioner = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 7)), -1, .Rows(Temprow).Item(Database_Columnno + 7))
                End If

                'Sov = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 8)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 8))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 8)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(9).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 8) Then
                            Sov = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    Sov = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 8)), -1, .Rows(Temprow).Item(Database_Columnno + 8))
                End If

                'AFR = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 9)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 9))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 9)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(10).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 9) Then
                            AFR = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    AFR = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 9)), -1, .Rows(Temprow).Item(Database_Columnno + 9))
                End If

                'ALR = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 10)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 10))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 10)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(11).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 10) Then
                            ALR = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    ALR = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 10)), -1, .Rows(Temprow).Item(Database_Columnno + 10))
                End If

                'LimitSwitch = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 11)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 11))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 11)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(12).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 11) Then
                            LimitSwitch = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    LimitSwitch = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 11)), -1, .Rows(Temprow).Item(Database_Columnno + 11))
                End If

                'VolBooster = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 12))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 12)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(13).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 12) Then
                            VolBooster = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    VolBooster = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)), -1, .Rows(Temprow).Item(Database_Columnno + 12))
                End If

                'PosnTrans = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 13)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 13))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 13)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(14).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 13) Then
                            PosnTrans = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    PosnTrans = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 13)), -1, .Rows(Temprow).Item(Database_Columnno + 13))
                End If

                'Roborter = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 15)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 15))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 15)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(16).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 15) Then
                            Roborter = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    Roborter = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 15)), -1, .Rows(Temprow).Item(Database_Columnno + 15))
                End If

                'ItoP = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 16)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 16))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 16)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(17).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 16) Then
                            ItoP = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    ItoP = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 16)), -1, .Rows(Temprow).Item(Database_Columnno + 16))
                End If

                'QEV = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 17)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 17))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 17)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(18).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 17) Then
                            QEV = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    QEV = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 17)), -1, .Rows(Temprow).Item(Database_Columnno + 17))
                End If

                'Certification = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 18)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 18))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 18)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(19).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 18) Then
                            Certification = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    Certification = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 18)), -1, .Rows(Temprow).Item(Database_Columnno + 18))
                End If

                VTank = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 14)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 14))
                'Tubing = If(IsNumeric(.Rows(Temprow).Item(Database_Columnno + 19)), .Rows(Temprow).Item(Database_Columnno + 19), -1)
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 19)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(21).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 18) Then
                            Tubing = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    Tubing = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 19)), -1, .Rows(Temprow).Item(Database_Columnno + 19))
                End If

                Guiding = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 20)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 20))

                '12102020 changes
                'PositionerMake = If(Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 21)), -1, .Rows(Temprow).Item(Database_Columnno + 21))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 21)) Then
                    For Each row In ds_AccessoriesMat.Tables(23).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 21) Then
                            PositionerMake = row.Item("SR_NO")
                        End If
                    Next
                Else
                    PositionerMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)), -1, .Rows(Temprow).Item(Database_Columnno + 21))
                End If

                'AFRMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 22)), -1, .Rows(Temprow).Item(Database_Columnno + 22))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 22)) Then
                    For Each row In ds_AccessoriesMat.Tables(24).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 22) Then
                            AFRMake = row.Item("SR_NO")
                        End If
                    Next
                Else
                    AFRMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 22)), -1, .Rows(Temprow).Item(Database_Columnno + 22))
                End If

                'ALRMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), -1, .Rows(Temprow).Item(Database_Columnno + 23))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 23)) Then
                    For Each row In ds_AccessoriesMat.Tables(25).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 23) Then
                            ALRMake = row.Item("SR_NO")
                        End If
                    Next
                Else
                    ALRMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), -1, .Rows(Temprow).Item(Database_Columnno + 23))
                End If

                'SOVMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)), -1, .Rows(Temprow).Item(Database_Columnno + 24))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 24)) Then
                    For Each row In ds_AccessoriesMat.Tables(26).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 24) Then
                            SOVMake = row.Item("SR_NO")
                        End If
                    Next
                Else
                    SOVMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)), -1, .Rows(Temprow).Item(Database_Columnno + 24))
                End If

                'VBMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 25)), -1, .Rows(Temprow).Item(Database_Columnno + 25))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 25)) Then
                    For Each row In ds_AccessoriesMat.Tables(27).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 25) Then
                            VBMake = row.Item("SR_NO")
                        End If
                    Next
                Else
                    VBMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 25)), -1, .Rows(Temprow).Item(Database_Columnno + 25))
                End If

                'LimitSwitchMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)), -1, .Rows(Temprow).Item(Database_Columnno + 26))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 26)) Then
                    For Each row In ds_AccessoriesMat.Tables(28).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 26) Then
                            LimitSwitchMake = row.Item("SR_NO")
                        End If
                    Next
                Else
                    LimitSwitchMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)), -1, .Rows(Temprow).Item(Database_Columnno + 26))
                End If

                'QEVMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 27)), -1, .Rows(Temprow).Item(Database_Columnno + 27))
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 27)) Then
                    For Each row In ds_AccessoriesMat.Tables(29).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 27) Then
                            QEVMake = row.Item("SR_NO")
                        End If
                    Next
                Else
                    QEVMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 27)), -1, .Rows(Temprow).Item(Database_Columnno + 27))
                End If

                'frmAccessories.cmbPositioner.SelectedValue = Positioner
                'frmAccessories.cmbSOV.SelectedValue = Sov
                'frmAccessories.cmbAFR.SelectedValue = AFR
                'frmAccessories.cmbALR.SelectedValue = ALR
                'frmAccessories.cmbLimitSwitch.SelectedValue = LimitSwitch
                'frmAccessories.cmbVolBooster.SelectedValue = VolBooster
                'frmAccessories.cmbPosnTrans.SelectedValue = PosnTrans
                'frmAccessories.cmbVtank.Text = VTank
                'frmAccessories.cmbRobotor.SelectedValue = Roborter
                'frmAccessories.cmbItoP.SelectedValue = ItoP
                'frmAccessories.cmbQEV.SelectedValue = QEV
                'frmAccessories.cmbCertification.SelectedValue = Certification

                Database_Columnno = DataSection5_Output1

                lblApproxCVCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 1)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 1))
                lblApproxCVCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 2)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 2))
                lblApproxCVCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 3)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 3))
                lblKVCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 4)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 4))
                lblKVCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 5)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 5))
                lblKVCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 6))
                lblFinalCVCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 7)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 7))
                lblFinalCVCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 8)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 8))
                lblFinalCVCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 9)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 9))
                lblFinalKVCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 10)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 10))
                lblFinalKvCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 11)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 11))
                lblFinalKVcase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 12))
                lblStrokeCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 13)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 13))
                lblStrokeCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 14)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 14))
                lblStrokeCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 15)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 15))
                lblFlowtypeCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 16)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 16))
                lblFlowtypeCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 17)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 17))
                lblFlowtypeCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 18)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 18))
                lblSeverityCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 19)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 19))
                lblSeverityCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 20)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 20))
                lblSeverityCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 21))
                lblVelocityValveInletCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 22)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 22))
                lblVelocityValveInletCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 23))
                lblVelocityValveInletCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 24))
                lblVelocityValveOutletCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 25)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 25))
                lblVelocityValveOutletCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 26))
                lblVelocityValveOutletCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 27)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 27))
                lblVelocityInletPipeCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 28)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 28))
                lblVelocityInletPipeCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 29)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 29))
                lblVelocityInletPipeCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 30)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 30))
                lblVelocityOutletPipeCase1.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 31)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 31))
                lblVelocityOutletPipeCase2.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 32)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 32))
                lblVelocityOutletPipeCase3.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 33)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 33))

                If Not txtSuggestedKV.Text = "" And Not cmbKVOverride.Text = "" Then
                    If txtSuggestedKV.Text > cmbKVOverride.Text Then
                        GroupBox1.BackColor = Color.AntiqueWhite
                        GroupBox2.BackColor = Color.AntiqueWhite
                        GroupBox3.BackColor = Color.AntiqueWhite
                    Else
                        GroupBox1.BackColor = Color.LightSteelBlue
                        GroupBox2.BackColor = Color.LightSteelBlue
                        GroupBox3.BackColor = Color.LightSteelBlue

                    End If
                End If

                Database_Columnno = DataSection6_Output2
                FinalNoiseLevelCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 1)), 0, .Rows(Temprow).Item(Database_Columnno + 1))
                FinalNoiseLevelCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 2)), 0, .Rows(Temprow).Item(Database_Columnno + 2))
                FinalNoiseLevelCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 3)), 0, .Rows(Temprow).Item(Database_Columnno + 3))
                If FinalNoiseLevelCase1 <= 0 Then
                    lblNoiseCase1.Text = ""
                Else
                    lblNoiseCase1.Text = Math.Round(FinalNoiseLevelCase1, 2)
                End If
                If FinalNoiseLevelCase2 <= 0 Then
                    lblNoiseCase2.Text = ""
                Else
                    lblNoiseCase2.Text = Math.Round(FinalNoiseLevelCase2, 2)
                End If
                If FinalNoiseLevelCase3 <= 0 Then
                    lblNoiseCase3.Text = ""
                Else
                    lblNoiseCase3.Text = Math.Round(FinalNoiseLevelCase3, 2)
                End If


                chkNoiseAttenuation.Checked = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 4)), 0, .Rows(Temprow).Item(Database_Columnno + 4))
                If chkNoiseAttenuation.Checked Then
                    NoiseAttenuationFlag = True
                End If

                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 5)) Then
                    lblAttenuatedNoiseCase1.Text = If((.Rows(Temprow).Item(Database_Columnno + 5)) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 5))
                Else
                    lblAttenuatedNoiseCase1.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)) Then
                    lblAttenuatedNoiseCase2.Text = If((.Rows(Temprow).Item(Database_Columnno + 6)) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 6))
                Else
                    lblAttenuatedNoiseCase2.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 7)) Then
                    lblAttenuatedNoiseCase3.Text = If((.Rows(Temprow).Item(Database_Columnno + 7)) <= 0, String.Empty, .Rows(Temprow).Item(Database_Columnno + 7))
                Else
                    lblAttenuatedNoiseCase3.Text = String.Empty
                End If


                chkInsulation.Checked = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 8)), 0, .Rows(Temprow).Item(Database_Columnno + 8))

                If chkInsulation.Checked = True Then        '' iF INSULATION WAS CHECKED STORE ORIGINAL NOISE SO THAT WHEN ATTN PRESSED AGAIN THEN ORG NOISE IS INSULATED
                    FinalNoiseLevelCase1 = FinalNoiseLevelCase1 + 12
                    FinalNoiseLevelCase2 = FinalNoiseLevelCase2 + 12
                    FinalNoiseLevelCase3 = FinalNoiseLevelCase3 + 12
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 9)) Then
                    lblAttnPressDropCase1.Text = If(.Rows(Temprow).Item(Database_Columnno + 9) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 9))
                Else
                    lblAttnPressDropCase1.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 10)) Then
                    lblAttnPressDropCase2.Text = If((.Rows(Temprow).Item(Database_Columnno + 10)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 10))
                Else
                    lblAttnPressDropCase2.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 11)) Then
                    lblAttnPressDropCase3.Text = If((.Rows(Temprow).Item(Database_Columnno + 11)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 11))
                Else
                    lblAttnPressDropCase3.Text = String.Empty
                End If

                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)) Then
                    lblMachNoVavleOutCase1.Text = If((.Rows(Temprow).Item(Database_Columnno + 12)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 12))
                Else
                    lblMachNoVavleOutCase1.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 13)) Then
                    lblMachNoVavleOutCase2.Text = If((.Rows(Temprow).Item(Database_Columnno + 13)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 13))
                Else
                    lblMachNoVavleOutCase2.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 14)) Then
                    lblMachNoVavleOutCase3.Text = If((.Rows(Temprow).Item(Database_Columnno + 14)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 14))
                Else
                    lblMachNoVavleOutCase3.Text = String.Empty
                End If

                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 15)) Then
                    lblMachNoPipeOutCase1.Text = If((.Rows(Temprow).Item(Database_Columnno + 15)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 15))
                Else
                    lblMachNoPipeOutCase1.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 16)) Then
                    lblMachNoPipeOutCase2.Text = If((.Rows(Temprow).Item(Database_Columnno + 16)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 16))
                Else
                    lblMachNoPipeOutCase2.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 17)) Then
                    lblMachNoPipeOutCase3.Text = If((.Rows(Temprow).Item(Database_Columnno + 17)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 17))
                Else
                    lblMachNoPipeOutCase3.Text = String.Empty
                End If

                FLCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 18)), 0, .Rows(Temprow).Item(Database_Columnno + 18))
                FLCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 19)), 0, .Rows(Temprow).Item(Database_Columnno + 19))
                FLCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 20)), 0, .Rows(Temprow).Item(Database_Columnno + 20))

                If FLCase1 <= 0 Then
                    lblFLCase1.Text = ""
                Else
                    lblFLCase1.Text = Math.Round(FLCase1, 2)
                End If
                If FLCase2 <= 0 Then
                    lblFLCase2.Text = ""
                Else
                    lblFLCase2.Text = Math.Round(FLCase2, 2)
                End If
                If FLCase3 <= 0 Then
                    lblFLCase3.Text = ""
                Else
                    lblFLCase3.Text = Math.Round(FLCase3, 2)
                End If

                Xtcase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)), 0, .Rows(Temprow).Item(Database_Columnno + 21))
                Xtcase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 22)), 0, .Rows(Temprow).Item(Database_Columnno + 22))
                Xtcase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), 0, .Rows(Temprow).Item(Database_Columnno + 23))

                lblXTCase1.Text = If(Xtcase1 <= 0, String.Empty, Xtcase1)
                lblXTCase2.Text = If(Xtcase2 <= 0, String.Empty, Xtcase2)
                lblXTCase3.Text = If(Xtcase3 <= 0, String.Empty, Xtcase3)
                FP = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)), 0, .Rows(Temprow).Item(Database_Columnno + 24))
                lblFP.Text = If(FP <= 0, String.Empty, FP)
                lblValveModel.Text = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 25)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 25))
                FinalValveSize = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)), 0, .Rows(Temprow).Item(Database_Columnno + 26))
                FinalKVCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 27)), 0, .Rows(Temprow).Item(Database_Columnno + 27))
                FinalKVCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 28)), 0, .Rows(Temprow).Item(Database_Columnno + 28))
                FinalKVCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 29)), 0, .Rows(Temprow).Item(Database_Columnno + 29))

                FinalKVmax_ValveSize = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 30)), 0, .Rows(Temprow).Item(Database_Columnno + 30))
                FDCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 31)), 0, .Rows(Temprow).Item(Database_Columnno + 31))
                FDCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 32)), 0, .Rows(Temprow).Item(Database_Columnno + 32))
                FDCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 33)), 0, .Rows(Temprow).Item(Database_Columnno + 33))
                SeatDia = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 34)), 0, .Rows(Temprow).Item(Database_Columnno + 34))
                UserNotes1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 35)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 35))
                UserNotes2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 36)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 36))
                UserNotes3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 37)), String.Empty, .Rows(Temprow).Item(Database_Columnno + 37))
                PrBl_SeatDia = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 39)), 0, .Rows(Temprow).Item(Database_Columnno + 39))
                FPKVCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 40)), 0, .Rows(Temprow).Item(Database_Columnno + 40))
                FPKVCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 41)), 0, .Rows(Temprow).Item(Database_Columnno + 41))
                FPKVCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 42)), 0, .Rows(Temprow).Item(Database_Columnno + 42))
                BaffleKVCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 43)), 0, .Rows(Temprow).Item(Database_Columnno + 43))
                BaffleKVCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 44)), 0, .Rows(Temprow).Item(Database_Columnno + 44))
                BaffleKVCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 45)), 0, .Rows(Temprow).Item(Database_Columnno + 45))
                Stages = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 46)), 0, .Rows(Temprow).Item(Database_Columnno + 46))


                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 47)) Then
                    txtWaterPressure.Text = If((.Rows(Temprow).Item(Database_Columnno + 47)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 47))
                Else
                    txtWaterPressure.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 48)) Then
                    txtWaterTemperature.Text = If((.Rows(Temprow).Item(Database_Columnno + 48)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 48))
                Else
                    txtWaterTemperature.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 49)) Then
                    txtWaterFlowCase1.Text = If((.Rows(Temprow).Item(Database_Columnno + 49)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 49))
                Else
                    txtWaterFlowCase1.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 50)) Then
                    txtWaterFlowCase2.Text = If((.Rows(Temprow).Item(Database_Columnno + 50)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 50))
                Else
                    txtWaterFlowCase2.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 51)) Then
                    txtWaterFlowCase3.Text = If((.Rows(Temprow).Item(Database_Columnno + 51)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 51))
                Else
                    txtWaterFlowCase3.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 52)) Then
                    txtP2OutWCase1.Text = If((.Rows(Temprow).Item(Database_Columnno + 52)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 52))
                Else
                    txtP2OutWCase1.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 53)) Then
                    txtP2OutWCase2.Text = If((.Rows(Temprow).Item(Database_Columnno + 53)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 53))
                Else
                    txtP2OutWCase2.Text = String.Empty
                End If
                If Not IsDBNull(.Rows(Temprow).Item(Database_Columnno + 54)) Then
                    txtP2OutWCase3.Text = If((.Rows(Temprow).Item(Database_Columnno + 54)) = "0", String.Empty, .Rows(Temprow).Item(Database_Columnno + 54))
                Else
                    txtP2OutWCase3.Text = String.Empty
                End If


                WaterFlowRateCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 55)), 0, .Rows(Temprow).Item(Database_Columnno + 55))
                WaterFlowRateCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 56)), 0, .Rows(Temprow).Item(Database_Columnno + 56))
                WaterFlowRateCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 57)), 0, .Rows(Temprow).Item(Database_Columnno + 57))
                OutletWaterPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 58)), 0, .Rows(Temprow).Item(Database_Columnno + 58))
                OutletWaterPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 59)), 0, .Rows(Temprow).Item(Database_Columnno + 59))
                OutletWaterPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 60)), 0, .Rows(Temprow).Item(Database_Columnno + 60))


                Xtcase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)), 0, .Rows(Temprow).Item(Database_Columnno + 21))
                Xtcase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 22)), 0, .Rows(Temprow).Item(Database_Columnno + 22))
                Xtcase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), 0, .Rows(Temprow).Item(Database_Columnno + 23))


                Database_Columnno = DataSection7_CalcValues
                FlowrateForPipeDiaCalcCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 1)), 0, .Rows(Temprow).Item(Database_Columnno + 1))
                FlowrateForPipeDiaCalcCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 2)), 0, .Rows(Temprow).Item(Database_Columnno + 2))
                FlowrateForPipeDiaCalcCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 3)), 0, .Rows(Temprow).Item(Database_Columnno + 3))

                FluidVelocityCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 4)), 0, .Rows(Temprow).Item(Database_Columnno + 4))
                FluidVelocityCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 5)), 0, .Rows(Temprow).Item(Database_Columnno + 5))
                FluidVelocityCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 6)), 0, .Rows(Temprow).Item(Database_Columnno + 6))

                SoundVelocityCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 7)), 0, .Rows(Temprow).Item(Database_Columnno + 7))
                SoundVelocityCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 8)), 0, .Rows(Temprow).Item(Database_Columnno + 8))
                SoundVelocityCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 9)), 0, .Rows(Temprow).Item(Database_Columnno + 9))

                PRDS_IP_FlowrateForPipeDiaCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 10)), 0, .Rows(Temprow).Item(Database_Columnno + 10))
                PRDS_IP_FlowrateForPipeDiaCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 11)), 0, .Rows(Temprow).Item(Database_Columnno + 11))
                PRDS_IP_FlowrateForPipeDiaCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 12)), 0, .Rows(Temprow).Item(Database_Columnno + 12))

                PRDS_OP_FlowrateForPipeDiaCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 13)), 0, .Rows(Temprow).Item(Database_Columnno + 13))
                PRDS_OP_FlowrateForPipeDiaCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 14)), 0, .Rows(Temprow).Item(Database_Columnno + 14))
                PRDS_OP_FlowrateForPipeDiaCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 15)), 0, .Rows(Temprow).Item(Database_Columnno + 15))

                VelocityRuleFlag = .Rows(Temprow).Item(Database_Columnno + 16)

                '  The below Values are calculated from Text entries and are needed for calculations on reloading 
                FinalInletPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 17)), 0, .Rows(Temprow).Item(Database_Columnno + 17))
                FinalInletPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 18)), 0, .Rows(Temprow).Item(Database_Columnno + 18))
                FinalInletPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 19)), 0, .Rows(Temprow).Item(Database_Columnno + 19))

                FinalOutletPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 20)), 0, .Rows(Temprow).Item(Database_Columnno + 20))
                FinalOutletPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 21)), 0, .Rows(Temprow).Item(Database_Columnno + 21))
                FinaloutletPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 22)), 0, .Rows(Temprow).Item(Database_Columnno + 22))

                FinalPressureDropCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 23)), 0, .Rows(Temprow).Item(Database_Columnno + 23))
                FinalPressureDropCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 24)), 0, .Rows(Temprow).Item(Database_Columnno + 24))
                FinalPressureDropCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)), 0, .Rows(Temprow).Item(Database_Columnno + 25))

                FinalInletTemperatureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 26)), 0, .Rows(Temprow).Item(Database_Columnno + 26))
                FinalInletTemperatureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 27)), 0, .Rows(Temprow).Item(Database_Columnno + 27))
                FinalInletTemperatureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 28)), 0, .Rows(Temprow).Item(Database_Columnno + 28))

                FinalVapourPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 29)), 0, .Rows(Temprow).Item(Database_Columnno + 29))
                FinalVapourPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 30)), 0, .Rows(Temprow).Item(Database_Columnno + 30))
                FinalVapourPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 31)), 0, .Rows(Temprow).Item(Database_Columnno + 31))

                FinalCriticalPressureCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 32)), 0, .Rows(Temprow).Item(Database_Columnno + 32))
                FinalCriticalPressureCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 33)), 0, .Rows(Temprow).Item(Database_Columnno + 33))
                FinalCriticalPressureCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 34)), 0, .Rows(Temprow).Item(Database_Columnno + 34))

                FinalViscosityCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 35)), 0, .Rows(Temprow).Item(Database_Columnno + 35))
                FinalViscosityCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 36)), 0, .Rows(Temprow).Item(Database_Columnno + 36))
                FinalViscosityCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 37)), 0, .Rows(Temprow).Item(Database_Columnno + 37))

                FinalDensityCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 38)), 0, .Rows(Temprow).Item(Database_Columnno + 38))
                FinalDensityCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 39)), 0, .Rows(Temprow).Item(Database_Columnno + 39))
                FinalDensityCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 40)), 0, .Rows(Temprow).Item(Database_Columnno + 40))

                FinalFlowrateCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 41)), 0, .Rows(Temprow).Item(Database_Columnno + 41))
                FinalFlowrateCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 42)), 0, .Rows(Temprow).Item(Database_Columnno + 42))
                FinalFlowrateCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 43)), 0, .Rows(Temprow).Item(Database_Columnno + 43))

                SupplyAirPressure = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 44)), 0, .Rows(Temprow).Item(Database_Columnno + 44))
                DPShutoff = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 45)), 0, .Rows(Temprow).Item(Database_Columnno + 45))

                'TubingMake = If(IsNumeric(.Rows(Temprow).Item(Database_Columnno + 46)), .Rows(Temprow).Item(Database_Columnno + 45), -1)
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 46)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(45).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 46) Then
                            TubingMake = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    TubingMake = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 46)), -1, .Rows(Temprow).Item(Database_Columnno + 46))
                End If

                'TubingSize = If(IsNumeric(.Rows(Temprow).Item(Database_Columnno + 47)), .Rows(Temprow).Item(Database_Columnno + 45), -1)
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 47)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(46).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 47) Then
                            TubingSize = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    TubingSize = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 47)), -1, .Rows(Temprow).Item(Database_Columnno + 47))
                End If

                'TubingMOC = If(IsNumeric(.Rows(Temprow).Item(Database_Columnno + 48)), .Rows(Temprow).Item(Database_Columnno + 45), -1)
                If Not IsNumeric(.Rows(Temprow).Item(Database_Columnno + 48)) Then
                    For Each row As DataRow In ds_AccessoriesMat.Tables(47).Rows
                        If row.Item("PARAMETER_VALUE") = .Rows(Temprow).Item(Database_Columnno + 48) Then
                            TubingMOC = row.Item("SR_NO")
                            Exit For
                        End If
                    Next
                Else
                    TubingMOC = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 48)), -1, .Rows(Temprow).Item(Database_Columnno + 48))
                End If

                MolecularWeightCase1 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 49)), 0, .Rows(Temprow).Item(Database_Columnno + 49))
                MolecularWeightCase2 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 50)), 0, .Rows(Temprow).Item(Database_Columnno + 50))
                MolecularWeightCase3 = If(IsDBNull(.Rows(Temprow).Item(Database_Columnno + 51)), 0, .Rows(Temprow).Item(Database_Columnno + 51))

                '.Rows(Temprow)(Database_Columnno + 55) = If(txtP2OutWCase3.Text = "", 0, txtP2OutWCase3.Text)


                '' LoadingProjectFile = False
                'If Not cmbPressureUnits.Text = "--Select--" Then
                '    Call convertPressure(txtInletPressureCase1, FinalInletPressureCase1, cmbPressureUnits)
                '    Call convertPressure(txtInletPressureCase2, FinalInletPressureCase2, cmbPressureUnits)
                '    Call convertPressure(txtInletPressureCase3, FinalInletPressureCase3, cmbPressureUnits)
                '    Call convertPressure(txtOutletPressure1, FinalOutletPressureCase1, cmbPressureUnits)
                '    Call convertPressure(txtOutletPressure2, FinalOutletPressureCase2, cmbPressureUnits)
                '    Call convertPressure(txtOutletPressure3, FinaloutletPressureCase3, cmbPressureUnits)
                '    FinalPressureDropCase1 = FinalInletPressureCase1 - FinalOutletPressureCase1
                '    FinalPressureDropCase2 = FinalInletPressureCase2 - FinalOutletPressureCase2
                '    FinalPressureDropCase3 = FinalInletPressureCase3 - FinaloutletPressureCase3

                'End If
                'If Not cmbTemperatureUnits.Text = "--Select--" Then
                '    Call converttemperature(txtInletTemperatureCase1, FinalInletTemperatureCase1, cmbTemperatureUnits)
                '    Call converttemperature(txtInletTemperatureCase2, FinalInletTemperatureCase2, cmbTemperatureUnits)
                '    Call converttemperature(txtInletTemperatureCase3, FinalInletTemperatureCase3, cmbTemperatureUnits)
                'End If

                'If Not cmbVapourPressureUnits.Text = "--Select--" And cmbFluidType.Text = "InCompressible" Then

                '    Call convertPressure(txtVapourPressureCase1, FinalVapourPressureCase1, cmbVapourPressureUnits)
                '    Call convertPressure(txtVapourPressureCase2, FinalVapourPressureCase2, cmbVapourPressureUnits)
                '    Call convertPressure(txtVapourPressureCase3, FinalVapourPressureCase3, cmbVapourPressureUnits)
                'End If

                'If Not cmbFlowrate.Text = "--Select--" Then
                '    Call CalculateDensity()
                'End If

                'If Not cmbCriticalPressureUnits.Text = "--Select--" And cmbFluidType.Text = "InCompressible" Then
                '    Call convertPressure(txtCriticalPressureCase1, FinalCriticalPressureCase1, cmbCriticalPressureUnits)
                '    Call convertPressure(txtCriticalPressureCase2, FinalCriticalPressureCase2, cmbCriticalPressureUnits)
                '    Call convertPressure(txtCriticalPressureCase3, FinalCriticalPressureCase3, cmbCriticalPressureUnits)
                'End If

                'If Not cmbViscosityUnits.Text = "--Select--" Then
                '    convertViscosity(txtViscosityCase1, FinalViscosityCase1, cmbViscosityUnits, FinalDensityCase1)
                '    convertViscosity(txtViscosityCase2, FinalViscosityCase2, cmbViscosityUnits, FinalDensityCase2)
                '    convertViscosity(txtViscosityCase3, FinalViscosityCase3, cmbViscosityUnits, FinalDensityCase3)
                'End If

                'If Not cmbAirPressureUnits.Text = "--Select--" Then
                '    convertPressure(txtAirPressure, SupplyAirPressure, cmbAirPressureUnits)
                'End If
                'If Not cmbPressureUnits.Text = "--Select--" Then
                '    convertPressure(txtDPShutoff, DPShutoff, cmbPressureUnits)
                'End If
                'Call CalculateFlowVelocity()        ' For Flashing Flowrate to calculate velocity
                'VelocityRuleFlag = False

                ''
                ' Call ConfirmRating()
                ' Call VelocityRule()

                If Not cmbCharacterstics.Text = "--Select--" And Not cmbCharacterstics.Text = "" Then
                    cmbAreaunits.Enabled = True
                    cmbVelocityRule.Enabled = True
                    cmbPipeDia.Enabled = True
                    cmbSchedule.Enabled = True
                    cmbInletPipeSize.Enabled = True
                    cmbInletPipeSchedule.Enabled = True
                    btnAcceptVelocityRule.Enabled = True

                    cmbCharacterstics.Enabled = True
                    cmbSelectedTrim.Enabled = True
                    cmbKVseries.Enabled = True
                    cmbKVOverride.Enabled = True
                    cmbValveSizeOverride.Enabled = True
                    btnKVAccept.Enabled = True
                    btnValveSizeAccept.Enabled = True
                    ' Call KVoverride()
                    'FinalValveSize = CSng(lblFinalValveSize.Text)
                    ' Call ValveSizeOverride()

                    'Database_Columnno = 161
                    'chkNoiseAttenuation.Checked = .Rows(Temprow).Item(Database_Columnno + 4)
                    'chkInsulation.Checked = .Rows(Temprow).Item(Database_Columnno + 8)
                    '20220920  Call RECalculate()
                    Database_Columnno = DataSection2_MOC
                    cmbKVOverride.Text = .Rows(Temprow).Item(Database_Columnno + 27).ToString
                    txtSuggTrim.Text = .Rows(Temprow).Item(Database_Columnno + 34).ToString

                    '  Call KVoverride()
                    cmbValveSizeOverride.Text = .Rows(Temprow).Item(Database_Columnno + 28).ToString
                    '  Call ValveSizeOverride()
                    lblKVMaxValue.Text = .Rows(Temprow).Item(Database_Columnno + 29).ToString
                    lblFinalValveSize.Text = .Rows(Temprow).Item(Database_Columnno + 30).ToString

                    ' Call RECalculate()
                    'If Not txtAirPressure.Text = "" And Not cmbAirPressureUnits.SelectedIndex = -1 Then
                    '        convertPressure(txtAirPressure, SupplyAirPressure, cmbAirPressureUnits)
                    '      convertPressure(txtDPShutoff, DPShutoff, cmbPressureUnits)
                    '    SupplyAirPressure = (SupplyAirPressure - 1.013) * 1.019716213
                    '    DPShutoff = (DPShutoff - 1.013) * 1.019716213
                    '  Call ValveActuator()
                    cmbSelectActuator.Text = .Rows(Temprow).Item(DataSection3_Actuator + 14).ToString
                    lblFinalActuator.Text = .Rows(Temprow).Item(DataSection3_Actuator + 15).ToString
                    ' End If
                End If
                LoadingProjectFile = False

            End With
            ' ' xlWorkBook.Close()

        Catch ex As Exception
            MsgBox("ReadXls : " & ex.Message)
            'Finally
            LoadingProjectFile = False

            ''releaseObject(xlWorkSheet)
            ''releaseObject(xlWorkBook)
        End Try
    End Sub

    'Public Sub Hold()
    '    'Dim cmd As New SqlCommand
    '    'Dim constr As String = "Data Source=.\SQLEXPRESS;Initial Catalog=FinalDB;Integrated Security=true"
    '    'Dim insertStorage As String = "INSERT INTO storage_table(Sr_No, Item_No, Sheet_No, Customer, Project, OfferNo, RevNo, TagNo, Qty, Date, Time, UnitsType, Fluid, FluidType, Model, Medium, Flowunits, Flow1, Flow2, Flow3, TempUnits, Temp1, Temp2, Temp3, PressUnit, IPress1, IPress2, IPress3, OPress1, OPress2, OPress3, DPPress1, DPPress2, DPPress3, ChkMol, DensUnits, MolWgt, Dens1, Dens2, Dens3, ChkVisc, ViscUnits, Visc1, Visc2, Visc3, ToutPress1, ToutPress2, ToutPress3, ToutsatPress1, ToutsatPress2, ToutsatPress3, CriticalPressUnits, CriticalPress1, CriticalPress2, CriticalPress3, VapourPressUnits, VapourPress1, VapourPress2, VapourPress3, Zcase1, Zcase2, Zcase3, Xcase1, Xcase2, Xcase3, Kcase1, Kcase2, Kcase3, DryFract1, DryFrac2, DryFrac3, TsatInletPress1, TsatInletPress2, TsatInletPress3, SelectP2orDP, SelectQorW, SalesEngg, CustomerRef, "
    '    'insertStorage += "MOC,DesignPress,DesignTemp,SuggRating,cmbSuggRating,FinalRating,Areaunits,InletPipe,lblSuggPipeSize,PipeDia,lblFinalOutletPipe,OSch,ISch,Noise_ValveID,Noise_ID,Noise_Schedule,Noise_OutletPipeDia,InletPipeSize,InletPipeID,TrimStyle,cmbVelocityRule,FlowDirection,Charachterstics,Trim,SuggMaxKv,SuggValveSiz,KvOverride,ValveSizeOverride,lblKvMaxValue,lblFinalValveSize,Bonnet,EndConn,FinalDesignTemperatureInlet,Sugg_Trim,Selected_Trim,Baffle_1,Baffle_2,Baffle_3,Baffle_KV_1,Baffle_KV_2,Baffle_KV_3,Micro_Trim, ActuatorType, Balancing, AirFail, Leakage, Packing, Sealing, DPShutoff, AirPressUnits, AirPress, SeatDia, FinalForce, HandWheel, SuggActuator, SelActuator, FinalActuator, InitialSpringRange, FinalSpringRange, NoofSprings, MKSActuator, MKSInitialSpringRange, MKSFinalSpringRange, SelectedForce, SuggestedForce, "
    '    'insertStorage += "BodyMaterial, Plug, Seat, TopMaterials, Gasket, Painting, Positioner, Sov, AFR, ALR, LimitSwitch, VolBooster, PosnTrans, VTank, Roborter, ItoP, QEV, Certification, Tubing, Guiding, PositionerMake, AFRMake, ALRMake, SOVMake, VBMake, LimitSwitchMake, QEVMake, PaintingACC, InitialCvCase1, InitialCvCase2, InitialCvCase3, InitialKvCase1, InitialKvCase2, InitialKvCase3, FinalCvCase1, FinalCvCase2, FinalCVCase3, FinalKvCase1, FinalKvCase2, FinalKvcase3, StrokeCase1, StrokeCase2, StrokeCase3, FlowtypeCase1, FlowtypeCase2, FlowtypeCase3, SeverityCase1, SeverityCase2, SeverityCase3, VelocityValveInletCase1, VelocityValveInletCase2, VelocityValveInletCase3, VelocityValveOutletCase1, VelocityValveOutletCase2, VelocityValveOutletCase3, VelocityInletPipeCase1, VelocityInletPipeCase2, VelocityInletPipeCase3, VelocityOutletPipeCase1, VelocityOutletPipeCase2, VelocityOutletPipeCase3, "
    '    'insertStorage += "NoiseCase1, NoiseCase2, NoiseCase3, chkNoiseAttenuation, AttenuatedNoiseCase1, AttenuatedNoiseCase2, AttenuatedNoiseCase3, chkInsulation, AttnPressDropCase1, AttnPressDropCase2, AttnPressDropCase3, MachNoVavleOutCase1, MachNoVavleOutCase2, MachNoVavleOutCase3, MachNoPipeOutCase1, MachNoPipeOutCase2, MachNoPipeOutCase3, FLCase1, FLCase2, FLCase3, XTCase1, XTCase2, XTCase3, FP, Valve_Model, FinalValveSize, FinalKVCase1_2, FinalKVCase2_2, FinalKVCase3_2, FinalKVmax_ValveSize, FDCase1, FDCase2, FDCase3, SeatDia2, User_Notes1, User_Notes2, User_Notes3, KvCage, PrBl_SeatDia, FPKvCase1, FPKvCase2, FPKvCase3, BaffleKvCase1, BaffleKvCase2, BaffleKvCase3, Stages, WaterPressureText, WaterTemperature, WaterFlowCase1Text, WaterFlowCase1Text2, WaterFlowCase1Text3, P2OutWCase1Text, P2OutWCase2Text, P2OutWCase3Text, WaterFlowRateCase1, WaterFlowRateCase2, WaterFlowRateCase3, OutletWaterPressureCase1, OutletWaterPressureCase2, OutletWaterPressureCase3, "
    '    'insertStorage += "FlowrateForPipeDiaCalcCase1, FlowrateForPipeDiaCalcCase2, FlowrateForPipeDiaCalcCase3, FluidVelocityCase1, FluidVelocityCase2, FluidVelocityCase3, SoundVelocityCase1, SoundVelocityCase2, SoundVelocityCase3, PRDS_IP_FlowrateForPipeDiaCase1, PRDS_IP_FlowrateForPipeDiaCase2, PRDS_IP_FlowrateForPipeDiaCase3, PRDS_OP_FlowrateForPipeDiaCase1, PRDS_OP_FlowrateForPipeDiaCase2, PRDS_OP_FlowrateForPipeDiaCase3, VelocityRuleFlag, FinalInletPressureCase1, FinalInletPressureCase2, FinalInletPressureCase3, FinalOutletPressureCase1, FinalOutletPressureCase2, FinaloutletPressureCase3, FinalPressureDropCase1, FinalPressureDropCase2, FinalPressureDropCase3, FinalInletTemperatureCase1, FinalInletTemperatureCase2, FinalInletTemperatureCase3, FinalVapourPressureCase1, FinalVapourPressureCase2, FinalVapourPressureCase3, FinalCriticalPressureCase1, FinalCriticalPressureCase2, FinalCriticalPressureCase3, FinalViscosityCase1	, FinalViscosityCase2, FinalViscosityCase3, FinalDensityCase1, FinalDensityCase2, FinalDensityCase3, FinalFlowrateCase1, FinalFlowrateCase2, FinalFlowrateCase3, SupplyAirPressure, DPShutoff2, Tubing_Make, Tubing_Size, Tubing_MOC"
    '    'insertStorage += ") VALUES ('"

    '    'record(0) = frmRecordsGrid.dt.Rows.Count + 1
    '    'record(1) = ItemNo
    '    'record(2) = SheetNo

    '    'record(3) = CustomerName
    '    'record(4) = ProjectName
    '    'record(5) = OfferNo
    '    'record(6) = Revision
    '    'record(7) = TagNo
    '    'record(8) = QTY
    '    'record(9) = DateTimePicker1.Value
    '    'record(10) = Format(DateTime.Now, "hh:mm:ss tt")
    '    'record(11) = cmbFluidType.Text
    '    'record(12) = cmbFluid.Text
    '    'record(13) = cmbUnitsType.Text
    '    'record(14) = cmbModel.Text
    '    'record(15) = txtMedium.Text
    '    'record(16) = cmbFlowrate.Text
    '    'record(17) = If(txtFlowrateCase1.Text = "", 0, txtFlowrateCase1.Text)
    '    'record(18) = If(txtFlowrateCase2.Text = "", 0, txtFlowrateCase2.Text)
    '    'record(19) = If(txtFlowrateCase3.Text = "", 0, txtFlowrateCase3.Text)
    '    'record(20) = cmbTemperatureUnits.Text
    '    'record(21) = If(txtInletTemperatureCase1.Text = "", 0, txtInletTemperatureCase1.Text)
    '    'record(22) = If(txtInletTemperatureCase2.Text = "", 0, txtInletTemperatureCase2.Text)
    '    'record(23) = If(txtInletTemperatureCase3.Text = "", 0, txtInletTemperatureCase3.Text)
    '    'record(24) = cmbPressureUnits.Text

    '    'record(25) = If(txtInletPressureCase1.Text = "", 0, txtInletPressureCase1.Text)
    '    'record(26) = If(txtInletPressureCase2.Text = "", 0, txtInletPressureCase2.Text)
    '    'record(27) = If(txtInletPressureCase3.Text = "", 0, txtInletPressureCase3.Text)
    '    'record(28) = If(txtOutletPressure1.Text = "", 0, txtOutletPressure1.Text)
    '    'record(29) = If(txtOutletPressure2.Text = "", 0, txtOutletPressure2.Text)
    '    'record(30) = If(txtOutletPressure3.Text = "", 0, txtOutletPressure3.Text)
    '    'record(31) = If(txtPressureDropCase1.Text = "", 0, txtPressureDropCase1.Text)
    '    'record(32) = If(txtPressureDropCase2.Text = "", 0, txtPressureDropCase2.Text)
    '    'record(33) = If(txtPressureDropCase3.Text = "", 0, txtPressureDropCase3.Text)
    '    'record(34) = chkMolecularWeight.Checked
    '    'record(35) = cmbDensityUnits.Text

    '    'record(36) = If(txtMolecularWeight.Text = "", 0, txtMolecularWeight.Text)
    '    'record(37) = If(txtDensityCase1.Text = "", 0, txtDensityCase1.Text)

    '    'record(38) = If(txtDensityCase2.Text = "", 0, txtDensityCase2.Text)
    '    'record(39) = If(txtDensityCase3.Text = "", 0, txtDensityCase3.Text)

    '    'record(40) = chkViscosity.Checked
    '    'record(41) = cmbViscosityUnits.Text
    '    'record(42) = If(txtViscosityCase1.Text = "", 0, txtViscosityCase1.Text)
    '    'record(43) = If(txtViscosityCase2.Text = "", 0, txtViscosityCase2.Text)
    '    'record(44) = If(txtViscosityCase3.Text = "", 0, txtViscosityCase3.Text)
    '    'record(45) = If(txtTOutPressureCase1.Text = "", 0, txtTOutPressureCase1.Text) 'ToutPressureCase1
    '    'record(46) = If(txtTOutPressureCase2.Text = "", 0, txtTOutPressureCase2.Text)   'ToutPressureCase2
    '    'record(47) = If(txtTOutPressureCase3.Text = "", 0, txtTOutPressureCase3.Text)   'ToutPressureCase3

    '    'record(48) = If(txtTsatoutPressureCase1.Text = "", 0, txtTsatoutPressureCase1.Text) 'ToutsatPressureCase1
    '    'record(49) = If(txtTsatoutPressureCase2.Text = "", 0, txtTsatoutPressureCase2.Text)  'ToutsatPressureCase2
    '    'record(50) = If(txtTsatoutPressureCase3.Text = "", 0, txtTsatoutPressureCase3.Text)   'ToutsatPressureCase3
    '    'record(51) = cmbCriticalPressureUnits.Text
    '    'record(52) = If(txtCriticalPressureCase1.Text = "", 0, txtCriticalPressureCase1.Text)
    '    'record(53) = If(txtCriticalPressureCase2.Text = "", 0, txtCriticalPressureCase2.Text)
    '    'record(54) = If(txtCriticalPressureCase3.Text = "", 0, txtCriticalPressureCase3.Text)
    '    'record(55) = cmbVapourPressureUnits.Text
    '    'record(56) = If(txtVapourPressureCase1.Text = "", 0, txtVapourPressureCase1.Text)
    '    'record(57) = If(txtVapourPressureCase2.Text = "", 0, txtVapourPressureCase2.Text)
    '    'record(58) = If(txtVapourPressureCase3.Text = "", 0, txtVapourPressureCase3.Text)

    '    'record(59) = Zcase1
    '    'record(60) = Zcase2
    '    'record(61) = Zcase3
    '    'record(62) = Xcase1
    '    'record(63) = Xcase2
    '    'record(64) = Xcase3

    '    'record(65) = Kcase1
    '    'record(66) = Kcase2
    '    'record(67) = Kcase3
    '    'record(68) = DrynessFraction_LiquidCase1

    '    'record(69) = DrynessFraction_LiquidCase2
    '    'record(70) = DrynessFraction_LiquidCase3

    '    'record(71) = If(txtTsatInletCase1.Text = "", 0, txtTsatInletCase1.Text)

    '    'record(72) = If(txtTsatInletCase2.Text = "", 0, txtTsatInletCase2.Text)
    '    'record(73) = If(txtTsatInletCase3.Text = "", 0, txtTsatInletCase3.Text)
    '    'record(74) = SelectP2orDP
    '    'record(75) = cmbQW.Text
    '    'record(76) = SalesEnggName
    '    'record(77) = CustomerRef

    '    'record(78) = cmbMOC.Text
    '    'record(79) = If(txtDesignPressureInlet.Text = "", 0, txtDesignPressureInlet.Text)
    '    'record(80) = If(txtDesignTemperatureInlet.Text = "", 0, txtDesignTemperatureInlet.Text)
    '    'record(81) = If(lblSuggestedRating.Text = "", 0, lblSuggestedRating.Text)
    '    'record(82) = cmbSuggestedRating.Text
    '    'record(83) = lblFinalRating.Text
    '    'record(84) = cmbAreaunits.Text
    '    'record(85) = cmbInletPipeSize.Text
    '    'record(86) = lblSuggPipeSize.Text
    '    'record(87) = cmbPipeDia.Text
    '    'record(88) = lblFinalOutletPipe.Text
    '    'record(89) = cmbSchedule.Text
    '    'record(90) = cmbInletPipeSchedule.Text
    '    'record(91) = Noise_ValveID
    '    'record(92) = Noise_ID
    '    'record(93) = Noise_Schedule
    '    'record(94) = Noise_OutletPipeDia
    '    'record(95) = InletPipeSize
    '    'record(96) = InletPipeID


    '    'record(97) = Label26.Text
    '    'record(98) = cmbVelocityRule.Text
    '    'record(99) = cmbFlowDirection.Text

    '    'record(100) = cmbCharacterstics.Text
    '    'record(101) = cmbKVseries.Text
    '    'record(102) = If(txtSuggestedKV.Text = "", 0, txtSuggestedKV.Text)
    '    'record(103) = If(txtSuggestedValveSize.Text = "", 0, txtSuggestedValveSize.Text)
    '    'record(104) = cmbKVOverride.Text

    '    'record(105) = cmbValveSizeOverride.Text
    '    'record(106) = lblKVMaxValue.Text
    '    'record(107) = lblFinalValveSize.Text
    '    'record(108) = (cmbBonnetType.Text.Replace(vbLf, ""))
    '    'record(109) = cmbEndConnection.Text
    '    'record(110) = FinalDesignTemperatureInlet

    '    '' Multistage added
    '    'record(111) = If(txtSuggTrim.Text = "", 0, txtSuggTrim.Text)
    '    'record(112) = cmbSelectedTrim.Text
    '    'record(113) = chkBaffleCase1.Checked
    '    'record(114) = chkBaffleCase2.Checked
    '    'record(115) = chkBaffleCase3.Checked
    '    'record(116) = If(txtBaffleKVCase1.Text = "", 0, txtBaffleKVCase1.Text)
    '    'record(117) = If(txtBaffleKVCase2.Text = "", 0, txtBaffleKVCase2.Text)
    '    'record(118) = If(txtBaffleKVCase3.Text = "", 0, txtBaffleKVCase3.Text)
    '    'record(119) = lblMicroTrim.Text

    '    'record(120) = cmbActuatorType.Text
    '    'record(121) = cmbBalancing.Text
    '    'record(122) = cmbAirFailure.Text
    '    'record(123) = cmbLeakage.Text
    '    'record(124) = cmbPacking.Text
    '    'record(125) = cmbSealing.Text
    '    'record(126) = If(txtDPShutoff.Text = "", 0, txtDPShutoff.Text)

    '    'record(127) = cmbAirPressureUnits.Text
    '    'record(128) = If(txtAirPressure.Text = "", 0, txtAirPressure.Text)
    '    'record(129) = cmbSeatDia.Text
    '    'record(130) = lblForce0perc.Text
    '    'record(131) = cmbHandwheel.SelectedValue
    '    'record(132) = If(txtSuggActuator.Text = "", 0, txtSuggActuator.Text)
    '    'record(133) = cmbSelectActuator.Text
    '    'record(134) = lblFinalActuator.Text
    '    'record(135) = InitialSpringRange
    '    'record(136) = FinalSpringRange
    '    'record(137) = NoofSprings
    '    'record(138) = MKSActuator
    '    'record(139) = MKSInitialSpringRange
    '    'record(140) = MKSFinalSpringRange
    '    'record(141) = lblSelForce.Text
    '    'record(142) = lblSuggForce.Text

    '    'record(143) = BodyMaterial
    '    'record(144) = Plug
    '    'record(145) = Seat
    '    'record(146) = TopMaterials
    '    'record(147) = Gasket
    '    'record(148) = Painting

    '    'record(149) = Positioner
    '    'record(150) = Sov
    '    'record(151) = AFR
    '    'record(152) = ALR
    '    'record(153) = LimitSwitch
    '    'record(154) = VolBooster
    '    'record(155) = PosnTrans
    '    'record(156) = VTank
    '    'record(157) = Roborter
    '    'record(158) = ItoP
    '    'record(159) = QEV
    '    'record(160) = Certification
    '    'record(161) = Tubing
    '    'record(162) = Guiding
    '    'record(163) = PositionerMake
    '    'record(164) = AFRMake
    '    'record(165) = ALRMake
    '    'record(166) = SOVMake
    '    'record(167) = VBMake
    '    'record(168) = LimitSwitchMake
    '    'record(169) = QEVMake
    '    'record(170) = Painting_ACC

    '    'record(171) = lblApproxCVCase1.Text
    '    'record(172) = lblApproxCVCase2.Text
    '    'record(173) = lblApproxCVCase3.Text
    '    'record(174) = lblKVCase1.Text
    '    'record(175) = lblKVCase2.Text
    '    'record(176) = lblKVCase3.Text
    '    'record(177) = lblFinalCVCase1.Text
    '    'record(178) = lblFinalCVCase2.Text
    '    'record(179) = lblFinalCVCase3.Text
    '    'record(180) = lblFinalKVCase1.Text
    '    'record(181) = lblFinalKvCase2.Text
    '    'record(182) = lblFinalKVcase3.Text
    '    'record(183) = lblStrokeCase1.Text
    '    'record(184) = lblStrokeCase2.Text
    '    'record(185) = lblStrokeCase3.Text
    '    'record(186) = lblFlowtypeCase1.Text
    '    'record(187) = lblFlowtypeCase2.Text
    '    'record(188) = lblFlowtypeCase3.Text
    '    'record(189) = lblSeverityCase1.Text
    '    'record(190) = lblSeverityCase2.Text
    '    'record(191) = lblSeverityCase3.Text
    '    'record(192) = lblVelocityValveInletCase1.Text
    '    'record(193) = lblVelocityValveInletCase2.Text
    '    'record(194) = lblVelocityValveInletCase3.Text
    '    'record(195) = lblVelocityValveOutletCase1.Text
    '    'record(196) = lblVelocityValveOutletCase2.Text
    '    'record(197) = lblVelocityValveOutletCase3.Text
    '    'record(198) = lblVelocityInletPipeCase1.Text
    '    'record(199) = lblVelocityInletPipeCase2.Text
    '    'record(200) = lblVelocityInletPipeCase3.Text
    '    'record(201) = lblVelocityOutletPipeCase1.Text
    '    'record(202) = lblVelocityOutletPipeCase2.Text
    '    'record(203) = lblVelocityOutletPipeCase3.Text

    '    'record(204) = If(lblNoiseCase1.Text = "", 0, lblNoiseCase1.Text)
    '    'record(205) = If(lblNoiseCase2.Text = "", 0, lblNoiseCase2.Text)
    '    'record(206) = If(lblNoiseCase3.Text = "", 0, lblNoiseCase3.Text)
    '    'record(207) = chkNoiseAttenuation.Checked
    '    'record(208) = If(lblAttenuatedNoiseCase1.Text = "", 0, lblAttenuatedNoiseCase1.Text)
    '    'record(209) = If(lblAttenuatedNoiseCase2.Text = "", 0, lblAttenuatedNoiseCase2.Text)
    '    'record(210) = If(lblAttenuatedNoiseCase3.Text = "", 0, lblAttenuatedNoiseCase3.Text)
    '    'record(211) = chkInsulation.Checked
    '    'record(212) = lblAttnPressDropCase1.Text
    '    'record(213) = lblAttnPressDropCase2.Text
    '    'record(214) = lblAttnPressDropCase3.Text
    '    'record(215) = lblMachNoVavleOutCase1.Text
    '    'record(216) = lblMachNoVavleOutCase2.Text
    '    'record(217) = lblMachNoVavleOutCase3.Text
    '    'record(218) = lblMachNoPipeOutCase1.Text
    '    'record(219) = lblMachNoPipeOutCase2.Text
    '    'record(220) = lblMachNoPipeOutCase3.Text
    '    'record(221) = If(lblFLCase1.Text = "", 0, lblFLCase1.Text)
    '    'record(222) = If(lblFLCase2.Text = "", 0, lblFLCase2.Text)
    '    'record(223) = If(lblFLCase3.Text = "", 0, lblFLCase3.Text)
    '    'record(224) = If(lblXTCase1.Text = "", 0, lblXTCase1.Text)
    '    'record(225) = If(lblXTCase2.Text = "", 0, lblXTCase2.Text)
    '    'record(226) = If(lblXTCase3.Text = "", 0, lblXTCase3.Text)
    '    'record(227) = If(lblFP.Text = "", 0, lblFP.Text)
    '    'record(228) = lblValveModel.Text
    '    'record(229) = FinalValveSize
    '    'record(230) = FinalKVCase1
    '    'record(231) = FinalKVCase2
    '    'record(232) = FinalKVCase3
    '    'record(233) = FinalKVmax_ValveSize
    '    'record(234) = FDCase1
    '    'record(235) = FDCase2
    '    'record(236) = FDCase3
    '    'record(237) = SeatDia
    '    'record(238) = UserNotes1
    '    'record(239) = UserNotes2
    '    'record(240) = UserNotes3
    '    'record(241) = KvforCage
    '    'record(242) = PrBl_SeatDia
    '    'record(243) = FPKVCase1
    '    'record(244) = FPKVCase2
    '    'record(245) = FPKVCase3
    '    'record(246) = BaffleKVCase1
    '    'record(247) = BaffleKVCase2
    '    'record(248) = BaffleKVCase3
    '    'record(249) = Stages

    '    'record(250) = If(txtWaterPressure.Text = "", 0, txtWaterPressure.Text)
    '    'record(251) = If(txtWaterTemperature.Text = "", 0, txtWaterTemperature.Text)
    '    'record(252) = If(txtWaterFlowCase1.Text = "", 0, txtWaterFlowCase1.Text)
    '    'record(253) = If(txtWaterFlowCase2.Text = "", 0, txtWaterFlowCase2.Text)
    '    'record(254) = If(txtWaterFlowCase3.Text = "", 0, txtWaterFlowCase3.Text)
    '    'record(255) = If(txtP2OutWCase1.Text = "", 0, txtP2OutWCase1.Text)
    '    'record(256) = If(txtP2OutWCase2.Text = "", 0, txtP2OutWCase2.Text)
    '    'record(257) = If(txtP2OutWCase3.Text = "", 0, txtP2OutWCase3.Text)
    '    'record(258) = WaterFlowRateCase1
    '    'record(259) = WaterFlowRateCase2
    '    'record(260) = WaterFlowRateCase3
    '    'record(261) = OutletWaterPressureCase1
    '    'record(262) = OutletWaterPressureCase2
    '    'record(263) = OutletWaterPressureCase3

    '    'record(264) = FlowrateForPipeDiaCalcCase1
    '    'record(265) = FlowrateForPipeDiaCalcCase2
    '    'record(266) = FlowrateForPipeDiaCalcCase3
    '    'record(267) = FluidVelocityCase1
    '    'record(268) = FluidVelocityCase2
    '    'record(269) = FluidVelocityCase3
    '    'record(270) = SoundVelocityCase1
    '    'record(271) = SoundVelocityCase2
    '    'record(272) = SoundVelocityCase3
    '    'record(273) = PRDS_IP_FlowrateForPipeDiaCase1
    '    'record(274) = PRDS_IP_FlowrateForPipeDiaCase2
    '    'record(275) = PRDS_IP_FlowrateForPipeDiaCase3
    '    'record(276) = PRDS_OP_FlowrateForPipeDiaCase1
    '    'record(277) = PRDS_OP_FlowrateForPipeDiaCase2
    '    'record(278) = PRDS_OP_FlowrateForPipeDiaCase3
    '    'record(279) = VelocityRuleFlag

    '    'record(280) = FinalInletPressureCase1       '  The below Values are calculated from Text entries and are needed for calculations on reloading 
    '    'record(281) = FinalInletPressureCase2
    '    'record(282) = FinalInletPressureCase3
    '    'record(283) = FinalOutletPressureCase1
    '    'record(284) = FinalOutletPressureCase2
    '    'record(285) = FinaloutletPressureCase3
    '    'record(286) = FinalPressureDropCase1
    '    'record(287) = FinalPressureDropCase2
    '    'record(288) = FinalPressureDropCase3
    '    'record(289) = FinalInletTemperatureCase1
    '    'record(290) = FinalInletTemperatureCase2
    '    'record(291) = FinalInletTemperatureCase3
    '    'record(292) = FinalVapourPressureCase1
    '    'record(293) = FinalVapourPressureCase2
    '    'record(294) = FinalVapourPressureCase3
    '    'record(295) = FinalCriticalPressureCase1
    '    'record(296) = FinalCriticalPressureCase2
    '    'record(297) = FinalCriticalPressureCase3
    '    'record(298) = FinalViscosityCase1
    '    'record(299) = FinalViscosityCase2
    '    'record(300) = FinalViscosityCase3
    '    'record(301) = FinalDensityCase1
    '    'record(302) = FinalDensityCase2
    '    'record(303) = FinalDensityCase3
    '    'record(304) = FinalFlowrateCase1
    '    'record(305) = FinalFlowrateCase2
    '    'record(306) = FinalFlowrateCase3
    '    'record(307) = SupplyAirPressure
    '    'record(308) = DPShutoff
    '    'record(309) = TubingMake
    '    'record(310) = TubingSize
    '    'record(311) = TubingMOC

    '    'For i As Integer = 0 To 311
    '    '    If record(i) = Nothing Then
    '    '        record(i) = DBNull.Value
    '    '    End If
    '    'Next




    '    ''For j As Integer = 0 To 311
    '    ''    If j = 16 Then
    '    ''        insertStorage += record(j) + "', '"
    '    ''    ElseIf j = 311 Then
    '    ''        insertStorage += record(j).ToString
    '    ''    Else
    '    ''        insertStorage += record(j).ToString + "', '"
    '    ''    End If
    '    ''Next

    '    ''insertStorage += record(0).ToString + "', '" + record(1).ToString + "', '" + record(2).ToString + "', '" + record(3).ToString + "', '" + record(4).ToString + "', '" + record(5) + "', '" + record(6).ToString + "', '" + record(7).ToString + "', '" + record(8).ToString + "', '" + record(9).ToString + "', '" + record(10).ToString + "', '"
    '    ''insertStorage += record(11).ToString + "', '" + record(12).ToString + "', '" + record(13).ToString + "', '" + record(14).ToString + "', '" + record(15).ToString + "', '" + record(16) + "', '" + record(17).ToString + "', '" + record(18).ToString + "', '" + record(19).ToString + "', '" + record(20).ToString + "', '" + record(21).ToString + "', '"
    '    ''insertStorage += record(22).ToString + "', '" + record(23).ToString + "', '" + record(24).ToString + "', '" + record(25).ToString + "', '" + record(26).ToString + "', '" + record(27).ToString + "', '" + record(28).ToString + "', '" + record(29).ToString + "', '" + record(30).ToString + "', '" + record(31).ToString + "', '" + record(32).ToString + "', '"
    '    ''insertStorage += record(33).ToString + "', '" + record(34).ToString + "', '" + record(35).ToString + "', '" + record(36).ToString + "', '" + record(37).ToString + "', '" + record(38).ToString + "', '" + record(39).ToString + "', '" + record(40).ToString + "', '" + record(41).ToString + "', '" + record(42).ToString + "', '" + record(43).ToString + "', '"
    '    ''insertStorage += record(44).ToString + "', '" + record(45).ToString + "', '" + record(46).ToString + "', '" + record(47).ToString + "', '" + record(48).ToString + "', '" + record(49).ToString + "', '" + record(50).ToString + "', '" + record(51).ToString + "', '" + record(52).ToString + "', '" + record(53).ToString + "', '" + record(54).ToString + "', '"
    '    ''insertStorage += record(55).ToString + "', '" + record(56).ToString + "', '" + record(57).ToString + "', '" + record(58).ToString + "', '" + record(59).ToString + "', '" + record(60).ToString + "', '" + record(61).ToString + "', '" + record(62).ToString + "', '" + record(63).ToString + "', '" + record(64).ToString + "', '" + record(65).ToString + "', '"
    '    ''insertStorage += record(66).ToString + "', '" + record(67).ToString + "', '" + record(68).ToString + "', '" + record(69).ToString + "', '" + record(70).ToString + "', '" + record(71).ToString + "', '" + record(72).ToString + "', '" + record(73).ToString + "', '" + record(74).ToString + "', '" + record(75).ToString + "', '" + record(76).ToString + "', '"
    '    ''insertStorage += record(77).ToString + "', '" + record(78).ToString + "', '" + record(79).ToString + "', '" + record(80).ToString + "', '" + record(81).ToString + "', '" + record(82).ToString + "', '" + record(83).ToString + "', '" + record(84).ToString + "', '" + record(85).ToString + "', '" + record(86).ToString + "', '" + record(87).ToString + "', '"
    '    ''insertStorage += record(88).ToString + "', '" + record(89).ToString + "', '" + record(90).ToString + "', '" + record(91).ToString + "', '" + record(92).ToString + "', '" + record(93).ToString + "', '" + record(94).ToString + "', '" + record(95).ToString + "', '" + record(96).ToString + "', '" + record(97).ToString + "', '" + record(98).ToString + "', '"
    '    ''insertStorage += record(99).ToString + "', '" + record(100).ToString + "', '" + record(101).ToString + "', '" + record(102).ToString + "', '" + record(103).ToString + "', '" + record(104).ToString + "', '" + record(105).ToString + "', '" + record(106).ToString + "', '" + record(107).ToString + "', '" + record(108).ToString + "', '" + record(109).ToString + "', '"
    '    ''insertStorage += record(110).ToString + "', '" + record(111).ToString + "', '" + record(112).ToString + "', '" + record(113).ToString + "', '" + record(114).ToString + "', '" + record(115).ToString + "', '" + record(116).ToString + "', '" + record(117).ToString + "', '" + record(118).ToString + "', '" + record(119).ToString + "', '" + record(120).ToString + "', '"
    '    ''insertStorage += record(121).ToString + "', '" + record(122).ToString + "', '" + record(123).ToString + "', '" + record(124).ToString + "', '" + record(125).ToString + "', '" + record(126).ToString + "', '" + record(127).ToString + "', '" + record(128).ToString + "', '" + record(129).ToString + "', '" + record(130).ToString + "', '" + record(131).ToString + "', '"
    '    ''insertStorage += record(132).ToString + "', '" + record(133).ToString + "', '" + record(134).ToString + "', '" + record(135).ToString + "', '" + record(136).ToString + "', '" + record(137).ToString + "', '" + record(138).ToString + "', '" + record(139).ToString + "', '" + record(140).ToString + "', '" + record(141).ToString + "', '" + record(142).ToString + "', '"
    '    ''insertStorage += record(143).ToString + "', '" + record(144).ToString + "', '" + record(145).ToString + "', '" + record(146).ToString + "', '" + record(147).ToString + "', '" + record(148).ToString + "', '" + record(149).ToString + "', '" + record(150).ToString + "', '" + record(151).ToString + "', '" + record(152).ToString + "', '" + record(153).ToString + "', '"
    '    ''insertStorage += record(154).ToString + "', '" + record(155).ToString + "', '" + record(156).ToString + "', '" + record(157).ToString + "', '" + record(158).ToString + "', '" + record(159).ToString + "', '" + record(160).ToString + "', '" + record(161).ToString + "', '" + record(162).ToString + "', '" + record(163).ToString + "', '" + record(164).ToString + "', '"
    '    ''insertStorage += record(165).ToString + "', '" + record(166).ToString + "', '" + record(167).ToString + "', '" + record(168).ToString + "', '" + record(169).ToString + "', '" + record(170).ToString + "', '" + record(171).ToString + "', '" + record(172).ToString + "', '" + record(173).ToString + "', '" + record(174).ToString + "', '" + record(175).ToString + "', '"
    '    ''insertStorage += record(176).ToString + "', '" + record(177).ToString + "', '" + record(178).ToString + "', '" + record(179).ToString + "', '" + record(180).ToString + "', '" + record(181).ToString + "', '" + record(182).ToString + "', '" + record(183).ToString + "', '" + record(184).ToString + "', '" + record(185).ToString + "', '" + record(186).ToString + "', '"
    '    ''insertStorage += record(187).ToString + "', '" + record(188).ToString + "', '" + record(189).ToString + "', '" + record(190).ToString + "', '" + record(191).ToString + "', '" + record(192).ToString + "', '" + record(193).ToString + "', '" + record(194).ToString + "', '" + record(195).ToString + "', '" + record(196).ToString + "', '" + record(197).ToString + "', '"
    '    ''insertStorage += record(198).ToString + "', '" + record(199).ToString + "', '" + record(200).ToString + "', '" + record(201).ToString + "', '" + record(202).ToString + "', '" + record(203).ToString + "', '" + record(204).ToString + "', '" + record(205).ToString + "', '" + record(206).ToString + "', '" + record(207).ToString + "', '" + record(208).ToString + "', '"
    '    ''insertStorage += record(209).ToString + "', '" + record(210).ToString + "', '" + record(211).ToString + "', '" + record(212).ToString + "', '" + record(213).ToString + "', '" + record(214).ToString + "', '" + record(215).ToString + "', '" + record(216).ToString + "', '" + record(217).ToString + "', '" + record(218).ToString + "', '" + record(219).ToString + "', '"
    '    ''insertStorage += record(220).ToString + "', '" + record(221).ToString + "', '" + record(222).ToString + "', '" + record(223).ToString + "', '" + record(224).ToString + "', '" + record(225).ToString + "', '" + record(226).ToString + "', '" + record(227).ToString + "', '" + record(228).ToString + "', '" + record(229).ToString + "', '" + record(230).ToString + "', '"
    '    ''insertStorage += record(231).ToString + "', '" + record(232).ToString + "', '" + record(233).ToString + "', '" + record(234).ToString + "', '" + record(235).ToString + "', '" + record(236).ToString + "', '" + record(237).ToString + "', '" + record(238).ToString + "', '" + record(239).ToString + "', '" + record(240).ToString + "', '" + record(241).ToString + "', '"
    '    ''insertStorage += record(242).ToString + "', '" + record(243).ToString + "', '" + record(244).ToString + "', '" + record(245).ToString + "', '" + record(246).ToString + "', '" + record(247).ToString + "', '" + record(248).ToString + "', '" + record(249).ToString + "', '" + record(250).ToString + "', '" + record(251).ToString + "', '" + record(252).ToString + "', '"
    '    ''insertStorage += record(253).ToString + "', '" + record(254).ToString + "', '" + record(255).ToString + "', '" + record(256).ToString + "', '" + record(257).ToString + "', '" + record(258).ToString + "', '" + record(259).ToString + "', '" + record(260).ToString + "', '" + record(261).ToString + "', '" + record(262).ToString + "', '" + record(263).ToString + "', '"
    '    ''insertStorage += record(264).ToString + "', '" + record(265).ToString + "', '" + record(266).ToString + "', '" + record(267).ToString + "', '" + record(268).ToString + "', '" + record(269).ToString + "', '" + record(270).ToString + "', '" + record(271).ToString + "', '" + record(272).ToString + "', '" + record(273).ToString + "', '" + record(274).ToString + "', '"
    '    ''insertStorage += record(275).ToString + "', '" + record(276).ToString + "', '" + record(277).ToString + "', '" + record(278).ToString + "', '" + record(279).ToString + "', '" + record(280).ToString + "', '" + record(281).ToString + "', '" + record(282).ToString + "', '" + record(283).ToString + "', '" + record(284).ToString + "', '" + record(285).ToString + "', '"
    '    ''insertStorage += record(286).ToString + "', '" + record(287).ToString + "', '" + record(288).ToString + "', '" + record(289).ToString + "', '" + record(290).ToString + "', '" + record(291).ToString + "', '" + record(292).ToString + "', '" + record(293).ToString + "', '" + record(294).ToString + "', '" + record(295).ToString + "', '" + record(296).ToString + "', '"
    '    ''insertStorage += record(297).ToString + "', '" + record(298).ToString + "', '" + record(299).ToString + "', '" + record(300).ToString + "', '" + record(301).ToString + "', '" + record(302).ToString + "', '" + record(303).ToString + "', '" + record(304).ToString + "', '" + record(305).ToString + "', '" + record(306).ToString + "', '" + record(307).ToString + "', '"
    '    ''insertStorage += record(308).ToString + "', '" + record(309).ToString + "', '" + record(310).ToString + "', '" + record(311).ToString ' + "', '" + record(257).ToString + "', '" + record(258).ToString + "', '" + record(259).ToString + "', '" + record(260).ToString + "', '" + record(261).ToString + "', '" + record(262).ToString + "', '" + record(263).ToString + "', '"
    '    'insertStorage += "');"

    '    'MessageBox.Show(insertStorage)
    'End Sub

    'Public record As Object()
    'Public Sub SaveSQL()
    '    Dim record(312) As Object
    '    Try
    '        If CustomerName = Nothing Then
    '            MessageBox.Show("Enter Customer Name")
    '        ElseIf CustomerRef = Nothing Then
    '            MessageBox.Show("Enter Customer Reference Number")
    '        ElseIf TagNo = Nothing Then
    '            MessageBox.Show("Enter Tag Number")
    '        Else

    '            Dim cmd As New SqlCommand
    '            Dim constr As String = "Data Source=.\SQLEXPRESS;Initial Catalog=FinalDB;Integrated Security=true"
    '            Dim Database_Columnno As Integer

    '            Dim Temprow = Database_Rowno
    '            Database_LastRow = dt_OpenOffice.Rows.Count - 1
    '            HScrollBar_Records.Maximum = Database_LastRow

    '            With dt_OpenOffice

    '                .Columns.RemoveAt(0)

    '                .Rows(Temprow)(1) = Database_Rowno
    '                .Rows(Temprow)(2) = ItemNo
    '                .Rows(Temprow)(3) = SheetNo

    '                Database_Columnno = DataSection1_Field
    '                '*----------------------------------------------------------------------------------------------------
    '                .Rows(Temprow)(Database_Columnno + 1) = CustomerName
    '                .Rows(Temprow)(Database_Columnno + 2) = ProjectName
    '                .Rows(Temprow)(Database_Columnno + 3) = OfferNo
    '                .Rows(Temprow)(Database_Columnno + 4) = Revision
    '                .Rows(Temprow)(Database_Columnno + 5) = TagNo
    '                .Rows(Temprow)(Database_Columnno + 6) = QTY
    '                .Rows(Temprow)(Database_Columnno + 7) = DateTimePicker1.Value
    '                .Rows(Temprow)(Database_Columnno + 8) = Format(DateTime.Now, "hh:mm:ss tt")
    '                .Rows(Temprow)(Database_Columnno + 9) = cmbFluidType.Text
    '                .Rows(Temprow)(Database_Columnno + 10) = cmbFluid.Text
    '                .Rows(Temprow)(Database_Columnno + 11) = cmbUnitsType.Text
    '                .Rows(Temprow)(Database_Columnno + 12) = cmbModel.Text
    '                .Rows(Temprow)(Database_Columnno + 13) = txtMedium.Text
    '                .Rows(Temprow)(Database_Columnno + 14) = cmbFlowrate.Text
    '                .Rows(Temprow)(Database_Columnno + 15) = If(txtFlowrateCase1.Text = "", 0, txtFlowrateCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 16) = If(txtFlowrateCase2.Text = "", 0, txtFlowrateCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 17) = If(txtFlowrateCase3.Text = "", 0, txtFlowrateCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 18) = cmbTemperatureUnits.Text
    '                .Rows(Temprow)(Database_Columnno + 19) = If(txtInletTemperatureCase1.Text = "", 0, txtInletTemperatureCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 20) = If(txtInletTemperatureCase2.Text = "", 0, txtInletTemperatureCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 21) = If(txtInletTemperatureCase3.Text = "", 0, txtInletTemperatureCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 22) = cmbPressureUnits.Text

    '                .Rows(Temprow)(Database_Columnno + 23) = If(txtInletPressureCase1.Text = "", 0, txtInletPressureCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 24) = If(txtInletPressureCase2.Text = "", 0, txtInletPressureCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 25) = If(txtInletPressureCase3.Text = "", 0, txtInletPressureCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 26) = If(txtOutletPressure1.Text = "", 0, txtOutletPressure1.Text)
    '                .Rows(Temprow)(Database_Columnno + 27) = If(txtOutletPressure2.Text = "", 0, txtOutletPressure2.Text)
    '                .Rows(Temprow)(Database_Columnno + 28) = If(txtOutletPressure3.Text = "", 0, txtOutletPressure3.Text)
    '                .Rows(Temprow)(Database_Columnno + 29) = If(txtPressureDropCase1.Text = "", 0, txtPressureDropCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 30) = If(txtPressureDropCase2.Text = "", 0, txtPressureDropCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 31) = If(txtPressureDropCase3.Text = "", 0, txtPressureDropCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 32) = chkMolecularWeight.Checked
    '                .Rows(Temprow)(Database_Columnno + 33) = cmbDensityUnits.Text

    '                .Rows(Temprow)(Database_Columnno + 34) = If(txtMolecularWeight.Text = "", 0, txtMolecularWeight.Text)
    '                .Rows(Temprow)(Database_Columnno + 35) = If(txtDensityCase1.Text = "", 0, txtDensityCase1.Text)

    '                .Rows(Temprow)(Database_Columnno + 36) = If(txtDensityCase2.Text = "", 0, txtDensityCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 37) = If(txtDensityCase3.Text = "", 0, txtDensityCase3.Text)

    '                .Rows(Temprow)(Database_Columnno + 38) = chkViscosity.Checked
    '                .Rows(Temprow)(Database_Columnno + 39) = cmbViscosityUnits.Text
    '                .Rows(Temprow)(Database_Columnno + 40) = If(txtViscosityCase1.Text = "", 0, txtViscosityCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 41) = If(txtViscosityCase2.Text = "", 0, txtViscosityCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 42) = If(txtViscosityCase3.Text = "", 0, txtViscosityCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 43) = If(txtTOutPressureCase1.Text = "", 0, txtTOutPressureCase1.Text) 'ToutPressureCase1
    '                .Rows(Temprow)(Database_Columnno + 44) = If(txtTOutPressureCase2.Text = "", 0, txtTOutPressureCase2.Text)   'ToutPressureCase2
    '                .Rows(Temprow)(Database_Columnno + 45) = If(txtTOutPressureCase3.Text = "", 0, txtTOutPressureCase3.Text)   'ToutPressureCase3

    '                .Rows(Temprow)(Database_Columnno + 46) = If(txtTsatoutPressureCase1.Text = "", 0, txtTsatoutPressureCase1.Text) 'ToutsatPressureCase1
    '                .Rows(Temprow)(Database_Columnno + 47) = If(txtTsatoutPressureCase2.Text = "", 0, txtTsatoutPressureCase2.Text)  'ToutsatPressureCase2
    '                .Rows(Temprow)(Database_Columnno + 48) = If(txtTsatoutPressureCase3.Text = "", 0, txtTsatoutPressureCase3.Text)   'ToutsatPressureCase3
    '                .Rows(Temprow)(Database_Columnno + 49) = cmbCriticalPressureUnits.Text
    '                .Rows(Temprow)(Database_Columnno + 50) = If(txtCriticalPressureCase1.Text = "", 0, txtCriticalPressureCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 51) = If(txtCriticalPressureCase2.Text = "", 0, txtCriticalPressureCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 52) = If(txtCriticalPressureCase3.Text = "", 0, txtCriticalPressureCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 53) = cmbVapourPressureUnits.Text
    '                .Rows(Temprow)(Database_Columnno + 54) = If(txtVapourPressureCase1.Text = "", 0, txtVapourPressureCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 55) = If(txtVapourPressureCase2.Text = "", 0, txtVapourPressureCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 56) = If(txtVapourPressureCase3.Text = "", 0, txtVapourPressureCase3.Text)

    '                .Rows(Temprow)(Database_Columnno + 57) = Zcase1
    '                .Rows(Temprow)(Database_Columnno + 58) = Zcase2
    '                .Rows(Temprow)(Database_Columnno + 59) = Zcase3
    '                .Rows(Temprow)(Database_Columnno + 60) = Xcase1
    '                .Rows(Temprow)(Database_Columnno + 61) = Xcase2
    '                .Rows(Temprow)(Database_Columnno + 62) = Xcase3

    '                .Rows(Temprow)(Database_Columnno + 63) = Kcase1
    '                .Rows(Temprow)(Database_Columnno + 64) = Kcase2
    '                .Rows(Temprow)(Database_Columnno + 65) = Kcase3
    '                .Rows(Temprow)(Database_Columnno + 66) = DrynessFraction_LiquidCase1

    '                .Rows(Temprow)(Database_Columnno + 67) = DrynessFraction_LiquidCase2
    '                .Rows(Temprow)(Database_Columnno + 68) = DrynessFraction_LiquidCase3

    '                .Rows(Temprow)(Database_Columnno + 69) = If(txtTsatInletCase1.Text = "", 0, txtTsatInletCase1.Text)

    '                .Rows(Temprow)(Database_Columnno + 70) = If(txtTsatInletCase2.Text = "", 0, txtTsatInletCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 71) = If(txtTsatInletCase3.Text = "", 0, txtTsatInletCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 72) = SelectP2orDP
    '                .Rows(Temprow)(Database_Columnno + 73) = cmbQW.Text
    '                .Rows(Temprow)(Database_Columnno + 74) = SalesEnggName
    '                .Rows(Temprow)(Database_Columnno + 75) = CustomerRef

    '                '*---------------------------------------------------------------------------------------------------
    '                Database_Columnno = DataSection2_MOC
    '                .Rows(Temprow)(Database_Columnno + 1) = cmbMOC.Text
    '                .Rows(Temprow)(Database_Columnno + 2) = If(txtDesignPressureInlet.Text = "", 0, txtDesignPressureInlet.Text)
    '                .Rows(Temprow)(Database_Columnno + 3) = If(txtDesignTemperatureInlet.Text = "", 0, txtDesignTemperatureInlet.Text)
    '                .Rows(Temprow)(Database_Columnno + 4) = If(lblSuggestedRating.Text = "", 0, lblSuggestedRating.Text)
    '                .Rows(Temprow)(Database_Columnno + 5) = cmbSuggestedRating.Text
    '                .Rows(Temprow)(Database_Columnno + 6) = lblFinalRating.Text
    '                .Rows(Temprow)(Database_Columnno + 7) = cmbAreaunits.Text
    '                .Rows(Temprow)(Database_Columnno + 8) = cmbInletPipeSize.Text
    '                .Rows(Temprow)(Database_Columnno + 9) = lblSuggPipeSize.Text
    '                .Rows(Temprow)(Database_Columnno + 10) = cmbPipeDia.Text
    '                .Rows(Temprow)(Database_Columnno + 11) = lblFinalOutletPipe.Text
    '                .Rows(Temprow)(Database_Columnno + 12) = cmbSchedule.Text
    '                .Rows(Temprow)(Database_Columnno + 13) = cmbInletPipeSchedule.Text
    '                .Rows(Temprow)(Database_Columnno + 14) = Noise_ValveID
    '                .Rows(Temprow)(Database_Columnno + 15) = Noise_ID
    '                .Rows(Temprow)(Database_Columnno + 16) = Noise_Schedule
    '                .Rows(Temprow)(Database_Columnno + 17) = Noise_OutletPipeDia
    '                .Rows(Temprow)(Database_Columnno + 18) = InletPipeSize
    '                .Rows(Temprow)(Database_Columnno + 19) = InletPipeID


    '                .Rows(Temprow)(Database_Columnno + 20) = Label26.Text
    '                .Rows(Temprow)(Database_Columnno + 21) = cmbVelocityRule.Text
    '                .Rows(Temprow)(Database_Columnno + 22) = cmbFlowDirection.Text

    '                .Rows(Temprow)(Database_Columnno + 23) = cmbCharacterstics.Text
    '                .Rows(Temprow)(Database_Columnno + 24) = cmbKVseries.Text
    '                .Rows(Temprow)(Database_Columnno + 25) = If(txtSuggestedKV.Text = "", 0, txtSuggestedKV.Text)
    '                .Rows(Temprow)(Database_Columnno + 26) = If(txtSuggestedValveSize.Text = "", 0, txtSuggestedValveSize.Text)
    '                .Rows(Temprow)(Database_Columnno + 27) = cmbKVOverride.Text


    '                .Rows(Temprow)(Database_Columnno + 28) = cmbValveSizeOverride.Text
    '                .Rows(Temprow)(Database_Columnno + 29) = lblKVMaxValue.Text
    '                .Rows(Temprow)(Database_Columnno + 30) = lblFinalValveSize.Text
    '                .Rows(Temprow)(Database_Columnno + 31) = (cmbBonnetType.Text.Replace(vbLf, ""))
    '                .Rows(Temprow)(Database_Columnno + 32) = cmbEndConnection.Text
    '                .Rows(Temprow)(Database_Columnno + 33) = FinalDesignTemperatureInlet

    '                ' Multistage added
    '                .Rows(Temprow)(Database_Columnno + 34) = If(txtSuggTrim.Text = "", 0, txtSuggTrim.Text)
    '                .Rows(Temprow)(Database_Columnno + 35) = cmbSelectedTrim.Text
    '                .Rows(Temprow)(Database_Columnno + 36) = chkBaffleCase1.Checked
    '                .Rows(Temprow)(Database_Columnno + 37) = chkBaffleCase2.Checked
    '                .Rows(Temprow)(Database_Columnno + 38) = chkBaffleCase3.Checked
    '                .Rows(Temprow)(Database_Columnno + 39) = If(txtBaffleKVCase1.Text = "", 0, txtBaffleKVCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 40) = If(txtBaffleKVCase2.Text = "", 0, txtBaffleKVCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 41) = If(txtBaffleKVCase3.Text = "", 0, txtBaffleKVCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 42) = lblMicroTrim.Text



    '                '' Actuator section 
    '                Database_Columnno = DataSection3_Actuator

    '                .Rows(Temprow)(Database_Columnno + 1) = cmbActuatorType.Text

    '                .Rows(Temprow)(Database_Columnno + 2) = cmbBalancing.Text
    '                .Rows(Temprow)(Database_Columnno + 3) = cmbAirFailure.Text
    '                .Rows(Temprow)(Database_Columnno + 4) = cmbLeakage.Text
    '                .Rows(Temprow)(Database_Columnno + 5) = cmbPacking.Text
    '                .Rows(Temprow)(Database_Columnno + 6) = cmbSealing.Text
    '                .Rows(Temprow)(Database_Columnno + 7) = If(txtDPShutoff.Text = "", 0, txtDPShutoff.Text)

    '                .Rows(Temprow)(Database_Columnno + 8) = cmbAirPressureUnits.Text
    '                .Rows(Temprow)(Database_Columnno + 9) = If(txtAirPressure.Text = "", 0, txtAirPressure.Text)
    '                .Rows(Temprow)(Database_Columnno + 10) = cmbSeatDia.Text
    '                .Rows(Temprow)(Database_Columnno + 11) = lblForce0perc.Text
    '                .Rows(Temprow)(Database_Columnno + 12) = cmbHandwheel.SelectedValue
    '                .Rows(Temprow)(Database_Columnno + 13) = If(txtSuggActuator.Text = "", 0, txtSuggActuator.Text)
    '                .Rows(Temprow)(Database_Columnno + 14) = cmbSelectActuator.Text
    '                .Rows(Temprow)(Database_Columnno + 15) = lblFinalActuator.Text
    '                .Rows(Temprow)(Database_Columnno + 16) = InitialSpringRange
    '                .Rows(Temprow)(Database_Columnno + 17) = FinalSpringRange
    '                .Rows(Temprow)(Database_Columnno + 18) = NoofSprings
    '                .Rows(Temprow)(Database_Columnno + 19) = MKSActuator
    '                .Rows(Temprow)(Database_Columnno + 20) = MKSInitialSpringRange
    '                .Rows(Temprow)(Database_Columnno + 21) = MKSFinalSpringRange
    '                .Rows(Temprow)(Database_Columnno + 22) = lblSelForce.Text
    '                .Rows(Temprow)(Database_Columnno + 23) = lblSuggForce.Text

    '                'Materials 
    '                Database_Columnno = DataSection4_Materials
    '                .Rows(Temprow)(Database_Columnno + 1) = BodyMaterial
    '                .Rows(Temprow)(Database_Columnno + 2) = Plug
    '                .Rows(Temprow)(Database_Columnno + 3) = Seat
    '                .Rows(Temprow)(Database_Columnno + 4) = TopMaterials
    '                .Rows(Temprow)(Database_Columnno + 5) = Gasket
    '                .Rows(Temprow)(Database_Columnno + 6) = Painting


    '                .Rows(Temprow)(Database_Columnno + 7) = Positioner
    '                .Rows(Temprow)(Database_Columnno + 8) = Sov
    '                .Rows(Temprow)(Database_Columnno + 9) = AFR
    '                .Rows(Temprow)(Database_Columnno + 10) = ALR
    '                .Rows(Temprow)(Database_Columnno + 11) = LimitSwitch
    '                .Rows(Temprow)(Database_Columnno + 12) = VolBooster
    '                .Rows(Temprow)(Database_Columnno + 13) = PosnTrans
    '                .Rows(Temprow)(Database_Columnno + 14) = VTank
    '                .Rows(Temprow)(Database_Columnno + 15) = Roborter
    '                .Rows(Temprow)(Database_Columnno + 16) = ItoP
    '                .Rows(Temprow)(Database_Columnno + 17) = QEV
    '                .Rows(Temprow)(Database_Columnno + 18) = Certification
    '                .Rows(Temprow)(Database_Columnno + 19) = Tubing
    '                .Rows(Temprow)(Database_Columnno + 20) = Guiding
    '                .Rows(Temprow)(Database_Columnno + 21) = PositionerMake
    '                .Rows(Temprow)(Database_Columnno + 22) = AFRMake
    '                .Rows(Temprow)(Database_Columnno + 23) = ALRMake
    '                .Rows(Temprow)(Database_Columnno + 24) = SOVMake
    '                .Rows(Temprow)(Database_Columnno + 25) = VBMake
    '                .Rows(Temprow)(Database_Columnno + 26) = LimitSwitchMake
    '                .Rows(Temprow)(Database_Columnno + 27) = QEVMake
    '                .Rows(Temprow)(Database_Columnno + 28) = Painting_ACC

    '                Database_Columnno = DataSection5_Output1

    '                .Rows(Temprow)(Database_Columnno + 1) = lblApproxCVCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 2) = lblApproxCVCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 3) = lblApproxCVCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 4) = lblKVCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 5) = lblKVCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 6) = lblKVCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 7) = lblFinalCVCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 8) = lblFinalCVCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 9) = lblFinalCVCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 10) = lblFinalKVCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 11) = lblFinalKvCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 12) = lblFinalKVcase3.Text
    '                .Rows(Temprow)(Database_Columnno + 13) = lblStrokeCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 14) = lblStrokeCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 15) = lblStrokeCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 16) = lblFlowtypeCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 17) = lblFlowtypeCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 18) = lblFlowtypeCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 19) = lblSeverityCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 20) = lblSeverityCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 21) = lblSeverityCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 22) = lblVelocityValveInletCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 23) = lblVelocityValveInletCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 24) = lblVelocityValveInletCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 25) = lblVelocityValveOutletCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 26) = lblVelocityValveOutletCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 27) = lblVelocityValveOutletCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 28) = lblVelocityInletPipeCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 29) = lblVelocityInletPipeCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 30) = lblVelocityInletPipeCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 31) = lblVelocityOutletPipeCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 32) = lblVelocityOutletPipeCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 33) = lblVelocityOutletPipeCase3.Text

    '                Database_Columnno = DataSection6_Output2
    '                .Rows(Temprow)(Database_Columnno + 1) = If(lblNoiseCase1.Text = "", 0, lblNoiseCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 2) = If(lblNoiseCase2.Text = "", 0, lblNoiseCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 3) = If(lblNoiseCase3.Text = "", 0, lblNoiseCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 4) = chkNoiseAttenuation.Checked
    '                .Rows(Temprow)(Database_Columnno + 5) = If(lblAttenuatedNoiseCase1.Text = "", 0, lblAttenuatedNoiseCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 6) = If(lblAttenuatedNoiseCase2.Text = "", 0, lblAttenuatedNoiseCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 7) = If(lblAttenuatedNoiseCase3.Text = "", 0, lblAttenuatedNoiseCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 8) = chkInsulation.Checked
    '                .Rows(Temprow)(Database_Columnno + 9) = lblAttnPressDropCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 10) = lblAttnPressDropCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 11) = lblAttnPressDropCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 12) = lblMachNoVavleOutCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 13) = lblMachNoVavleOutCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 14) = lblMachNoVavleOutCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 15) = lblMachNoPipeOutCase1.Text
    '                .Rows(Temprow)(Database_Columnno + 16) = lblMachNoPipeOutCase2.Text
    '                .Rows(Temprow)(Database_Columnno + 17) = lblMachNoPipeOutCase3.Text
    '                .Rows(Temprow)(Database_Columnno + 18) = If(lblFLCase1.Text = "", 0, lblFLCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 19) = If(lblFLCase2.Text = "", 0, lblFLCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 20) = If(lblFLCase3.Text = "", 0, lblFLCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 21) = If(lblXTCase1.Text = "", 0, lblXTCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 22) = If(lblXTCase2.Text = "", 0, lblXTCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 23) = If(lblXTCase3.Text = "", 0, lblXTCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 24) = If(lblFP.Text = "", 0, lblFP.Text)
    '                .Rows(Temprow)(Database_Columnno + 25) = lblValveModel.Text
    '                .Rows(Temprow)(Database_Columnno + 26) = FinalValveSize
    '                .Rows(Temprow)(Database_Columnno + 27) = FinalKVCase1
    '                .Rows(Temprow)(Database_Columnno + 28) = FinalKVCase2
    '                .Rows(Temprow)(Database_Columnno + 29) = FinalKVCase3
    '                .Rows(Temprow)(Database_Columnno + 30) = FinalKVmax_ValveSize
    '                .Rows(Temprow)(Database_Columnno + 31) = FDCase1
    '                .Rows(Temprow)(Database_Columnno + 32) = FDCase2
    '                .Rows(Temprow)(Database_Columnno + 33) = FDCase3
    '                .Rows(Temprow)(Database_Columnno + 34) = SeatDia
    '                .Rows(Temprow)(Database_Columnno + 35) = UserNotes1
    '                .Rows(Temprow)(Database_Columnno + 36) = UserNotes2
    '                .Rows(Temprow)(Database_Columnno + 37) = UserNotes3
    '                .Rows(Temprow)(Database_Columnno + 38) = KvforCage
    '                .Rows(Temprow)(Database_Columnno + 39) = PrBl_SeatDia
    '                .Rows(Temprow)(Database_Columnno + 40) = FPKVCase1
    '                .Rows(Temprow)(Database_Columnno + 41) = FPKVCase2
    '                .Rows(Temprow)(Database_Columnno + 42) = FPKVCase3
    '                .Rows(Temprow)(Database_Columnno + 43) = BaffleKVCase1
    '                .Rows(Temprow)(Database_Columnno + 44) = BaffleKVCase2
    '                .Rows(Temprow)(Database_Columnno + 45) = BaffleKVCase3
    '                .Rows(Temprow)(Database_Columnno + 46) = Stages

    '                'PRDS
    '                .Rows(Temprow)(Database_Columnno + 47) = If(txtWaterPressure.Text = "", 0, txtWaterPressure.Text)
    '                .Rows(Temprow)(Database_Columnno + 48) = If(txtWaterTemperature.Text = "", 0, txtWaterTemperature.Text)

    '                .Rows(Temprow)(Database_Columnno + 49) = If(txtWaterFlowCase1.Text = "", 0, txtWaterFlowCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 50) = If(txtWaterFlowCase2.Text = "", 0, txtWaterFlowCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 51) = If(txtWaterFlowCase3.Text = "", 0, txtWaterFlowCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 52) = If(txtP2OutWCase1.Text = "", 0, txtP2OutWCase1.Text)
    '                .Rows(Temprow)(Database_Columnno + 53) = If(txtP2OutWCase2.Text = "", 0, txtP2OutWCase2.Text)
    '                .Rows(Temprow)(Database_Columnno + 54) = If(txtP2OutWCase3.Text = "", 0, txtP2OutWCase3.Text)
    '                .Rows(Temprow)(Database_Columnno + 55) = WaterFlowRateCase1
    '                .Rows(Temprow)(Database_Columnno + 56) = WaterFlowRateCase2
    '                .Rows(Temprow)(Database_Columnno + 57) = WaterFlowRateCase3
    '                .Rows(Temprow)(Database_Columnno + 58) = OutletWaterPressureCase1
    '                .Rows(Temprow)(Database_Columnno + 59) = OutletWaterPressureCase2
    '                .Rows(Temprow)(Database_Columnno + 60) = OutletWaterPressureCase3

    '                Database_Columnno = DataSection7_CalcValues             '  The below Values are calculated and are needed for calculations on reloading 
    '                .Rows(Temprow)(Database_Columnno + 1) = FlowrateForPipeDiaCalcCase1
    '                .Rows(Temprow)(Database_Columnno + 2) = FlowrateForPipeDiaCalcCase2
    '                .Rows(Temprow)(Database_Columnno + 3) = FlowrateForPipeDiaCalcCase3

    '                .Rows(Temprow)(Database_Columnno + 4) = FluidVelocityCase1
    '                .Rows(Temprow)(Database_Columnno + 5) = FluidVelocityCase2
    '                .Rows(Temprow)(Database_Columnno + 6) = FluidVelocityCase3


    '                .Rows(Temprow)(Database_Columnno + 7) = SoundVelocityCase1
    '                .Rows(Temprow)(Database_Columnno + 8) = SoundVelocityCase2
    '                .Rows(Temprow)(Database_Columnno + 9) = SoundVelocityCase3

    '                .Rows(Temprow)(Database_Columnno + 10) = PRDS_IP_FlowrateForPipeDiaCase1
    '                .Rows(Temprow)(Database_Columnno + 11) = PRDS_IP_FlowrateForPipeDiaCase2
    '                .Rows(Temprow)(Database_Columnno + 12) = PRDS_IP_FlowrateForPipeDiaCase3

    '                .Rows(Temprow)(Database_Columnno + 13) = PRDS_OP_FlowrateForPipeDiaCase1
    '                .Rows(Temprow)(Database_Columnno + 14) = PRDS_OP_FlowrateForPipeDiaCase2
    '                .Rows(Temprow)(Database_Columnno + 15) = PRDS_OP_FlowrateForPipeDiaCase3
    '                .Rows(Temprow)(Database_Columnno + 16) = VelocityRuleFlag

    '                '  The below Values are calculated from Text entries and are needed for calculations on reloading 
    '                .Rows(Temprow)(Database_Columnno + 17) = FinalInletPressureCase1
    '                .Rows(Temprow)(Database_Columnno + 18) = FinalInletPressureCase2
    '                .Rows(Temprow)(Database_Columnno + 19) = FinalInletPressureCase3

    '                .Rows(Temprow)(Database_Columnno + 20) = FinalOutletPressureCase1
    '                .Rows(Temprow)(Database_Columnno + 21) = FinalOutletPressureCase2
    '                .Rows(Temprow)(Database_Columnno + 22) = FinaloutletPressureCase3

    '                .Rows(Temprow)(Database_Columnno + 23) = FinalPressureDropCase1
    '                .Rows(Temprow)(Database_Columnno + 24) = FinalPressureDropCase2
    '                .Rows(Temprow)(Database_Columnno + 25) = FinalPressureDropCase3


    '                .Rows(Temprow)(Database_Columnno + 26) = FinalInletTemperatureCase1
    '                .Rows(Temprow)(Database_Columnno + 27) = FinalInletTemperatureCase2
    '                .Rows(Temprow)(Database_Columnno + 28) = FinalInletTemperatureCase3


    '                .Rows(Temprow)(Database_Columnno + 29) = FinalVapourPressureCase1
    '                .Rows(Temprow)(Database_Columnno + 30) = FinalVapourPressureCase2
    '                .Rows(Temprow)(Database_Columnno + 31) = FinalVapourPressureCase3

    '                .Rows(Temprow)(Database_Columnno + 32) = FinalCriticalPressureCase1
    '                .Rows(Temprow)(Database_Columnno + 33) = FinalCriticalPressureCase2
    '                .Rows(Temprow)(Database_Columnno + 34) = FinalCriticalPressureCase3

    '                .Rows(Temprow)(Database_Columnno + 35) = FinalViscosityCase1
    '                .Rows(Temprow)(Database_Columnno + 36) = FinalViscosityCase2
    '                .Rows(Temprow)(Database_Columnno + 37) = FinalViscosityCase3


    '                .Rows(Temprow)(Database_Columnno + 38) = FinalDensityCase1
    '                .Rows(Temprow)(Database_Columnno + 39) = FinalDensityCase2
    '                .Rows(Temprow)(Database_Columnno + 40) = FinalDensityCase3

    '                .Rows(Temprow)(Database_Columnno + 41) = FinalFlowrateCase1
    '                .Rows(Temprow)(Database_Columnno + 42) = FinalFlowrateCase2
    '                .Rows(Temprow)(Database_Columnno + 43) = FinalFlowrateCase3

    '                .Rows(Temprow)(Database_Columnno + 44) = SupplyAirPressure
    '                .Rows(Temprow)(Database_Columnno + 45) = DPShutoff

    '                .Rows(Temprow)(Database_Columnno + 46) = TubingMake
    '                .Rows(Temprow)(Database_Columnno + 47) = TubingSize
    '                .Rows(Temprow)(Database_Columnno + 48) = TubingMOC

    '                For a As Integer = 350 To 400
    '                    .Columns.RemoveAt(a)
    '                Next

    '            End With

    '            Using con As New SqlConnection(constr)
    '                Using copy As New SqlBulkCopy(con)
    '                    copy.DestinationTableName = "dbo.Storage_Table_Gap"
    '                    con.Open()
    '                    copy.WriteToServer(dt_OpenOffice)
    '                    con.Close()
    '                End Using
    '            End Using

    '        End If
    '    Catch ex As Exception
    '        MessageBox.Show(ex.Message + Environment.NewLine + ex.StackTrace)
    '    End Try
    'End Sub

    Public Sub SaveXLS(CurrentProjectFileName As String)

        'Me.SaveSQL()

        'Dim FileisOpen As Boolean
        'Dim SaveWorkbook As excel.Workbook
        Dim Database_Columnno As Integer

        Try

            lblFileName.Text = "Filename: " & Path.GetFileNameWithoutExtension(CurrentProjectFileName)
            Dim Temprow = Database_Rowno
            'MessageBox.Show(Temprow)
            '     HScrollBar_Records.Value = Database_Rowno
            Database_LastRow = dt_OpenOffice.Rows.Count - 1
            HScrollBar_Records.Maximum = Database_LastRow

            With dt_OpenOffice

                .Rows(Temprow)(1) = Database_Rowno
                .Rows(Temprow)(2) = ItemNo
                .Rows(Temprow)(3) = SheetNo

                Database_Columnno = DataSection1_Field
                '*----------------------------------------------------------------------------------------------------
                .Rows(Temprow)(Database_Columnno + 1) = CustomerName
                .Rows(Temprow)(Database_Columnno + 2) = ProjectName
                .Rows(Temprow)(Database_Columnno + 3) = OfferNo
                .Rows(Temprow)(Database_Columnno + 4) = Revision
                .Rows(Temprow)(Database_Columnno + 5) = TagNo
                .Rows(Temprow)(Database_Columnno + 6) = QTY
                .Rows(Temprow)(Database_Columnno + 7) = DateTimePicker1.Value
                .Rows(Temprow)(Database_Columnno + 8) = Format(DateTime.Now, "hh:mm:ss tt")
                .Rows(Temprow)(Database_Columnno + 9) = cmbFluidType.Text
                .Rows(Temprow)(Database_Columnno + 10) = cmbFluid.Text
                .Rows(Temprow)(Database_Columnno + 11) = cmbUnitsType.Text
                .Rows(Temprow)(Database_Columnno + 12) = cmbModel.Text
                .Rows(Temprow)(Database_Columnno + 13) = If(txtMedium.Text = "", DBNull.Value, txtMedium.Text)
                .Rows(Temprow)(Database_Columnno + 14) = cmbFlowrate.Text
                .Rows(Temprow)(Database_Columnno + 15) = If(txtFlowrateCase1.Text = "", DBNull.Value, txtFlowrateCase1.Text)
                .Rows(Temprow)(Database_Columnno + 16) = If(txtFlowrateCase2.Text = "", DBNull.Value, txtFlowrateCase2.Text)
                .Rows(Temprow)(Database_Columnno + 17) = If(txtFlowrateCase3.Text = "", DBNull.Value, txtFlowrateCase3.Text)
                .Rows(Temprow)(Database_Columnno + 18) = cmbTemperatureUnits.Text
                .Rows(Temprow)(Database_Columnno + 19) = If(txtInletTemperatureCase1.Text = "", DBNull.Value, txtInletTemperatureCase1.Text)
                .Rows(Temprow)(Database_Columnno + 20) = If(txtInletTemperatureCase2.Text = "", DBNull.Value, txtInletTemperatureCase2.Text)
                .Rows(Temprow)(Database_Columnno + 21) = If(txtInletTemperatureCase3.Text = "", DBNull.Value, txtInletTemperatureCase3.Text)
                .Rows(Temprow)(Database_Columnno + 22) = cmbPressureUnits.Text

                .Rows(Temprow)(Database_Columnno + 23) = If(txtInletPressureCase1.Text = "", DBNull.Value, txtInletPressureCase1.Text)
                .Rows(Temprow)(Database_Columnno + 24) = If(txtInletPressureCase2.Text = "", DBNull.Value, txtInletPressureCase2.Text)
                .Rows(Temprow)(Database_Columnno + 25) = If(txtInletPressureCase3.Text = "", DBNull.Value, txtInletPressureCase3.Text)
                .Rows(Temprow)(Database_Columnno + 26) = If(txtOutletPressure1.Text = "", DBNull.Value, txtOutletPressure1.Text)
                .Rows(Temprow)(Database_Columnno + 27) = If(txtOutletPressure2.Text = "", DBNull.Value, txtOutletPressure2.Text)
                .Rows(Temprow)(Database_Columnno + 28) = If(txtOutletPressure3.Text = "", DBNull.Value, txtOutletPressure3.Text)
                .Rows(Temprow)(Database_Columnno + 29) = If(txtPressureDropCase1.Text = "", DBNull.Value, txtPressureDropCase1.Text)
                .Rows(Temprow)(Database_Columnno + 30) = If(txtPressureDropCase2.Text = "", DBNull.Value, txtPressureDropCase2.Text)
                .Rows(Temprow)(Database_Columnno + 31) = If(txtPressureDropCase3.Text = "", DBNull.Value, txtPressureDropCase3.Text)
                .Rows(Temprow)(Database_Columnno + 32) = chkMolecularWeight.Checked
                .Rows(Temprow)(Database_Columnno + 33) = cmbDensityUnits.Text

                .Rows(Temprow)(Database_Columnno + 34) = If(txtMolecularWeight.Text = "", DBNull.Value, txtMolecularWeight.Text)
                .Rows(Temprow)(Database_Columnno + 35) = If(txtDensityCase1.Text = "", DBNull.Value, txtDensityCase1.Text)

                .Rows(Temprow)(Database_Columnno + 36) = If(txtDensityCase2.Text = "", DBNull.Value, txtDensityCase2.Text)
                .Rows(Temprow)(Database_Columnno + 37) = If(txtDensityCase3.Text = "", DBNull.Value, txtDensityCase3.Text)

                .Rows(Temprow)(Database_Columnno + 38) = chkViscosity.Checked
                .Rows(Temprow)(Database_Columnno + 39) = cmbViscosityUnits.Text
                .Rows(Temprow)(Database_Columnno + 40) = If(txtViscosityCase1.Text = "", DBNull.Value, txtViscosityCase1.Text)
                .Rows(Temprow)(Database_Columnno + 41) = If(txtViscosityCase2.Text = "", DBNull.Value, txtViscosityCase2.Text)
                .Rows(Temprow)(Database_Columnno + 42) = If(txtViscosityCase3.Text = "", DBNull.Value, txtViscosityCase3.Text)
                .Rows(Temprow)(Database_Columnno + 43) = If(txtTOutPressureCase1.Text = "", DBNull.Value, txtTOutPressureCase1.Text) 'ToutPressureCase1
                .Rows(Temprow)(Database_Columnno + 44) = If(txtTOutPressureCase2.Text = "", DBNull.Value, txtTOutPressureCase2.Text)   'ToutPressureCase2
                .Rows(Temprow)(Database_Columnno + 45) = If(txtTOutPressureCase3.Text = "", DBNull.Value, txtTOutPressureCase3.Text)   'ToutPressureCase3

                .Rows(Temprow)(Database_Columnno + 46) = If(txtTsatoutPressureCase1.Text = "", DBNull.Value, txtTsatoutPressureCase1.Text) 'ToutsatPressureCase1
                .Rows(Temprow)(Database_Columnno + 47) = If(txtTsatoutPressureCase2.Text = "", DBNull.Value, txtTsatoutPressureCase2.Text)  'ToutsatPressureCase2
                .Rows(Temprow)(Database_Columnno + 48) = If(txtTsatoutPressureCase3.Text = "", DBNull.Value, txtTsatoutPressureCase3.Text)   'ToutsatPressureCase3
                .Rows(Temprow)(Database_Columnno + 49) = cmbCriticalPressureUnits.Text
                .Rows(Temprow)(Database_Columnno + 50) = If(txtCriticalPressureCase1.Text = "", DBNull.Value, txtCriticalPressureCase1.Text)
                .Rows(Temprow)(Database_Columnno + 51) = If(txtCriticalPressureCase2.Text = "", DBNull.Value, txtCriticalPressureCase2.Text)
                .Rows(Temprow)(Database_Columnno + 52) = If(txtCriticalPressureCase3.Text = "", DBNull.Value, txtCriticalPressureCase3.Text)
                .Rows(Temprow)(Database_Columnno + 53) = cmbVapourPressureUnits.Text
                .Rows(Temprow)(Database_Columnno + 54) = If(txtVapourPressureCase1.Text = "", DBNull.Value, txtVapourPressureCase1.Text)
                .Rows(Temprow)(Database_Columnno + 55) = If(txtVapourPressureCase2.Text = "", DBNull.Value, txtVapourPressureCase2.Text)
                .Rows(Temprow)(Database_Columnno + 56) = If(txtVapourPressureCase3.Text = "", DBNull.Value, txtVapourPressureCase3.Text)

                .Rows(Temprow)(Database_Columnno + 57) = Zcase1
                .Rows(Temprow)(Database_Columnno + 58) = Zcase2
                .Rows(Temprow)(Database_Columnno + 59) = Zcase3
                .Rows(Temprow)(Database_Columnno + 60) = Xcase1
                .Rows(Temprow)(Database_Columnno + 61) = Xcase2
                .Rows(Temprow)(Database_Columnno + 62) = Xcase3

                .Rows(Temprow)(Database_Columnno + 63) = Kcase1
                .Rows(Temprow)(Database_Columnno + 64) = Kcase2
                .Rows(Temprow)(Database_Columnno + 65) = Kcase3
                .Rows(Temprow)(Database_Columnno + 66) = DrynessFraction_LiquidCase1

                .Rows(Temprow)(Database_Columnno + 67) = DrynessFraction_LiquidCase2
                .Rows(Temprow)(Database_Columnno + 68) = DrynessFraction_LiquidCase3

                .Rows(Temprow)(Database_Columnno + 69) = If(txtTsatInletCase1.Text = "", DBNull.Value, txtTsatInletCase1.Text)

                .Rows(Temprow)(Database_Columnno + 70) = If(txtTsatInletCase2.Text = "", DBNull.Value, txtTsatInletCase2.Text)
                .Rows(Temprow)(Database_Columnno + 71) = If(txtTsatInletCase3.Text = "", DBNull.Value, txtTsatInletCase3.Text)
                .Rows(Temprow)(Database_Columnno + 72) = SelectP2orDP
                .Rows(Temprow)(Database_Columnno + 73) = cmbQW.Text
                .Rows(Temprow)(Database_Columnno + 74) = SalesEnggName
                .Rows(Temprow)(Database_Columnno + 75) = CustomerRef

                '*---------------------------------------------------------------------------------------------------
                Database_Columnno = DataSection2_MOC
                .Rows(Temprow)(Database_Columnno + 1) = cmbMOC.Text
                .Rows(Temprow)(Database_Columnno + 2) = If(txtDesignPressureInlet.Text = "", DBNull.Value, txtDesignPressureInlet.Text)
                .Rows(Temprow)(Database_Columnno + 3) = If(txtDesignTemperatureInlet.Text = "", DBNull.Value, txtDesignTemperatureInlet.Text)
                .Rows(Temprow)(Database_Columnno + 4) = If(lblSuggestedRating.Text = "", DBNull.Value, lblSuggestedRating.Text)
                .Rows(Temprow)(Database_Columnno + 5) = cmbSuggestedRating.Text
                .Rows(Temprow)(Database_Columnno + 6) = lblFinalRating.Text
                .Rows(Temprow)(Database_Columnno + 7) = cmbAreaunits.Text
                .Rows(Temprow)(Database_Columnno + 8) = cmbInletPipeSize.Text
                .Rows(Temprow)(Database_Columnno + 9) = lblSuggPipeSize.Text
                .Rows(Temprow)(Database_Columnno + 10) = cmbPipeDia.Text
                .Rows(Temprow)(Database_Columnno + 11) = lblFinalOutletPipe.Text
                .Rows(Temprow)(Database_Columnno + 12) = cmbSchedule.Text
                .Rows(Temprow)(Database_Columnno + 13) = cmbInletPipeSchedule.Text
                .Rows(Temprow)(Database_Columnno + 14) = Noise_ValveID
                .Rows(Temprow)(Database_Columnno + 15) = Noise_ID
                .Rows(Temprow)(Database_Columnno + 16) = Noise_Schedule
                .Rows(Temprow)(Database_Columnno + 17) = Noise_OutletPipeDia
                .Rows(Temprow)(Database_Columnno + 18) = InletPipeSize
                .Rows(Temprow)(Database_Columnno + 19) = InletPipeID


                .Rows(Temprow)(Database_Columnno + 20) = Label26.Text
                .Rows(Temprow)(Database_Columnno + 21) = cmbVelocityRule.Text
                .Rows(Temprow)(Database_Columnno + 22) = cmbFlowDirection.Text

                .Rows(Temprow)(Database_Columnno + 23) = cmbCharacterstics.Text
                .Rows(Temprow)(Database_Columnno + 24) = cmbKVseries.Text
                .Rows(Temprow)(Database_Columnno + 25) = If(txtSuggestedKV.Text = "", DBNull.Value, txtSuggestedKV.Text)
                .Rows(Temprow)(Database_Columnno + 26) = If(txtSuggestedValveSize.Text = "", DBNull.Value, txtSuggestedValveSize.Text)
                .Rows(Temprow)(Database_Columnno + 27) = cmbKVOverride.Text


                .Rows(Temprow)(Database_Columnno + 28) = cmbValveSizeOverride.Text
                .Rows(Temprow)(Database_Columnno + 29) = lblKVMaxValue.Text
                .Rows(Temprow)(Database_Columnno + 30) = lblFinalValveSize.Text
                .Rows(Temprow)(Database_Columnno + 31) = (cmbBonnetType.Text.Replace(vbLf, ""))
                .Rows(Temprow)(Database_Columnno + 32) = cmbEndConnection.Text
                .Rows(Temprow)(Database_Columnno + 33) = FinalDesignTemperatureInlet

                ' Multistage added
                .Rows(Temprow)(Database_Columnno + 34) = If(txtSuggTrim.Text = "", DBNull.Value, txtSuggTrim.Text)
                .Rows(Temprow)(Database_Columnno + 35) = cmbSelectedTrim.Text
                .Rows(Temprow)(Database_Columnno + 36) = chkBaffleCase1.Checked
                .Rows(Temprow)(Database_Columnno + 37) = chkBaffleCase2.Checked
                .Rows(Temprow)(Database_Columnno + 38) = chkBaffleCase3.Checked
                .Rows(Temprow)(Database_Columnno + 39) = If(txtBaffleKVCase1.Text = "", DBNull.Value, txtBaffleKVCase1.Text)
                .Rows(Temprow)(Database_Columnno + 40) = If(txtBaffleKVCase2.Text = "", DBNull.Value, txtBaffleKVCase2.Text)
                .Rows(Temprow)(Database_Columnno + 41) = If(txtBaffleKVCase3.Text = "", DBNull.Value, txtBaffleKVCase3.Text)
                .Rows(Temprow)(Database_Columnno + 42) = lblMicroTrim.Text



                '' Actuator section 
                Database_Columnno = DataSection3_Actuator

                .Rows(Temprow)(Database_Columnno + 1) = cmbActuatorType.Text

                .Rows(Temprow)(Database_Columnno + 2) = cmbBalancing.Text
                .Rows(Temprow)(Database_Columnno + 3) = cmbAirFailure.SelectedValue
                .Rows(Temprow)(Database_Columnno + 4) = cmbLeakage.Text
                .Rows(Temprow)(Database_Columnno + 5) = cmbPacking.Text
                .Rows(Temprow)(Database_Columnno + 6) = cmbSealing.Text
                .Rows(Temprow)(Database_Columnno + 7) = If(txtDPShutoff.Text = "", DBNull.Value, txtDPShutoff.Text)

                .Rows(Temprow)(Database_Columnno + 8) = cmbAirPressureUnits.Text
                .Rows(Temprow)(Database_Columnno + 9) = If(txtAirPressure.Text = "", DBNull.Value, txtAirPressure.Text)
                .Rows(Temprow)(Database_Columnno + 10) = cmbSeatDia.Text
                .Rows(Temprow)(Database_Columnno + 11) = lblForce0perc.Text
                .Rows(Temprow)(Database_Columnno + 12) = cmbHandwheel.SelectedValue
                .Rows(Temprow)(Database_Columnno + 13) = If(txtSuggActuator.Text = "", DBNull.Value, txtSuggActuator.Text)
                .Rows(Temprow)(Database_Columnno + 14) = cmbSelectActuator.Text
                .Rows(Temprow)(Database_Columnno + 15) = lblFinalActuator.Text
                .Rows(Temprow)(Database_Columnno + 16) = InitialSpringRange
                .Rows(Temprow)(Database_Columnno + 17) = FinalSpringRange
                .Rows(Temprow)(Database_Columnno + 18) = NoofSprings
                .Rows(Temprow)(Database_Columnno + 19) = MKSActuator
                .Rows(Temprow)(Database_Columnno + 20) = MKSInitialSpringRange
                .Rows(Temprow)(Database_Columnno + 21) = MKSFinalSpringRange
                .Rows(Temprow)(Database_Columnno + 22) = lblSel0PercF.Text
                .Rows(Temprow)(Database_Columnno + 23) = lblSel100PerF.Text
                .Rows(Temprow)(Database_Columnno + 24) = lblForce100perc.Text

                'Materials 
                Database_Columnno = DataSection4_Materials
                .Rows(Temprow)(Database_Columnno + 1) = BodyMaterial
                .Rows(Temprow)(Database_Columnno + 2) = Plug
                .Rows(Temprow)(Database_Columnno + 3) = Seat
                .Rows(Temprow)(Database_Columnno + 4) = TopMaterials
                .Rows(Temprow)(Database_Columnno + 5) = Gasket
                .Rows(Temprow)(Database_Columnno + 6) = Painting


                .Rows(Temprow)(Database_Columnno + 7) = Positioner
                .Rows(Temprow)(Database_Columnno + 8) = Sov
                .Rows(Temprow)(Database_Columnno + 9) = AFR
                .Rows(Temprow)(Database_Columnno + 10) = ALR
                .Rows(Temprow)(Database_Columnno + 11) = LimitSwitch
                .Rows(Temprow)(Database_Columnno + 12) = VolBooster
                .Rows(Temprow)(Database_Columnno + 13) = PosnTrans
                .Rows(Temprow)(Database_Columnno + 14) = VTank
                .Rows(Temprow)(Database_Columnno + 15) = Roborter
                .Rows(Temprow)(Database_Columnno + 16) = ItoP
                .Rows(Temprow)(Database_Columnno + 17) = QEV
                .Rows(Temprow)(Database_Columnno + 18) = Certification
                .Rows(Temprow)(Database_Columnno + 19) = Tubing
                .Rows(Temprow)(Database_Columnno + 20) = Guiding
                .Rows(Temprow)(Database_Columnno + 21) = PositionerMake
                .Rows(Temprow)(Database_Columnno + 22) = AFRMake
                .Rows(Temprow)(Database_Columnno + 23) = ALRMake
                .Rows(Temprow)(Database_Columnno + 24) = SOVMake
                .Rows(Temprow)(Database_Columnno + 25) = VBMake
                .Rows(Temprow)(Database_Columnno + 26) = LimitSwitchMake
                .Rows(Temprow)(Database_Columnno + 27) = QEVMake
                .Rows(Temprow)(Database_Columnno + 28) = Painting_ACC

                Database_Columnno = DataSection5_Output1

                .Rows(Temprow)(Database_Columnno + 1) = lblApproxCVCase1.Text
                .Rows(Temprow)(Database_Columnno + 2) = lblApproxCVCase2.Text
                .Rows(Temprow)(Database_Columnno + 3) = lblApproxCVCase3.Text
                .Rows(Temprow)(Database_Columnno + 4) = lblKVCase1.Text
                .Rows(Temprow)(Database_Columnno + 5) = lblKVCase2.Text
                .Rows(Temprow)(Database_Columnno + 6) = lblKVCase3.Text
                .Rows(Temprow)(Database_Columnno + 7) = lblFinalCVCase1.Text
                .Rows(Temprow)(Database_Columnno + 8) = lblFinalCVCase2.Text
                .Rows(Temprow)(Database_Columnno + 9) = lblFinalCVCase3.Text
                .Rows(Temprow)(Database_Columnno + 10) = lblFinalKVCase1.Text
                .Rows(Temprow)(Database_Columnno + 11) = lblFinalKvCase2.Text
                .Rows(Temprow)(Database_Columnno + 12) = lblFinalKVcase3.Text
                .Rows(Temprow)(Database_Columnno + 13) = lblStrokeCase1.Text
                .Rows(Temprow)(Database_Columnno + 14) = lblStrokeCase2.Text
                .Rows(Temprow)(Database_Columnno + 15) = lblStrokeCase3.Text
                .Rows(Temprow)(Database_Columnno + 16) = lblFlowtypeCase1.Text
                .Rows(Temprow)(Database_Columnno + 17) = lblFlowtypeCase2.Text
                .Rows(Temprow)(Database_Columnno + 18) = lblFlowtypeCase3.Text
                .Rows(Temprow)(Database_Columnno + 19) = lblSeverityCase1.Text
                .Rows(Temprow)(Database_Columnno + 20) = lblSeverityCase2.Text
                .Rows(Temprow)(Database_Columnno + 21) = lblSeverityCase3.Text
                .Rows(Temprow)(Database_Columnno + 22) = lblVelocityValveInletCase1.Text
                .Rows(Temprow)(Database_Columnno + 23) = lblVelocityValveInletCase2.Text
                .Rows(Temprow)(Database_Columnno + 24) = lblVelocityValveInletCase3.Text
                .Rows(Temprow)(Database_Columnno + 25) = lblVelocityValveOutletCase1.Text
                .Rows(Temprow)(Database_Columnno + 26) = lblVelocityValveOutletCase2.Text
                .Rows(Temprow)(Database_Columnno + 27) = lblVelocityValveOutletCase3.Text
                .Rows(Temprow)(Database_Columnno + 28) = lblVelocityInletPipeCase1.Text
                .Rows(Temprow)(Database_Columnno + 29) = lblVelocityInletPipeCase2.Text
                .Rows(Temprow)(Database_Columnno + 30) = lblVelocityInletPipeCase3.Text
                .Rows(Temprow)(Database_Columnno + 31) = lblVelocityOutletPipeCase1.Text
                .Rows(Temprow)(Database_Columnno + 32) = lblVelocityOutletPipeCase2.Text
                .Rows(Temprow)(Database_Columnno + 33) = lblVelocityOutletPipeCase3.Text

                Database_Columnno = DataSection6_Output2
                .Rows(Temprow)(Database_Columnno + 1) = If(lblNoiseCase1.Text = "", DBNull.Value, lblNoiseCase1.Text)
                .Rows(Temprow)(Database_Columnno + 2) = If(lblNoiseCase2.Text = "", DBNull.Value, lblNoiseCase2.Text)
                .Rows(Temprow)(Database_Columnno + 3) = If(lblNoiseCase3.Text = "", DBNull.Value, lblNoiseCase3.Text)
                .Rows(Temprow)(Database_Columnno + 4) = chkNoiseAttenuation.Checked
                .Rows(Temprow)(Database_Columnno + 5) = If(lblAttenuatedNoiseCase1.Text = "", DBNull.Value, lblAttenuatedNoiseCase1.Text)
                .Rows(Temprow)(Database_Columnno + 6) = If(lblAttenuatedNoiseCase2.Text = "", DBNull.Value, lblAttenuatedNoiseCase2.Text)
                .Rows(Temprow)(Database_Columnno + 7) = If(lblAttenuatedNoiseCase3.Text = "", DBNull.Value, lblAttenuatedNoiseCase3.Text)
                .Rows(Temprow)(Database_Columnno + 8) = chkInsulation.Checked
                .Rows(Temprow)(Database_Columnno + 9) = lblAttnPressDropCase1.Text
                .Rows(Temprow)(Database_Columnno + 10) = lblAttnPressDropCase2.Text
                .Rows(Temprow)(Database_Columnno + 11) = lblAttnPressDropCase3.Text
                .Rows(Temprow)(Database_Columnno + 12) = lblMachNoVavleOutCase1.Text
                .Rows(Temprow)(Database_Columnno + 13) = lblMachNoVavleOutCase2.Text
                .Rows(Temprow)(Database_Columnno + 14) = lblMachNoVavleOutCase3.Text
                .Rows(Temprow)(Database_Columnno + 15) = lblMachNoPipeOutCase1.Text
                .Rows(Temprow)(Database_Columnno + 16) = lblMachNoPipeOutCase2.Text
                .Rows(Temprow)(Database_Columnno + 17) = lblMachNoPipeOutCase3.Text
                .Rows(Temprow)(Database_Columnno + 18) = If(lblFLCase1.Text = "", DBNull.Value, lblFLCase1.Text)
                .Rows(Temprow)(Database_Columnno + 19) = If(lblFLCase2.Text = "", DBNull.Value, lblFLCase2.Text)
                .Rows(Temprow)(Database_Columnno + 20) = If(lblFLCase3.Text = "", DBNull.Value, lblFLCase3.Text)
                .Rows(Temprow)(Database_Columnno + 21) = If(lblXTCase1.Text = "", DBNull.Value, lblXTCase1.Text)
                .Rows(Temprow)(Database_Columnno + 22) = If(lblXTCase2.Text = "", DBNull.Value, lblXTCase2.Text)
                .Rows(Temprow)(Database_Columnno + 23) = If(lblXTCase3.Text = "", DBNull.Value, lblXTCase3.Text)
                .Rows(Temprow)(Database_Columnno + 24) = If(lblFP.Text = "", DBNull.Value, lblFP.Text)
                .Rows(Temprow)(Database_Columnno + 25) = lblValveModel.Text
                .Rows(Temprow)(Database_Columnno + 26) = FinalValveSize
                .Rows(Temprow)(Database_Columnno + 27) = FinalKVCase1
                .Rows(Temprow)(Database_Columnno + 28) = FinalKVCase2
                .Rows(Temprow)(Database_Columnno + 29) = FinalKVCase3
                .Rows(Temprow)(Database_Columnno + 30) = FinalKVmax_ValveSize
                .Rows(Temprow)(Database_Columnno + 31) = FDCase1
                .Rows(Temprow)(Database_Columnno + 32) = FDCase2
                .Rows(Temprow)(Database_Columnno + 33) = FDCase3
                .Rows(Temprow)(Database_Columnno + 34) = SeatDia
                .Rows(Temprow)(Database_Columnno + 35) = UserNotes1
                .Rows(Temprow)(Database_Columnno + 36) = UserNotes2
                .Rows(Temprow)(Database_Columnno + 37) = UserNotes3
                .Rows(Temprow)(Database_Columnno + 38) = KvforCage
                .Rows(Temprow)(Database_Columnno + 39) = PrBl_SeatDia
                .Rows(Temprow)(Database_Columnno + 40) = FPKVCase1
                .Rows(Temprow)(Database_Columnno + 41) = FPKVCase2
                .Rows(Temprow)(Database_Columnno + 42) = FPKVCase3
                .Rows(Temprow)(Database_Columnno + 43) = BaffleKVCase1
                .Rows(Temprow)(Database_Columnno + 44) = BaffleKVCase2
                .Rows(Temprow)(Database_Columnno + 45) = BaffleKVCase3
                .Rows(Temprow)(Database_Columnno + 46) = Stages

                'PRDS
                .Rows(Temprow)(Database_Columnno + 47) = If(txtWaterPressure.Text = "", DBNull.Value, txtWaterPressure.Text)
                .Rows(Temprow)(Database_Columnno + 48) = If(txtWaterTemperature.Text = "", DBNull.Value, txtWaterTemperature.Text)

                .Rows(Temprow)(Database_Columnno + 49) = If(txtWaterFlowCase1.Text = "", DBNull.Value, txtWaterFlowCase1.Text)
                .Rows(Temprow)(Database_Columnno + 50) = If(txtWaterFlowCase2.Text = "", DBNull.Value, txtWaterFlowCase2.Text)
                .Rows(Temprow)(Database_Columnno + 51) = If(txtWaterFlowCase3.Text = "", DBNull.Value, txtWaterFlowCase3.Text)
                .Rows(Temprow)(Database_Columnno + 52) = If(txtP2OutWCase1.Text = "", DBNull.Value, txtP2OutWCase1.Text)
                .Rows(Temprow)(Database_Columnno + 53) = If(txtP2OutWCase2.Text = "", DBNull.Value, txtP2OutWCase2.Text)
                .Rows(Temprow)(Database_Columnno + 54) = If(txtP2OutWCase3.Text = "", DBNull.Value, txtP2OutWCase3.Text)
                .Rows(Temprow)(Database_Columnno + 55) = WaterFlowRateCase1
                .Rows(Temprow)(Database_Columnno + 56) = WaterFlowRateCase2
                .Rows(Temprow)(Database_Columnno + 57) = WaterFlowRateCase3
                .Rows(Temprow)(Database_Columnno + 58) = OutletWaterPressureCase1
                .Rows(Temprow)(Database_Columnno + 59) = OutletWaterPressureCase2
                .Rows(Temprow)(Database_Columnno + 60) = OutletWaterPressureCase3

                Database_Columnno = DataSection7_CalcValues             '  The below Values are calculated and are needed for calculations on reloading 
                .Rows(Temprow)(Database_Columnno + 1) = FlowrateForPipeDiaCalcCase1
                .Rows(Temprow)(Database_Columnno + 2) = FlowrateForPipeDiaCalcCase2
                .Rows(Temprow)(Database_Columnno + 3) = FlowrateForPipeDiaCalcCase3

                .Rows(Temprow)(Database_Columnno + 4) = FluidVelocityCase1
                .Rows(Temprow)(Database_Columnno + 5) = FluidVelocityCase2
                .Rows(Temprow)(Database_Columnno + 6) = FluidVelocityCase3


                .Rows(Temprow)(Database_Columnno + 7) = SoundVelocityCase1
                .Rows(Temprow)(Database_Columnno + 8) = SoundVelocityCase2
                .Rows(Temprow)(Database_Columnno + 9) = SoundVelocityCase3

                .Rows(Temprow)(Database_Columnno + 10) = PRDS_IP_FlowrateForPipeDiaCase1
                .Rows(Temprow)(Database_Columnno + 11) = PRDS_IP_FlowrateForPipeDiaCase2
                .Rows(Temprow)(Database_Columnno + 12) = PRDS_IP_FlowrateForPipeDiaCase3

                .Rows(Temprow)(Database_Columnno + 13) = PRDS_OP_FlowrateForPipeDiaCase1
                .Rows(Temprow)(Database_Columnno + 14) = PRDS_OP_FlowrateForPipeDiaCase2
                .Rows(Temprow)(Database_Columnno + 15) = PRDS_OP_FlowrateForPipeDiaCase3
                .Rows(Temprow)(Database_Columnno + 16) = VelocityRuleFlag

                '  The below Values are calculated from Text entries and are needed for calculations on reloading 
                .Rows(Temprow)(Database_Columnno + 17) = FinalInletPressureCase1
                .Rows(Temprow)(Database_Columnno + 18) = FinalInletPressureCase2
                .Rows(Temprow)(Database_Columnno + 19) = FinalInletPressureCase3

                .Rows(Temprow)(Database_Columnno + 20) = FinalOutletPressureCase1
                .Rows(Temprow)(Database_Columnno + 21) = FinalOutletPressureCase2
                .Rows(Temprow)(Database_Columnno + 22) = FinaloutletPressureCase3

                .Rows(Temprow)(Database_Columnno + 23) = FinalPressureDropCase1
                .Rows(Temprow)(Database_Columnno + 24) = FinalPressureDropCase2
                .Rows(Temprow)(Database_Columnno + 25) = FinalPressureDropCase3


                .Rows(Temprow)(Database_Columnno + 26) = FinalInletTemperatureCase1
                .Rows(Temprow)(Database_Columnno + 27) = FinalInletTemperatureCase2
                .Rows(Temprow)(Database_Columnno + 28) = FinalInletTemperatureCase3


                .Rows(Temprow)(Database_Columnno + 29) = FinalVapourPressureCase1
                .Rows(Temprow)(Database_Columnno + 30) = FinalVapourPressureCase2
                .Rows(Temprow)(Database_Columnno + 31) = FinalVapourPressureCase3

                .Rows(Temprow)(Database_Columnno + 32) = FinalCriticalPressureCase1
                .Rows(Temprow)(Database_Columnno + 33) = FinalCriticalPressureCase2
                .Rows(Temprow)(Database_Columnno + 34) = FinalCriticalPressureCase3

                .Rows(Temprow)(Database_Columnno + 35) = FinalViscosityCase1
                .Rows(Temprow)(Database_Columnno + 36) = FinalViscosityCase2
                .Rows(Temprow)(Database_Columnno + 37) = FinalViscosityCase3


                .Rows(Temprow)(Database_Columnno + 38) = FinalDensityCase1
                .Rows(Temprow)(Database_Columnno + 39) = FinalDensityCase2
                .Rows(Temprow)(Database_Columnno + 40) = FinalDensityCase3

                .Rows(Temprow)(Database_Columnno + 41) = FinalFlowrateCase1
                .Rows(Temprow)(Database_Columnno + 42) = FinalFlowrateCase2
                .Rows(Temprow)(Database_Columnno + 43) = FinalFlowrateCase3

                .Rows(Temprow)(Database_Columnno + 44) = SupplyAirPressure
                .Rows(Temprow)(Database_Columnno + 45) = DPShutoff

                .Rows(Temprow)(Database_Columnno + 46) = TubingMake
                .Rows(Temprow)(Database_Columnno + 47) = TubingSize
                .Rows(Temprow)(Database_Columnno + 48) = TubingMOC

                .Rows(Temprow)(Database_Columnno + 49) = MolecularWeightCase1
                .Rows(Temprow)(Database_Columnno + 50) = MolecularWeightCase2
                .Rows(Temprow)(Database_Columnno + 51) = MolecularWeightCase3



                'Database_workbook.Save()

                lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                txtJumpToRecord.Text = Database_Rowno
                '  Database_workbook.Close()
            End With
            Dim objODSWrite As ODCWORK.OdsReaderWriter = New ODCWORK.OdsReaderWriter()
            Call objODSWrite.WriteOdsFile(ds_OpenOffice, CurrentProjectFileName)

            objODSWrite = Nothing

        Catch ex As Exception
            MsgBox("Save database:  " & ex.Message)
        Finally

            ''releaseObject(Database_worksheet)
            ''releaseObject(Database_workbook)
        End Try



    End Sub
    Public Sub DatabaseFileHeader(CurrentProjectFileName As String)
        Dim Database_Columnno, x As Integer
        Dim dr As DataRow


        Try

            'Database_workbook = APP.Workbooks.Open(CurrentProjectFileName)

            'Database_worksheet = Database_workbook.Worksheets("Records")

            Database_Rowno = 1
            Database_Columnno = 1
            With dt_OpenOffice


                If .Columns.Count = 0 Then
                    For x = 0 To LastColumn_Values Step 1           ' Max 400 
                        .Columns.Add(x)
                    Next
                End If
                dr = .NewRow()


                '.Range("A1").EntireRow.HorizontalAlignment = excel.XlHAlign.xlHAlignCenter
                '.Range("A1").EntireRow.VerticalAlignment = excel.XlVAlign.xlVAlignCenter
                '.Range("A1").EntireRow.Orientation = 90

                '.Range("A1").EntireRow.Font.Size = 10


                dr(Database_Columnno) = "Sr.No"
                dr(Database_Columnno + 1) = "Item No."
                dr(Database_Columnno + 2) = "Sheet No."

                Database_Columnno = DataSection1_Field

                '*----------------------------------------------------------------------------------------------------
                dr(Database_Columnno + 1) = "Customer"
                dr(Database_Columnno + 2) = "Project"
                dr(Database_Columnno + 3) = "OfferNo"
                dr(Database_Columnno + 4) = "RevNo"
                dr(Database_Columnno + 5) = "TagNo"
                dr(Database_Columnno + 6) = "Qty"
                dr(Database_Columnno + 7) = "Date"
                dr(Database_Columnno + 8) = "Time"
                dr(Database_Columnno + 9) = "FluidType"
                dr(Database_Columnno + 10) = "Fluid"
                dr(Database_Columnno + 11) = "UnitsType"
                dr(Database_Columnno + 12) = "Model"
                dr(Database_Columnno + 13) = "Medium"
                dr(Database_Columnno + 14) = "Flowunits"
                dr(Database_Columnno + 15) = "Flow1"
                dr(Database_Columnno + 16) = "Flow2"
                dr(Database_Columnno + 17) = "Flow3"
                dr(Database_Columnno + 18) = "TempUnits"
                dr(Database_Columnno + 19) = "Temp1"
                dr(Database_Columnno + 20) = "Temp2"
                dr(Database_Columnno + 21) = "Temp3"
                dr(Database_Columnno + 22) = "PressUnit"

                dr(Database_Columnno + 23) = "IPress1"
                dr(Database_Columnno + 24) = "IPress2"
                dr(Database_Columnno + 25) = "IPress3"
                dr(Database_Columnno + 26) = "OPress1"
                dr(Database_Columnno + 27) = "OPress2"
                dr(Database_Columnno + 28) = "OPress3"
                dr(Database_Columnno + 29) = "DPPress1"
                dr(Database_Columnno + 30) = "DPPress2"
                dr(Database_Columnno + 31) = "DPPress3"
                dr(Database_Columnno + 32) = "ChkMol"
                dr(Database_Columnno + 33) = "DensUnits"

                dr(Database_Columnno + 34) = "MolWgt"
                dr(Database_Columnno + 35) = "Dens1"

                dr(Database_Columnno + 36) = "Dens2"
                dr(Database_Columnno + 37) = "Dens3"

                dr(Database_Columnno + 38) = "ChkVisc"
                dr(Database_Columnno + 39) = "ViscUnits"
                dr(Database_Columnno + 40) = "Visc1"
                dr(Database_Columnno + 41) = "Visc2"
                dr(Database_Columnno + 42) = "Visc3"
                dr(Database_Columnno + 43) = "ToutPress1"
                dr(Database_Columnno + 44) = "ToutPress2"
                dr(Database_Columnno + 45) = "ToutPress3"

                dr(Database_Columnno + 46) = "ToutsatPress1"
                dr(Database_Columnno + 47) = "ToutsatPress2"
                dr(Database_Columnno + 48) = "ToutsatPress3"
                dr(Database_Columnno + 49) = "CriticalPressUnits"
                dr(Database_Columnno + 50) = "CriticalPress1"
                dr(Database_Columnno + 51) = "CriticalPress2"
                dr(Database_Columnno + 52) = "CriticalPress3"
                dr(Database_Columnno + 53) = "VapourPressUnits"
                dr(Database_Columnno + 54) = "VapourPress1"
                dr(Database_Columnno + 55) = "VapourPress2"
                dr(Database_Columnno + 56) = "VapourPress3"

                dr(Database_Columnno + 57) = "Zcase1"
                dr(Database_Columnno + 58) = "Zcase2"
                dr(Database_Columnno + 59) = "Zcase3"
                dr(Database_Columnno + 60) = "Xcase1"
                dr(Database_Columnno + 61) = "Xcase2"
                dr(Database_Columnno + 62) = "Xcase3"

                dr(Database_Columnno + 63) = "Kcase1"
                dr(Database_Columnno + 64) = "Kcase2"
                dr(Database_Columnno + 65) = "Kcase3"
                dr(Database_Columnno + 66) = "DryFract1"

                dr(Database_Columnno + 67) = "DryFrac2"
                dr(Database_Columnno + 68) = "DryFrac3"

                dr(Database_Columnno + 69) = "TsatInletPress1"

                dr(Database_Columnno + 70) = "TsatInletPress2"
                dr(Database_Columnno + 71) = "TsatInletPress3"
                dr(Database_Columnno + 72) = "SelectP2orDP"
                dr(Database_Columnno + 73) = "SelectQorW"
                dr(Database_Columnno + 74) = "SalesEngg"
                dr(Database_Columnno + 75) = "CustomerRef"


                'Extra 5 columns for future
                '*----------------------------------------------------------------------------------------------------
                Database_Columnno = DataSection2_MOC '10+ 81
                dr(Database_Columnno + 1) = "MOC"
                dr(Database_Columnno + 2) = "DesignPress"
                dr(Database_Columnno + 3) = "DesignTemp"
                dr(Database_Columnno + 4) = "SuggRating"
                dr(Database_Columnno + 5) = "cmbSuggRating."
                dr(Database_Columnno + 6) = "FinalRating"
                dr(Database_Columnno + 7) = "Areaunits"
                dr(Database_Columnno + 8) = "InletPipe"
                dr(Database_Columnno + 9) = "lblSuggPipeSize"
                dr(Database_Columnno + 10) = "PipeDia"
                dr(Database_Columnno + 11) = "lblFinalOutletPipe"
                dr(Database_Columnno + 12) = "OSch"
                dr(Database_Columnno + 13) = "ISch"
                dr(Database_Columnno + 14) = "Noise_ValveID"
                dr(Database_Columnno + 15) = "Noise_ID"
                dr(Database_Columnno + 16) = "Noise_Schedule"
                dr(Database_Columnno + 17) = "Noise_OutletPipeDia"
                dr(Database_Columnno + 18) = "InletPipeSize"
                dr(Database_Columnno + 19) = "InletPipeID"

                dr(Database_Columnno + 20) = "TrimStyle"
                dr(Database_Columnno + 21) = "cmbVelocityRule."
                dr(Database_Columnno + 22) = "FlowDirection"

                dr(Database_Columnno + 23) = "Charachterstics"
                dr(Database_Columnno + 24) = "Trim"
                dr(Database_Columnno + 25) = "SuggMaxKv"
                dr(Database_Columnno + 26) = "SuggValveSiz"
                dr(Database_Columnno + 27) = "KvOverride"


                dr(Database_Columnno + 28) = "ValveSizeOverride"
                dr(Database_Columnno + 29) = "lblKvMaxValue"
                dr(Database_Columnno + 30) = "lblFinalValveSize"
                dr(Database_Columnno + 31) = "Bonnet"
                dr(Database_Columnno + 32) = "EndConn"
                dr(Database_Columnno + 33) = "FinalDesignTemperatureInlet"

                'Extra 9 for future 
                '' Actuator section 
                Database_Columnno = DataSection3_Actuator '91 + 42 

                dr(Database_Columnno + 1) = "ActuatorType"
                dr(Database_Columnno + 2) = "Balancing"
                dr(Database_Columnno + 3) = "AirFail"
                dr(Database_Columnno + 4) = "Leakage"
                dr(Database_Columnno + 5) = "Packing"
                dr(Database_Columnno + 6) = "Sealing"
                dr(Database_Columnno + 7) = "DPShutoff"

                dr(Database_Columnno + 8) = "AirPressUnits"
                dr(Database_Columnno + 9) = "AirPress"
                dr(Database_Columnno + 10) = "SeatDia"
                dr(Database_Columnno + 11) = "FinalForce"
                dr(Database_Columnno + 12) = "HandWheel"
                dr(Database_Columnno + 13) = "SuggActuator"
                dr(Database_Columnno + 14) = "SelActuator"
                dr(Database_Columnno + 15) = "FinalActuator"
                dr(Database_Columnno + 16) = "InitialSpringRange"
                dr(Database_Columnno + 17) = "FinalSpringRange"
                dr(Database_Columnno + 18) = "NoofSprings"
                dr(Database_Columnno + 19) = "MKSActuator"
                dr(Database_Columnno + 20) = "MKSInitialSpringRange"
                dr(Database_Columnno + 21) = "MKSFinalSpringRange"
                dr(Database_Columnno + 22) = "SelForce0"
                dr(Database_Columnno + 23) = "SelForce100"
             
                '6 columns for future use

                'Materials 
                Database_Columnno = DataSection4_Materials '133 + 17+10
                dr(Database_Columnno + 1) = "BodyMaterial"
                dr(Database_Columnno + 2) = "Plug"
                dr(Database_Columnno + 3) = "Seat"
                dr(Database_Columnno + 4) = "TopMaterials"
                dr(Database_Columnno + 5) = "Gasket"
                dr(Database_Columnno + 6) = "Painting"
                dr(Database_Columnno + 7) = "Positioner"
                dr(Database_Columnno + 8) = "Sov"
                dr(Database_Columnno + 9) = "AFR"
                dr(Database_Columnno + 10) = "ALR"
                dr(Database_Columnno + 11) = "LimitSwitch"
                dr(Database_Columnno + 12) = "VolBooster"
                dr(Database_Columnno + 13) = "PosnTrans"
                dr(Database_Columnno + 14) = "VTank"
                dr(Database_Columnno + 15) = "Roborter"
                dr(Database_Columnno + 16) = "ItoP"
                dr(Database_Columnno + 17) = "QEV"
                dr(Database_Columnno + 18) = "Certification"
                dr(Database_Columnno + 19) = "Tubing"
                dr(Database_Columnno + 20) = "Guiding"
                dr(Database_Columnno + 21) = "PositionerMake"         '12102020 changes
                dr(Database_Columnno + 22) = "AFRMake"
                dr(Database_Columnno + 23) = "ALRMake"
                dr(Database_Columnno + 24) = "SOVMake"
                dr(Database_Columnno + 25) = "VBMake"
                dr(Database_Columnno + 26) = "LimitSwitchMake"
                dr(Database_Columnno + 27) = "QEVMake"
                dr(Database_Columnno + 28) = "PaintingACC"

                Database_Columnno = DataSection5_Output1   '160+18+10

                dr(Database_Columnno + 1) = "InitialCvCase1"
                dr(Database_Columnno + 2) = "InitialCvCase2"
                dr(Database_Columnno + 3) = "InitialCvCase3"
                dr(Database_Columnno + 4) = "InitialKvCase1"
                dr(Database_Columnno + 5) = "InitialKvCase2"
                dr(Database_Columnno + 6) = "InitialKvCase3"
                dr(Database_Columnno + 7) = "FinalCvCase1"
                dr(Database_Columnno + 8) = "FinalCvCase2"
                dr(Database_Columnno + 9) = "FinalCVCase3"
                dr(Database_Columnno + 10) = "FinalKvCase1"
                dr(Database_Columnno + 11) = "FinalKvCase2"
                dr(Database_Columnno + 12) = "FinalKvcase3"
                dr(Database_Columnno + 13) = "StrokeCase1"
                dr(Database_Columnno + 14) = "StrokeCase2"
                dr(Database_Columnno + 15) = "StrokeCase3"
                dr(Database_Columnno + 16) = "FlowtypeCase1"
                dr(Database_Columnno + 17) = "FlowtypeCase2"
                dr(Database_Columnno + 18) = "FlowtypeCase3"
                dr(Database_Columnno + 19) = "SeverityCase1"
                dr(Database_Columnno + 20) = "SeverityCase2"
                dr(Database_Columnno + 21) = "SeverityCase3"
                dr(Database_Columnno + 22) = "VelocityValveInletCase1"
                dr(Database_Columnno + 23) = "VelocityValveInletCase2"
                dr(Database_Columnno + 24) = "VelocityValveInletCase3"
                dr(Database_Columnno + 25) = "VelocityValveOutletCase1"
                dr(Database_Columnno + 26) = "VelocityValveOutletCase2"
                dr(Database_Columnno + 27) = "VelocityValveOutletCase3"
                dr(Database_Columnno + 28) = "VelocityInletPipeCase1"
                dr(Database_Columnno + 29) = "VelocityInletPipeCase2"
                dr(Database_Columnno + 30) = "VelocityInletPipeCase3"
                dr(Database_Columnno + 31) = "VelocityOutletPipeCase1"
                dr(Database_Columnno + 32) = "VelocityOutletPipeCase2"
                dr(Database_Columnno + 33) = "VelocityOutletPipeCase3"
                '10 columns for future use 
                Database_Columnno = DataSection6_Output2  '188+33+10
                dr(Database_Columnno + 1) = "NoiseCase1"
                dr(Database_Columnno + 2) = "NoiseCase2"
                dr(Database_Columnno + 3) = "NoiseCase3"
                dr(Database_Columnno + 4) = "chkNoiseAttenuation"
                dr(Database_Columnno + 5) = "AttenuatedNoiseCase1"
                dr(Database_Columnno + 6) = "AttenuatedNoiseCase2"
                dr(Database_Columnno + 7) = "AttenuatedNoiseCase3"
                dr(Database_Columnno + 8) = "chkInsulation"
                dr(Database_Columnno + 9) = "AttnPressDropCase1"
                dr(Database_Columnno + 10) = "AttnPressDropCase2"
                dr(Database_Columnno + 11) = "AttnPressDropCase3"
                dr(Database_Columnno + 12) = "MachNoVavleOutCase1"
                dr(Database_Columnno + 13) = "MachNoVavleOutCase2"
                dr(Database_Columnno + 14) = "MachNoVavleOutCase3"
                dr(Database_Columnno + 15) = "MachNoPipeOutCase1"
                dr(Database_Columnno + 16) = "MachNoPipeOutCase2"
                dr(Database_Columnno + 17) = "MachNoPipeOutCase3"
                dr(Database_Columnno + 18) = "FLCase1"
                dr(Database_Columnno + 19) = "FLCase2"
                dr(Database_Columnno + 20) = "FLCase3"
                dr(Database_Columnno + 21) = "XTCase1"
                dr(Database_Columnno + 22) = "XTCase2"
                dr(Database_Columnno + 23) = "XTCase3"
                dr(Database_Columnno + 24) = "FP"
                dr(Database_Columnno + 25) = "Valve Model"
                dr(Database_Columnno + 26) = "FinalValveSize"
                dr(Database_Columnno + 27) = "FinalKVCase1"
                dr(Database_Columnno + 28) = "FinalKVCase2"
                dr(Database_Columnno + 29) = "FinalKVCase3"
                dr(Database_Columnno + 30) = "FinalKVmax_ValveSize"
                dr(Database_Columnno + 31) = "FDCase1"
                dr(Database_Columnno + 32) = "FDCase2"
                dr(Database_Columnno + 33) = "FDCase3"
                dr(Database_Columnno + 34) = "SeatDia"
                dr(Database_Columnno + 35) = "User Notes1"
                dr(Database_Columnno + 36) = "User Notes2"
                dr(Database_Columnno + 37) = "User Notes3"
                dr(Database_Columnno + 38) = "KvCage"
                dr(Database_Columnno + 39) = "PrBl_SeatDia"
                dr(Database_Columnno + 40) = "FPKvCase1"
                dr(Database_Columnno + 41) = "FPKvCase2"
                dr(Database_Columnno + 42) = "FPKvCase3"
                dr(Database_Columnno + 43) = "BaffleKvCase1"
                dr(Database_Columnno + 44) = "BaffleKvCase2"
                dr(Database_Columnno + 45) = "BaffleKvCase3"
                dr(Database_Columnno + 46) = "Stages"

                'PRDS
                dr(Database_Columnno + 47) = "WaterPressureText"
                dr(Database_Columnno + 48) = "WaterTemperature"

                dr(Database_Columnno + 49) = "WaterFlowCase1Text"
                dr(Database_Columnno + 50) = "WaterFlowCase1Text"
                dr(Database_Columnno + 51) = "WaterFlowCase1Text"
                dr(Database_Columnno + 52) = "P2OutWCase1Text"
                dr(Database_Columnno + 53) = "P2OutWCase2Text"
                dr(Database_Columnno + 54) = "P2OutWCase3Text"
                dr(Database_Columnno + 55) = "WaterFlowRateCase1"
                dr(Database_Columnno + 56) = "WaterFlowRateCase2"
                dr(Database_Columnno + 57) = "WaterFlowRateCase3"
                dr(Database_Columnno + 58) = "OutletWaterPressureCase1"
                dr(Database_Columnno + 59) = "OutletWaterPressureCase2"
                dr(Database_Columnno + 60) = "OutletWaterPressureCase3"

                Database_Columnno = DataSection7_CalcValues             '  The below Values are calculated and are needed for calculations on reloading 
                dr(Database_Columnno + 1) = "FlowrateForPipeDiaCalcCase1"
                dr(Database_Columnno + 2) = "FlowrateForPipeDiaCalcCase2"
                dr(Database_Columnno + 3) = "FlowrateForPipeDiaCalcCase3"

                dr(Database_Columnno + 4) = "FluidVelocityCase1"
                dr(Database_Columnno + 5) = "FluidVelocityCase2"
                dr(Database_Columnno + 6) = "FluidVelocityCase3"


                dr(Database_Columnno + 7) = "SoundVelocityCase1"
                dr(Database_Columnno + 8) = "SoundVelocityCase2"
                dr(Database_Columnno + 9) = "SoundVelocityCase3"

                dr(Database_Columnno + 10) = "PRDS_IP_FlowrateForPipeDiaCase1"
                dr(Database_Columnno + 11) = "PRDS_IP_FlowrateForPipeDiaCase2"
                dr(Database_Columnno + 12) = "PRDS_IP_FlowrateForPipeDiaCase3"

                dr(Database_Columnno + 13) = "PRDS_OP_FlowrateForPipeDiaCase1"
                dr(Database_Columnno + 14) = "PRDS_OP_FlowrateForPipeDiaCase2"
                dr(Database_Columnno + 15) = "PRDS_OP_FlowrateForPipeDiaCase3"
                dr(Database_Columnno + 16) = "VelocityRuleFlag"

                '  The below Values are calculated from Text entries and are needed for calculations on reloading 
                dr(Database_Columnno + 17) = "FinalInletPressureCase1"
                dr(Database_Columnno + 18) = "FinalInletPressureCase2"
                dr(Database_Columnno + 19) = "FinalInletPressureCase3"

                dr(Database_Columnno + 20) = "FinalOutletPressureCase1"
                dr(Database_Columnno + 21) = "FinalOutletPressureCase2"
                dr(Database_Columnno + 22) = "FinaloutletPressureCase3"

                dr(Database_Columnno + 23) = "FinalPressureDropCase1"
                dr(Database_Columnno + 24) = "FinalPressureDropCase2"
                dr(Database_Columnno + 25) = "FinalPressureDropCase3"


                dr(Database_Columnno + 26) = "FinalInletTemperatureCase1"
                dr(Database_Columnno + 27) = "FinalInletTemperatureCase2"
                dr(Database_Columnno + 28) = "FinalInletTemperatureCase3"


                dr(Database_Columnno + 29) = "FinalVapourPressureCase1"
                dr(Database_Columnno + 30) = "FinalVapourPressureCase2"
                dr(Database_Columnno + 31) = "FinalVapourPressureCase3"

                dr(Database_Columnno + 32) = "FinalCriticalPressureCase1"
                dr(Database_Columnno + 33) = "FinalCriticalPressureCase2"
                dr(Database_Columnno + 34) = "FinalCriticalPressureCase3"

                dr(Database_Columnno + 35) = "FinalViscosityCase1"
                dr(Database_Columnno + 36) = "FinalViscosityCase2"
                dr(Database_Columnno + 37) = "FinalViscosityCase3"


                dr(Database_Columnno + 38) = "FinalDensityCase1"
                dr(Database_Columnno + 39) = "FinalDensityCase2"
                dr(Database_Columnno + 40) = "FinalDensityCase3"

                dr(Database_Columnno + 41) = "FinalFlowrateCase1"
                dr(Database_Columnno + 42) = "FinalFlowrateCase2"
                dr(Database_Columnno + 43) = "FinalFlowrateCase3"

                dr(Database_Columnno + 44) = "SupplyAirPressure"
                dr(Database_Columnno + 45) = "DPShutoff"

                dr(Database_Columnno + 46) = "Tubing Make"
                dr(Database_Columnno + 47) = "Tubing Size"
                dr(Database_Columnno + 48) = "Tubing MOC"
                dr(Database_Columnno + 46) = "MWCase1"
                dr(Database_Columnno + 47) = "MWCase2"
                dr(Database_Columnno + 48) = "MWCase3"

                .Rows.Add(dr)

            End With

            ' '  Database_workbook.Save()
        Catch ex As Exception
            MsgBox("Database Header:  " & ex.Message)
        End Try

        ' ' Database_workbook.Close()

    End Sub
    Public Sub ConvertToCSV()
        Dim Columnno, NowRecord As Integer

        'Dim xlWorkBook As excel.Workbook
        'Dim xlWorkSheet As excel.Worksheet

        Dim Transfer_array(180) As Object
        Dim Database_Columnno, TempDataRow As Long
        Dim dporP2, MolecularWeight As Boolean
        Dim FluidType, DesignTemperatureUnit, CSValveModel, CSVCharacterstics, CSVAirFail As String
        Dim DesignTemperature As Single


        Try
            TempDataRow = Database_Rowno '  Load live record
            If XMLFilename = "" Then
                MsgBox("Please Load Project File")
                Exit Sub
            End If



            'Database_LastRow = dt_OpenOffice.Rows.Count - 1
            'xlWorkBook = APP.Workbooks.Open(XMLFilename)
            'xlWorkSheet = xlWorkBook.Worksheets("Records")

            ds_OpenOfficeCSV = New DataSet()

            dt_OpenOfficeCSV = New DataTable
            ds_OpenOfficeCSV.Tables.Add(dt_OpenOfficeCSV)
            Database_Rowno = 1
            Database_LastRow = dt_OpenOffice.Rows.Count - 1






            With dt_OpenOfficeCSV

                For x = 0 To 200 Step 1
                    .Columns.Add()
                Next


            End With
            'Database_Rowno = 1
            'Database_LastRow = dt_OpenOffice.Rows.Count - 1


            ''Add new File 

            dt_OpenOfficeCSV.Rows.Add(dt_OpenOfficeCSV.NewRow())
            With dt_OpenOfficeCSV

                .Rows(0)(0) = "Sr.No "
                .Rows(0)(1) = "Item No."
                .Rows(0)(2) = "Sheet No."
                .Rows(0)(3) = "Rev.No"
                .Rows(0)(4) = "pcs"
                .Rows(0)(5) = "Tag"
                .Rows(0)(6) = "case"
                .Rows(0)(7) = "Phase"
                .Rows(0)(8) = "Medium"
                .Rows(0)(9) = "flowU"
                .Rows(0)(10) = "flowc1 V"
                .Rows(0)(11) = "flowc2 V"
                .Rows(0)(12) = "flowc3 V"
                .Rows(0)(13) = "p1 U"
                .Rows(0)(14) = "p1 c1 V"
                .Rows(0)(15) = "p1 c2 V"
                .Rows(0)(16) = "p1 c3 V"
                .Rows(0)(17) = "dp or p2"
                .Rows(0)(18) = "dp or p2 c1"
                .Rows(0)(19) = "dp or p2 c2"
                .Rows(0)(20) = "dp or p2 c3"
                .Rows(0)(21) = "t U"
                .Rows(0)(22) = "t1 c1 V"
                .Rows(0)(23) = "t1 c2 V"
                .Rows(0)(24) = "t1 c3 V"
                .Rows(0)(25) = "dens U"
                .Rows(0)(26) = "dens c1 V"
                .Rows(0)(27) = "dens c2 V"
                .Rows(0)(28) = "dens c3 V"
                .Rows(0)(29) = "vis&iso U"
                .Rows(0)(30) = "vis&iso c1 V"
                .Rows(0)(31) = "vis&iso c2 V"
                .Rows(0)(32) = "vis&iso c3 V"
                .Rows(0)(33) = "vapp&zU"
                .Rows(0)(34) = "vapp&z c1 V"
                .Rows(0)(35) = "vapp&z c2 V"
                .Rows(0)(36) = "vapp&z c3 V"
                .Rows(0)(37) = "critpU"
                .Rows(0)(38) = "critp c1 V"
                .Rows(0)(39) = "critp c2 V"
                .Rows(0)(40) = "critp c3 V"
                .Rows(0)(41) = "remarks "
                .Rows(0)(42) = "p design in U"
                .Rows(0)(43) = "p design in"
                .Rows(0)(44) = "t desigin in U"
                .Rows(0)(45) = "t desigin in"
                .Rows(0)(46) = "p design vacuum"
                .Rows(0)(47) = "t design min"
                .Rows(0)(48) = "mat group"
                .Rows(0)(49) = "rate select"
                .Rows(0)(50) = "body material"      'DO
                .Rows(0)(51) = "Bauart"
                .Rows(0)(52) = "trim selec"
                .Rows(0)(53) = "plug material"      'DO
                .Rows(0)(54) = "seat material"      'DO
                .Rows(0)(55) = "guiding"
                .Rows(0)(56) = "kvs selec rule"
                .Rows(0)(57) = "charac"
                .Rows(0)(58) = "step rule"
                .Rows(0)(59) = "kvs selec=prop"
                .Rows(0)(60) = "dn rule"
                .Rows(0)(61) = "dn selec"
                .Rows(0)(62) = "type selec"
                .Rows(0)(63) = "fix trim"
                .Rows(0)(64) = "fix kvs"
                .Rows(0)(65) = "atten. int"
                .Rows(0)(66) = "atten. ext."
                .Rows(0)(67) = "kvatten"
                .Rows(0)(68) = "Topflange"
                .Rows(0)(69) = "flow direct"
                .Rows(0)(70) = "leakage class"
                .Rows(0)(71) = "dp actuator"
                .Rows(0)(72) = "act type"
                .Rows(0)(73) = "p air [bar]"
                .Rows(0)(74) = "valve function"
                .Rows(0)(75) = "air failure"        'DO
                .Rows(0)(76) = "balance selec"
                .Rows(0)(77) = "packing selec"
                .Rows(0)(78) = "sealing selec"
                .Rows(0)(79) = "actuator selec"
                .Rows(0)(80) = "hand wheel"         'DO
                .Rows(0)(81) = "nd pipe U"
                .Rows(0)(82) = "nd pipe out"
                .Rows(0)(83) = "pipe schedule"
                .Rows(0)(84) = "nd pipe in"
                .Rows(0)(85) = "dB insulation"
                .Rows(0)(86) = "-dB free"
                .Rows(0)(87) = "connection IN"
                .Rows(0)(88) = "connection OUT"
                .Rows(0)(89) = "valve design"
                .Rows(0)(90) = "material certification"     'DO
                .Rows(0)(91) = "final test"
                .Rows(0)(92) = "valve painting"     'DO
                .Rows(0)(93) = "act design"
                .Rows(0)(94) = "limit switch"       'DO
                .Rows(0)(95) = "act. painting"      'DO
                .Rows(0)(96) = "positioner"         'DO
                .Rows(0)(97) = "positioner mount."
                .Rows(0)(98) = "booster"            'DO
                .Rows(0)(99) = "travel time"
                .Rows(0)(100) = "air set"
                .Rows(0)(101) = "solenoid valve"
                .Rows(0)(102) = "lock-up vale"
                .Rows(0)(103) = "Acc.1"
                .Rows(0)(104) = "Acc.2"
                .Rows(0)(105) = "extra 4"
                .Rows(0)(106) = "extra/jacket"
                .Rows(0)(107) = "remark1"
                .Rows(0)(108) = "remark2"
                .Rows(0)(109) = "calc norm"
                .Rows(0)(110) = "actuator materials"
                .Rows(0)(111) = "actuator specials"
                .Rows(0)(112) = "frei"
                .Rows(0)(113) = "DN in"
                .Rows(0)(114) = "DN out"
                .Rows(0)(115) = "rate IN"
                .Rows(0)(116) = "rate OUT"
                .Rows(0)(117) = "p design out"
                .Rows(0)(118) = "t design out"
                .Rows(0)(119) = "material in"
                .Rows(0)(120) = "material out"
                .Rows(0)(121) = "SE dim IN"
                .Rows(0)(122) = "SE dim OUT"
                .Rows(0)(123) = "cooling status"
                .Rows(0)(124) = "pKw V"
                .Rows(0)(125) = "tKw V"
                .Rows(0)(126) = "t2 c1 V"
                .Rows(0)(127) = "t2 c2 V"
                .Rows(0)(128) = "t2 c3 V"
                .Rows(0)(129) = "nd pipe cw"
                .Rows(0)(130) = "rate CW"
                .Rows(0)(131) = "connection CW"
                .Rows(0)(132) = "drain/preheat connection"
                .Rows(0)(133) = "strainer"
                .Rows(0)(134) = "kvs strainer"
                .Rows(0)(135) = "gasket"            'DO
                .Rows(0)(136) = "set pressure"
                .Rows(0)(137) = "diaph.area"
                .Rows(0)(138) = "set range start"
                .Rows(0)(139) = "set range stop."
                .Rows(0)(140) = "springs"
                .Rows(0)(141) = "seat diam ub"
                .Rows(0)(142) = "seat Diam"

                .Rows(0)(143) = "cv c1"
                .Rows(0)(144) = "cv c2"
                .Rows(0)(145) = "cvc3"
                .Rows(0)(146) = "travel c1"
                .Rows(0)(147) = "travel c2"
                .Rows(0)(148) = "travel c3"
                .Rows(0)(149) = "lp c1"
                .Rows(0)(150) = "lp c2"
                .Rows(0)(151) = "lp c3"
                .Rows(0)(152) = "cavit c1"
                .Rows(0)(153) = "cavit c2"
                .Rows(0)(154) = "cavit c3"
                .Rows(0)(155) = "vp c1"
                .Rows(0)(156) = "vp c2"
                .Rows(0)(157) = "vp c3"
                .Rows(0)(158) = "vo c1"
                .Rows(0)(159) = "vo c2"
                .Rows(0)(160) = "vo c3"
                .Rows(0)(161) = "ts1 c1"
                .Rows(0)(162) = "ts1 c2"
                .Rows(0)(163) = "ts1 c3"
                .Rows(0)(164) = "ts2 c1"
                .Rows(0)(165) = "ts2 c2"
                .Rows(0)(166) = "ts2 c3"
                .Rows(0)(167) = "lp red1"
                .Rows(0)(168) = "lp red2"
                .Rows(0)(169) = "lp red3"
                .Rows(0)(170) = "price 3"
                .Rows(0)(171) = "flow Kw c1"
                .Rows(0)(172) = "flow Kw c2"
                .Rows(0)(173) = "flow Kw c3"

                Dim tempcode As Integer

                For NowRecord = 1 To 25
                    dt_OpenOfficeCSV.Rows.Add(dt_OpenOfficeCSV.NewRow())
                Next
                For NowRecord = 26 To Database_LastRow + 25
                    With dt_OpenOfficeCSV
                        dt_OpenOfficeCSV.Rows.Add(dt_OpenOfficeCSV.NewRow())

                        Database_Rowno = NowRecord - 25
                        'CSV starts from 1 Array starts from 0 
                        .Rows(NowRecord)(Columnno) = dt_OpenOffice(Database_Rowno)(1) '  Sr. No
                        .Rows(NowRecord)(Columnno + 1) = dt_OpenOffice(Database_Rowno)(2) '  Item No 
                        .Rows(NowRecord)(Columnno + 2) = dt_OpenOffice(Database_Rowno)(3) '  Sheet No 
                        .Rows(NowRecord)(Columnno + 3) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 4) '  REV. No

                        .Rows(NowRecord)(Columnno + 4) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 6) '  QTy
                        .Rows(NowRecord)(Columnno + 5) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 5) '  Tag. No
                        .Rows(NowRecord)(Columnno + 6) = "INPUT CASE I II III"

                        FluidType = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 9)

                        .Rows(NowRecord)(Columnno + 7) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 10) 'cmbFluid.Text
                        .Rows(NowRecord)(Columnno + 8) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 13) ' cmbMedium.text
                        .Rows(NowRecord)(Columnno + 9) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 14) ' cmbFlowrate.Text
                        .Rows(NowRecord)(Columnno + 10) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 15)  ' txtFlowrateCase1.Text
                        .Rows(NowRecord)(Columnno + 11) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 16) 'txtFlowrateCase2.Text
                        .Rows(NowRecord)(Columnno + 12) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 17)  'txtFlowrateCase3.Text
                        .Rows(NowRecord)(Columnno + 13) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 22)  ' cmbPressureUnits.Text
                        .Rows(NowRecord)(Columnno + 14) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 23) ' txtInletPressureCase1.Text
                        .Rows(NowRecord)(Columnno + 15) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 24) 'txtInletPressureCase2.Text
                        .Rows(NowRecord)(Columnno + 16) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 25) 'txtInletPressureCase3.Text
                        dporP2 = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 72) 'dp or P2
                        If dporP2 = False Then
                            .Rows(NowRecord)(Columnno + 17) = "P2"  ' "Outlet Pressure"
                            .Rows(NowRecord)(Columnno + 18) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 26) ' txtOutletPressure1.Text
                            .Rows(NowRecord)(Columnno + 19) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 27) 'txtOutletPressureCase2.Text
                            .Rows(NowRecord)(Columnno + 20) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 28) ' txtOutletPressure3.Text
                        Else
                            .Rows(NowRecord)(Columnno + 17) = "dP" ' "Differential Pressure"
                            .Rows(NowRecord)(Columnno + 18) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 29) ' txtPressureDropCase1.Text
                            .Rows(NowRecord)(Columnno + 19) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 30) 'txtPressureDropCase2.Text
                            .Rows(NowRecord)(Columnno + 20) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 31) ' txtPressureDropCase3.Text

                        End If

                        Dim tempunits = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 18)
                        .Rows(NowRecord)(Columnno + 21) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 18) 'cmbTemperatureUnits.Text
                        .Rows(NowRecord)(Columnno + 22) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 19) 'txtInletTemperatureCase1.Text
                        .Rows(NowRecord)(Columnno + 23) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 20) ' txtInletTemperatureCase2.Text
                        .Rows(NowRecord)(Columnno + 24) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 21) ' txtInletTemperatureCase3.Text

                        MolecularWeight = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 32)

                        If MolecularWeight = False Then

                            .Rows(NowRecord)(Columnno + 25) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 33) ' cmbDensityUnits.Text
                            .Rows(NowRecord)(Columnno + 26) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 35) 'Math.Round(FinalDensityCase1)(2)
                            .Rows(NowRecord)(Columnno + 27) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 36) ' Math.Round(FinalDensityCase2)(2)
                            .Rows(NowRecord)(Columnno + 28) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 37) ' Math.Round(FinalDensityCase3)(2)
                        Else
                            .Rows(NowRecord)(Columnno + 25) = "Mol.Weight"
                            .Rows(NowRecord)(Columnno + 26) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
                            .Rows(NowRecord)(Columnno + 27) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
                            .Rows(NowRecord)(Columnno + 28) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
                        End If


                        If FluidType = "InCompressible" Then
                            .Rows(NowRecord)(Columnno + 29) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 39) ' ' cmbViscosityUnits.Text
                            .Rows(NowRecord)(Columnno + 30) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 40) ' 'Math.Round(FinalViscosityCase1)(2)
                            .Rows(NowRecord)(Columnno + 31) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 41) ' 'Math.Round(FinalViscosityCase2)(2)
                            .Rows(NowRecord)(Columnno + 32) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 42) ' ' Math.Round(FinalViscosityCase3)(2)
                        Else
                            .Rows(NowRecord)(Columnno + 29) = ""
                            .Rows(NowRecord)(Columnno + 30) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 63) ' 'Isentropic Expansion K 1
                            .Rows(NowRecord)(Columnno + 31) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 64) ' 'Isentropic Expansion K 2
                            .Rows(NowRecord)(Columnno + 32) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 65) ' 'Isentropic Expansion K 3
                        End If


                        If FluidType = "InCompressible" Then
                            .Rows(NowRecord)(Columnno + 33) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 53) ' ' cmbVapourPressureUnits.Text
                            .Rows(NowRecord)(Columnno + 34) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 54) ' 'Math.Round(FinalVapourPressureCase1)(2)
                            .Rows(NowRecord)(Columnno + 35) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 55) ' ' Math.Round(FinalVapourPressureCase2)(2)
                            .Rows(NowRecord)(Columnno + 36) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 56) ' 'Math.Round(FinalVapourPressureCase3)(2)
                        Else
                            .Rows(NowRecord)(Columnno + 33) = ""
                            .Rows(NowRecord)(Columnno + 34) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 57) ' 'Compressibility Z 1
                            .Rows(NowRecord)(Columnno + 35) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 58) ' 'Compressibility Z 2
                            .Rows(NowRecord)(Columnno + 36) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 59) ' 'Compressibility Z 3
                        End If
                        If FluidType = "InCompressible" Then
                            .Rows(NowRecord)(Columnno + 37) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 49) ' 'cmbCriticalPressureUnits.Text
                            .Rows(NowRecord)(Columnno + 38) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 50) ' ' Math.Round(FinalCriticalPressureCase1, 2)
                            .Rows(NowRecord)(Columnno + 39) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 51) ' 'Math.Round(FinalCriticalPressureCase2, 2)
                            .Rows(NowRecord)(Columnno + 40) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 52) ' ' Math.Round(FinalCriticalPressureCase3, 2)
                        End If
                        .Rows(NowRecord)(Columnno + 41) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 35) ' ' User Notes 1
                        .Rows(NowRecord)(Columnno + 42) = .Rows(NowRecord)(Columnno + 13) 'cmbPressureUnits.Text
                        .Rows(NowRecord)(Columnno + 43) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 2) ' 'txtDesignPressureInlet.Text
                        DesignTemperatureUnit = .Rows(NowRecord)(Columnno + 21)
                        .Rows(NowRecord)(Columnno + 44) = .Rows(NowRecord)(Columnno + 21) ' cmbTemperatureUnits.Text
                        .Rows(NowRecord)(Columnno + 45) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 33) ' ' txtDesignTemperatureInlet.Text only deg C

                        '47 and 48 blank
                        .Rows(NowRecord)(Columnno + 48) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 1) ' 'cmbMOC.Text
                        .Rows(NowRecord)(Columnno + 49) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) ' 'cmbSuggestedRating.Text

                        Dim CSVModels As String = dt_OpenOffice(Database_Rowno)(22)

                        '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Body Material
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) - 1
                        If Not tempcode < 0 Then
                            If CSVModels = "GLOBE-FORBES" Then
                                .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(30).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "GLOBE" Then
                                .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(2).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "3-WAY MIX " Or CSVModels = "3-WAY SEP" Then
                                .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(35).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "T.E. PRDS Perforated" Or CSVModels = "B.E. PRDS Perforated" Or CSVModels = "B.E. PRDS Parabolic" Then
                                .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(40).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        End If

                        .Rows(NowRecord)(Columnno + 51) = "Globe" ' dt_OpenOffice(Database_Rowno, DataSection6_Output2 + 25)' 'cmbModel.Text

                        Dim CSVSelectedTrim As String
                        CSVSelectedTrim = If(IsDBNull(dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 35)), " ", dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 35)) ' 'selectedTrim'
                        Dim CsvModel As String = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 12)
                        Dim CsvEcoTrim As String = ""

                        If CsvModel = "FM Valve" Then
                            Select Case CSVSelectedTrim
                                Case "PS1"
                                    CsvEcoTrim = "P1"
                                Case "PS3"
                                    CsvEcoTrim = "P3"
                                Case "PR1"
                                    CsvEcoTrim = "L1"
                                Case "PR2"
                                    CsvEcoTrim = "L2"
                                Case "PR3"
                                    CsvEcoTrim = "L3"
                            End Select
                        Else
                            CsvEcoTrim = CSVSelectedTrim
                        End If

                        .Rows(NowRecord)(Columnno + 52) = CsvEcoTrim     ' Converted to Ecotrol to match configurator

                        '.Rows(NowRecord)(Columnno + 53) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) ' 'Plug
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) - 1
                        If Not tempcode < 0 Then
                            If CSVModels = "GLOBE-FORBES" And Not tempcode < 0 Then
                                .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(32).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "GLOBE" Then
                                .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(3).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "3-WAY MIX " Or CSVModels = "3-WAY SEP" Then
                                .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(37).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "T.E. PRDS Perforated" Or CSVModels = "B.E. PRDS Perforated" Or CSVModels = "B.E. PRDS Parabolic" Then
                                .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(42).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        End If

                        '.Rows(NowRecord)(Columnno + 54) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) ' 'Seat
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) - 1
                        If Not tempcode < 0 Then
                            If CSVModels = "GLOBE-FORBES" And Not tempcode < 0 Then
                                .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(33).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "GLOBE" Then
                                .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(4).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "3-WAY MIX " Or CSVModels = "3-WAY SEP" Then
                                .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(38).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "T.E. PRDS Perforated" Or CSVModels = "B.E. PRDS Perforated" Or CSVModels = "B.E. PRDS Parabolic" Then
                                .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(43).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        End If

                        .Rows(NowRecord)(Columnno + 55) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 20) ' 'Guiding
                        .Rows(NowRecord)(Columnno + 56) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 24) ' 'cmbKVseries.Text

                        CSVCharacterstics = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 23) ' 'cmbCharacterstics.Text
                        If CSVCharacterstics = "Linear" Or CSVCharacterstics = "Equal %" Then
                            CSVCharacterstics = CSVCharacterstics.Substring(0, 1)
                        End If
                        .Rows(NowRecord)(Columnno + 57) = CSVCharacterstics
                        '59 blank
                        .Rows(NowRecord)(Columnno + 59) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 29) ' ' cmbKVOverride.Text
                        .Rows(NowRecord)(Columnno + 60) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 21) ' 'cmbVelocityRule.Text
                        .Rows(NowRecord)(Columnno + 61) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 26) ' 'final Valve size

                        CSValveModel = If(IsDBNull(dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25)), String.Empty, dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25))
                        'CSValveModel = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25) ' 'Valve Model
                        If CSValveModel = "" Then
                            CSValveModel = ""
                        Else
                            If CsvModel = "EcoTrol" Then
                                CSValveModel = CSValveModel.Substring(0, 2)                 ' Only First 2 Charachters  
                            ElseIf CsvModel = "FM Valve" Then
                                CSValveModel = CSValveModel.Remove(0, 1)                    ' Remove 
                            End If
                        End If

                        .Rows(NowRecord)(Columnno + 62) = CSValveModel

                        If dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 4) Then ' = True Then
                            .Rows(NowRecord)(Columnno + 63) = "Yes" 'Attenuation Yes or No
                        Else
                            .Rows(NowRecord)(Columnno + 63) = "-"
                        End If
                        .Rows(NowRecord)(Columnno + 64) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 38) ' 'KvCage
                        '65 66 67 Blank
                        .Rows(NowRecord)(Columnno + 68) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 31) ' 'cmbBonnetType.Text
                        .Rows(NowRecord)(Columnno + 69) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 22) ' 'cmbFlowDirection.Text
                        .Rows(NowRecord)(Columnno + 70) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 4) ' 'cmbLeakage.Text
                        .Rows(NowRecord)(Columnno + 71) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 7) ' ' txtDPShutoff.Text
                        .Rows(NowRecord)(Columnno + 72) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 1) ' ' cmbActuatorType.Text
                        .Rows(NowRecord)(Columnno + 73) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 9) ' 'txtAirPressure.Text
                        '74 Blank

                        CSVAirFail = ""
                        Dim airfail As Integer   ' ' cmbAirFailure.Text
                        If IsDBNull(dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 3)) Then
                            airfail = -1
                        Else
                            airfail = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 3) - 1
                        End If

                        If airfail = -1 Then
                            CSVAirFail = "--Select--"
                        ElseIf airfail = 0 Then
                            CSVAirFail = "-O"
                        ElseIf airfail = 1 Then
                            CSVAirFail = "-C"
                        End If

                        'If CSVAirFail = "AIR TO CLOSE" Then
                        '    CSVAirFail = "-O"
                        'ElseIf CSVAirFail = "AIR TO OPEN" Then
                        '    CSVAirFail = "-C"
                        'End If

                        .Rows(NowRecord)(Columnno + 75) = CSVAirFail
                        .Rows(NowRecord)(Columnno + 76) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 2) ' 'cmbBalancing.Text
                        .Rows(NowRecord)(Columnno + 77) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 5) ' 'cmbPacking.Text
                        .Rows(NowRecord)(Columnno + 78) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 6) ' 'cmbSealing.Text
                        .Rows(NowRecord)(Columnno + 79) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 19) ' 'MKSActuator
                        '.Rows(NowRecord)(Columnno + 80) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 12) ' ' cmbHandwheel.Text

                        If Not IsDBNull(dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 12)) Then
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 12) - 1
                        Else
                            tempcode = -1
                        End If
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 80) = ds_AccessoriesMat.Tables(20).Rows(tempcode).Item("PARAMETER_VALUE")
                        Else
                            .Rows(NowRecord)(Columnno + 80) = "--Select--"
                        End If

                        .Rows(NowRecord)(Columnno + 81) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 7) ' ' cmbAreaunits.Text
                        .Rows(NowRecord)(Columnno + 82) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 11) ' 'lblFinalOutletPipe
                        .Rows(NowRecord)(Columnno + 83) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 12) ' 'cmbSchedule.Text
                        .Rows(NowRecord)(Columnno + 84) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 8) ' ' cmbInletPipeSize.Text
                        If dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 8) = True Then
                            .Rows(NowRecord)(Columnno + 85) = "-12" ' db Inuslation 
                        Else
                            .Rows(NowRecord)(Columnno + 85) = ""
                        End If
                        '86 blank
                        .Rows(NowRecord)(Columnno + 87) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 32) '
                        .Rows(NowRecord)(Columnno + 88) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 32) '
                        '89 blank
                        '.Rows(NowRecord)(Columnno + 90) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 18) '   'Certification / End Connection
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 18) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 90) = ds_AccessoriesMat.Tables(19).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '91 blank
                        '.Rows(NowRecord)(Columnno + 92) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 6) ' 'frmMaterials.cmbPainitng.Text
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 6) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 92) = ds_AccessoriesMat.Tables(7).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '93 blank
                        '.Rows(NowRecord)(Columnno + 94) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 11) ' ' Switches
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 11) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 94) = ds_AccessoriesMat.Tables(12).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '95 Blank                                                               
                        '.Rows(NowRecord)(Columnno + 96) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 7) ' ' Positioner
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 7) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 96) = ds_AccessoriesMat.Tables(8).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '97 Blank
                        '.Rows(NowRecord)(Columnno + 98) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 12) ' ' Volbooster
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 12) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 98) = ds_AccessoriesMat.Tables(13).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '99 Blank
                        '.Rows(NowRecord)(Columnno + 100) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 9) ' ' AFR
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 9) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 100) = ds_AccessoriesMat.Tables(10).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '.Rows(NowRecord)(Columnno + 101) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 8) ' ' SOV
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 8) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 101) = ds_AccessoriesMat.Tables(9).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '.Rows(NowRecord)(Columnno + 102) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 10) ' ' ALR
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 10) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 102) = ds_AccessoriesMat.Tables(11).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '.Rows(NowRecord)(Columnno + 103) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 15) ' 'Pressure Regulator
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 15) - 1
                        If Not tempcode < 0 Then
                            .Rows(NowRecord)(Columnno + 103) = ds_AccessoriesMat.Tables(16).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        .Rows(NowRecord)(Columnno + 104) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 14) ' 'Volume Tank 

                        '105 106 blank 
                        .Rows(NowRecord)(Columnno + 107) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 36) '
                        .Rows(NowRecord)(Columnno + 108) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 37) '
                        .Rows(NowRecord)(Columnno + 109) = "FM"
                        '109 to 112
                        .Rows(NowRecord)(Columnno + 113) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 30) '
                        .Rows(NowRecord)(Columnno + 114) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 30) '
                        .Rows(NowRecord)(Columnno + 115) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) '
                        .Rows(NowRecord)(Columnno + 116) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) '
                        '117 to 134 blank
                        '.Rows(NowRecord)(Columnno + 135) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) ' 'Gasket
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) - 1
                        If Not tempcode < 0 Then
                            If CSVModels = "GLOBE-FORBES" And Not tempcode < 0 Then
                                .Rows(NowRecord)(Columnno + 135) = ds_AccessoriesMat.Tables(34).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "GLOBE" Then
                                .Rows(NowRecord)(Columnno + 135) = ds_AccessoriesMat.Tables(6).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "3-WAY MIX " Or CSVModels = "3-WAY SEP" Then
                                .Rows(NowRecord)(Columnno + 135) = ds_AccessoriesMat.Tables(39).Rows(tempcode).Item("PARAMETER_VALUE")
                            ElseIf CSVModels = "T.E. PRDS Perforated" Or CSVModels = "B.E. PRDS Perforated" Or CSVModels = "B.E. PRDS Parabolic" Then
                                .Rows(NowRecord)(Columnno + 135) = ds_AccessoriesMat.Tables(44).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        End If

                        .Rows(NowRecord)(Columnno + 136) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 9) ' 'End Spring Range
                        ' .Rows(NowRecord)(Columnno + 137) = dt_OpenOffice(Database_Rowno)(Database_Columnno + 9)' 'cmbAirPressureUnits.Text
                        '138 blank
                        .Rows(NowRecord)(Columnno + 138) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 20) ' 'Initial Spring Range MKS
                        .Rows(NowRecord)(Columnno + 139) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 21) ' 'Final Spring Range MKS
                        .Rows(NowRecord)(Columnno + 140) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 18) ' ' No of Springs 

                        If Not dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 2) = "NonPr.Bal" Then
                            .Rows(NowRecord)(Columnno + 141) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 39) '  ' Pressure Balance Seat Dia 
                            .Rows(NowRecord)(Columnno + 142) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 39) ' ' Pressure Balance Seat Dia 
                        Else
                            .Rows(NowRecord)(Columnno + 141) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 34) '  ' Seat Dia 
                            .Rows(NowRecord)(Columnno + 142) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 34) ' ' Seat Dia 
                        End If



                        .Rows(NowRecord)(Columnno + 143) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 10) '
                        .Rows(NowRecord)(Columnno + 144) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 11) '
                        .Rows(NowRecord)(Columnno + 145) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 12) '

                        '143 to 145 Blank
                        .Rows(NowRecord)(Columnno + 146) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 13) ' ' Travel /Stroke % 1
                        .Rows(NowRecord)(Columnno + 147) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 14) ' ' Travel /Stroke % 2
                        .Rows(NowRecord)(Columnno + 148) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 15) ' ' Travel /Stroke % 3
                        .Rows(NowRecord)(Columnno + 149) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 1) ' ' Noise Case 1
                        .Rows(NowRecord)(Columnno + 150) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 2) ' ' Noise Case 2
                        .Rows(NowRecord)(Columnno + 151) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 3) ' ' Noise Case 3
                        .Rows(NowRecord)(Columnno + 152) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 19) ' ' Flow Severity 1
                        .Rows(NowRecord)(Columnno + 153) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 20) ' ' Flow Severity 2
                        .Rows(NowRecord)(Columnno + 154) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 21) ' ' Flow Severity 3
                        .Rows(NowRecord)(Columnno + 155) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 22) ' ' Inlet Valve Velocity 1
                        .Rows(NowRecord)(Columnno + 156) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 23) ' ' Inlet Valve Velocity 2
                        .Rows(NowRecord)(Columnno + 157) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 24) ' ' Inlet Valve Velocity 3
                        .Rows(NowRecord)(Columnno + 158) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 25) ' ' Outlet Valve Velocity 1
                        .Rows(NowRecord)(Columnno + 159) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 26) ' ' Outlet Valve Velocity 2
                        .Rows(NowRecord)(Columnno + 160) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 27) ' ' Outlet Valve Velocity 3
                        .Rows(NowRecord)(Columnno + 161) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 43) ' ' 'ToutPressureCase1
                        .Rows(NowRecord)(Columnno + 162) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 44) ' ' 'ToutPressureCase2
                        .Rows(NowRecord)(Columnno + 163) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 45) ' ' 'ToutPressureCase3
                        .Rows(NowRecord)(Columnno + 164) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 46) ' ' 'TsatoutPressureCase1
                        .Rows(NowRecord)(Columnno + 165) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 47) ' ' 'TsatoutPressureCase2
                        .Rows(NowRecord)(Columnno + 166) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 48) ' ' 'TsatoutPressureCase3
                        .Rows(NowRecord)(Columnno + 167) = .Rows(NowRecord)(Columnno + 149)  ' Noise is repeat
                        .Rows(NowRecord)(Columnno + 168) = .Rows(NowRecord)(Columnno + 150)  ' Noise is repeat
                        .Rows(NowRecord)(Columnno + 169) = .Rows(NowRecord)(Columnno + 151)  ' Noise is repeat

                        '170 to 173 blank

                        '   End With

                    End With
                Next


            End With


            '//////////////////////////////////////////////////////////////////////////

            'Declaration of Variables
            Dim filename1 As String = DirectoryName & "\" & FileName & ".csv"
            Dim myString As String
            Dim bFirstRecord As Boolean = True
            Dim myWriter As StreamWriter

            If BitConverter.IsLittleEndian = False Then

                myWriter = New System.IO.StreamWriter(filename1, False, New System.Text.UTF32Encoding(False, False))
            Else
                myWriter = New System.IO.StreamWriter(filename1, False, New System.Text.UTF32Encoding(True, False))          '
            End If


            myString = ""

            Try


                For Each dr As DataRow In dt_OpenOfficeCSV.Rows

                    bFirstRecord = True

                    For Each field As Object In dr.ItemArray

                        If Not bFirstRecord Then

                            myString = myString & ","


                        End If

                        myString = myString & field.ToString

                        bFirstRecord = False

                    Next

                    'New Line to differentiate next row
                    myString = myString & Environment.NewLine

                Next



            Catch ex As Exception

                MsgBox(ex.Message)


            End Try


            'Write the String to the Csv File

            myWriter.WriteLine(myString)

            'Clean up
            myWriter.Close()



            '///////////////////////////////////////////////////////////////////////////////
            'Dim Newfilename As String
            'Newfilename = DirectoryName & "\" & FileName & ".csv"
            'Dim objODSWrite As ODCWORK.OdsReaderWriter = New ODCWORK.OdsReaderWriter()
            'Call objODSWrite.WriteOdsFile(ds_OpenOfficeCSV, Newfilename)

            MsgBox(DirectoryName & "\" & FileName & ".csv Created")



        Catch ex As Exception
            MsgBox("ConvertToCSV :   " & ex.Message, , "Control Valve Sizing")


        Finally
            Database_Rowno = TempDataRow  ' Restore live Record

        End Try

    End Sub
    'Public Sub ConvertToCSV()
    '    Dim Columnno, NowRecord As Integer

    '    'Dim xlWorkBook As excel.Workbook
    '    'Dim xlWorkSheet As excel.Worksheet

    '    Dim Transfer_array(180) As Object
    '    Dim Database_Columnno, TempDataRow As Long
    '    Dim dporP2, MolecularWeight As Boolean
    '    Dim FluidType, DesignTemperatureUnit, CSValveModel, CSVCharacterstics, CSVAirFail As String
    '    Dim DesignTemperature As Single


    '    Try
    '        TempDataRow = Database_Rowno '  Load live record
    '        If XMLFilename = "" Then
    '            MsgBox("Please Load Project File")
    '            Exit Sub
    '        End If



    '        'Database_LastRow = dt_OpenOffice.Rows.Count - 1
    '        'xlWorkBook = APP.Workbooks.Open(XMLFilename)
    '        'xlWorkSheet = xlWorkBook.Worksheets("Records")

    '        ds_OpenOfficeCSV = New DataSet()

    '        dt_OpenOfficeCSV = New DataTable
    '        ds_OpenOfficeCSV.Tables.Add(dt_OpenOfficeCSV)
    '        Database_Rowno = 1
    '        Database_LastRow = dt_OpenOffice.Rows.Count - 1






    '        With dt_OpenOfficeCSV

    '            For x = 0 To 200 Step 1
    '                .Columns.Add()
    '            Next


    '        End With
    '        'Database_Rowno = 1
    '        'Database_LastRow = dt_OpenOffice.Rows.Count - 1


    '        ''Add new File 

    '        dt_OpenOfficeCSV.Rows.Add(dt_OpenOfficeCSV.NewRow())
    '        With dt_OpenOfficeCSV

    '            .Rows(0)(0) = "Sr.No "
    '            .Rows(0)(1) = "Item No."
    '            .Rows(0)(2) = "Sheet No."
    '            .Rows(0)(3) = "Rev.No"
    '            .Rows(0)(4) = "pcs"
    '            .Rows(0)(5) = "Tag"
    '            .Rows(0)(6) = "case"
    '            .Rows(0)(7) = "Phase"
    '            .Rows(0)(8) = "Medium"
    '            .Rows(0)(9) = "flowU"
    '            .Rows(0)(10) = "flowc1 V"
    '            .Rows(0)(11) = "flowc2 V"
    '            .Rows(0)(12) = "flowc3 V"
    '            .Rows(0)(13) = "p1 U"
    '            .Rows(0)(14) = "p1 c1 V"
    '            .Rows(0)(15) = "p1 c2 V"
    '            .Rows(0)(16) = "p1 c3 V"
    '            .Rows(0)(17) = "dp or p2"
    '            .Rows(0)(18) = "dp or p2 c1"
    '            .Rows(0)(19) = "dp or p2 c2"
    '            .Rows(0)(20) = "dp or p2 c3"
    '            .Rows(0)(21) = "t U"
    '            .Rows(0)(22) = "t1 c1 V"
    '            .Rows(0)(23) = "t1 c2 V"
    '            .Rows(0)(24) = "t1 c3 V"
    '            .Rows(0)(25) = "dens U"
    '            .Rows(0)(26) = "dens c1 V"
    '            .Rows(0)(27) = "dens c2 V"
    '            .Rows(0)(28) = "dens c3 V"
    '            .Rows(0)(29) = "vis&iso U"
    '            .Rows(0)(30) = "vis&iso c1 V"
    '            .Rows(0)(31) = "vis&iso c2 V"
    '            .Rows(0)(32) = "vis&iso c3 V"
    '            .Rows(0)(33) = "vapp&zU"
    '            .Rows(0)(34) = "vapp&z c1 V"
    '            .Rows(0)(35) = "vapp&z c2 V"
    '            .Rows(0)(36) = "vapp&z c3 V"
    '            .Rows(0)(37) = "critpU"
    '            .Rows(0)(38) = "critp c1 V"
    '            .Rows(0)(39) = "critp c2 V"
    '            .Rows(0)(40) = "critp c3 V"
    '            .Rows(0)(41) = "remarks "
    '            .Rows(0)(42) = "p design in U"
    '            .Rows(0)(43) = "p design in"
    '            .Rows(0)(44) = "t desigin in U"
    '            .Rows(0)(45) = "t desigin in"
    '            .Rows(0)(46) = "p design vacuum"
    '            .Rows(0)(47) = "t design min"
    '            .Rows(0)(48) = "mat group"
    '            .Rows(0)(49) = "rate select"
    '            .Rows(0)(50) = "body material"
    '            .Rows(0)(51) = "Bauart"
    '            .Rows(0)(52) = "trim selec"
    '            .Rows(0)(53) = "plug material"
    '            .Rows(0)(54) = "seat material"
    '            .Rows(0)(55) = "guiding"
    '            .Rows(0)(56) = "kvs selec rule"
    '            .Rows(0)(57) = "charac"
    '            .Rows(0)(58) = "step rule"
    '            .Rows(0)(59) = "kvs selec=prop"
    '            .Rows(0)(60) = "dn rule"
    '            .Rows(0)(61) = "dn selec"
    '            .Rows(0)(62) = "type selec"
    '            .Rows(0)(63) = "fix trim"
    '            .Rows(0)(64) = "fix kvs"
    '            .Rows(0)(65) = "atten. int"
    '            .Rows(0)(66) = "atten. ext."
    '            .Rows(0)(67) = "kvatten"
    '            .Rows(0)(68) = "Topflange"
    '            .Rows(0)(69) = "flow direct"
    '            .Rows(0)(70) = "leakage class"
    '            .Rows(0)(71) = "dp actuator"
    '            .Rows(0)(72) = "act type"
    '            .Rows(0)(73) = "p air [bar]"
    '            .Rows(0)(74) = "valve function"
    '            .Rows(0)(75) = "air failure"
    '            .Rows(0)(76) = "balance selec"
    '            .Rows(0)(77) = "packing selec"
    '            .Rows(0)(78) = "sealing selec"
    '            .Rows(0)(79) = "actuator selec"
    '            .Rows(0)(80) = "hand wheel"
    '            .Rows(0)(81) = "nd pipe U"
    '            .Rows(0)(82) = "nd pipe out"
    '            .Rows(0)(83) = "pipe schedule"
    '            .Rows(0)(84) = "nd pipe in"
    '            .Rows(0)(85) = "dB insulation"
    '            .Rows(0)(86) = "-dB free"
    '            .Rows(0)(87) = "connection IN"
    '            .Rows(0)(88) = "connection OUT"
    '            .Rows(0)(89) = "valve design"
    '            .Rows(0)(90) = "material certification"
    '            .Rows(0)(91) = "final test"
    '            .Rows(0)(92) = "valve painting"
    '            .Rows(0)(93) = "act design"
    '            .Rows(0)(94) = "limit switch"
    '            .Rows(0)(95) = "act. painting"
    '            .Rows(0)(96) = "positioner"
    '            .Rows(0)(97) = "positioner mount."
    '            .Rows(0)(98) = "booster"
    '            .Rows(0)(99) = "travel time"
    '            .Rows(0)(100) = "air set"
    '            .Rows(0)(101) = "solenoid valve"
    '            .Rows(0)(102) = "lock-up vale"
    '            .Rows(0)(103) = "Acc.1"
    '            .Rows(0)(104) = "Acc.2"
    '            .Rows(0)(105) = "extra 4"
    '            .Rows(0)(106) = "extra/jacket"
    '            .Rows(0)(107) = "remark1"
    '            .Rows(0)(108) = "remark2"
    '            .Rows(0)(109) = "calc norm"
    '            .Rows(0)(110) = "actuator materials"
    '            .Rows(0)(111) = "actuator specials"
    '            .Rows(0)(112) = "frei"
    '            .Rows(0)(113) = "DN in"
    '            .Rows(0)(114) = "DN out"
    '            .Rows(0)(115) = "rate IN"
    '            .Rows(0)(116) = "rate OUT"
    '            .Rows(0)(117) = "p design out"
    '            .Rows(0)(118) = "t design out"
    '            .Rows(0)(119) = "material in"
    '            .Rows(0)(120) = "material out"
    '            .Rows(0)(121) = "SE dim IN"
    '            .Rows(0)(122) = "SE dim OUT"
    '            .Rows(0)(123) = "cooling status"
    '            .Rows(0)(124) = "pKw V"
    '            .Rows(0)(125) = "tKw V"
    '            .Rows(0)(126) = "t2 c1 V"
    '            .Rows(0)(127) = "t2 c2 V"
    '            .Rows(0)(128) = "t2 c3 V"
    '            .Rows(0)(129) = "nd pipe cw"
    '            .Rows(0)(130) = "rate CW"
    '            .Rows(0)(131) = "connection CW"
    '            .Rows(0)(132) = "drain/preheat connection"
    '            .Rows(0)(133) = "strainer"
    '            .Rows(0)(134) = "kvs strainer"
    '            .Rows(0)(135) = "gasket"
    '            .Rows(0)(136) = "set pressure"
    '            .Rows(0)(137) = "diaph.area"
    '            .Rows(0)(138) = "set range start"
    '            .Rows(0)(139) = "set range stop."
    '            .Rows(0)(140) = "springs"
    '            .Rows(0)(141) = "seat diam ub"
    '            .Rows(0)(142) = "seat Diam"

    '            .Rows(0)(143) = "cv c1"
    '            .Rows(0)(144) = "cv c2"
    '            .Rows(0)(145) = "cvc3"
    '            .Rows(0)(146) = "travel c1"
    '            .Rows(0)(147) = "travel c2"
    '            .Rows(0)(148) = "travel c3"
    '            .Rows(0)(149) = "lp c1"
    '            .Rows(0)(150) = "lp c2"
    '            .Rows(0)(151) = "lp c3"
    '            .Rows(0)(152) = "cavit c1"
    '            .Rows(0)(153) = "cavit c2"
    '            .Rows(0)(154) = "cavit c3"
    '            .Rows(0)(155) = "vp c1"
    '            .Rows(0)(156) = "vp c2"
    '            .Rows(0)(157) = "vp c3"
    '            .Rows(0)(158) = "vo c1"
    '            .Rows(0)(159) = "vo c2"
    '            .Rows(0)(160) = "vo c3"
    '            .Rows(0)(161) = "ts1 c1"
    '            .Rows(0)(162) = "ts1 c2"
    '            .Rows(0)(163) = "ts1 c3"
    '            .Rows(0)(164) = "ts2 c1"
    '            .Rows(0)(165) = "ts2 c2"
    '            .Rows(0)(166) = "ts2 c3"
    '            .Rows(0)(167) = "lp red1"
    '            .Rows(0)(168) = "lp red2"
    '            .Rows(0)(169) = "lp red3"
    '            .Rows(0)(170) = "price 3"
    '            .Rows(0)(171) = "flow Kw c1"
    '            .Rows(0)(172) = "flow Kw c2"
    '            .Rows(0)(173) = "flow Kw c3"

    '            Dim tempcode As Integer

    '            For NowRecord = 1 To 25
    '                dt_OpenOfficeCSV.Rows.Add(dt_OpenOfficeCSV.NewRow())
    '            Next
    '            For NowRecord = 26 To Database_LastRow + 25
    '                With dt_OpenOfficeCSV
    '                    dt_OpenOfficeCSV.Rows.Add(dt_OpenOfficeCSV.NewRow())

    '                    Database_Rowno = NowRecord - 25
    '                    'CSV starts from 1 Array starts from 0 
    '                    .Rows(NowRecord)(Columnno) = dt_OpenOffice(Database_Rowno)(1) '  Sr. No
    '                    .Rows(NowRecord)(Columnno + 1) = dt_OpenOffice(Database_Rowno)(2) '  Item No 
    '                    .Rows(NowRecord)(Columnno + 2) = dt_OpenOffice(Database_Rowno)(3) '  Sheet No 
    '                    .Rows(NowRecord)(Columnno + 3) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 4) '  REV. No

    '                    .Rows(NowRecord)(Columnno + 4) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 6) '  QTy
    '                    .Rows(NowRecord)(Columnno + 5) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 5) '  Tag. No
    '                    .Rows(NowRecord)(Columnno + 6) = "INPUT CASE I II III"

    '                    FluidType = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 9)

    '                    .Rows(NowRecord)(Columnno + 7) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 10) 'cmbFluid.Text
    '                    .Rows(NowRecord)(Columnno + 8) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 13) ' cmbMedium.text
    '                    .Rows(NowRecord)(Columnno + 9) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 14) ' cmbFlowrate.Text
    '                    .Rows(NowRecord)(Columnno + 10) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 15)  ' txtFlowrateCase1.Text
    '                    .Rows(NowRecord)(Columnno + 11) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 16) 'txtFlowrateCase2.Text
    '                    .Rows(NowRecord)(Columnno + 12) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 17)  'txtFlowrateCase3.Text
    '                    .Rows(NowRecord)(Columnno + 13) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 22)  ' cmbPressureUnits.Text
    '                    .Rows(NowRecord)(Columnno + 14) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 23) ' txtInletPressureCase1.Text
    '                    .Rows(NowRecord)(Columnno + 15) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 24) 'txtInletPressureCase2.Text
    '                    .Rows(NowRecord)(Columnno + 16) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 25) 'txtInletPressureCase3.Text
    '                    dporP2 = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 72) 'dp or P2
    '                    If dporP2 = False Then
    '                        .Rows(NowRecord)(Columnno + 17) = "P2"  ' "Outlet Pressure"
    '                        .Rows(NowRecord)(Columnno + 18) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 26) ' txtOutletPressure1.Text
    '                        .Rows(NowRecord)(Columnno + 19) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 27) 'txtOutletPressureCase2.Text
    '                        .Rows(NowRecord)(Columnno + 20) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 28) ' txtOutletPressure3.Text
    '                    Else
    '                        .Rows(NowRecord)(Columnno + 17) = "dP" ' "Differential Pressure"
    '                        .Rows(NowRecord)(Columnno + 18) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 29) ' txtPressureDropCase1.Text
    '                        .Rows(NowRecord)(Columnno + 19) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 30) 'txtPressureDropCase2.Text
    '                        .Rows(NowRecord)(Columnno + 20) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 31) ' txtPressureDropCase3.Text

    '                    End If

    '                    Dim tempunits = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 18)
    '                    .Rows(NowRecord)(Columnno + 21) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 18) 'cmbTemperatureUnits.Text
    '                    .Rows(NowRecord)(Columnno + 22) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 19) 'txtInletTemperatureCase1.Text
    '                    .Rows(NowRecord)(Columnno + 23) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 20) ' txtInletTemperatureCase2.Text
    '                    .Rows(NowRecord)(Columnno + 24) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 21) ' txtInletTemperatureCase3.Text

    '                    MolecularWeight = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 32)

    '                    If MolecularWeight = False Then

    '                        .Rows(NowRecord)(Columnno + 25) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 33) ' cmbDensityUnits.Text
    '                        .Rows(NowRecord)(Columnno + 26) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 35) 'Math.Round(FinalDensityCase1)(2)
    '                        .Rows(NowRecord)(Columnno + 27) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 36) ' Math.Round(FinalDensityCase2)(2)
    '                        .Rows(NowRecord)(Columnno + 28) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 37) ' Math.Round(FinalDensityCase3)(2)
    '                    Else
    '                        .Rows(NowRecord)(Columnno + 25) = "Mol.Weight"
    '                        .Rows(NowRecord)(Columnno + 26) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
    '                        .Rows(NowRecord)(Columnno + 27) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
    '                        .Rows(NowRecord)(Columnno + 28) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
    '                    End If


    '                    If FluidType = "InCompressible" Then
    '                        .Rows(NowRecord)(Columnno + 29) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 39) ' ' cmbViscosityUnits.Text
    '                        .Rows(NowRecord)(Columnno + 30) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 40) ' 'Math.Round(FinalViscosityCase1)(2)
    '                        .Rows(NowRecord)(Columnno + 31) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 41) ' 'Math.Round(FinalViscosityCase2)(2)
    '                        .Rows(NowRecord)(Columnno + 32) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 42) ' ' Math.Round(FinalViscosityCase3)(2)
    '                    Else
    '                        .Rows(NowRecord)(Columnno + 29) = ""
    '                        .Rows(NowRecord)(Columnno + 30) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 63) ' 'Isentropic Expansion K 1
    '                        .Rows(NowRecord)(Columnno + 31) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 64) ' 'Isentropic Expansion K 2
    '                        .Rows(NowRecord)(Columnno + 32) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 65) ' 'Isentropic Expansion K 3
    '                    End If


    '                    If FluidType = "InCompressible" Then
    '                        .Rows(NowRecord)(Columnno + 33) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 53) ' ' cmbVapourPressureUnits.Text
    '                        .Rows(NowRecord)(Columnno + 34) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 54) ' 'Math.Round(FinalVapourPressureCase1)(2)
    '                        .Rows(NowRecord)(Columnno + 35) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 55) ' ' Math.Round(FinalVapourPressureCase2)(2)
    '                        .Rows(NowRecord)(Columnno + 36) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 56) ' 'Math.Round(FinalVapourPressureCase3)(2)
    '                    Else
    '                        .Rows(NowRecord)(Columnno + 33) = ""
    '                        .Rows(NowRecord)(Columnno + 34) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 57) ' 'Compressibility Z 1
    '                        .Rows(NowRecord)(Columnno + 35) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 58) ' 'Compressibility Z 2
    '                        .Rows(NowRecord)(Columnno + 36) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 59) ' 'Compressibility Z 3
    '                    End If
    '                    If FluidType = "InCompressible" Then
    '                        .Rows(NowRecord)(Columnno + 37) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 49) ' 'cmbCriticalPressureUnits.Text
    '                        .Rows(NowRecord)(Columnno + 38) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 50) ' ' Math.Round(FinalCriticalPressureCase1, 2)
    '                        .Rows(NowRecord)(Columnno + 39) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 51) ' 'Math.Round(FinalCriticalPressureCase2, 2)
    '                        .Rows(NowRecord)(Columnno + 40) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 52) ' ' Math.Round(FinalCriticalPressureCase3, 2)
    '                    End If
    '                    .Rows(NowRecord)(Columnno + 41) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 35) ' ' User Notes 1
    '                    .Rows(NowRecord)(Columnno + 42) = .Rows(NowRecord)(Columnno + 13) 'cmbPressureUnits.Text
    '                    .Rows(NowRecord)(Columnno + 43) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 2) ' 'txtDesignPressureInlet.Text
    '                    DesignTemperatureUnit = .Rows(NowRecord)(Columnno + 21)
    '                    .Rows(NowRecord)(Columnno + 44) = .Rows(NowRecord)(Columnno + 21) ' cmbTemperatureUnits.Text
    '                    .Rows(NowRecord)(Columnno + 45) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 33) ' ' txtDesignTemperatureInlet.Text only deg C


    '                    Dim CSVSelectedTrim As String
    '                    CSVSelectedTrim = If(IsDBNull(dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 35)), " ", dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 35)) ' 'selectedTrim'  
    '                    '47 and 48 blank
    '                    .Rows(NowRecord)(Columnno + 48) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 1) ' 'cmbMOC.Text
    '                    .Rows(NowRecord)(Columnno + 49) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) ' 'cmbSuggestedRating.Text

    '                    '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Body Material
    '                    tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) - 1
    '                    If Not tempcode < 0 Then
    '                        If CSVSelectedTrim = "GLOBE-FORBES" Then
    '                            .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(30).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "GLOBE" Then
    '                            .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(2).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "3-WAY MIX " Or CSVSelectedTrim = "3-WAY SEP" Then
    '                            .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(35).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "T.E. PRDS Perforated" Or CSVSelectedTrim = "B.E. PRDS Perforated" Or CSVSelectedTrim = "B.E. PRDS Parabolic" Then
    '                            .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(40).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        End If
    '                    End If

    '                    .Rows(NowRecord)(Columnno + 51) = "Globe" ' dt_OpenOffice(Database_Rowno, DataSection6_Output2 + 25)' 'cmbModel.Text

    '                    Dim CsvModel As String = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 12)
    '                    Dim CsvEcoTrim As String = ""

    '                    If CsvModel = "FM Valve" Then
    '                        Select Case CSVSelectedTrim
    '                            Case "PS1"
    '                                CsvEcoTrim = "P1"
    '                            Case "PS3"
    '                                CsvEcoTrim = "P3"
    '                            Case "PR1"
    '                                CsvEcoTrim = "L1"
    '                            Case "PR2"
    '                                CsvEcoTrim = "L2"
    '                            Case "PR3"
    '                                CsvEcoTrim = "L3"
    '                        End Select
    '                    Else
    '                        CsvEcoTrim = CSVSelectedTrim
    '                    End If

    '                    .Rows(NowRecord)(Columnno + 52) = CsvEcoTrim     ' Converted to Ecotrol to match configurator

    '                    '.Rows(NowRecord)(Columnno + 53) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) ' 'Plug
    '                    tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) - 1
    '                    If Not tempcode < 0 Then
    '                        If CSVSelectedTrim = "GLOBE-FORBES" And Not tempcode < 0 Then
    '                            .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(32).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "GLOBE" Then
    '                            .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(3).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "3-WAY MIX " Or CSVSelectedTrim = "3-WAY SEP" Then
    '                            .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(37).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "T.E. PRDS Perforated" Or CSVSelectedTrim = "B.E. PRDS Perforated" Or CSVSelectedTrim = "B.E. PRDS Parabolic" Then
    '                            .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(42).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        End If
    '                    End If

    '                    '.Rows(NowRecord)(Columnno + 54) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) ' 'Seat
    '                    tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) - 1
    '                    If Not tempcode < 0 Then
    '                        If CSVSelectedTrim = "GLOBE-FORBES" And Not tempcode < 0 Then
    '                            .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(33).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "GLOBE" Then
    '                            .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(4).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "3-WAY MIX " Or CSVSelectedTrim = "3-WAY SEP" Then
    '                            .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(38).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        ElseIf CSVSelectedTrim = "T.E. PRDS Perforated" Or CSVSelectedTrim = "B.E. PRDS Perforated" Or CSVSelectedTrim = "B.E. PRDS Parabolic" Then
    '                            .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(43).Rows(tempcode).Item("PARAMETER_VALUE")
    '                        End If
    '                    End If

    '                    .Rows(NowRecord)(Columnno + 55) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 20) ' 'Guiding
    '                    .Rows(NowRecord)(Columnno + 56) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 24) ' 'cmbKVseries.Text

    '                    CSVCharacterstics = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 23) ' 'cmbCharacterstics.Text
    '                    If CSVCharacterstics = "Linear" Or CSVCharacterstics = "Equal %" Then
    '                        CSVCharacterstics = CSVCharacterstics.Substring(0, 1)
    '                    End If
    '                    .Rows(NowRecord)(Columnno + 57) = CSVCharacterstics
    '                    '59 blank
    '                    .Rows(NowRecord)(Columnno + 59) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 29) ' ' cmbKVOverride.Text
    '                    .Rows(NowRecord)(Columnno + 60) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 21) ' 'cmbVelocityRule.Text
    '                    .Rows(NowRecord)(Columnno + 61) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 26) ' 'final Valve size

    '                    CSValveModel = If(IsDBNull(dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25)), String.Empty, dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25))
    '                    'CSValveModel = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25) ' 'Valve Model
    '                    If CSValveModel = "" Then
    '                        CSValveModel = ""
    '                    Else
    '                        If CsvModel = "EcoTrol" Then
    '                            CSValveModel = CSValveModel.Substring(0, 2)                 ' Only First 2 Charachters  
    '                        ElseIf CsvModel = "FM Valve" Then
    '                            CSValveModel = CSValveModel.Remove(0, 1)                    ' Remove 
    '                        End If
    '                    End If

    '                    .Rows(NowRecord)(Columnno + 62) = CSValveModel

    '                    If dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 4) Then ' = True Then
    '                        .Rows(NowRecord)(Columnno + 63) = "Yes" 'Attenuation Yes or No
    '                    Else
    '                        .Rows(NowRecord)(Columnno + 63) = "-"
    '                    End If
    '                    .Rows(NowRecord)(Columnno + 64) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 38) ' 'KvCage
    '                    '65 66 67 Blank
    '                    .Rows(NowRecord)(Columnno + 68) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 31) ' 'cmbBonnetType.Text
    '                    .Rows(NowRecord)(Columnno + 69) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 22) ' 'cmbFlowDirection.Text
    '                    .Rows(NowRecord)(Columnno + 70) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 4) ' 'cmbLeakage.Text
    '                    .Rows(NowRecord)(Columnno + 71) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 7) ' ' txtDPShutoff.Text
    '                    .Rows(NowRecord)(Columnno + 72) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 1) ' ' cmbActuatorType.Text
    '                    .Rows(NowRecord)(Columnno + 73) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 9) ' 'txtAirPressure.Text
    '                    '74 Blank
    '                    CSVAirFail = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 3) ' ' cmbAirFailure.Text
    '                    If CSVAirFail = "AIR TO CLOSE" Then
    '                        CSVAirFail = "-O"
    '                    ElseIf CSVAirFail = "AIR TO OPEN" Then
    '                        CSVAirFail = "-C"
    '                    End If

    '                    .Rows(NowRecord)(Columnno + 75) = CSVAirFail
    '                    .Rows(NowRecord)(Columnno + 76) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 2) ' 'cmbBalancing.Text
    '                    .Rows(NowRecord)(Columnno + 77) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 5) ' 'cmbPacking.Text
    '                    .Rows(NowRecord)(Columnno + 78) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 6) ' 'cmbSealing.Text
    '                    .Rows(NowRecord)(Columnno + 79) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 19) ' 'MKSActuator
    '                    '.Rows(NowRecord)(Columnno + 80) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 12) ' ' cmbHandwheel.Text
    '                    tempcode = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 12) - 1
    '                    If Not tempcode < 0 Then
    '                        .Rows(NowRecord)(Columnno + 80) = ds_AccessoriesMat.Tables(20).Rows(tempcode).Item("PARAMETER_VALUE")
    '                    End If

    '                    .Rows(NowRecord)(Columnno + 81) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 7) ' ' cmbAreaunits.Text
    '                    .Rows(NowRecord)(Columnno + 82) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 11) ' 'lblFinalOutletPipe
    '                    .Rows(NowRecord)(Columnno + 83) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 12) ' 'cmbSchedule.Text
    '                    .Rows(NowRecord)(Columnno + 84) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 8) ' ' cmbInletPipeSize.Text
    '                    If dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 8) = True Then
    '                        .Rows(NowRecord)(Columnno + 85) = "-12" ' db Inuslation 
    '                    Else
    '                        .Rows(NowRecord)(Columnno + 85) = ""
    '                    End If
    '                    '86 blank
    '                    .Rows(NowRecord)(Columnno + 87) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 32) '
    '                    .Rows(NowRecord)(Columnno + 88) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 32) '
    '                    '89 blank
    '                    .Rows(NowRecord)(Columnno + 90) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 18) '   'End Connection
    '                    '91 blank
    '                    .Rows(NowRecord)(Columnno + 92) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 6) ' 'frmMaterials.cmbPainitng.Text
    '                    '93 blank
    '                    .Rows(NowRecord)(Columnno + 94) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 11) ' ' Switches
    '                    '95 Blank
    '                    .Rows(NowRecord)(Columnno + 96) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 7) ' ' Positioner
    '                    '97 Blank
    '                    .Rows(NowRecord)(Columnno + 98) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 12) ' ' Volbooster
    '                    '99 Blank
    '                    .Rows(NowRecord)(Columnno + 100) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 9) ' ' AFR
    '                    .Rows(NowRecord)(Columnno + 101) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 8) ' ' SOV
    '                    .Rows(NowRecord)(Columnno + 102) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 10) ' ' ALR
    '                    .Rows(NowRecord)(Columnno + 103) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 15) ' 'Pressure Regulator
    '                    .Rows(NowRecord)(Columnno + 104) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 14) ' 'Volume Tank 
    '                    '105 106 blank 
    '                    .Rows(NowRecord)(Columnno + 107) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 36) '
    '                    .Rows(NowRecord)(Columnno + 108) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 37) '
    '                    .Rows(NowRecord)(Columnno + 109) = "FM"
    '                    '109 to 112
    '                    .Rows(NowRecord)(Columnno + 113) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 30) '
    '                    .Rows(NowRecord)(Columnno + 114) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 30) '
    '                    .Rows(NowRecord)(Columnno + 115) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) '
    '                    .Rows(NowRecord)(Columnno + 116) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) '
    '                    '117 to 134 blank
    '                    .Rows(NowRecord)(Columnno + 135) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) ' 'Gasket
    '                    .Rows(NowRecord)(Columnno + 136) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 9) ' 'End Spring Range
    '                    ' .Rows(NowRecord)(Columnno + 137) = dt_OpenOffice(Database_Rowno)(Database_Columnno + 9)' 'cmbAirPressureUnits.Text
    '                    '138 blank
    '                    .Rows(NowRecord)(Columnno + 138) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 20) ' 'Initial Spring Range MKS
    '                    .Rows(NowRecord)(Columnno + 139) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 21) ' 'Final Spring Range MKS
    '                    .Rows(NowRecord)(Columnno + 140) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 18) ' ' No of Springs 

    '                    If Not dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 2) = "NonPr.Bal" Then
    '                        .Rows(NowRecord)(Columnno + 141) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 39) '  ' Pressure Balance Seat Dia 
    '                        .Rows(NowRecord)(Columnno + 142) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 39) ' ' Pressure Balance Seat Dia 
    '                    Else
    '                        .Rows(NowRecord)(Columnno + 141) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 34) '  ' Seat Dia 
    '                        .Rows(NowRecord)(Columnno + 142) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 34) ' ' Seat Dia 
    '                    End If



    '                    .Rows(NowRecord)(Columnno + 143) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 10) '
    '                    .Rows(NowRecord)(Columnno + 144) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 11) '
    '                    .Rows(NowRecord)(Columnno + 145) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 12) '

    '                    '143 to 145 Blank
    '                    .Rows(NowRecord)(Columnno + 146) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 13) ' ' Travel /Stroke % 1
    '                    .Rows(NowRecord)(Columnno + 147) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 14) ' ' Travel /Stroke % 2
    '                    .Rows(NowRecord)(Columnno + 148) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 15) ' ' Travel /Stroke % 3
    '                    .Rows(NowRecord)(Columnno + 149) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 1) ' ' Noise Case 1
    '                    .Rows(NowRecord)(Columnno + 150) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 2) ' ' Noise Case 2
    '                    .Rows(NowRecord)(Columnno + 151) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 3) ' ' Noise Case 3
    '                    .Rows(NowRecord)(Columnno + 152) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 19) ' ' Flow Severity 1
    '                    .Rows(NowRecord)(Columnno + 153) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 20) ' ' Flow Severity 2
    '                    .Rows(NowRecord)(Columnno + 154) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 21) ' ' Flow Severity 3
    '                    .Rows(NowRecord)(Columnno + 155) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 22) ' ' Inlet Valve Velocity 1
    '                    .Rows(NowRecord)(Columnno + 156) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 23) ' ' Inlet Valve Velocity 2
    '                    .Rows(NowRecord)(Columnno + 157) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 24) ' ' Inlet Valve Velocity 3
    '                    .Rows(NowRecord)(Columnno + 158) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 25) ' ' Outlet Valve Velocity 1
    '                    .Rows(NowRecord)(Columnno + 159) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 26) ' ' Outlet Valve Velocity 2
    '                    .Rows(NowRecord)(Columnno + 160) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 27) ' ' Outlet Valve Velocity 3
    '                    .Rows(NowRecord)(Columnno + 161) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 43) ' ' 'ToutPressureCase1
    '                    .Rows(NowRecord)(Columnno + 162) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 44) ' ' 'ToutPressureCase2
    '                    .Rows(NowRecord)(Columnno + 163) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 45) ' ' 'ToutPressureCase3
    '                    .Rows(NowRecord)(Columnno + 164) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 46) ' ' 'TsatoutPressureCase1
    '                    .Rows(NowRecord)(Columnno + 165) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 47) ' ' 'TsatoutPressureCase2
    '                    .Rows(NowRecord)(Columnno + 166) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 48) ' ' 'TsatoutPressureCase3
    '                    .Rows(NowRecord)(Columnno + 167) = .Rows(NowRecord)(Columnno + 149)  ' Noise is repeat
    '                    .Rows(NowRecord)(Columnno + 168) = .Rows(NowRecord)(Columnno + 150)  ' Noise is repeat
    '                    .Rows(NowRecord)(Columnno + 169) = .Rows(NowRecord)(Columnno + 151)  ' Noise is repeat

    '                    '170 to 173 blank

    '                    '   End With

    '                End With
    '            Next


    '        End With


    '        '//////////////////////////////////////////////////////////////////////////

    '        'Declaration of Variables
    '        Dim filename1 As String = DirectoryName & "\" & FileName & ".csv"
    '        Dim myString As String
    '        Dim bFirstRecord As Boolean = True
    '        Dim myWriter As StreamWriter

    '        If BitConverter.IsLittleEndian = False Then

    '            myWriter = New System.IO.StreamWriter(filename1, False, New System.Text.UTF32Encoding(False, False))
    '        Else
    '            myWriter = New System.IO.StreamWriter(filename1, False, New System.Text.UTF32Encoding(True, False))          '
    '        End If


    '        myString = ""

    '        Try


    '            For Each dr As DataRow In dt_OpenOfficeCSV.Rows

    '                bFirstRecord = True

    '                For Each field As Object In dr.ItemArray

    '                    If Not bFirstRecord Then

    '                        myString = myString & ","


    '                    End If

    '                    myString = myString & field.ToString

    '                    bFirstRecord = False

    '                Next

    '                'New Line to differentiate next row
    '                myString = myString & Environment.NewLine

    '            Next



    '        Catch ex As Exception

    '            MsgBox(ex.Message)


    '        End Try


    '        'Write the String to the Csv File

    '        myWriter.WriteLine(myString)

    '        'Clean up
    '        myWriter.Close()



    '        '///////////////////////////////////////////////////////////////////////////////
    '        'Dim Newfilename As String
    '        'Newfilename = DirectoryName & "\" & FileName & ".csv"
    '        'Dim objODSWrite As ODCWORK.OdsReaderWriter = New ODCWORK.OdsReaderWriter()
    '        'Call objODSWrite.WriteOdsFile(ds_OpenOfficeCSV, Newfilename)

    '        MsgBox(DirectoryName & "\" & FileName & ".csv Created")



    '    Catch ex As Exception
    '        MsgBox("ConvertToCSV :   " & ex.Message, , "Control Valve Sizing")


    '    Finally
    '        Database_Rowno = TempDataRow  ' Restore live Record

    '    End Try

    'End Sub
    Public Sub ConvertToCRM()
        Dim Columnno, NowRecord, tempcode As Integer

        'Dim xlWorkBook As excel.Workbook
        'Dim xlWorkSheet As excel.Worksheet

        Dim Transfer_array(180) As Object
        Dim TempDataRow As Long
        Dim dporP2, MolecularWeight As Boolean
        Dim FluidType, DesignTemperatureUnit, CSValveModel, CSVCharacterstics, CSVAirFail As String
        'Dim DesignTemperature As Single

        Try
            Dim ds_ValueCodes As New DataSet

            For counter As Integer = 0 To 200
                Dim dt As New DataTable
                dt.Columns.Add("DIVISION_ID")
                dt.Columns.Add("MODEL_NO")
                dt.Columns.Add("CATEGORY_CODE")
                dt.Columns.Add("PARAMETER_CODE")
                dt.Columns.Add("PARAMETER_VALUE_CODE")
                ds_ValueCodes.Tables.Add(dt)
            Next

            TempDataRow = Database_Rowno '  Load live record
            If XMLFilename = "" Then
                MsgBox("Please Load Project File")
                Exit Sub
            End If

            'Database_LastRow = dt_OpenOffice.Rows.Count - 1
            'xlWorkBook = APP.Workbooks.Open(XMLFilename)
            'xlWorkSheet = xlWorkBook.Worksheets("Records")

            ds_OpenOfficeCSV = New DataSet()

            dt_OpenOfficeCSV = New DataTable
            ds_OpenOfficeCSV.Tables.Add(dt_OpenOfficeCSV)
            Database_Rowno = 1
            ' HScrollBar_Records.Value = 1
            Database_LastRow = dt_OpenOffice.Rows.Count - 1
            'HScrollBar_Records.Maximum = Database_LastRow

            With dt_OpenOfficeCSV
                For x = 0 To 200 Step 1
                    .Columns.Add()
                Next
            End With
            'Database_Rowno = 1
            'Database_LastRow = dt_OpenOffice.Rows.Count - 1
            ''Add new File 

            '    dt_OpenOfficeCSV.Rows.Add(dt_OpenOfficeCSV.NewRow())
            With dt_OpenOfficeCSV

                'Next
                For NowRecord = 0 To Database_LastRow - 1
                    With dt_OpenOfficeCSV
                        dt_OpenOfficeCSV.Rows.Add(dt_OpenOfficeCSV.NewRow())
                        For counter As Integer = 0 To 200
                            ds_ValueCodes.Tables(counter).Rows.Add(ds_ValueCodes.Tables(counter).NewRow)
                            '    ds_ValueCodes.Tables(counter).Rows(NowRecord)(0) = 14
                            '    ds_ValueCodes.Tables(counter).Rows(NowRecord)(1) = 15

                            '    ds_ValueCodes.Tables(counter).Rows(NowRecord)(2) = 16
                            '    ds_ValueCodes.Tables(counter).Rows(NowRecord)(3) = 17
                            '    ds_ValueCodes.Tables(counter).Rows(NowRecord)(4) = 18

                        Next

                        Database_Rowno = NowRecord + 1
                        'CSV starts from 1 Array starts from 0 

                        .Rows(NowRecord)(Columnno) = dt_OpenOffice(Database_Rowno)(1) '  Sr. No
                        .Rows(NowRecord)(Columnno + 1) = dt_OpenOffice(Database_Rowno)(2) '  Item No 
                        .Rows(NowRecord)(Columnno + 2) = dt_OpenOffice(Database_Rowno)(3) '  Sheet No 
                        .Rows(NowRecord)(Columnno + 3) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 4) '  REV. No

                        .Rows(NowRecord)(Columnno + 4) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 6) '  QTy
                        .Rows(NowRecord)(Columnno + 5) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 5) '  Tag. No
                        .Rows(NowRecord)(Columnno + 6) = "INPUT CASE I II III"


                        FluidType = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 9)

                        .Rows(NowRecord)(Columnno + 7) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 10) 'cmbFluid.Text
                        .Rows(NowRecord)(Columnno + 8) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 13) ' cmbMedium.text
                        .Rows(NowRecord)(Columnno + 9) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 14) ' cmbFlowrate.Text
                        .Rows(NowRecord)(Columnno + 10) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 15)  ' txtFlowrateCase1.Text
                        .Rows(NowRecord)(Columnno + 11) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 16) 'txtFlowrateCase2.Text
                        .Rows(NowRecord)(Columnno + 12) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 17)  'txtFlowrateCase3.Text
                        .Rows(NowRecord)(Columnno + 13) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 22)  ' cmbPressureUnits.Text
                        .Rows(NowRecord)(Columnno + 14) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 23) ' txtInletPressureCase1.Text
                        .Rows(NowRecord)(Columnno + 15) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 24) 'txtInletPressureCase2.Text
                        .Rows(NowRecord)(Columnno + 16) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 25) 'txtInletPressureCase3.Text
                        dporP2 = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 72) 'dp or P2
                        If dporP2 = False Then
                            .Rows(NowRecord)(Columnno + 17) = "P2"  ' "Outlet Pressure"
                            .Rows(NowRecord)(Columnno + 18) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 26) ' txtOutletPressure1.Text
                            .Rows(NowRecord)(Columnno + 19) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 27) 'txtOutletPressureCase2.Text
                            .Rows(NowRecord)(Columnno + 20) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 28) ' txtOutletPressure3.Text
                        Else
                            .Rows(NowRecord)(Columnno + 17) = "dP" ' "Differential Pressure"
                            .Rows(NowRecord)(Columnno + 18) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 29) ' txtPressureDropCase1.Text
                            .Rows(NowRecord)(Columnno + 19) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 30) 'txtPressureDropCase2.Text
                            .Rows(NowRecord)(Columnno + 20) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 31) ' txtPressureDropCase3.Text

                        End If

                        Dim tempunits = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 18)
                        .Rows(NowRecord)(Columnno + 21) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 18) 'cmbTemperatureUnits.Text
                        .Rows(NowRecord)(Columnno + 22) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 19) 'txtInletTemperatureCase1.Text
                        .Rows(NowRecord)(Columnno + 23) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 20) ' txtInletTemperatureCase2.Text
                        .Rows(NowRecord)(Columnno + 24) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 21) ' txtInletTemperatureCase3.Text

                        MolecularWeight = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 32)

                        If MolecularWeight = False Then

                            .Rows(NowRecord)(Columnno + 25) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 33) ' cmbDensityUnits.Text
                            .Rows(NowRecord)(Columnno + 26) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 35) 'Math.Round(FinalDensityCase1)(2)
                            .Rows(NowRecord)(Columnno + 27) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 36) ' Math.Round(FinalDensityCase2)(2)
                            .Rows(NowRecord)(Columnno + 28) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 37) ' Math.Round(FinalDensityCase3)(2)
                        Else
                            .Rows(NowRecord)(Columnno + 25) = "Mol.Weight"
                            .Rows(NowRecord)(Columnno + 26) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
                            .Rows(NowRecord)(Columnno + 27) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
                            .Rows(NowRecord)(Columnno + 28) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 34) ' 'txtMolecularWeight.Text
                        End If


                        If FluidType = "InCompressible" Then
                            .Rows(NowRecord)(Columnno + 29) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 39) ' ' cmbViscosityUnits.Text
                            .Rows(NowRecord)(Columnno + 30) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 40) ' 'Math.Round(FinalViscosityCase1)(2)
                            .Rows(NowRecord)(Columnno + 31) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 41) ' 'Math.Round(FinalViscosityCase2)(2)
                            .Rows(NowRecord)(Columnno + 32) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 42) ' ' Math.Round(FinalViscosityCase3)(2)
                        Else
                            .Rows(NowRecord)(Columnno + 29) = ""
                            .Rows(NowRecord)(Columnno + 30) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 63) ' 'Isentropic Expansion K 1
                            .Rows(NowRecord)(Columnno + 31) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 64) ' 'Isentropic Expansion K 2
                            .Rows(NowRecord)(Columnno + 32) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 65) ' 'Isentropic Expansion K 3
                        End If


                        If FluidType = "InCompressible" Then
                            .Rows(NowRecord)(Columnno + 33) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 53) ' ' cmbVapourPressureUnits.Text
                            .Rows(NowRecord)(Columnno + 34) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 54) ' 'Math.Round(FinalVapourPressureCase1)(2)
                            .Rows(NowRecord)(Columnno + 35) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 55) ' ' Math.Round(FinalVapourPressureCase2)(2)
                            .Rows(NowRecord)(Columnno + 36) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 56) ' 'Math.Round(FinalVapourPressureCase3)(2)
                        Else
                            .Rows(NowRecord)(Columnno + 33) = ""
                            .Rows(NowRecord)(Columnno + 34) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 57) ' 'Compressibility Z 1
                            .Rows(NowRecord)(Columnno + 35) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 58) ' 'Compressibility Z 2
                            .Rows(NowRecord)(Columnno + 36) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 59) ' 'Compressibility Z 3
                        End If
                        If FluidType = "InCompressible" Then
                            .Rows(NowRecord)(Columnno + 37) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 49) ' 'cmbCriticalPressureUnits.Text
                            .Rows(NowRecord)(Columnno + 38) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 50) ' ' Math.Round(FinalCriticalPressureCase1, 2)
                            .Rows(NowRecord)(Columnno + 39) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 51) ' 'Math.Round(FinalCriticalPressureCase2, 2)
                            .Rows(NowRecord)(Columnno + 40) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 52) ' ' Math.Round(FinalCriticalPressureCase3, 2)
                        End If
                        .Rows(NowRecord)(Columnno + 41) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 35) ' ' User Notes 1
                        .Rows(NowRecord)(Columnno + 42) = .Rows(NowRecord)(Columnno + 13) 'cmbPressureUnits.Text
                        .Rows(NowRecord)(Columnno + 43) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 2) ' 'txtDesignPressureInlet.Text
                        DesignTemperatureUnit = .Rows(NowRecord)(Columnno + 21)
                        .Rows(NowRecord)(Columnno + 44) = .Rows(NowRecord)(Columnno + 21) ' cmbTemperatureUnits.Text
                        .Rows(NowRecord)(Columnno + 45) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 33) ' ' txtDesignTemperatureInlet.Text only deg C

                        '47 and 48 blank
                        .Rows(NowRecord)(Columnno + 48) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 1) ' 'cmbMOC.Text
                        .Rows(NowRecord)(Columnno + 49) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) ' 'cmbSuggestedRating.Text

                        Dim CsvModel As String = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 12)

                        If CsvModel = "GLOBE-FORBES" Then
                            '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Body Material
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(30).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(30).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(30).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(30).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(30).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "GLOBE" Then
                            '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Body Material
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(2).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(2).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(2).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(2).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(2).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "3-WAY MIX " Or CsvModel = "3-WAY SEP" Then
                            '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Body Material
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(35).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(35).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(35).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(35).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(35).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "T.E. PRDS Perforated" Or CsvModel = "B.E. PRDS Perforated" Or CsvModel = "B.E. PRDS Parabolic" Then
                            '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Body Material
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(40).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(40).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(40).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(50).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(40).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 50) = ds_AccessoriesMat.Tables(40).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        End If

                        .Rows(NowRecord)(Columnno + 51) = "Globe" ' dt_OpenOffice(Database_Rowno, DataSection6_Output2 + 25)' 'cmbModel.Text

                        Dim CSVSelectedTrim As String
                        CSVSelectedTrim = If(IsDBNull(dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 35)), " ", dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 35)) ' 'selectedTrim'  

                        Dim CsvEcoTrim As String = ""

                        If CsvModel = "FM Valve" Then
                            Select Case CSVSelectedTrim
                                Case "PS1"
                                    CsvEcoTrim = "P1"
                                Case "PS3"
                                    CsvEcoTrim = "P3"
                                Case "PR1"
                                    CsvEcoTrim = "L1"
                                Case "PR2"
                                    CsvEcoTrim = "L2"
                                Case "PR3"
                                    CsvEcoTrim = "L3"
                            End Select
                        Else
                            CsvEcoTrim = CSVSelectedTrim
                        End If

                        .Rows(NowRecord)(Columnno + 52) = CsvEcoTrim     ' Converted to Ecotrol to match configurator

                        If CsvModel = "GLOBE" Then
                            '.Rows(NowRecord)(Columnno + 53) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) ' 'Plug
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) - 1        'Plug
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(3).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(3).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(3).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(3).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(3).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "GLOBE-FORBES" Then
                            '.Rows(NowRecord)(Columnno + 53) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) ' 'Plug
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) - 1        'Plug
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(32).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(32).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(32).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(32).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(32).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "3-WAY MIX " Or CsvModel = "3-WAY SEP" Then
                            '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Plug
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(37).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(37).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(37).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(37).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(37).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "T.E. PRDS Perforated" Or CsvModel = "B.E. PRDS Perforated" Or CsvModel = "B.E. PRDS Parabolic" Then
                            '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Plug
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 2) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(42).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(42).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(42).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(53).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(42).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 53) = ds_AccessoriesMat.Tables(42).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        End If

                        If CsvModel = "GLOBE-FORBES" Then
                            '.Rows(NowRecord)(Columnno + 54) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) ' 'Seat
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) - 1    'Seat
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(33).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(33).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(33).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(33).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(33).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "GLOBE" Then
                            '.Rows(NowRecord)(Columnno + 54) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) ' 'Seat
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) - 1    'Seat
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(4).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(4).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(4).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(4).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(4).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "3-WAY MIX " Or CsvModel = "3-WAY SEP" Then
                            '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Seat
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(38).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(38).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(38).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(38).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(38).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "T.E. PRDS Perforated" Or CsvModel = "B.E. PRDS Perforated" Or CsvModel = "B.E. PRDS Parabolic" Then
                            '.Rows(NowRecord)(Columnno + 50) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 1) ' 'Seat
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 3) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(43).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(43).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(43).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(54).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(43).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 54) = ds_AccessoriesMat.Tables(43).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        End If

                        .Rows(NowRecord)(Columnno + 55) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 20) ' 'Guiding
                        'tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 20) - 1
                        'If Not tempcode < 0 Then
                        '    ds_ValueCodes.Tables(55).Rows(NowRecord)(0) = 14
                        '    ds_ValueCodes.Tables(55).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(22).Rows(tempcode).Item("MODEL_CODE")
                        '    ds_ValueCodes.Tables(55).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(22).Rows(tempcode).Item("CATEGORY_CODE")
                        '    ds_ValueCodes.Tables(55).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(22).Rows(tempcode).Item("PARAMETER_CODE")
                        '    ds_ValueCodes.Tables(55).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(22).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                        '    .Rows(NowRecord)(Columnno + 55) = ds_AccessoriesMat.Tables(22).Rows(tempcode).Item("PARAMETER_VALUE")
                        'End If

                        .Rows(NowRecord)(Columnno + 56) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 24) ' 'cmbKVseries.Text

                        CSVCharacterstics = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 23) ' 'cmbCharacterstics.Text
                        If CSVCharacterstics = "Linear" Or CSVCharacterstics = "Equal %" Then
                            CSVCharacterstics = CSVCharacterstics.Substring(0, 1)
                        End If
                        .Rows(NowRecord)(Columnno + 57) = CSVCharacterstics
                        '59 blank
                        .Rows(NowRecord)(Columnno + 59) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 29) ' ' cmbKVOverride.Text
                        .Rows(NowRecord)(Columnno + 60) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 21) ' 'cmbVelocityRule.Text
                        .Rows(NowRecord)(Columnno + 61) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 26) ' 'final Valve size

                        CSValveModel = If(IsDBNull(dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25)), String.Empty, dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25))
                        'CSValveModel = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 25) ' 'Valve Model
                        If CSValveModel = "" Then
                            CSValveModel = ""
                        Else
                            If CsvModel = "EcoTrol" Then
                                CSValveModel = CSValveModel.Substring(0, 2)                 ' Only First 2 Charachters  
                            ElseIf CsvModel = "FM Valve" Then
                                CSValveModel = CSValveModel.Remove(0, 1)                    ' Remove 
                            End If
                        End If

                        .Rows(NowRecord)(Columnno + 62) = CSValveModel

                        If dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 4) Then ' = True Then
                            .Rows(NowRecord)(Columnno + 63) = "Yes" 'Attenuation Yes or No
                        Else
                            .Rows(NowRecord)(Columnno + 63) = "-"
                        End If
                        .Rows(NowRecord)(Columnno + 64) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 38) ' 'KvCage
                        '65 66 67 Blank
                        .Rows(NowRecord)(Columnno + 68) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 31) ' 'cmbBonnetType.Text
                        .Rows(NowRecord)(Columnno + 69) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 22) ' 'cmbFlowDirection.Text
                        .Rows(NowRecord)(Columnno + 70) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 4) ' 'cmbLeakage.Text
                        .Rows(NowRecord)(Columnno + 71) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 7) ' ' txtDPShutoff.Text
                        .Rows(NowRecord)(Columnno + 72) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 1) ' ' cmbActuatorType.Text
                        .Rows(NowRecord)(Columnno + 73) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 9) ' 'txtAirPressure.Text

                        '74 Blank
                        '    CSVAirFail = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 3) ' ' cmbAirFailure.Text
                        'If CSVAirFail = "AIR TO CLOSE" Then
                        '    CSVAirFail = "-O"
                        '    tempcode = 1
                        'ElseIf CSVAirFail = "AIR TO OPEN" Then
                        '    CSVAirFail = "-C"
                        '    tempcode = 2
                        'End If

                        '.Rows(NowRecord)(Columnno + 75) = CSVAirFail
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 3) - 1
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(75).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(75).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(48).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(75).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(48).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(75).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(48).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(75).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(48).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 75) = ds_AccessoriesMat.Tables(48).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        .Rows(NowRecord)(Columnno + 76) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 2) ' 'cmbBalancing.Text
                        .Rows(NowRecord)(Columnno + 77) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 5) ' 'cmbPacking.Text
                        .Rows(NowRecord)(Columnno + 78) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 6) ' 'cmbSealing.Text
                        .Rows(NowRecord)(Columnno + 79) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 19) ' 'MKSActuator
                        '.Rows(NowRecord)(Columnno + 80) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 12) ' ' cmbHandwheel.Text
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 12) - 1
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(80).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(80).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(20).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(80).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(20).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(80).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(20).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(80).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(20).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 80) = ds_AccessoriesMat.Tables(20).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        .Rows(NowRecord)(Columnno + 81) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 7) ' ' cmbAreaunits.Text
                        .Rows(NowRecord)(Columnno + 82) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 11) ' 'lblFinalOutletPipe
                        .Rows(NowRecord)(Columnno + 83) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 12) ' 'cmbSchedule.Text
                        .Rows(NowRecord)(Columnno + 84) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 8) ' ' cmbInletPipeSize.Text
                        If dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 8) = True Then
                            .Rows(NowRecord)(Columnno + 85) = "-12" ' db Inuslation 
                        Else
                            .Rows(NowRecord)(Columnno + 85) = ""
                        End If
                        '86 blank
                        .Rows(NowRecord)(Columnno + 87) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 32) '
                        .Rows(NowRecord)(Columnno + 88) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 32) '
                        '89 blank
                        '.Rows(NowRecord)(Columnno + 90) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 18) '   'Certification written end-connection
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 18) - 1
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(90).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(90).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(19).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(90).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(19).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(90).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(19).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(90).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(19).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 90) = ds_AccessoriesMat.Tables(19).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '91 blank
                        '.Rows(NowRecord)(Columnno + 92) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 6) ' 'frmMaterials.cmbPainitng.Text
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 6) - 1
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(92).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(92).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(7).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(92).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(7).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(92).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(7).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(92).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(7).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 92) = ds_AccessoriesMat.Tables(7).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '93 blank

                        '   .Rows(NowRecord)(Columnno + 94) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 11) ' ' Switches
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 11) - 1  ' ' Switches
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(94).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(94).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(12).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(94).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(12).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(94).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(12).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(94).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(12).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 94) = ds_AccessoriesMat.Tables(12).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '95 Blank
                        ' .Rows(NowRecord)(Columnno + 96) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 7) ' ' Positioner
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 7) - 1  ' ' Positioner
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(96).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(96).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(8).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(96).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(8).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(96).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(8).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(96).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(8).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 96) = ds_AccessoriesMat.Tables(8).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        '97 Blank
                        ' .Rows(NowRecord)(Columnno + 98) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 12) ' ' Volbooster
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 12) - 1  ' ' Volbooster
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(98).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(98).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(13).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(98).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(13).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(98).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(13).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(98).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(13).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 98) = ds_AccessoriesMat.Tables(13).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If
                        '99 Blank
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 9) - 1  ' ' AFR
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(100).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(100).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(10).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(100).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(10).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(100).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(10).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(100).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(10).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 100) = ds_AccessoriesMat.Tables(10).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        ' Message += "AFR Model: " + ds.Tables(10).Rows(AFR).Item("Sr_No").ToString + " " + ds.Tables(10).Rows(AFR).Item("MODEL_CODE") + " " + ds.Tables(10).Rows(AFR).Item("CATEGORY_CODE") + " " + ds.Tables(10).Rows(AFR).Item("PARAMETER_CODE") + " " + ds.Tables(10).Rows(AFR).Item("PARAMETER_VALUE_CODE") + " " + ds.Tables(10).Rows(AFR).Item("PARAMETER_VALUE") + Environment.NewLine

                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 8) - 1 ' ' SOV
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(101).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(101).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(9).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(101).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(9).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(101).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(9).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(101).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(9).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 101) = ds_AccessoriesMat.Tables(9).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If


                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 10) - 1 ' ' ALR
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(102).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(102).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(11).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(102).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(11).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(102).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(11).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(102).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(11).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 102) = ds_AccessoriesMat.Tables(11).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If


                        '.Rows(NowRecord)(Columnno + 103) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 15) ' 'Pressure Regulator
                        tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 15) - 1   'Pressure Regulator/Robotor
                        If Not tempcode < 0 Then
                            ds_ValueCodes.Tables(103).Rows(NowRecord)(0) = 14
                            ds_ValueCodes.Tables(103).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(16).Rows(tempcode).Item("MODEL_CODE")
                            ds_ValueCodes.Tables(103).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(16).Rows(tempcode).Item("CATEGORY_CODE")
                            ds_ValueCodes.Tables(103).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(16).Rows(tempcode).Item("PARAMETER_CODE")
                            ds_ValueCodes.Tables(103).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(16).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                            .Rows(NowRecord)(Columnno + 103) = ds_AccessoriesMat.Tables(16).Rows(tempcode).Item("PARAMETER_VALUE")
                        End If

                        .Rows(NowRecord)(Columnno + 104) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 14) ' 'Volume Tank 
                        '105 106 blank 
                        .Rows(NowRecord)(Columnno + 107) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 36) '
                        .Rows(NowRecord)(Columnno + 108) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 37) '
                        .Rows(NowRecord)(Columnno + 109) = "FM"
                        '109 to 112
                        .Rows(NowRecord)(Columnno + 113) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 30) '
                        .Rows(NowRecord)(Columnno + 114) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 30) '
                        .Rows(NowRecord)(Columnno + 115) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) '
                        .Rows(NowRecord)(Columnno + 116) = dt_OpenOffice(Database_Rowno)(DataSection2_MOC + 6) '
                        '117 to 134 blank

                        'cmbModel.Items.Add("GLOBE-FORBES")
                        'cmbModel.Items.Add("GLOBE")
                        'cmbModel.Items.Add("3-WAY MIX ")
                        'cmbModel.Items.Add("3-WAY SEP")
                        'cmbModel.Items.Add("T.E. PRDS Perforated")
                        'cmbModel.Items.Add("B.E. PRDS Perforated")
                        'cmbModel.Items.Add("B.E. PRDS Parabolic")

                        If CsvModel = "GLOBE-FORBES" Then
                            '.Rows(NowRecord)(Columnno + 135) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) ' 'Gasket
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(34).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(34).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(34).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(34).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 135) = ds_AccessoriesMat.Tables(34).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "GLOBE" Then
                            '.Rows(NowRecord)(Columnno + 135) = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) ' 'Gasket
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(6).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(6).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(6).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(6).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 135) = ds_AccessoriesMat.Tables(6).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "3-WAY MIX " Or CsvModel = "3-WAY SEP" Then
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(39).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(39).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(39).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(39).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 135) = ds_AccessoriesMat.Tables(39).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        ElseIf CsvModel = "T.E. PRDS Perforated" Or CsvModel = "B.E. PRDS Perforated" Or CsvModel = "B.E. PRDS Parabolic" Then
                            tempcode = dt_OpenOffice(Database_Rowno)(DataSection4_Materials + 5) - 1
                            If Not tempcode < 0 Then
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(0) = 14
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(1) = ds_AccessoriesMat.Tables(44).Rows(tempcode).Item("MODEL_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(2) = ds_AccessoriesMat.Tables(44).Rows(tempcode).Item("CATEGORY_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(3) = ds_AccessoriesMat.Tables(44).Rows(tempcode).Item("PARAMETER_CODE")
                                ds_ValueCodes.Tables(135).Rows(NowRecord)(4) = ds_AccessoriesMat.Tables(44).Rows(tempcode).Item("PARAMETER_VALUE_CODE")
                                .Rows(NowRecord)(Columnno + 135) = ds_AccessoriesMat.Tables(44).Rows(tempcode).Item("PARAMETER_VALUE")
                            End If
                        End If

                        .Rows(NowRecord)(Columnno + 136) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 9) ' 'End Spring Range
                        ' .Rows(NowRecord)(Columnno + 137) = dt_OpenOffice(Database_Rowno)(Database_Columnno + 9)' 'cmbAirPressureUnits.Text
                        '138 blank
                        .Rows(NowRecord)(Columnno + 138) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 20) ' 'Initial Spring Range MKS
                        .Rows(NowRecord)(Columnno + 139) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 21) ' 'Final Spring Range MKS
                        .Rows(NowRecord)(Columnno + 140) = dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 18) ' ' No of Springs 

                        If Not dt_OpenOffice(Database_Rowno)(DataSection3_Actuator + 2) = "NonPr.Bal" Then
                            .Rows(NowRecord)(Columnno + 141) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 39) '  ' Pressure Balance Seat Dia 
                            .Rows(NowRecord)(Columnno + 142) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 39) ' ' Pressure Balance Seat Dia 
                        Else
                            .Rows(NowRecord)(Columnno + 141) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 34) '  ' Seat Dia 
                            .Rows(NowRecord)(Columnno + 142) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 34) ' ' Seat Dia 
                        End If

                        .Rows(NowRecord)(Columnno + 143) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 10) '
                        .Rows(NowRecord)(Columnno + 144) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 11) '
                        .Rows(NowRecord)(Columnno + 145) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 12) '

                        '143 to 145 Blank
                        .Rows(NowRecord)(Columnno + 146) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 13) ' ' Travel /Stroke % 1
                        .Rows(NowRecord)(Columnno + 147) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 14) ' ' Travel /Stroke % 2
                        .Rows(NowRecord)(Columnno + 148) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 15) ' ' Travel /Stroke % 3
                        .Rows(NowRecord)(Columnno + 149) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 1) ' ' Noise Case 1
                        .Rows(NowRecord)(Columnno + 150) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 2) ' ' Noise Case 2
                        .Rows(NowRecord)(Columnno + 151) = dt_OpenOffice(Database_Rowno)(DataSection6_Output2 + 3) ' ' Noise Case 3
                        .Rows(NowRecord)(Columnno + 152) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 19) ' ' Flow Severity 1
                        .Rows(NowRecord)(Columnno + 153) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 20) ' ' Flow Severity 2
                        .Rows(NowRecord)(Columnno + 154) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 21) ' ' Flow Severity 3
                        .Rows(NowRecord)(Columnno + 155) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 22) ' ' Inlet Valve Velocity 1
                        .Rows(NowRecord)(Columnno + 156) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 23) ' ' Inlet Valve Velocity 2
                        .Rows(NowRecord)(Columnno + 157) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 24) ' ' Inlet Valve Velocity 3
                        .Rows(NowRecord)(Columnno + 158) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 25) ' ' Outlet Valve Velocity 1
                        .Rows(NowRecord)(Columnno + 159) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 26) ' ' Outlet Valve Velocity 2
                        .Rows(NowRecord)(Columnno + 160) = dt_OpenOffice(Database_Rowno)(DataSection5_Output1 + 27) ' ' Outlet Valve Velocity 3
                        .Rows(NowRecord)(Columnno + 161) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 43) ' ' 'ToutPressureCase1
                        .Rows(NowRecord)(Columnno + 162) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 44) ' ' 'ToutPressureCase2
                        .Rows(NowRecord)(Columnno + 163) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 45) ' ' 'ToutPressureCase3
                        .Rows(NowRecord)(Columnno + 164) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 46) ' ' 'TsatoutPressureCase1
                        .Rows(NowRecord)(Columnno + 165) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 47) ' ' 'TsatoutPressureCase2
                        .Rows(NowRecord)(Columnno + 166) = dt_OpenOffice(Database_Rowno)(DataSection1_Field + 48) ' ' 'TsatoutPressureCase3
                        .Rows(NowRecord)(Columnno + 167) = .Rows(NowRecord)(Columnno + 149)  ' Noise is repeat
                        .Rows(NowRecord)(Columnno + 168) = .Rows(NowRecord)(Columnno + 150)  ' Noise is repeat
                        .Rows(NowRecord)(Columnno + 169) = .Rows(NowRecord)(Columnno + 151)  ' Noise is repeat
                        '170 to 173 blank

                        '   End With

                    End With
                Next


            End With

            '///////////////////////////////////////////////////

            ' CREATE TABLE "FMSIZE"."XXFMOFFER_SIZING_DATA" 
            '  (	"OFFER_NO" VARCHAR2(10 BYTE), 
            '"ITEM_SRL_NO" NUMBER(5,0), 
            '"FIELD_SEQ_NO" NUMBER, 
            '"FIELD_VALUE" VARCHAR2(2000 BYTE), 
            '"CREATION_DATE" DATE, 
            '"CREATED_BY" NUMBER, 
            '           PRIMARY KEY("OFFER_NO", "ITEM_SRL_NO", "FIELD_SEQ_NO")
            ' USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
            ' STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
            ' PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
            ' TABLESPACE "USERS"  ENABLE
            '  ) SEGMENT CREATION IMMEDIATE 
            ' PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
            ' STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
            ' PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
            ' TABLESPACE "USERS" ;
            ''/////////////////////////////////////////////////////////////////////////////////


            'Connectio with Oracle database
            Dim cmd As OracleCommand = New OracleCommand()
            Dim oradb As String = "DATA SOURCE=sizing.forbesmarshall.com:1521/XE;PERSIST SECURITY INFO=True;USER ID=FMSIZE;Password=fmsize@456;"
            Dim conn As New OracleConnection(oradb)
            conn.Open()

            '    MsgBox("Connected")

            '   Dim _Offer_NO As Byte = 1
            Dim _Serial_no As Byte = 1


            '//////////////////////////////////////////////////////////////////////////

            'Declaration of Variables
            'Dim filename1 As String = DirectoryName & "\" & FileName & ".csv"
            Dim myString As String
            'Dim bFirstRecord As Boolean = True
            'Dim myWriter As StreamWriter
            Dim _Offer_NO As Byte
            Dim _EnggName As Integer
            'If BitConverter.IsLittleEndian = False Then

            '    myWriter = New System.IO.StreamWriter(filename1, False, New System.Text.UTF32Encoding(False, False))
            'Else
            '    myWriter = New System.IO.StreamWriter(filename1, False, New System.Text.UTF32Encoding(True, False))          '
            'End If

            cmd.CommandType = CommandType.Text
            cmd.Connection = conn

            If Not frmCustomerDetails.txtOffferNo.Text = "" Then _Offer_NO = CByte(frmCustomerDetails.txtOffferNo.Text) Else MsgBox("ISSUE with Offer No")
            _EnggName = 3480 'frmCustomerDetails.txtSalesEngg.Text
            myString = "Delete from XXFMOFFER_SIZING_DATA WHERE OFFER_NO = (" & _Offer_NO & ")"
            cmd.CommandText = myString
            Dim Rowsaffected As Integer = cmd.ExecuteNonQuery()
            ToolTip1.Show("The no.of rows effected by update query are " & Rowsaffected.ToString, txtOfferNoMain, 2)
            ToolTip1.Show("The no.of rows effected by update query are " & Rowsaffected.ToString, txtOfferNoMain, 2000)

            myString = "Select *  from XXFMOFFER_SIZING_DATA WHERE OFFER_NO = (" & _Offer_NO & ")"
            cmd.CommandText = myString

            Using READER As OracleDataReader = cmd.ExecuteReader
                If READER.HasRows Then
                    ToolTip2.Show("Records found", txtOfferNoMain, 2)
                    ToolTip2.Show("Records found", txtOfferNoMain, 1000)
                Else
                    ToolTip2.Show("No records", txtOfferNoMain, 2)
                    ToolTip2.Show("No records", txtOfferNoMain, 1000)
                End If
            End Using
            'dt.Columns.Add("Division_ID")
            'dt.Columns.Add("MODEL_NO")
            'dt.Columns.Add("CATEGORY_CODE")
            'dt.Columns.Add("PARAMETER_CODE")
            '    dt.Columns.Add("PARAMETER_VALUE_CODE"
            Try
                'bFirstRecord = True
                Dim SeqNo As Byte = 1
                For Each dr As DataRow In dt_OpenOfficeCSV.Rows
                    For Each field As Object In dr.ItemArray
                        Dim mysubstring As String = ",'" & ds_ValueCodes.Tables(SeqNo - 1).Rows(_Serial_no - 1)(0).ToString & "','" & ds_ValueCodes.Tables(SeqNo - 1).Rows(_Serial_no - 1)(1).ToString & "','" & ds_ValueCodes.Tables(SeqNo - 1).Rows(_Serial_no - 1)(2).ToString & "','" & ds_ValueCodes.Tables(SeqNo - 1).Rows(_Serial_no - 1)(3).ToString & "','" & ds_ValueCodes.Tables(SeqNo - 1).Rows(_Serial_no - 1)(4).ToString & "'"
                        ' myString = "INSERT INTO XXFMOFFER_SIZING_DATA (OFFER_NO,ITEM_SRL_NO,FIELD_SEQ_NO,FIELD_VALUE,CREATION_DATE,CREATED_BY) VALUES (" & _Offer_NO.ToString & "," & _Serial_no.ToString & "," & SeqNo.ToString & ",'" & field.ToString & "', To_DATE('" & Now.Date & "', 'DD/MM/YYYY')  ,'" & _EnggName.ToString & "')"
                        myString = "INSERT INTO XXFMOFFER_SIZING_DATA (OFFER_NO,ITEM_SRL_NO,FIELD_SEQ_NO,FIELD_VALUE,CREATION_DATE,CREATED_BY,DIVISION_ID,MODEL_NO, CATEGORY_CODE,PARAMETER_CODE,PARAMETER_VALUE_CODE) VALUES (" & _Offer_NO.ToString & "," & _Serial_no.ToString & "," & SeqNo.ToString & ",'" & field.ToString & "', To_DATE('" & Now.Date & "', 'DD/MM/YYYY')  ,'" & _EnggName.ToString & "'" & mysubstring & " )"
                        'MessageBox.Show(myString)
                        cmd.CommandText = myString
                        cmd.ExecuteNonQuery()

                        SeqNo = SeqNo + 1

                    Next
                    SeqNo = 1
                    _Serial_no = _Serial_no + 1
                Next


                conn.Close()
                conn.Dispose()

            Catch ex As Exception

                MsgBox(ex.Message)


            End Try


            'Write the String to the Csv File

            'myWriter.WriteLine(myString)

            ''Clean up
            'myWriter.Close()



            '///////////////////////////////////////////////////////////////////////////////
            'Dim Newfilename As String
            'Newfilename = DirectoryName & "\" & FileName & ".csv"
            'Dim objODSWrite As ODCWORK.OdsReaderWriter = New ODCWORK.OdsReaderWriter()
            'Call objODSWrite.WriteOdsFile(ds_OpenOfficeCSV, Newfilename)

            ' MsgBox(DirectoryName & "\" & FileName & ".csv Created")
            ToolTip1.Show("Server updated with all records in " & DirectoryName & "\" & FileName & " file.", txtOfferNoMain, 2)
            ToolTip1.Show("Server updated with all records in " & DirectoryName & "\" & FileName & " file.", txtOfferNoMain, 2000)

        Catch ex As Exception
            MsgBox("ConvertToCRM :   " & ex.Message, , "Control Valve Sizing")


        Finally
            Database_Rowno = TempDataRow  ' Restore live Record

        End Try

    End Sub

        Private Sub HScrollBar_Records_Scroll(sender As Object, e As ScrollEventArgs) Handles HScrollBar_Records.Scroll
        ' txtJumpToRecord.Text = HScrollBar_Records.Value


        Try
            If Not e.Type = ScrollEventType.EndScroll Then
                If XMLFilename = "" Then
                    MsgBox("Please select file name to save from FILE MENU", , " - Alert!")
                    Exit Sub
                End If

                Call SaveXLS(XMLFilename)       ' Write data on the selected filename.

                ChangingUnitsType = True
                SameFileRecords = True     '  To avoid resetting customer details.

                SameFileRecords = False
                Select Case e.Type
                    Case ScrollEventType.ThumbTrack
                        Database_Rowno = HScrollBar_Records.Value

                        If Database_Rowno < 1 Then
                            Database_Rowno = 1
                        ElseIf Database_Rowno > dt_OpenOffice.Rows.Count - 1 Then
                            dt_OpenOffice.Rows.Add(dt_OpenOffice.NewRow())
                        End If
                        lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                        txtJumpToRecord.Text = Database_Rowno
                        Call Reset_All()
                        ChangingUnitsType = False
                        Call ReadXLS(XMLFilename)
                    Case ScrollEventType.ThumbPosition

                        Database_Rowno = HScrollBar_Records.Value

                        If Database_Rowno < 1 Then
                            Database_Rowno = 1
                        ElseIf Database_Rowno > dt_OpenOffice.Rows.Count - 1 Then
                            dt_OpenOffice.Rows.Add(dt_OpenOffice.NewRow())
                        End If
                        lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                        txtJumpToRecord.Text = Database_Rowno
                        Call Reset_All()
                        ChangingUnitsType = False
                        Call ReadXLS(XMLFilename)
                    Case ScrollEventType.SmallDecrement
                        HScrollBar_Records.Enabled = False
                        Database_Rowno = Database_Rowno - 1
                        Database_LastRow = dt_OpenOffice.Rows.Count - 1
                        If Database_Rowno < 1 Then
                            Database_Rowno = 1
                        End If
                        lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                        txtJumpToRecord.Text = Database_Rowno
                        Call Reset_All()
                        ChangingUnitsType = False
                        Call ReadXLS(XMLFilename)
                        HScrollBar_Records.Enabled = True
                    Case ScrollEventType.LargeDecrement
                        ToolTip1.Show("LARGE DECREMENT ", HScrollBar_Records, 1000)
                    Case ScrollEventType.LargeIncrement
                        ToolTip1.Show("LARGE INCREMENT ", HScrollBar_Records, 1000)
                    Case ScrollEventType.SmallIncrement
                        HScrollBar_Records.Enabled = False
                        Call Reset_All()
                        ChangingUnitsType = False
                        Database_Rowno = Database_Rowno + 1
                        Database_LastRow = dt_OpenOffice.Rows.Count - 1
                        lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                        txtJumpToRecord.Text = Database_Rowno
                        If Database_Rowno > dt_OpenOffice.Rows.Count - 1 Then
                            dt_OpenOffice.Rows.Add(dt_OpenOffice.NewRow())
                        Else

                            Call ReadXLS(XMLFilename)
                        End If
                        HScrollBar_Records.Enabled = True
                End Select







                'Database_Rowno = HScrollBar_Records.Value
                'Database_LastRow = dt_OpenOffice.Rows.Count - 1
                'lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                'txtJumpToRecord.Text = Database_Rowno
                'If Database_Rowno < 1 Then
                '    Database_Rowno = 1
                'End If
                'If Database_Rowno > dt_OpenOffice.Rows.Count - 1 Then
                '    dt_OpenOffice.Rows.Add(dt_OpenOffice.NewRow())

                'Else
                '    Call ReadXLS(XMLFilename)
                'End If


                lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow

                Threading.Thread.Sleep(500)
            End If

        Catch ex As Exception
            MsgBox("HScrollBar_Records_Scroll :   " & ex.Message, , "Control Valve Sizing")
        End Try
    End Sub

    Public Sub btnDatabaseNext_Click(sender As Object, e As EventArgs)
        Try
            If XMLFilename = "" Then
                MsgBox("Please select file name to save from FILE MENU", , " - Alert!")
                Exit Sub
            End If
            ' If MsgBox("Do you want to save the record?", MsgBoxStyle.YesNo, " - Alert!") = MsgBoxResult.Yes Then
            Call SaveXLS(XMLFilename)       ' Write data on the selected filename.

            ChangingUnitsType = True

            Call Reset_All()
            ChangingUnitsType = False
            Database_Rowno = Database_Rowno + 1
            Database_LastRow = dt_OpenOffice.Rows.Count - 1
            lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
            txtJumpToRecord.Text = Database_Rowno
            If Database_Rowno > dt_OpenOffice.Rows.Count - 1 Then
                dt_OpenOffice.Rows.Add(dt_OpenOffice.NewRow())

            Else
                Call ReadXLS(XMLFilename)
            End If

        Catch ex As Exception
        End Try
    End Sub

    Public Sub btnDatabasePrevious_Click(sender As Object, e As EventArgs)
        Try
            If XMLFilename = "" Then
                MsgBox("Please select file name to save from FILE MENU", , "ALERT!")
                Exit Sub
            End If

            Call SaveXLS(XMLFilename)       ' Write data on the selected filename.
            Call Reset_All()
            Database_Rowno = Database_Rowno - 1
            Database_LastRow = dt_OpenOffice.Rows.Count - 1
            If Database_Rowno < 1 Then
                Database_Rowno = 1
            End If
            lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
            txtJumpToRecord.Text = Database_Rowno
            Call ReadXLS(XMLFilename)
        Catch ex As Exception
        End Try

    End Sub


    Private Sub CustomerDetailsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CustomerDetailsToolStripMenuItem.Click
        frmCustomerDetails.ShowDialog()
    End Sub


    Private Sub UserNotesToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles UserNotesToolStripMenuItem.Click
        frmUserNotes.ShowDialog()
    End Sub


    Private Sub releaseObject(ByVal obj As Object)
        Try
            System.Runtime.InteropServices.Marshal.FinalReleaseComObject(obj)
            obj = Nothing
        Catch ex As Exception
            obj = Nothing
        Finally
            GC.Collect()
        End Try
    End Sub






    Private Sub txtJumpToRecord_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtJumpToRecord.KeyPress
        Try
            If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And CType(sender, TextBox).Text.ToCharArray().Count(Function(c) c = ".") > 0) Then
                MsgBox("Please enter integers only")
                e.Handled = True

            End If
        Catch ex As Exception
            MsgBox("txtJumpToRecord_KeyPress:  " & ex.Message)
        End Try
    End Sub



    Private Sub txtJumpToRecord_Validated(sender As Object, e As EventArgs) Handles txtJumpToRecord.Validated
        Dim tempRecord As Integer
        Try
            tempRecord = txtJumpToRecord.Text
            Database_LastRow = dt_OpenOffice.Columns.Count - 1

            If txtJumpToRecord.Text < 1 Then
                MsgBox("Incorrect Record Number.", , " - Alert!")
                Exit Sub
            End If
            If txtJumpToRecord.Text >= Database_LastRow Then
                MsgBox("Record Number Greater than available.", , " - Alert!")
                Exit Sub
            End If
            If XMLFilename = "" Then
                MsgBox("Please select file name to save from FILE MENU", , " - Alert!")
                Exit Sub
            End If

            Call Reset_All()
            txtJumpToRecord.Text = tempRecord
            Database_Rowno = tempRecord
            HScrollBar_Records.Value = Database_Rowno

            lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow

            Call ReadXLS(XMLFilename)

            Call SaveXLS(XMLFilename)
        Catch ex As Exception
            MsgBox("txtJumpToRecord_Validated:  " & ex.Message)
        End Try
    End Sub


    Function CheckForFileOpen(ByRef sName As String) As Boolean
        Dim fs As FileStream
        CheckForFileOpen = False
        Try
            fs = File.Open(sName, FileMode.Open, FileAccess.Read, FileShare.None)
        Catch ex As Exception
            CheckForFileOpen = True
        Finally
            If Not IsNothing(fs) Then : fs.Close() : End If
        End Try

        Return CheckForFileOpen
    End Function



    Private Sub txtX_Case1_Validated(sender As Object, e As EventArgs) Handles txtX_Case1.Validated, txtX_Case2.Validated, txtX_Case3.Validated
        If Not cmbFluid.Text = "Steam" Then
            Call AllCalculations()
        End If
    End Sub



    Private Sub txtSuggActuator_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtSuggActuator.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbVelocityRule_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbVelocityRule.SelectionChangeCommitted
        Call FinalKV()
        Call RECalculate()
    End Sub


    Private Sub btnNewRecord_Click(sender As Object, e As EventArgs)
        'Dim NewxlWorkbook As excel.Workbook
        'Dim NewxlWorksheet As excel.Worksheet
        Try
            Database_LastRow = dt_OpenOffice.Rows.Count - 1
            HScrollBar_Records.Maximum = Database_LastRow
            If MsgBox("DO you want to create a new record?", MsgBoxStyle.YesNoCancel, "Alert!") = MsgBoxResult.Yes Then
                If Not XMLFilename = "" Then
                    Call SaveXLS(XMLFilename)


                    'NewxlWorkbook = APP.Workbooks.Open(XMLFilename)
                    'NewxlWorksheet = NewxlWorkbook.Worksheets("Records")
                    'With NewxlWorksheet
                    '    Database_LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                    'End With
                Else
                    Database_Rowno = 0
                    Database_LastRow = 0
                    HScrollBar_Records.Minimum = 0
                    HScrollBar_Records.Maximum = 0
                    ds_OpenOffice = New DataSet
                    dt_OpenOffice = New DataTable

                    dt_OpenOffice = ds_OpenOffice.Tables.Add("Records")
                    Call DatabaseFileHeader(XMLFilename)

                    'dttemp = New DataTable
                    'dttemp = ds_OpenOffice.Tables.Add(Database_Rowno)
                    'With dttemp

                    '    For x = 0 To 30 Step 1
                    '        .Columns.Add()
                    '    Next

                    '    For x = 0 To 64 Step 1
                    '        .Rows.Add(dttemp.NewRow())
                    '    Next
                    'End With
                End If

                Database_Rowno = Database_Rowno + 1
                'Database_LastRow = Database_LastRow + 1

                lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                txtJumpToRecord.Text = Database_LastRow
                Resetall = True
                cmbFluidType.SelectedIndex = -1
                cmbFluidType.Text = "--Select--"
                Call Reset_All()
                Resetall = False
            End If
        Catch ex As Exception
            MsgBox("btnNewRecord:  " & ex.Message)
        End Try
    End Sub

    Private Sub btnCopyRecord_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub lblSuggestedRating_TextChanged(sender As Object, e As EventArgs) Handles lblSuggestedRating.TextChanged
        cmbSuggestedRating.BackColor = Color.Gold
    End Sub

    Private Sub lblSuggPipeSize_TextChanged(sender As Object, e As EventArgs) Handles lblSuggPipeSize.TextChanged
        cmbPipeDia.BackColor = Color.Gold
        cmbInletPipeSize.BackColor = Color.Gold
    End Sub

    Private Sub txtSuggestedKV_TextChanged(sender As Object, e As EventArgs) Handles txtSuggestedKV.TextChanged

        cmbKVOverride.BackColor = Color.Gold
        cmbSelectedTrim.BackColor = Color.Gold

    End Sub

    Private Sub txtSuggestedValveSize_TextChanged(sender As Object, e As EventArgs) Handles txtSuggestedValveSize.TextChanged
        cmbValveSizeOverride.BackColor = Color.Gold
    End Sub

    Private Sub txtSuggActuator_TextChanged(sender As Object, e As EventArgs) Handles txtSuggActuator.TextChanged
        cmbSelectActuator.BackColor = Color.Gold
    End Sub

    '' MULTISTAGE CODE


    Private Sub chkBaffleCase1_CheckedChanged(sender As Object, e As EventArgs) Handles chkBaffleCase1.CheckedChanged
        Try
            If chkBaffleCase1.Checked = True Then
                txtBaffleKVCase1.Visible = True
                ToolTip3.Show("Check TIS before entering Kv/Cv values!", txtBaffleKVCase1, 20)
                ToolTip3.Show("Check TIS before entering Kv/Cv values!", txtBaffleKVCase1, 4000)
            Else
                txtBaffleKVCase1.Visible = False
                txtBaffleKVCase1.Text = ""
                chkBaffleCase2.Checked = False
                txtBaffleKVCase2.Visible = False
                txtBaffleKVCase2.Text = ""
                chkBaffleCase3.Checked = False
                txtBaffleKVCase3.Visible = False
                txtBaffleKVCase3.Text = ""
                BaffleKVCase1 = 0
                BaffleKVCase2 = 0
                BaffleKVCase3 = 0
                Call CalculateNoise()
                Call FindFP()
            End If
        Catch ex As Exception
            MsgBox("chkBaffleCase1_CheckedChanged:  " & ex.Message)
        End Try
    End Sub

    Private Sub chkBaffleCase2_CheckedChanged(sender As Object, e As EventArgs) Handles chkBaffleCase2.CheckedChanged
        Try
            If chkBaffleCase1.Checked = True And Not txtBaffleKVCase1.Text = "" Then
                If chkBaffleCase2.Checked = True Then
                    txtBaffleKVCase2.Visible = True
                    ToolTip3.Show("Check TIS before entering Kv/Cv values!", txtBaffleKVCase2, 20)
                    ToolTip3.Show("Check TIS before entering Kv/Cv values!", txtBaffleKVCase2, 4000)
                Else
                    txtBaffleKVCase2.Visible = False
                    chkBaffleCase3.Checked = False
                    txtBaffleKVCase3.Visible = False
                    txtBaffleKVCase3.Text = ""
                    txtBaffleKVCase2.Text = ""
                    BaffleKVCase2 = 0
                    BaffleKVCase3 = 0
                    Call CalculateNoise()
                    Call FindFP()
                End If
            Else
                chkBaffleCase2.Checked = False
                txtBaffleKVCase2.Visible = False
                BaffleKVCase2 = 0
                txtBaffleKVCase2.Text = ""
            End If
        Catch ex As Exception
            MsgBox("chkBaffleCase2_CheckedChanged: " & ex.Message)
        End Try
    End Sub

    Private Sub chkBaffleCase3_CheckedChanged(sender As Object, e As EventArgs) Handles chkBaffleCase3.CheckedChanged
        Try
            If chkBaffleCase1.Checked = True And Not txtBaffleKVCase1.Text = "" And chkBaffleCase2.Checked = True And Not txtBaffleKVCase2.Text = "" Then
                If chkBaffleCase3.Checked = True Then
                    txtBaffleKVCase3.Visible = True
                    ToolTip3.Show("Check TIS before entering Kv/Cv values!", txtBaffleKVCase3, 20)
                    ToolTip3.Show("Check TIS before entering Kv/Cv values!", txtBaffleKVCase3, 4000)
                Else
                    txtBaffleKVCase3.Visible = False
                    BaffleKVCase3 = 0
                    txtBaffleKVCase3.Text = ""
                    Call CalculateNoise()
                    Call FindFP()
                End If
            Else
                chkBaffleCase3.Checked = False
                txtBaffleKVCase3.Visible = False
                txtBaffleKVCase3.Text = ""
                BaffleKVCase3 = 0

            End If
        Catch ex As Exception
            MsgBox("chkBaffleCase3_CheckedChanged: " & ex.Message)
        End Try
    End Sub



    Private Sub txtBaffleKVCase1_Validated(sender As Object, e As EventArgs) Handles txtBaffleKVCase1.Validated
        Try
            If Not txtBaffleKVCase1.Text = "" Then
                BaffleKVCase1 = CSng(txtBaffleKVCase1.Text)
                If cmbUnitsType.SelectedIndex = 1 Then              'FPS
                    BaffleKVCase1 = BaffleKVCase1 / 1.17
                End If
                Call CalculateNoise()
            Else
                MsgBox("Please enter data!", , "Alert!")
                txtBaffleKVCase1.Focus()
            End If
        Catch ex As Exception
            MsgBox("txtBaffleKVCase1_Validated: " & ex.Message)
        End Try
    End Sub

    Private Sub txtBaffleKVCase2_Validated(sender As Object, e As EventArgs) Handles txtBaffleKVCase2.Validated
        Try
            If Not txtBaffleKVCase2.Text = "" Then
                If CSng(txtBaffleKVCase1.Text) > CSng(txtBaffleKVCase2.Text) Then
                    ToolTip1.Show("Enter value more than or equal to S1", txtBaffleKVCase2, 2)
                    ToolTip1.Show("Enter value more than or equal to S1", txtBaffleKVCase2, 2000)
                    txtBaffleKVCase2.Focus()
                    Exit Sub
                End If

                BaffleKVCase2 = CSng(txtBaffleKVCase2.Text)
                If cmbUnitsType.SelectedIndex = 1 Then          'FPS
                    BaffleKVCase2 = BaffleKVCase2 / 1.17
                End If
                Call CalculateNoise()

            Else
                MsgBox("Please enter data!", , "Alert!")
                txtBaffleKVCase2.Focus()
            End If
        Catch ex As Exception
            MsgBox("txtBaffleKVCase2_Validated: " & ex.Message)
        End Try
    End Sub

    Private Sub txtBaffleKVCase3_Validated(sender As Object, e As EventArgs) Handles txtBaffleKVCase3.Validated
        Try
            If Not txtBaffleKVCase3.Text = "" Then
                If CSng(txtBaffleKVCase1.Text) > CSng(txtBaffleKVCase3.Text) Then
                    ToolTip1.Show("Enter value more than or equal to S1", txtBaffleKVCase3, 2)
                    ToolTip1.Show("Enter value more than or equal to S1", txtBaffleKVCase3, 2000)
                    txtBaffleKVCase3.Focus()
                    Exit Sub
                End If
                If CSng(txtBaffleKVCase2.Text) > CSng(txtBaffleKVCase3.Text) Then
                    ToolTip1.Show("Enter value more than or equal to S2", txtBaffleKVCase3, 2)
                    ToolTip1.Show("Enter value more than or equal to S2", txtBaffleKVCase3, 2000)
                    txtBaffleKVCase3.Focus()
                    Exit Sub
                End If

                BaffleKVCase3 = CSng(txtBaffleKVCase3.Text)
                If cmbUnitsType.SelectedIndex = 1 Then              'FPS
                    BaffleKVCase3 = BaffleKVCase3 / 1.17
                End If
                Call CalculateNoise()

            Else
                MsgBox("Please enter data!", , "Alert!")
                txtBaffleKVCase3.Focus()
            End If
        Catch ex As Exception
            MsgBox("txtBaffleKVCase3_Validated: " & ex.Message)
        End Try
    End Sub

    Private Sub cmbSelectedTrim_Click(sender As Object, e As EventArgs) Handles cmbSelectedTrim.Click
        cmbSelectedTrim.BackColor = Color.White
    End Sub

    Private Sub cmbSelectedTrim_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbSelectedTrim.SelectionChangeCommitted
        Dim TrimKv, Kv As Single
        Dim TrimKVOK As Boolean
        Dim LastTrim As String
        LastTrim = cmbSelectedTrim.Text
        cmbSelectedTrim.Text = cmbSelectedTrim.SelectedItem
        Try
            If SuggestedRating >= 2500 And cmbSelectedTrim.SelectedIndex < 2 Then            'For 2500 only Perforated
                ToolTip1.Show("Only Perforated for #2500", cmbSelectedTrim, 20)
                ToolTip1.Show("Only Perforated for #2500", cmbSelectedTrim, 3000)
                cmbSelectedTrim.Text = LastTrim
                Exit Sub
            End If
            If cmbSelectedTrim.SelectedIndex < 3 Then
                If Model = 4 Or Model = 5 Then
                    ToolTip1.Show("Only Stage 2 and 3 Trim is available for Perforated PRDS", cmbSelectedTrim, 2)
                    ToolTip1.Show("Only Stage 2 and 3 Trim is available for Perforated PRDS", cmbSelectedTrim, 2000)
                    cmbSelectedTrim.SelectedIndex = 4
                End If
            End If

            Dim NoiseAttnCheckedState As Boolean = chkNoiseAttenuation.Checked
            If cmbSelectedTrim.SelectedIndex = 4 Or cmbSelectedTrim.SelectedIndex = 1 Then  'PS3 or PR3
                Stages = 3
            ElseIf cmbSelectedTrim.SelectedIndex = 3 Then                                   'PS2
                Stages = 2
            Else
                Stages = 1                                                                   'PS1 and PR1 
            End If

            If cmbSelectedTrim.SelectedIndex > 1 And cmbKVOverride.Text = "" Then
                ToolTip1.Show("Please enter Kv/Cv", cmbSelectedTrim, 2)
                ToolTip1.Show("Please enter Kv/Cv", cmbSelectedTrim, 2000)
                Exit Sub
            End If

            'Flow Direction is must for Trim Selection 
            If cmbFlowDirection.SelectedIndex < 0 Then
                ToolTip1.Show("Please select Flow Direction first", cmbSelectedTrim, 2)
                ToolTip1.Show("Please select Flow Direction first", cmbSelectedTrim, 2000)
                cmbFlowDirection.Focus()
                Exit Sub
            End If
            'First Check if laminar then only PS1
            If cmbSelectedTrim.SelectedIndex > 0 And (TurbulentCase1 = False Or TurbulentCase2 = False Or TurbulentCase3 = False) Then
                ToolTip1.Show("Flow is laminar, Only PS1 available", cmbSelectedTrim, 2)
                ToolTip1.Show("Flow is laminar, Only PS1 available", cmbSelectedTrim, 2000)
                cmbSelectedTrim.SelectedIndex = 0
            End If
            ' then Check FTO and FTC: for FTO only PS1, PR1 and PS3, FTC: PR2, PR3

            'for PR2 and PR3 Equal Percentage is not applicable
            If cmbSelectedTrim.SelectedIndex > 2 And cmbCharacterstics.SelectedIndex > 0 Then
                'MsgBox("For PR2 and PR3, Equal Percentage Charactersics is not applicable", , "Alert!")
                cmbCharacterstics.SelectedIndex = 0    'Back to Linear.
                Exit Sub
            End If

            If txtSuggestedKV.Text = "" And txtSuggestedValveSize.Text = "" Then
                cmbKVOverride.BackColor = Color.Red
                cmbValveSizeOverride.BackColor = Color.Red
            Else
                cmbKVOverride.BackColor = Color.Gold
                cmbValveSizeOverride.BackColor = Color.Gold
            End If
            If cmbSelectedTrim.SelectedIndex > 1 Then               'only for PS1
                Microtrim = ""
                Kv = 0
                If cmbKVOverride.Text = "--Select--" Or cmbKVOverride.Text = "" Then
                    Kv = MaximumKV
                Else
                    Kv = cmbKVOverride.Text
                End If

                TrimKVOK = CheckKV(Kv, FinalValveSize, cmbSelectedTrim.SelectedIndex, 1)


                If TrimKVOK = False Then
                    'MsgBox("Kv/Cv entered is not avaialble for selected Valve size", , "Alert!")
                    cmbKVOverride.BackColor = Color.Red
                Else

                    ' Now calculate FP and Other Results

                    chkNoiseAttenuation.Checked = False

                    If cmbSelectedTrim.SelectedIndex > 0 Then FinalKVmax_ValveSize = TrimKv 'Other than PS1
                    If cmbSelectedTrim.SelectedIndex > 1 Then
                        cmbKVOverride.Items.Clear()
                        cmbKVOverride.Text = ""
                    End If

                    FPKVCase1 = dtb.Rows(cmbSelectedTrim.SelectedIndex).Item(3)
                    FPKVCase2 = dtb.Rows(cmbSelectedTrim.SelectedIndex).Item(4)
                    FPKVCase3 = dtb.Rows(cmbSelectedTrim.SelectedIndex).Item(5)

                    FLCase1 = DT_FLtable.Rows(0).Item(cmbSelectedTrim.SelectedIndex)
                    FLCase2 = DT_FLtable.Rows(1).Item(cmbSelectedTrim.SelectedIndex)
                    FLCase3 = DT_FLtable.Rows(2).Item(cmbSelectedTrim.SelectedIndex)

                    'If cmbSelectedTrim.SelectedIndex = 4 Or cmbSelectedTrim.SelectedIndex = 1 Then  'PS3 or PR3
                    '    Stages = 3
                    'ElseIf cmbSelectedTrim.SelectedIndex = 3 Then                                   'PS2
                    '    Stages = 2
                    'Else
                    '    Stages = 1                                                                   'PS1 and PR1 
                    'End If
                End If
            ElseIf cmbSelectedTrim.SelectedIndex = 1 And cmbFluidType.SelectedIndex = 0 Then
                Call CalculateKvforPS3()
            ElseIf cmbSelectedTrim.SelectedIndex = 0 Then
                TrimKVOK = CalculateKvforPS1()
            End If
            If cmbSelectedTrim.SelectedIndex > 2 Or (cmbSelectedTrim.SelectedIndex < 2 And (Microtrim = "M1" Or Microtrim = "M3")) Then   ' For MicroTrim only FTC available
                cmbFlowDirection.SelectedIndex = 1       'FTC
                '  MsgBox("PR2 and PR3 not available for FT", , "Alert!")
                '  cmbSelectedTrim.SelectedIndex = 0
                ' Exit Sub
            ElseIf cmbSelectedTrim.SelectedIndex < 3 Then
                cmbFlowDirection.SelectedIndex = 0        'FTO
                'MsgBox("PS1,PS3 and PR1 not available for FTC", , "Alert!")
                'cmbSelectedTrim.SelectedIndex = 0       'back to Parabolic
                'Exit Sub
            End If
            If Not cmbKVOverride.Text = "" And Not cmbKVOverride.Text = "--Select--" And Not cmbValveSizeOverride.Text = "" And Not cmbValveSizeOverride.Text = "--Select--" Then            'On first check no further update
                Call CalculateNoise()
                Call FindFP()
                Call ValveActuator()
                If NoiseAttnCheckedState = True Then
                    chkNoiseAttenuation.Checked = True
                End If
            End If

        Catch ex As Exception
            MsgBox("cmbSelectedTrim: " & ex.Message)
        End Try
    End Sub

    ''' <summary>
    ''' Type 1: Finds ValveSize as per Kv. Type 2:  Finds Kv from ValveSize
    ''' </summary>
    ''' <param name="EnteredKV"></param>
    ''' <param name="ValveSize"></param>
    ''' <param name="Sel_trim"></param>
    ''' <param name="Type"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function CheckKV(ByVal EnteredKV As Single, ByVal ValveSize As Single, ByVal Sel_trim As Byte, ByVal Type As Byte) As Single
        Try

            'Confirm KV is right as per valve size for All trims other than PS1
            Dim TempDT As DataTable
            Dim trimindex As Byte
            Dim TrimKVOK, FoundValve As Single
            Dim ReplaceString As String
            Dim TrimKv As Single

            TempDT = New DataTable
            If cmbUnitsType.SelectedIndex = 1 Then 'FPS
                TrimKv = CSng(EnteredKV) / 1.17   'Input in Cv
            Else
                TrimKv = CSng(EnteredKV)
            End If

            If SuggestedRating < 600 Then
                Select Case Sel_trim
                    Case 1
                        TempDT = DT_PS3150300KV
                    Case 2
                        TempDT = DT_PR1150300KV
                    Case 3
                        Select Case Model
                            Case 1, 3
                                TempDT = DT_PR2150300KV
                            Case 4
                                TempDT = DT_TEPRDSL2150300
                            Case 5
                                TempDT = DT_BEPRDSL2150300
                        End Select
                    Case 4
                        Select Case Model
                            Case 1, 3
                                TempDT = DT_PR3150300KV
                            Case 4
                                TempDT = DT_TEPRDSL3150300
                            Case 5
                                TempDT = DT_BEPRDSL3150300
                        End Select
                End Select
            ElseIf SuggestedRating >= 600 And SuggestedRating < 2500 Then
                Select Case Sel_trim
                    Case 1
                        TempDT = DT_PS3600900KV
                    Case 2
                        TempDT = DT_PR1600900KV
                    Case 3
                        Select Case Model
                            Case 1, 3
                                TempDT = DT_PR2600900KV
                            Case 4
                                TempDT = DT_TEPRDSL2150300
                            Case 5
                                TempDT = DT_BEPRDSL2150300
                        End Select
                    Case 4
                        Select Case Model
                            Case 1, 3
                                TempDT = DT_PR3600900KV
                            Case 4
                                TempDT = DT_TEPRDSL3150300
                            Case 5
                                TempDT = DT_BEPRDSL3150300
                        End Select
                End Select
            ElseIf SuggestedRating >= 2500 Then                '2500
                Select Case Sel_trim
                    Case 2
                        TempDT = DT_PR12500KV
                    Case 3
                        TempDT = DT_PR22500KV
                    Case 4
                        TempDT = DT_PR32500KV
                End Select

            End If

            If cmbCharacterstics.SelectedIndex = 1 Then  'Equal Percentage
                trimindex = 2
            Else
                trimindex = 0
            End If
            'Interlocks - Equal Percentage 
            TrimKVOK = 0
            FoundValve = 0
            Dim arrcount = 0
            If Type = 1 Or Type = 3 Then                                ' Finding valve from KV
                If Sel_trim > 1 Then
                    For rowcnt = 0 To TempDT.Rows.Count - 2
                        If TrimKv >= CSng(TempDT.Rows(rowcnt).Item(6 + trimindex)) And TrimKv <= CSng(TempDT.Rows(rowcnt).Item(7 + trimindex)) Then 'And CSng(TempDT.Rows(rowcnt).Item(0)) >= FinalValveSizeforNoise(0) Then
                            'SeatDia = CSng(TempDT.Rows(rowcnt).Item(2))
                            'PrBl_SeatDia = SeatDia
                            If Not Type = 3 Then FinalValveSize = CSng(TempDT.Rows(rowcnt).Item(0))
                            If cmbAreaunits.SelectedIndex = 0 Then               'mm 
                                TrimKVOK = TempDT.Rows(rowcnt).Item(1)
                                If Not cmbKVOverride.Text = "" And Not cmbKVOverride.Text = "--Select--" And Not Type = 3 Then
                                    cmbValveSizeOverride.Items.Clear()
                                    Do While rowcnt <= TempDT.Rows.Count - 2
                                        If Not FoundValve = TempDT.Rows(rowcnt).Item(1) Then
                                            If TrimKv >= CSng(TempDT.Rows(rowcnt).Item(6 + trimindex)) And TrimKv <= CSng(TempDT.Rows(rowcnt).Item(7 + trimindex)) Then
                                                ReplaceString = CStr(TempDT.Rows(rowcnt).Item(1))
                                                ReplaceString = ReplaceString.Replace(vbLf, "")
                                                cmbValveSizeOverride.Items.Add(ReplaceString)
                                                FinalValveSizeforNoise(arrcount) = TempDT.Rows(rowcnt).Item(0)
                                                'SeatDia_array(arrcount) = SeatDia
                                                'PrBl_SeatDia_array(arrcount) = SeatDia
                                                arrcount = arrcount + 1
                                                FoundValve = TempDT.Rows(rowcnt).Item(1)        '20201031 changes
                                            End If
                                        End If
                                        rowcnt = rowcnt + 1
                                    Loop
                                    cmbValveSizeOverride.SelectedIndex = 0
                                End If

                            Else                                    'inch
                                TrimKVOK = TempDT.Rows(rowcnt).Item(0)
                                If Not cmbKVOverride.Text = "" And Not cmbKVOverride.Text = "--Select--" And Not Type = 3 Then
                                    cmbValveSizeOverride.Items.Clear()
                                    Do While rowcnt <= TempDT.Rows.Count - 2
                                        If Not FoundValve = TempDT.Rows(rowcnt).Item(1) Then
                                            If TrimKv >= CSng(TempDT.Rows(rowcnt).Item(6 + trimindex)) And TrimKv <= CSng(TempDT.Rows(rowcnt).Item(7 + trimindex)) Then
                                                ReplaceString = CStr(TempDT.Rows(rowcnt).Item(0))
                                                ReplaceString = ReplaceString.Replace(vbLf, "")
                                                cmbValveSizeOverride.Items.Add(ReplaceString)
                                                FinalValveSizeforNoise(arrcount) = TempDT.Rows(rowcnt).Item(0)
                                                arrcount = arrcount + 1
                                                FoundValve = TempDT.Rows(rowcnt).Item(1)
                                            End If

                                        End If
                                        rowcnt = rowcnt + 1
                                    Loop
                                    cmbValveSizeOverride.SelectedIndex = 0
                                End If
                            End If

                            ' MsgBox("Found: " & TrimKVOK)

                            Exit For
                        Else
                            TrimKVOK = 0
                        End If
                    Next
                    If TrimKVOK = 0 Then
                        ToolTip1.Show("Kv/Cv or Valve Size not available as per Standard Chart!", txtSuggestedKV, 1) 'MsgBox("Kv/Cv or Valve Size not available as per Standard Chart!  ", , "Alert!")
                        ToolTip1.Show("Kv/Cv or Valve Size not available as per Standard Chart!", txtSuggestedKV, 2000)
                    End If

                End If
            Else                              ' Finding Kv from Valve
                If Sel_trim > 1 Then
                    Array.Clear(SeatDia_array, 0, SeatDia_array.Length)                             'Added To avoid Duplication of PS1 and PS3 with peroforated
                    Array.Clear(PrBl_SeatDia_array, 0, PrBl_SeatDia_array.Length)
                    cmbSeatDia.Items.Clear()
                    For rowcnt = 0 To TempDT.Rows.Count - 2
                        If CSng(TempDT.Rows(rowcnt).Item(0)) = ValveSize Then
                            If TrimKv >= CSng(TempDT.Rows(rowcnt).Item(6 + trimindex)) And TrimKv <= CSng(TempDT.Rows(rowcnt).Item(7 + trimindex)) Then
                                TrimKVOK = 1
                                '   
                                SeatDia_array(arrcount) = CSng(TempDT.Rows(rowcnt).Item(2))
                                PrBl_SeatDia_array(0) = CSng(TempDT.Rows(rowcnt).Item(3))           ' For Pressure Balance only max should be considered. 
                                StemDia = CSng(TempDT.Rows(rowcnt).Item(4))
                                'Else
                                '    SeatDia_array(arrcount) = (CSng(TempDT.Rows(rowcnt).Item(2)) * 25.4)
                                '    PrBl_SeatDia_array(0) = (CSng(TempDT.Rows(rowcnt).Item(3)) * 25.4)
                                '    StemDia = CSng(TempDT.Rows(rowcnt).Item(4)) * 25.4
                                'End If

                                If cmbBalancing.SelectedIndex > 0 Then                              ' For Pressure Balance  
                                    SeatDia = PrBl_SeatDia          ' For Actuator Calculations

                                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then
                                        cmbSeatDia.Items.Add(PrBl_SeatDia_array(arrcount))

                                    Else   'FPS
                                        cmbSeatDia.Items.Add(Math.Round((PrBl_SeatDia_array(arrcount) / 25.4), 1))
                                    End If

                                Else                        'default fill Seat dia 
                                    If cmbUnitsType.SelectedIndex = 0 Or cmbUnitsType.SelectedIndex = 2 Then

                                        cmbSeatDia.Items.Add(SeatDia_array(arrcount))
                                    Else
                                        cmbSeatDia.Items.Add(Math.Round((SeatDia_array(arrcount) / 25.4), 1))
                                    End If

                                End If
                                arrcount = arrcount + 1
                            End If
                        End If
                    Next
                    If TrimKVOK = 1 And cmbSeatDia.Items.Count > 0 Then
                        cmbSeatDia.SelectedIndex = 0
                        SeatDia = SeatDia_array(0)
                        PrBl_SeatDia = PrBl_SeatDia_array(0)

                    End If
                    If TrimKVOK = 0 Then
                        ToolTip1.Show("Kv/Cv or Valve Size not available as per Standard Chart! ", txtSuggestedKV, 2)
                        ToolTip1.Show("Kv/Cv or Valve Size not available as per Standard Chart! ", txtSuggestedKV, 2000)
                    End If
                End If

                End If

                CheckKV = TrimKVOK
                Return CheckKV
        Catch ex As Exception
            MsgBox("CheckKv: " & ex.Message)
        End Try


    End Function


    Public Function CheckCavitation(ByVal CVFLCase1 As Single, ByVal CVFLCase2 As Single, ByVal CVFLCase3 As Single, ByRef objCav As CavitationVelocity)
        Dim ACase1, ACase2, ACase3, BCase1, BCase2, BCase3, Cavit_PvcCase1, Cavit_PvcCase2, Cavit_PvcCase3 As Single
        Dim MaxArray(3) As Byte
        Try


            If cmbFluidType.Text = "InCompressible" Then
                Call Chokedflow(CVFLCase1 * CVFLCase1, CVFLCase2 * CVFLCase2, CVFLCase3 * CVFLCase3)
                If FinalPressureDropCase1 > 0 Then
                    lblFlowSeverity.Visible = True
                    If FlashingCase1 = False Then
                        ACase1 = CVFLCase1 * FinalChokedPressureCase1
                        BCase1 = FinalChokedPressureCase1
                        Cavit_PvcCase1 = FinalInletPressureCase1 - ((FinalInletPressureCase1 - FinalOutletPressureCase1) / (CVFLCase1 * CVFLCase1))
                        If Cavit_PvcCase1 < FinalVapourPressureCase1 Then
                            If ((ACase1 < FinalPressureDropCase1) And (BCase1 < FinalPressureDropCase1)) Then
                                ' lblSeverityCase1.Text = "Choke.Cavi."
                                objCav.CVCase1 = 3
                                MaxArray(0) = 3
                                txtErrors.Text = "Min.Flow: Single Stage trim is not suitable "
                            ElseIf ((ACase1 < FinalPressureDropCase1) And (BCase1 > FinalPressureDropCase1)) Then
                                '  lblSeverityCase1.Text = "SevereCavi"
                                objCav.CVCase1 = 2
                                MaxArray(0) = 2
                                txtErrors.Text = "Min.Flow: Single Stage trim is not suitable "
                            Else
                                'lblSeverityCase1.Text = "Incp.Cavi."
                                objCav.CVCase1 = 1
                                MaxArray(0) = 1
                            End If
                        Else
                            '    lblSeverityCase1.Text = " Normal"
                            objCav.CVCase1 = 0
                            MaxArray(0) = 0

                        End If
                    Else
                        '  lblSeverityCase1.Text = " Flashing"
                        MaxArray(0) = 4
                        objCav.CVCase1 = 4
                    End If
                Else
                    '   lblSeverityCase1.Text = ""
                End If

                If FinalPressureDropCase2 > 0 Then
                    If FlashingCase2 = False Then
                        ACase2 = CVFLCase2 * FinalChokedPressureCase2
                        BCase2 = FinalChokedPressureCase2
                        Cavit_PvcCase2 = FinalInletPressureCase2 - ((FinalInletPressureCase2 - FinalOutletPressureCase2) / (CVFLCase2 * CVFLCase2))
                        If Cavit_PvcCase2 < FinalVapourPressureCase2 Then
                            If ((ACase2 < FinalPressureDropCase2) And (BCase2 < FinalPressureDropCase2)) Then
                                '  lblSeverityCase2.Text = "Choke.Cavi."
                                objCav.CVCase2 = 3
                                MaxArray(1) = 3
                                txtErrors.Text = "Nor.Flow: Single Stage trim is not suitable "
                            ElseIf ((ACase2 < FinalPressureDropCase2) And (BCase2 > FinalPressureDropCase2)) Then
                                ' lblSeverityCase2.Text = "SevereCavi"
                                txtErrors.Text = "Nor.Flow: Single Stage trim is not suitable "
                                objCav.CVCase2 = 2
                                MaxArray(1) = 2
                            Else
                                ' lblSeverityCase2.Text = "Incp.Cavi."
                                objCav.CVCase2 = 1
                                MaxArray(1) = 1
                            End If
                        Else
                            '  lblSeverityCase2.Text = " Normal"
                            objCav.CVCase2 = 0
                            MaxArray(1) = 0

                        End If
                    Else
                        ' lblSeverityCase2.Text = " Flashing"
                        MaxArray(1) = 4
                        objCav.CVCase2 = 4
                    End If
                Else
                    ' lblSeverityCase2.Text = ""
                End If

                If FinalPressureDropCase3 > 0 Then
                    If FlashingCase3 = False Then
                        ACase3 = CVFLCase3 * FinalChokedPressureCase3
                        BCase3 = FinalChokedPressureCase3
                        Cavit_PvcCase3 = FinalInletPressureCase3 - ((FinalInletPressureCase3 - FinaloutletPressureCase3) / (CVFLCase3 * CVFLCase3))
                        If Cavit_PvcCase3 < FinalVapourPressureCase3 Then
                            If ((ACase3 < FinalPressureDropCase3) And (BCase3 < FinalPressureDropCase3)) Then
                                ' lblSeverityCase3.Text = "Choke.Cavi."
                                objCav.CVCase3 = 3
                                MaxArray(2) = 3
                                txtErrors.Text = "Max.Flow: Single Stage trim is not suitable "
                            ElseIf ((ACase3 < FinalPressureDropCase3) And (BCase3 > FinalPressureDropCase3)) Then
                                '  lblSeverityCase3.Text = "SevereCavi"
                                objCav.CVCase3 = 2
                                MaxArray(2) = 2
                                txtErrors.Text = "Max.Flow: Single Stage trim is not suitable "
                            Else
                                '  lblSeverityCase3.Text = "Incp.Cavi."
                                objCav.CVCase3 = 1
                                MaxArray(2) = 1
                            End If
                        Else
                            ' lblSeverityCase3.Text = " Normal"
                            objCav.CVCase3 = 0
                            MaxArray(2) = 0
                        End If
                    Else
                        '  lblSeverityCase3.Text = " Flashing"
                        MaxArray(2) = 4
                        objCav.CVCase3 = 4
                    End If
                Else
                    ' lblSeverityCase3.Text = ""
                End If
                objCav.CVFinal = MaxArray.Max
            End If


        Catch ex As Exception
            MsgBox("CheckCavitation: " & ex.Message)
        End Try
        Return Nothing
    End Function

    Public Function CheckTrimVelocity(ByVal KV1 As Single, ByVal KV2 As Single, ByVal KV3 As Single, ByRef objTrim As CavitationVelocity, ByVal Trimfactor As Single)
        Dim MaxTrim(3) As Single
        Try
            If cmbFluidType.Text = "InCompressible" Then
                If KV1 > 0 Then
                    objTrim.VelCase1 = ((FinalFlowrateCase1 * Trimfactor) / KV1)
                    MaxTrim(0) = objTrim.VelCase1
                End If
                If KV2 > 0 Then
                    objTrim.VelCase2 = ((FinalFlowrateCase2 * Trimfactor) / KV2)
                    MaxTrim(1) = objTrim.VelCase2
                End If
                If KV3 > 0 Then
                    objTrim.VelCase3 = ((FinalFlowrateCase3 * Trimfactor) / KV3)
                    MaxTrim(2) = objTrim.VelCase3
                End If
                objTrim.VelFinal = MaxTrim.Max
            End If

        Catch ex As Exception
            MsgBox("CheckTrimVelocity: " & ex.Message)
        End Try
        Return Nothing
    End Function




    Private Sub cmbFlowDirection_SelectionChangeCommitted(sender As Object, e As EventArgs) Handles cmbFlowDirection.SelectionChangeCommitted
        Try
            If cmbSelectedTrim.SelectedIndex > 2 And cmbFlowDirection.SelectedIndex = 0 Then        'FTO
                ToolTip1.Show("L2 and L3 not available for FTO", cmbFlowDirection, 2)
                ToolTip1.Show("L2 and L3 not available for FTO", cmbFlowDirection, 2000)
                'cmbSelectedTrim.SelectedIndex = 0
                Exit Sub
            ElseIf cmbSelectedTrim.SelectedIndex < 3 And cmbFlowDirection.SelectedIndex = 1 Then        'FTC
                ToolTip1.Show("PS1,PS3 and L1 not available for FTC", cmbFlowDirection, 2)
                ToolTip1.Show("PS1,PS3 and L1 not available for FTC", cmbFlowDirection, 2000)
                'cmbSelectedTrim.SelectedIndex = 0
                Exit Sub
            End If
        Catch ex As Exception
            MsgBox("cmbFlowDirection_SelectionChangeCommitted: " & ex.Message)
        End Try
    End Sub

    Private Sub cmbKVOverride_TextChanged(sender As Object, e As EventArgs) Handles cmbKVOverride.TextChanged

        If LoadingForm = True Then
            If LoadingProjectFile = False Then
                If cmbSelectedTrim.SelectedIndex = -1 Then
                    MsgBox("Please select Trim first!", , "Alert")
                    Exit Sub
                End If
                ' cmbKVOverride.SelectedIndex = cmbKVOverride.FindString(cmbKVOverride.Text)
                If cmbSelectedTrim.SelectedIndex < 2 Then  'Call only for PS1 & PS3
                    cmbValveSizeOverride.BackColor = Color.Gold
                    Call KVoverride()
                    Call ValveSizeOverride()
                End If
            End If
        End If
    End Sub

    Private Sub cmbKVOverride_Validated(sender As Object, e As EventArgs) Handles cmbKVOverride.Validated
        Try
            Dim TrimKVOK As Boolean
            Dim count, direction, index As Byte
            If cmbKVOverride.SelectedIndex < 0 And Not cmbKVOverride.Text = "--Select--" And Not cmbKVOverride.Text = "" Then
                TrimKVOK = CheckKV(cmbKVOverride.Text, FinalValveSize, cmbSelectedTrim.SelectedIndex, 1)
                If TrimKVOK = True Then
                    If cmbUnitsType.SelectedIndex = 1 Then        ' FPS
                        lblKVMaxValue.Text = cmbKVOverride.Text
                        FinalKVmax_ValveSize = (cmbKVOverride.Text / 1.17)
                    Else
                        lblKVMaxValue.Text = cmbKVOverride.Text
                        FinalKVmax_ValveSize = cmbKVOverride.Text
                    End If

                    '  ADDED on 26th October 2020
                    'FIND FL  and FPKvCase for new selected Kv 

                    ''******************************************************************************************
                    '   Now Find what percentage is the 3 Approximate KV calculated of the selected max KV from Table
                    PercentageKVCase1 = (FinalKVCase1 / FinalKVmax_ValveSize) * 100
                    PercentageKVCase2 = (FinalKVCase2 / FinalKVmax_ValveSize) * 100
                    PercentageKVCase3 = (FinalKVCase3 / FinalKVmax_ValveSize) * 100

                    ''******************************************************************************************

                    'Now check if suggested KV is less than Selected KV then go through loop, else Fl = 0.75



                    direction = cmbFlowDirection.SelectedIndex + 2 'to map with the sheet column
                    index = cmbSelectedTrim.SelectedIndex + 5

                    LastRow = 43
                    FLCase1 = 0
                    FLCase2 = 0
                    FLCase3 = 0
                    If PercentageKVCase1 <= 99 Then
                        For i = 3 To LastRow
                            If PercentageKVCase1 <= DT_FL.Rows(i).Item(0) Then

                                FLCase1 = DT_FL.Rows(i).Item(index) ' 
                                If txtFlowrateCase1.Text = "" Then
                                    FLCase1 = 0
                                End If

                                Exit For
                            End If
                        Next
                    Else
                        FLCase1 = 0.92
                    End If
                    If PercentageKVCase2 <= 99 Then
                        For i = 3 To LastRow
                            If PercentageKVCase2 <= DT_FL.Rows(i).Item(0) Then
                                FLCase2 = DT_FL.Rows(i).Item(index)
                                If txtFlowrateCase2.Text = "" Then
                                    FLCase2 = 0
                                End If
                                Exit For
                            End If
                        Next
                    Else
                        FLCase2 = 0.92
                    End If
                    If PercentageKVCase3 <= 99 Then
                        For i = 3 To LastRow
                            If PercentageKVCase3 <= DT_FL.Rows(i).Item(0) Then
                                FLCase3 = DT_FL.Rows(i).Item(index)
                                If txtFlowrateCase3.Text = "" Then
                                    FLCase3 = 0
                                End If
                                Exit For
                            End If
                        Next
                    Else
                        FLCase3 = 0.92
                    End If

                    'End With

                    If cmbFluidType.Text = "Compressible" Then

                        Call Chokedflow((FLCase1 * FLCase1 * 0.85), (FLCase2 * FLCase2 * 0.85), (FLCase3 * FLCase3 * 0.85))
                    Else
                        Call Chokedflow((FLCase1 * FLCase1), (FLCase2 * FLCase2), (FLCase3 * FLCase3))

                    End If

                    Call CalculateKVCV()

                    FPKVCase1 = FinalKVCase1
                    FPKVCase2 = FinalKVCase2
                    FPKVCase3 = FinalKVCase3

                    '''''''''''''''''-------------------------------------




                    cmbValveSizeOverride.BackColor = Color.Gold
                    Call ValveSizeOverride()
                    Call FindFP()
                    ' Call CalculateNoise()
                    If Not txtSuggestedKV.Text = "" And Not cmbKVOverride.Text = "" Then
                        If txtSuggestedKV.Text > cmbKVOverride.Text Then
                            GroupBox1.BackColor = Color.AntiqueWhite
                            GroupBox2.BackColor = Color.AntiqueWhite
                            GroupBox3.BackColor = Color.AntiqueWhite
                        Else
                            GroupBox1.BackColor = Color.LightSteelBlue
                            GroupBox2.BackColor = Color.LightSteelBlue
                            GroupBox3.BackColor = Color.LightSteelBlue
                        End If
                    End If

                Else
                    cmbKVOverride.Text = ""
                End If

            End If


        Catch ex As Exception

        End Try


    End Sub

    Private Sub btnTables_Click(sender As Object, e As EventArgs) Handles btnTables.Click
        My.Forms.frmTestingGrids.ShowDialog()
    End Sub


    Private Sub RecordsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles RecordsToolStripMenuItem.Click
        If XMLFilename = "" Then
            MsgBox("Please select File Name", , "Alert!")
        Else
            '  frmRecordsGrid.ShowDialog()
            Me.Close()
        End If
    End Sub


    Public Function CopyDatasheet()
        'Dim arg(0)
        'oSm = CreateObject("com.sun.star.ServiceManager")
        'oDesk = oSm.createInstance("com.sun.star.frame.Desktop")

        'oDoc = oDesk.loadComponentFromURL("file:///" & XMLFilename.Replace("\", "/"), "_default", 0, arg) 'forward slash'
        ''   oDoc1 = oDesk.loadComponentFromURL("file:///D:/testing/testfile.ods", "_default", 0, arg)

        oSheet = oDoc.getSheets().getByIndex(2)
        osheet1 = oDoc.getSheets().getByIndex(1)



        Dim source = osheet1.getCellRangeByname("A1:Q57").getRangeAddress()
        Dim destination = oSheet.getCellByPosition(0, 0).getCellAddress()
        osheet1.copyRange(destination, source)

        'oSheet = oDoc.getSheets().getByIndex(2)
        'osheet1 = oDoc.getSheets().getByIndex(1)


        'Dim source = osheet1.getSheets().getByIndex(1).getCellRangeByname("B2:K27").getRangeAddress()
        'Dim destination = oSheet.getCellByPosition(3, 5).getCellAddress()
        'oSheet.copyRange(destination, source)


    End Function
    Public Function SetColWidth(col As Integer, nchs As Single, oSheet As Object)
        Static oColumn As Object

        Dim w As Single
        w = nchs * 2540
        ' get column
        oColumn = oSheet.getColumns.getByIndex(col)
        ' column width (in 100ths of mm)
        'oColumn.setPropertyValue("Width", w)
        oColumn.Width = w

    End Function

    Public Function DrawDatasheet(ByVal PrintName As String)

        Dim arg(0)
        Dim ocell As Object 'ID'
        Dim ocell1 As Object  'Name'
        Dim ocell2 As Object 'Dept'
        Dim ocell3 As Object 'Gender'
        Dim ocell4 As Object 'Education'
        Dim ocell5 As Object 'pic'
        Dim ocell6 As Object
        Dim ocell7 As Object
        Dim ocell8 As Object
        Dim ocell9 As Object
        Dim ocell10 As Object
        Dim ocell11 As Object
        Dim ocell12 As Object
        Dim ocell13 As Object
        Dim ocell14 As Object
        Dim ocell15 As Object
        Dim ocell16 As Object
        Dim ocell17 As Object
        Dim ocell18 As Object
        Dim ocell19 As Object
        Dim ocell20 As Object
        Dim ocell21 As Object
        Dim ocell22 As Object
        Dim ocell23 As Object
        Dim ocell24 As Object
        Dim ocell25 As Object
        Dim ocell26 As Object
        Dim ocell27 As Object
        Dim ocell28 As Object
        Dim ocell29 As Object
        Dim ocell30 As Object
        Dim ocell31 As Object
        Dim ocell32 As Object
        Dim ocell33 As Object
        Dim ocell34 As Object
        Dim ocell35 As Object
        Dim ocell36 As Object
        Dim ocell37 As Object
        Dim ocell38 As Object
        Dim ocell39 As Object
        Dim ocell40 As Object
        Dim ocell41 As Object
        Dim ocell42 As Object
        Dim ocell43 As Object
        Dim ocell44 As Object
        Dim ocell45 As Object
        Dim ocell46 As Object
        Dim ocell47 As Object
        Dim ocell48 As Object
        Dim ocell49 As Object
        Dim ocell50 As Object
        Dim ocell51 As Object
        Dim ocell52 As Object
        Dim ocell53 As Object
        Dim ocell54 As Object
        Dim ocell55 As Object
        Dim ocell56 As Object
        Dim ocell57 As Object
        Dim ocell58 As Object
        Dim ocell59 As Object
        Dim ocell60 As Object
        Dim ocell61 As Object
        Dim ocell62 As Object
        Dim ocell63 As Object
        Dim ocell64 As Object
        Dim ocell65 As Object
        Dim ocell66 As Object
        Dim ocell67 As Object
        Dim ocell68 As Object
        Dim ocell69 As Object
        Dim ocell70 As Object
        Dim ocell71 As Object
        Dim ocell72 As Object
        Dim ocell73 As Object
        Dim ocell74 As Object
        Dim ocell82 As Object
        Dim ocell75 As Object
        Dim ocell76 As Object
        Dim ocell77 As Object
        Dim ocell78 As Object
        Dim ocell79 As Object
        Dim ocell80 As Object
        Dim ocell81 As Object
        Dim ocell89 As Object
        Dim ocell83 As Object
        Dim ocell84 As Object
        Dim ocell85 As Object
        Dim ocell86 As Object
        Dim ocell87 As Object
        Dim ocell88 As Object
        Dim ocell90 As Object
        Dim ocell91 As Object
        Dim ocell92 As Object
        Dim ocell93 As Object
        Dim ocell94 As Object
        Dim ocell95 As Object
        Dim ocell96 As Object
        Dim ocell97 As Object
        Dim ocell98 As Object
        Dim ocell99 As Object
        Dim ocell100 As Object
        Dim ocell101 As Object
        Dim ocell102 As Object
        Dim ocell103 As Object
        Dim ocell104 As Object
        Dim ocell105 As Object
        Dim ocell106 As Object
        Dim ocell107 As Object
        Dim ocell108 As Object
        Dim ocell109 As Object
        Dim ocell110 As Object
        Dim ocell119 As Object
        Dim ocell111 As Object
        Dim ocell112 As Object
        Dim ocell113 As Object
        Dim ocell114 As Object
        Dim ocell115 As Object
        Dim ocell116 As Object
        Dim ocell117 As Object
        Dim ocell118 As Object
        Dim ocell120 As Object
        Dim ocell121 As Object
        Dim ocell122 As Object
        Dim ocell123 As Object
        Dim ocell124 As Object
        Dim ocell125 As Object
        Dim ocell126 As Object
        Dim ocell127 As Object
        Dim ocell128 As Object
        Dim ocell129 As Object
        Dim ocell130, ocell131, ocell132, ocell133, ocell134, ocell135, ocell136, ocell137, ocell138, ocell139, ocell140, ocell141, ocell142, ocell143, ocell144, ocell145, ocell146, ocell147, ocell148, ocell149, ocell150, ocell151, ocell152, ocell153, ocell154, ocell155, ocell156, ocell157, ocell158, ocell159, ocell160 As Object
        Dim ocell161, ocell162, ocell163, ocell164, ocell165, ocell166, ocell167, ocell168, ocell169, ocell170, ocell171, ocell172, ocell173, ocell174, ocell175, ocell176, ocell177, ocell178, ocell179, ocell180, ocell181, ocell182, ocell183, ocell184, ocell185, ocell186, ocell187, ocell188, ocell191, ocell192, ocell193, ocell194, ocell195, ocell196, ocell197, ocell198, ocell199, ocell200, ocell189, ocell190 As Object
        Dim ocell201, ocell202, ocell203, ocell204, ocell205, ocell206, ocell207, ocell208, ocell209, ocell210, ocell211, ocell212, ocell213, ocell214, ocell215, ocell216, ocell217, ocell218, ocell219, ocell220, ocell222, ocell223, ocell224, ocell225, ocell226, ocell227, ocell228, ocell229, ocell230, ocell231, ocell232, ocell233, ocell234, ocell235, ocell236, ocell237, ocell238, ocell239, ocell240, ocell241, ocell242, ocell243, ocell244, ocell245, ocell246, ocell247, ocell248, ocell249, ocell250 As Object
        Dim ocell251, ocell252, ocell253, ocell254, ocell255, ocell256, ocell257, ocell258, ocell259, ocell260, ocell261, ocell262, ocell263, ocell264, ocell265, ocell266, ocell267, ocell268, ocell269, ocell270, ocell271, ocell272, ocell273, ocell274, ocell275, ocell276, ocell277, ocell278, ocell279, ocell280, ocell281, ocell282, ocell283, ocell284, ocell285, ocell286, ocell289, ocell290, ocell291, ocell292, ocell293, ocell294, ocell295, ocell296, ocell297, ocell298, ocell300 As Object
        Dim ImageFilePath As Object
        Dim oGraph As Object, oCursor As Object, DrawPages, oWraptext As Object
        Dim DrawPage As Object, FileURL As String
        Dim i As Integer

        Try
            oSm = CreateObject("com.sun.star.ServiceManager")
            oDesk = oSm.createInstance("com.sun.star.frame.Desktop")
            Dim sSize As Object
            Dim sPoint As Object
            Dim selArea(0) As Object
            sSize = oSm.Bridge_GetStruct("com.sun.star.awt.Size")
            sPoint = oSm.Bridge_GetStruct("com.sun.star.awt.Point")

            oDoc = oDesk.loadComponentFromURL("file:///" & PrintName.Replace("\", "/"), "_default", 0, arg) 'forward slash'


            Dim TableBorder = oSm.Bridge_GetStruct("com.sun.star.table.TableBorder")
            Dim aTopLine = oSm.Bridge_GetStruct("com.sun.star.table.BorderLine")

            '22072020
            Dim oStyleFamily, PageStyles, DefaultPageStyle As Object
            Dim sPageStyleName As String



            selArea(0) = oSm.Bridge_GetStruct("com.sun.star.table.CellRangeAddress")

            For i = 0 To oDoc.getSheets().count - 1
                oSheet = oDoc.getSheets().getByIndex(i)

                '' 22072020


                'oSheet = oDoc.getcurrentcontroller.activesheet
                sPageStyleName = oSheet.PageStyle

                oStyleFamily = oDoc.stylefamilies.getbyname("PageStyles")
                PageStyles = oStyleFamily.getbyname(sPageStyleName)

                PageStyles.setPropertyValue("ScaleToPages", 1)
                PageStyles.HeaderIsOn = 0
                PageStyles.FooterIsOn = 0

                sPoint.X = 2500
                sPoint.Y = 1000
                sSize.Width = 12000
                sSize.Height = 1322
                oGraph = oDoc.createInstance("com.sun.star.drawing.GraphicObjectShape")

                ImageFilePath = "file:///" & AppPath.Replace("\", "/") & "/images/FMLogo.jpg"

                With oGraph
                    .GraphicURL = ImageFilePath
                    .Size = sSize
                    .Position = sPoint
                End With
                DrawPage = oSheet.DrawPage
                Call DrawPage.Add(oGraph)
                oGraph.Size = sSize

                'getting range to set border'
                Dim ORange = oSheet.getCellRangeByName("B1:AE66")
                Dim ORange1 = oSheet.getCellRangeByName("B9:AE9")
                Dim ORange2 = oSheet.getCellRangeByName("B10:AE29")
                Dim ORange3 = oSheet.getCellRangeByName("B30:P57")
                Dim ORange4 = oSheet.getCellRangeByName("R30:AE57")
                Dim ORange5 = oSheet.getCellRangeByName("B58:AE65")

                selArea(0).StartColumn = 0
                selArea(0).StartRow = 0
                selArea(0).EndColumn = 32
                selArea(0).EndRow = 64

                oSheet.setPrintareas(selArea)

                'setting border to range'
                Dim aBorder = ORange.TableBorder
                Dim aBorder1 = ORange1.TableBorder
                Dim aBorder2 = ORange2.TableBorder
                Dim aBorder3 = ORange3.TableBorder
                Dim aBorder4 = ORange4.TableBorder
                Dim aBorder5 = ORange5.TableBorder



                'properties of table'
                aTopLine.OuterLineWidth = 64
                aTopLine.InnerLineWidth = 10
                aTopLine.Color = RGB(0, 0, 0)

                'for four borderline'
                ORange.TableBorder.IsTopLineValid = 1
                ORange.TableBorder.IsBottomLineValid = 1
                ORange.TableBorder.IsLeftLineValid = 1
                ORange.TableBorder.IsRightLineValid = 1


                'to valid properties'
                ORange1.TableBorder.IsTopLineValid = 1
                ORange1.TableBorder.IsBottomLineValid = 1
                ' ORange1.TableBorder.IsLeftLineValid = 1
                'ORange1.TableBorder.IsRightLineValid = 1

                ORange2.TableBorder.IsTopLineValid = 1
                ORange2.TableBorder.IsBottomLineValid = 1
                ORange2.TableBorder.IsLeftLineValid = 1
                ORange2.TableBorder.IsRightLineValid = 1

                ORange3.TableBorder.IsTopLineValid = 1
                ORange3.TableBorder.IsBottomLineValid = 1
                ORange3.TableBorder.IsLeftLineValid = 1
                ORange3.TableBorder.IsRightLineValid = 1

                ORange4.TableBorder.IsTopLineValid = 1
                ORange4.TableBorder.IsBottomLineValid = 1
                ORange4.TableBorder.IsLeftLineValid = 1
                ORange4.TableBorder.IsRightLineValid = 1

                ORange5.TableBorder.IsTopLineValid = 1
                ORange5.TableBorder.IsBottomLineValid = 1
                ' ORange5.TableBorder.IsLeftLineValid = 1
                ' ORange5.TableBorder.IsRightLineValid = 1


                'assigining values'
                aBorder.TopLine = aTopLine
                aBorder.BottomLine = aTopLine
                aBorder.RightLine = aTopLine
                aBorder.LeftLine = aTopLine

                aBorder1.TopLine = aTopLine
                aBorder1.BottomLine = aTopLine
                aBorder1.RightLine = aTopLine
                aBorder1.LeftLine = aTopLine

                aBorder2.TopLine = aTopLine
                aBorder2.BottomLine = aTopLine
                aBorder2.RightLine = aTopLine
                aBorder2.LeftLine = aTopLine

                aBorder3.TopLine = aTopLine
                aBorder3.BottomLine = aTopLine
                aBorder3.RightLine = aTopLine
                aBorder3.LeftLine = aTopLine


                aBorder4.TopLine = aTopLine
                aBorder4.BottomLine = aTopLine
                aBorder4.RightLine = aTopLine
                aBorder4.LeftLine = aTopLine

                aBorder5.TopLine = aTopLine
                aBorder5.BottomLine = aTopLine
                aBorder5.RightLine = aTopLine
                aBorder5.LeftLine = aTopLine






                'set col width'

                SetColWidth(0, 0.25, oSheet)
                SetColWidth(1, 0.25, oSheet)
                SetColWidth(2, 0.25, oSheet)
                SetColWidth(3, 0.25, oSheet)
                SetColWidth(4, 0.25, oSheet)
                SetColWidth(5, 0.25, oSheet)
                SetColWidth(6, 0.25, oSheet)
                SetColWidth(7, 0.25, oSheet)
                SetColWidth(8, 0.25, oSheet)
                SetColWidth(9, 0.25, oSheet)
                SetColWidth(10, 0.25, oSheet)
                SetColWidth(11, 0.25, oSheet)
                SetColWidth(12, 0.25, oSheet)
                SetColWidth(13, 0.25, oSheet)
                SetColWidth(14, 0.25, oSheet)
                SetColWidth(15, 0.25, oSheet)
                SetColWidth(16, 0.25, oSheet)
                SetColWidth(17, 0.25, oSheet)
                SetColWidth(18, 0.25, oSheet)
                SetColWidth(19, 0.25, oSheet)
                SetColWidth(20, 0.25, oSheet)
                SetColWidth(21, 0.25, oSheet)
                SetColWidth(22, 0.25, oSheet)
                SetColWidth(23, 0.25, oSheet)
                SetColWidth(24, 0.25, oSheet)
                SetColWidth(25, 0.25, oSheet)
                SetColWidth(26, 0.25, oSheet)
                SetColWidth(27, 0.25, oSheet)
                SetColWidth(28, 0.25, oSheet)
                SetColWidth(29, 0.25, oSheet)
                SetColWidth(30, 0.25, oSheet)
                SetColWidth(31, 0.25, oSheet)

                Dim oRow
                For cnt = 0 To 64
                    oRow = oSheet.getRows().getByIndex(cnt)
                    oRow.Height = 425
                Next cnt
                '  Merging cells'

                ocell = oSheet.getCellrangeByname("B2:H8")
                ocell.CharFontName = "Calibri"
                ocell.CharHeight = 9
                ocell1 = oSheet.getCellrangeByname("I1:W1")
                ocell1.CharFontName = "Calibri"
                ocell1.CharHeight = 9
                ocell2 = oSheet.getCellrangeByname("I2:W2")
                ocell2.CharFontName = "Calibri"
                ocell2.CharHeight = 9
                ocell3 = oSheet.getCellrangeByname("I3:M3")
                ocell3.CharFontName = "Calibri"
                ocell3.CharHeight = 9
                ocell4 = oSheet.getCellrangeByname("I4:M4")
                ocell4.CharFontName = "Calibri"
                ocell4.CharHeight = 9
                ocell5 = oSheet.getCellrangeByname("I5:M5")
                ocell5.CharFontName = "Calibri"
                ocell5.CharHeight = 9
                ocell6 = oSheet.getCellrangeByname("I6:M6")
                ocell6.CharFontName = "Calibri"
                ocell6.CharHeight = 9
                ocell7 = oSheet.getCellrangeByname("N3:W3")
                ocell7.CharFontName = "Calibri"
                ocell7.CharHeight = 9
                ocell8 = oSheet.getCellrangeByname("N4:W4")
                ocell8.CharFontName = "Calibri"
                ocell8.CharHeight = 9
                ocell9 = oSheet.getCellrangeByname("N5:W5")
                ocell9.CharFontName = "Calibri"
                ocell9.CharHeight = 9
                ocell10 = oSheet.getCellrangeByname("N6:W6")
                ocell10.CharFontName = "Calibri"
                ocell10.CharHeight = 9
                ocell11 = oSheet.getCellrangeByname("X1:AA1")
                ocell11.CharFontName = "Calibri"
                ocell11.CharHeight = 9
                ocell12 = oSheet.getCellrangeByname("X2:AA2")
                ocell12.CharFontName = "Calibri"
                ocell12.CharHeight = 9
                ocell13 = oSheet.getCellrangeByname("X3:AA3")
                ocell13.CharFontName = "Calibri"
                ocell13.CharHeight = 9
                ocell14 = oSheet.getCellrangeByname("X4:AA4")
                ocell14.CharFontName = "Calibri"
                ocell14.CharHeight = 9
                ocell15 = oSheet.getCellrangeByname("X5:AA5")
                ocell15.CharFontName = "Calibri"
                ocell15.CharHeight = 9
                ocell16 = oSheet.getCellrangeByname("X6:AA6")
                ocell16.CharFontName = "Calibri"
                ocell16.CharHeight = 9
                ocell17 = oSheet.getCellrangeByname("X7:AA7")
                ocell17.CharFontName = "Calibri"
                ocell17.CharHeight = 9
                ocell18 = oSheet.getCellrangeByname("X8:AA8")
                ocell18.CharFontName = "Calibri"
                ocell18.CharHeight = 9
                ocell19 = oSheet.getCellrangeByname("AB1:AE1")
                ocell19.CharFontName = "Calibri"
                ocell19.CharHeight = 9
                ocell20 = oSheet.getCellrangeByname("AB2:AE2")
                ocell20.CharFontName = "Calibri"
                ocell20.CharHeight = 9
                ocell21 = oSheet.getCellrangeByname("AB3:AE3")
                ocell21.CharFontName = "Calibri"
                ocell21.CharHeight = 9
                ocell22 = oSheet.getCellrangeByname("AB4:AE4")
                ocell22.CharFontName = "Calibri"
                ocell22.CharHeight = 9
                ocell23 = oSheet.getCellrangeByname("AB5:AE5")
                ocell23.CharFontName = "Calibri"
                ocell23.CharHeight = 9
                ocell24 = oSheet.getCellrangeByname("AB6:AE6")
                ocell24.CharFontName = "Calibri"
                ocell24.CharHeight = 9
                ocell25 = oSheet.getCellrangeByname("AB7:AE7")
                ocell25.CharFontName = "Calibri"
                ocell25.CharHeight = 9
                ocell26 = oSheet.getCellrangeByname("AB8:AE8")
                ocell26.CharFontName = "Calibri"
                ocell26.CharHeight = 9
                ocell131 = oSheet.getCellRangeByname("B9:D9")
                ocell131.CharFontName = "Calibri"
                ocell131.CharHeight = 9
                ocell27 = oSheet.getCellrangeByname("E9:H9")
                ocell27.CharFontName = "Calibri"
                ocell27.CharHeight = 9
                ocell132 = oSheet.getCellrangeByname("M9:R9")
                ocell132.CharFontName = "Calibri"
                ocell132.CharHeight = 9
                ocell28 = oSheet.getCellrangeByname("S9:U9")
                ocell28.CharFontName = "Calibri"
                ocell28.CharHeight = 9
                ocell29 = oSheet.getCellrangeByname("V9:X9")
                ocell29.CharFontName = "Calibri"
                ocell29.CharHeight = 9
                ocell30 = oSheet.getCellrangeByname("Y9:AC9")
                ocell30.CharFontName = "Calibri"
                ocell30.CharHeight = 9
                ocell31 = oSheet.getCellrangeByname("B10:H10")
                ocell31.CharFontName = "Calibri"
                ocell31.CharHeight = 9
                ocell32 = oSheet.getCellrangeByname("I10:L10")
                ocell32.CharFontName = "Calibri"
                ocell32.CharHeight = 9
                ocell33 = oSheet.getCellrangeByname("M10:P10")
                ocell33.CharFontName = "Calibri"
                ocell33.CharHeight = 9
                ocell34 = oSheet.getCellrangeByname("Q10:T10")
                ocell34.CharFontName = "Calibri"
                ocell34.CharHeight = 9
                ocell35 = oSheet.getCellrangeByname("U10:X10")
                ocell35.CharFontName = "Calibri"
                ocell35.CharHeight = 9
                ocell36 = oSheet.getCellrangeByname("Y10:AE10")
                ocell36.CharFontName = "Calibri"
                ocell36.CharHeight = 9
                ocell37 = oSheet.getCellrangeByname("B11:H11")
                ocell37.CharFontName = "Calibri"
                ocell37.CharHeight = 9
                ocell38 = oSheet.getCellrangeByname("B12:H12")
                ocell38.CharFontName = "Calibri"
                ocell38.CharHeight = 9
                ocell39 = oSheet.getCellrangeByname("B13:H13")
                ocell39.CharFontName = "Calibri"
                ocell39.CharHeight = 9
                ocell40 = oSheet.getCellrangeByname("B14:H14")
                ocell40.CharFontName = "Calibri"
                ocell40.CharHeight = 9
                ocell41 = oSheet.getCellrangeByname("B15:H15")
                ocell41.CharFontName = "Calibri"
                ocell41.CharHeight = 9
                ocell42 = oSheet.getCellrangeByname("B16:H16")
                ocell42.CharFontName = "Calibri"
                ocell42.CharHeight = 9
                ocell43 = oSheet.getCellrangeByname("B17:H17")
                ocell43.CharFontName = "Calibri"
                ocell43.CharHeight = 9
                ocell44 = oSheet.getCellrangeByname("B18:H18")
                ocell44.CharFontName = "Calibri"
                ocell44.CharHeight = 9
                ocell45 = oSheet.getCellrangeByname("B19:H19")
                ocell45.CharFontName = "Calibri"
                ocell45.CharHeight = 9
                ocell46 = oSheet.getCellrangeByname("B20:H20")
                ocell46.CharFontName = "Calibri"
                ocell46.CharHeight = 9
                ocell47 = oSheet.getCellrangeByname("B21:H21")
                ocell47.CharFontName = "Calibri"
                ocell47.CharHeight = 9
                ocell48 = oSheet.getCellrangeByname("B22:H22")
                ocell48.CharFontName = "Calibri"
                ocell48.CharHeight = 9
                ocell49 = oSheet.getCellrangeByname("B23:H23")
                ocell49.CharFontName = "Calibri"
                ocell49.CharHeight = 9
                ocell50 = oSheet.getCellrangeByname("B24:H24")
                ocell50.CharFontName = "Calibri"
                ocell50.CharHeight = 9
                ocell51 = oSheet.getCellrangeByname("B25:H25")
                ocell51.CharFontName = "Calibri"
                ocell51.CharHeight = 9
                ocell52 = oSheet.getCellrangeByname("B26:H26")
                ocell52.CharFontName = "Calibri"
                ocell52.CharHeight = 9
                ocell53 = oSheet.getCellrangeByname("B27:H27")
                ocell53.CharFontName = "Calibri"
                ocell53.CharHeight = 9
                ocell54 = oSheet.getCellrangeByname("B28:H28")
                ocell54.CharFontName = "Calibri"
                ocell54.CharHeight = 9
                ocell55 = oSheet.getCellrangeByname("B29:H29")
                ocell55.CharFontName = "Calibri"
                ocell55.CharHeight = 9
                ocell56 = oSheet.getCellrangeByname("I11:L11")
                ocell56.CharFontName = "Calibri"
                ocell56.CharHeight = 9
                ocell57 = oSheet.getCellrangeByname("I12:L12")
                ocell57.CharFontName = "Calibri"
                ocell57.CharHeight = 9
                ocell58 = oSheet.getCellrangeByname("I13:L13")
                ocell58.CharFontName = "Calibri"
                ocell58.CharHeight = 9
                ocell59 = oSheet.getCellrangeByname("I14:L14")
                ocell59.CharFontName = "Calibri"
                ocell59.CharHeight = 9
                ocell60 = oSheet.getCellrangeByname("I15:L15")
                ocell60.CharFontName = "Calibri"
                ocell60.CharHeight = 9
                ocell61 = oSheet.getCellrangeByname("I16:L16")
                ocell61.CharFontName = "Calibri"
                ocell61.CharHeight = 9
                ocell62 = oSheet.getCellrangeByname("I17:L17")
                ocell62.CharFontName = "Calibri"
                ocell62.CharHeight = 9
                ocell63 = oSheet.getCellrangeByname("I18:L18")
                ocell63.CharFontName = "Calibri"
                ocell63.CharHeight = 9
                ocell64 = oSheet.getCellrangeByname("I19:L19")
                ocell64.CharFontName = "Calibri"
                ocell64.CharHeight = 9
                ocell65 = oSheet.getCellrangeByname("I20:L20")
                ocell65.CharFontName = "Calibri"
                ocell65.CharHeight = 9
                ocell66 = oSheet.getCellrangeByname("I21:L21")
                ocell66.CharFontName = "Calibri"
                ocell66.CharHeight = 9
                ocell67 = oSheet.getCellrangeByname("I22:L22")
                ocell67.CharFontName = "Calibri"
                ocell67.CharHeight = 9
                ocell68 = oSheet.getCellrangeByname("I23:L23")
                ocell68.CharFontName = "Calibri"
                ocell68.CharHeight = 9
                ocell69 = oSheet.getCellrangeByname("I24:L24")
                ocell69.CharFontName = "Calibri"
                ocell69.CharHeight = 9
                ocell70 = oSheet.getCellrangeByname("I25:L25")
                ocell70.CharFontName = "Calibri"
                ocell70.CharHeight = 9
                ocell71 = oSheet.getCellrangeByname("I26:L26")
                ocell71.CharFontName = "Calibri"
                ocell71.CharHeight = 9
                ocell72 = oSheet.getCellrangeByname("I27:L27")
                ocell72.CharFontName = "Calibri"
                ocell72.CharHeight = 9
                ocell73 = oSheet.getCellrangeByname("I28:L28")
                ocell73.CharFontName = "Calibri"
                ocell73.CharHeight = 9
                ocell74 = oSheet.getCellrangeByname("I29:L29")
                ocell74.CharFontName = "Calibri"
                ocell74.CharHeight = 9
                ocell75 = oSheet.getCellrangeByname("M11:P11")
                ocell75.CharFontName = "Calibri"
                ocell75.CharHeight = 9
                ocell76 = oSheet.getCellrangeByname("M12:P12")
                ocell76.CharFontName = "Calibri"
                ocell76.CharHeight = 9
                ocell77 = oSheet.getCellrangeByname("M13:P13")
                ocell77.CharFontName = "Calibri"
                ocell77.CharHeight = 9
                ocell78 = oSheet.getCellrangeByname("M14:P14")
                ocell78.CharFontName = "Calibri"
                ocell78.CharHeight = 9
                ocell79 = oSheet.getCellrangeByname("M15:P15")
                ocell79.CharFontName = "Calibri"
                ocell79.CharHeight = 9
                ocell80 = oSheet.getCellrangeByname("M16:P16")
                ocell80.CharFontName = "Calibri"
                ocell80.CharHeight = 9
                ocell81 = oSheet.getCellrangeByname("M17:P17")
                ocell81.CharFontName = "Calibri"
                ocell81.CharHeight = 9
                ocell82 = oSheet.getCellrangeByname("M18:P18")
                ocell82.CharFontName = "Calibri"
                ocell82.CharHeight = 9
                ocell83 = oSheet.getCellrangeByname("M19:P19")
                ocell83.CharFontName = "Calibri"
                ocell83.CharHeight = 9
                ocell84 = oSheet.getCellrangeByname("M20:P20")
                ocell84.CharFontName = "Calibri"
                ocell84.CharHeight = 9
                ocell85 = oSheet.getCellrangeByname("M21:P21")
                ocell85.CharFontName = "Calibri"
                ocell85.CharHeight = 9
                ocell86 = oSheet.getCellrangeByname("M22:P22")
                ocell86.CharFontName = "Calibri"
                ocell86.CharHeight = 9
                ocell87 = oSheet.getCellrangeByname("M23:P23")
                ocell87.CharFontName = "Calibri"
                ocell87.CharHeight = 9
                ocell88 = oSheet.getCellrangeByname("M24:P24")
                ocell88.CharFontName = "Calibri"
                ocell88.CharHeight = 9
                ocell89 = oSheet.getCellrangeByname("M25:P25")
                ocell89.CharFontName = "Calibri"
                ocell89.CharHeight = 9
                ocell90 = oSheet.getCellrangeByname("M26:P26")
                ocell90.CharFontName = "Calibri"
                ocell90.CharHeight = 9
                ocell91 = oSheet.getCellrangeByname("M27:P27")
                ocell91.CharFontName = "Calibri"
                ocell91.CharHeight = 9
                ocell92 = oSheet.getCellrangeByname("M28:N28")
                ocell92.CharFontName = "Calibri"
                ocell92.CharHeight = 9
                ocell93 = oSheet.getCellrangeByname("M29:N29")
                ocell93.CharFontName = "Calibri"
                ocell93.CharHeight = 9
                ocell180 = oSheet.getCellrangeByname("O28:P28")
                ocell180.CharFontName = "Calibri"
                ocell180.CharHeight = 9
                ocell181 = oSheet.getCellrangeByname("O29:P29")
                ocell181.CharFontName = "Calibri"
                ocell181.CharHeight = 9
                ocell272 = oSheet.getCellrangeByname("I9:L9")
                ocell272.CharFontName = "Calibri"
                ocell272.CharHeight = 9
                'MAX FLOW'
                ocell133 = oSheet.getCellrangeByname("U11:X11")
                ocell133.CharFontName = "Calibri"
                ocell133.CharHeight = 9
                ocell94 = oSheet.getCellrangeByname("U12:X12")
                ocell94.CharFontName = "Calibri"
                ocell94.CharHeight = 9
                ocell95 = oSheet.getCellrangeByname("U13:X13")
                ocell95.CharFontName = "Calibri"
                ocell95.CharHeight = 9
                ocell96 = oSheet.getCellrangeByname("U14:X14")
                ocell96.CharFontName = "Calibri"
                ocell96.CharHeight = 9
                ocell97 = oSheet.getCellrangeByname("U15:X15")
                ocell97.CharFontName = "Calibri"
                ocell97.CharHeight = 9
                ocell98 = oSheet.getCellrangeByname("U16:X16")
                ocell98.CharFontName = "Calibri"
                ocell98.CharHeight = 9
                ocell99 = oSheet.getCellrangeByname("U17:X17")
                ocell99.CharFontName = "Calibri"
                ocell99.CharHeight = 9
                ocell100 = oSheet.getCellrangeByname("U18:X18")
                ocell100.CharFontName = "Calibri"
                ocell100.CharHeight = 9
                ocell101 = oSheet.getCellrangeByname("U19:X19")
                ocell101.CharFontName = "Calibri"
                ocell101.CharHeight = 9
                ocell102 = oSheet.getCellrangeByname("U20:X20")
                ocell102.CharFontName = "Calibri"
                ocell102.CharHeight = 9
                ocell134 = oSheet.getCellrangeByname("U21:X21")
                ocell134.CharFontName = "Calibri"
                ocell134.CharHeight = 9
                ocell135 = oSheet.getCellrangeByname("U22:X22")
                ocell135.CharFontName = "Calibri"
                ocell135.CharHeight = 9
                ocell136 = oSheet.getCellrangeByname("U23:X23")
                ocell136.CharFontName = "Calibri"
                ocell136.CharHeight = 9
                ocell137 = oSheet.getCellrangeByname("U24:X24")
                ocell137.CharFontName = "Calibri"
                ocell137.CharHeight = 9
                ocell138 = oSheet.getCellrangeByname("U25:X25")
                ocell138.CharFontName = "Calibri"
                ocell138.CharHeight = 9
                ocell139 = oSheet.getCellrangeByname("U26:X26")
                ocell139.CharFontName = "Calibri"
                ocell139.CharHeight = 9
                ocell103 = oSheet.getCellrangeByname("U27:X27")
                ocell103.CharFontName = "Calibri"
                ocell103.CharHeight = 9
                ocell104 = oSheet.getCellrangeByname("U28:V28")
                ocell104.CharFontName = "Calibri"
                ocell104.CharHeight = 9
                ocell105 = oSheet.getCellrangeByname("U29:V29")
                ocell105.CharFontName = "Calibri"
                ocell105.CharHeight = 9
                ocell182 = oSheet.getCellrangeByname("W28:X28")
                ocell182.CharFontName = "Calibri"
                ocell182.CharHeight = 9
                ocell202 = oSheet.getCellrangeByname("W29:X29")
                ocell202.CharFontName = "Calibri"
                ocell202.CharHeight = 9

                'empty cells'
                ocell106 = oSheet.getCellrangeByname("Y11:AE11")
                ocell107 = oSheet.getCellrangeByname("Y12:AE12")
                ocell108 = oSheet.getCellrangeByname("Y13:AE13")
                ocell109 = oSheet.getCellrangeByname("Y14:AE14")
                ocell110 = oSheet.getCellrangeByname("Y15:AE15")
                ocell147 = oSheet.getCellrangeByname("Y16:AE16")
                ocell183 = oSheet.getCellrangeByname("Y17:AE17")
                ocell184 = oSheet.getCellrangeByname("Y18:AE18")
                ocell185 = oSheet.getCellrangeByname("Y19:AE19")
                ocell186 = oSheet.getCellrangeByname("Y20:AE20")
                ocell187 = oSheet.getCellrangeByname("Y21:AE21")
                ocell188 = oSheet.getCellrangeByname("Y22:AE22")
                ocell191 = oSheet.getCellRangeByname("Y23:AE23")
                ocell111 = oSheet.getCellrangeByname("Y24:AE24")
                ocell112 = oSheet.getCellrangeByname("Y25:AE25")
                ocell113 = oSheet.getCellrangeByname("Y26:AE26")
                ocell114 = oSheet.getCellrangeByname("Y27:AE27")
                ocell115 = oSheet.getCellrangeByname("Y28:AE28")
                ocell149 = oSheet.getCellrangeByname("Y29:AE29")


                'avg flow'
                ocell150 = oSheet.getCellrangeByname("Q11:T11")
                ocell150.CharFontName = "Calibri"
                ocell150.CharHeight = 9
                ocell151 = oSheet.getCellrangeByname("Q12:T12")
                ocell151.CharFontName = "Calibri"
                ocell151.CharHeight = 9
                ocell152 = oSheet.getCellrangeByname("Q13:T13")
                ocell152.CharFontName = "Calibri"
                ocell152.CharHeight = 9
                ocell153 = oSheet.getCellrangeByname("Q14:T14")
                ocell153.CharFontName = "Calibri"
                ocell153.CharHeight = 9
                ocell192 = oSheet.getCellrangeByname("Q15:T15")
                ocell192.CharFontName = "Calibri"
                ocell192.CharHeight = 9
                ocell193 = oSheet.getCellrangeByname("Q16:T16")
                ocell193.CharFontName = "Calibri"
                ocell193.CharHeight = 9
                ocell194 = oSheet.getCellrangeByname("Q17:T17")
                ocell194.CharFontName = "Calibri"
                ocell194.CharHeight = 9
                ocell116 = oSheet.getCellrangeByname("Q18:T18")
                ocell116.CharFontName = "Calibri"
                ocell116.CharHeight = 9
                ocell117 = oSheet.getCellrangeByname("Q19:T19")
                ocell117.CharFontName = "Calibri"
                ocell117.CharHeight = 9
                ocell118 = oSheet.getCellrangeByname("Q20:T20")
                ocell118.CharFontName = "Calibri"
                ocell118.CharHeight = 9
                ocell119 = oSheet.getCellrangeByname("Q21:T21")
                ocell119.CharFontName = "Calibri"
                ocell119.CharHeight = 9
                ocell120 = oSheet.getCellrangeByname("Q22:T22")
                ocell120.CharFontName = "Calibri"
                ocell120.CharHeight = 9
                ocell121 = oSheet.getCellrangeByname("Q23:T23")
                ocell121.CharFontName = "Calibri"
                ocell121.CharHeight = 9
                ocell122 = oSheet.getCellrangeByname("Q24:T24")
                ocell122.CharFontName = "Calibri"
                ocell122.CharHeight = 9
                ocell123 = oSheet.getCellrangeByname("Q25:T25")
                ocell123.CharFontName = "Calibri"
                ocell123.CharHeight = 9
                ocell124 = oSheet.getCellrangeByname("Q26:T26")
                ocell124.CharFontName = "Calibri"
                ocell124.CharHeight = 9
                ocell125 = oSheet.getCellrangeByname("Q27:T27")
                ocell125.CharFontName = "Calibri"
                ocell125.CharHeight = 9
                ocell196 = oSheet.getCellrangeByname("Q28:R28")
                ocell196.CharFontName = "Calibri"
                ocell196.CharHeight = 9
                ocell197 = oSheet.getCellrangeByname("Q29:R29")
                ocell197.CharFontName = "Calibri"
                ocell197.CharHeight = 9
                ocell126 = oSheet.getCellrangeByname("S28:T28")
                ocell126.CharFontName = "Calibri"
                ocell126.CharHeight = 9
                ocell127 = oSheet.getCellrangeByname("S29:T29")
                ocell127.CharFontName = "Calibri"
                ocell127.CharHeight = 9

                'Line'
                ocell128 = oSheet.getCellrangeByname("B30:O30")
                ocell128.CharFontName = "Calibri"
                ocell128.CharHeight = 9
                'ocell129 = oSheet.getCellrangeByname("H30:P30")
                ocell130 = oSheet.getCellrangeByname("B31:F32")
                ocell130.CharFontName = "Calibri"
                ocell130.CharHeight = 9
                ocell140 = oSheet.getCellrangeByname("B33:H33")
                ocell140.CharFontName = "Calibri"
                ocell140.CharHeight = 9
                ocell141 = oSheet.getCellrangeByname("G31:H31")
                ocell141.CharFontName = "Calibri"
                ocell141.CharHeight = 9
                ocell142 = oSheet.getCellrangeByname("G32:H32")
                ocell142.CharFontName = "Calibri"
                ocell142.CharHeight = 9
                ocell143 = oSheet.getCellrangeByname("I31:L31")
                ocell143.CharFontName = "Calibri"
                ocell143.CharHeight = 9
                ocell144 = oSheet.getCellrangeByname("M31:O31")
                ocell144.CharFontName = "Calibri"
                ocell144.CharHeight = 9
                ocell145 = oSheet.getCellrangeByname("I32:L32")
                ocell145.CharFontName = "Calibri"
                ocell145.CharHeight = 9
                ocell146 = oSheet.getCellrangeByname("M32:O32")
                ocell146.CharFontName = "Calibri"
                ocell146.CharHeight = 9
                'ocell129
                ocell129 = oSheet.getCellrangeByname("I33:O33")
                ocell129.CharFontName = "Calibri"
                ocell129.CharHeight = 9

                'VaLVE BODY/BONNET'
                ocell189 = oSheet.getCellrangeByname("B34:O34")
                ocell189.CharFontName = "Calibri"
                ocell189.CharHeight = 9
                ocell190 = oSheet.getCellrangeByname("B44:O44")
                ocell190.CharFontName = "Calibri"
                ocell190.CharHeight = 9
                ocell148 = oSheet.getCellrangeByname("B35:H35")
                ocell148.CharFontName = "Calibri"
                ocell148.CharHeight = 9
                ocell154 = oSheet.getCellrangeByname("B36:H36")
                ocell154.CharFontName = "Calibri"
                ocell154.CharHeight = 9
                ocell155 = oSheet.getCellrangeByname("B37:H37")
                ocell155.CharFontName = "Calibri"
                ocell155.CharHeight = 9
                ocell156 = oSheet.getCellrangeByname("B38:H38")
                ocell156.CharFontName = "Calibri"
                ocell156.CharHeight = 9
                ocell157 = oSheet.getCellrangeByname("B39:H39")
                ocell157.CharFontName = "Calibri"
                ocell157.CharHeight = 9
                ocell158 = oSheet.getCellrangeByname("B40:H40")
                ocell158.CharFontName = "Calibri"
                ocell158.CharHeight = 9
                ocell159 = oSheet.getCellrangeByname("B41:H41")
                ocell159.CharFontName = "Calibri"
                ocell159.CharHeight = 9
                ocell160 = oSheet.getCellrangeByname("B42:H42")
                ocell160.CharFontName = "Calibri"
                ocell160.CharHeight = 9
                ocell275 = oSheet.getCellrangeByname("B43:H43")
                ocell275.CharFontName = "Calibri"
                ocell275.CharHeight = 9
                ocell161 = oSheet.getCellrangeByname("I35:J35")
                ocell161.CharFontName = "Calibri"
                ocell161.CharHeight = 9
                ocell162 = oSheet.getCellrangeByname("I36:N36")
                ocell162.CharFontName = "Calibri"
                ocell162.CharHeight = 9
                ocell163 = oSheet.getCellrangeByname("I37:J37")
                ocell163.CharFontName = "Calibri"
                ocell163.CharHeight = 9
                ocell199 = oSheet.getCellrangeByname("K37:J37")
                ocell199.CharFontName = "Calibri"
                ocell199.CharHeight = 9
                ocell200 = oSheet.getCellrangeByname("M37:O37")
                ocell200.CharFontName = "Calibri"
                ocell200.CharHeight = 9
                ocell201 = oSheet.getCellrangeByname("K35:L35")
                ocell201.CharFontName = "Calibri"
                ocell201.CharHeight = 9
                ocell203 = oSheet.getCellrangeByname("M35:N35")
                ocell203.CharFontName = "Calibri"
                ocell203.CharHeight = 9
                ocell204 = oSheet.getCellrangeByname("O35")
                ocell204.CharFontName = "Calibri"
                ocell204.CharHeight = 9
                ocell164 = oSheet.getCellrangeByname("I38:O38")
                ocell164.CharFontName = "Calibri"
                ocell164.CharHeight = 9
                ocell165 = oSheet.getCellrangeByname("I39:O39")
                ocell165.CharFontName = "Calibri"
                ocell165.CharHeight = 9
                ocell166 = oSheet.getCellrangeByname("I40:O40")
                ocell166.CharFontName = "Calibri"
                ocell166.CharHeight = 9
                ocell167 = oSheet.getCellrangeByname("I41:O41")
                ocell167.CharFontName = "Calibri"
                ocell167.CharHeight = 9
                ocell168 = oSheet.getCellrangeByname("I42:O42")
                ocell168.CharFontName = "Calibri"
                ocell168.CharHeight = 9
                ocell276 = oSheet.getCellrangeByname("I43:O43")
                ocell276.CharFontName = "Calibri"
                ocell276.CharHeight = 9
                'TRIM/INTERNALS
                ocell169 = oSheet.getCellrangeByname("B40:G40")
                ocell169.CharFontName = "Calibri"
                ocell169.CharHeight = 9
                ocell170 = oSheet.getCellrangeByname("H40:P40")
                ocell170.CharFontName = "Calibri"
                ocell170.CharHeight = 9
                ocell195 = oSheet.getCellrangeByname("B45:H45")
                ocell195.CharFontName = "Calibri"
                ocell195.CharHeight = 9
                ocell198 = oSheet.getCellrangeByname("B46:H46")
                ocell198.CharFontName = "Calibri"
                ocell198.CharHeight = 9
                ocell171 = oSheet.getCellrangeByname("B47:H47")
                ocell171.CharFontName = "Calibri"
                ocell171.CharHeight = 9
                ocell172 = oSheet.getCellrangeByname("B48:H48")
                ocell172.CharFontName = "Calibri"
                ocell172.CharHeight = 9
                ocell173 = oSheet.getCellrangeByname("B49:H49")
                ocell173.CharFontName = "Calibri"
                ocell173.CharHeight = 9
                ocell174 = oSheet.getCellrangeByname("B50:H50")
                ocell174.CharFontName = "Calibri"
                ocell174.CharHeight = 9
                ocell175 = oSheet.getCellrangeByname("B51:H51")
                ocell175.CharFontName = "Calibri"
                ocell175.CharHeight = 9
                ocell176 = oSheet.getCellrangeByname("B52:H52")
                ocell176.CharFontName = "Calibri"
                ocell176.CharHeight = 9
                ocell177 = oSheet.getCellrangeByname("B53:H53")
                ocell177.CharFontName = "Calibri"
                ocell177.CharHeight = 9
                ocell178 = oSheet.getCellrangeByname("B54:H54")
                ocell178.CharFontName = "Calibri"
                ocell178.CharHeight = 9
                ocell179 = oSheet.getCellrangeByname("B55:H56")
                ocell179.CharFontName = "Calibri"
                ocell179.CharHeight = 9
                ocell273 = oSheet.getCellrangeByname("B57:H57")
                ocell273.CharFontName = "Calibri"
                ocell273.CharHeight = 9
                ocell205 = oSheet.getCellrangeByname("B58:F58")
                ocell205.CharFontName = "Calibri"
                ocell205.CharHeight = 9
                ocell206 = oSheet.getCellrangeByname("I45:O45")
                ocell206.CharFontName = "Calibri"
                ocell206.CharHeight = 9
                ocell207 = oSheet.getCellrangeByname("I46:O46")
                ocell207.CharFontName = "Calibri"
                ocell207.CharHeight = 9
                ocell208 = oSheet.getCellrangeByname("I47:O47")
                ocell208.CharFontName = "Calibri"
                ocell208.CharHeight = 9
                ocell209 = oSheet.getCellrangeByname("I48:O48")
                ocell209.CharFontName = "Calibri"
                ocell209.CharHeight = 9
                ocell210 = oSheet.getCellrangeByname("I49:O49")
                ocell210.CharFontName = "Calibri"
                ocell210.CharHeight = 9
                ocell211 = oSheet.getCellrangeByname("I50:O50")
                ocell211.CharFontName = "Calibri"
                ocell211.CharHeight = 9
                ocell212 = oSheet.getCellrangeByname("I51:O51")
                ocell212.CharFontName = "Calibri"
                ocell212.CharHeight = 9
                ocell213 = oSheet.getCellrangeByname("I52:O52")
                ocell213.CharFontName = "Calibri"
                ocell213.CharHeight = 9
                ocell214 = oSheet.getCellrangeByname("I53:O53")
                ocell214.CharFontName = "Calibri"
                ocell214.CharHeight = 9
                ocell215 = oSheet.getCellrangeByname("I54:O54")
                ocell215.CharFontName = "Calibri"
                ocell215.CharHeight = 9
                ocell216 = oSheet.getCellrangeByname("I55:O56")
                ocell216.CharFontName = "Calibri"
                ocell216.CharHeight = 9
                ocell274 = oSheet.getCellrangeByname("I57:O57")
                ocell274.CharFontName = "Calibri"
                ocell274.CharHeight = 9
                ocell217 = oSheet.getCellrangeByname("G58:O58")
                ocell217.CharFontName = "Calibri"
                ocell217.CharHeight = 9

                'for Actuator'
                Dim ocell221 As Object
                ocell218 = oSheet.getCellrangeByname("R30:AE30")
                ocell218.CharFontName = "Calibri"
                ocell218.CharHeight = 9
                ocell219 = oSheet.getCellrangeByname("R31:W31")
                ocell219.CharFontName = "Calibri"
                ocell219.CharHeight = 9
                ocell220 = oSheet.getCellrangeByname("R32:W32")
                ocell220.CharFontName = "Calibri"
                ocell220.CharHeight = 9
                ocell221 = oSheet.getCellrangeByname("R33:W33")
                ocell221.CharFontName = "Calibri"
                ocell221.CharHeight = 9
                ocell222 = oSheet.getCellrangeByname("R34:W34")
                ocell222.CharFontName = "Calibri"
                ocell222.CharHeight = 9
                ocell223 = oSheet.getCellrangeByname("R35:W35")
                ocell223.CharFontName = "Calibri"
                ocell223.CharHeight = 9
                ocell224 = oSheet.getCellrangeByname("R36:W36")
                ocell224.CharFontName = "Calibri"
                ocell224.CharHeight = 9
                ocell225 = oSheet.getCellrangeByname("R37:W37")
                ocell225.CharFontName = "Calibri"
                ocell225.CharHeight = 9
                ocell226 = oSheet.getCellrangeByname("R38:W38")
                ocell226.CharFontName = "Calibri"
                ocell226.CharHeight = 9
                ocell227 = oSheet.getCellrangeByname("R39:W39")
                ocell227.CharFontName = "Calibri"
                ocell227.CharHeight = 9
                ocell228 = oSheet.getCellrangeByname("R40:W40")
                ocell228.CharFontName = "Calibri"
                ocell228.CharHeight = 9
                ocell229 = oSheet.getCellrangeByname("X31:AE31")
                ocell229.CharFontName = "Calibri"
                ocell229.CharHeight = 9
                ocell230 = oSheet.getCellrangeByname("X32:AE32")
                ocell230.CharFontName = "Calibri"
                ocell230.CharHeight = 9
                ocell231 = oSheet.getCellrangeByname("X33:AE33")
                ocell231.CharFontName = "Calibri"
                ocell231.CharHeight = 9
                ocell232 = oSheet.getCellrangeByname("X34:AE34")
                ocell232.CharFontName = "Calibri"
                ocell232.CharHeight = 9
                ocell233 = oSheet.getCellrangeByname("X35:AE35")
                ocell233.CharFontName = "Calibri"
                ocell233.CharHeight = 9
                ocell234 = oSheet.getCellrangeByname("X36:AE36")
                ocell234.CharFontName = "Calibri"
                ocell234.CharHeight = 9
                ocell235 = oSheet.getCellrangeByname("X37:AE37")
                ocell235.CharFontName = "Calibri"
                ocell235.CharHeight = 9
                ocell236 = oSheet.getCellrangeByname("X38:AE38")
                ocell236.CharFontName = "Calibri"
                ocell236.CharHeight = 9
                ocell237 = oSheet.getCellrangeByname("X39:AE39")
                ocell237.CharFontName = "Calibri"
                ocell237.CharHeight = 9
                ocell238 = oSheet.getCellrangeByname("X40:AE40")
                ocell238.CharFontName = "Calibri"
                ocell238.CharHeight = 9
                'Positioner'
                ocell239 = oSheet.getCellrangeByname("R41:AE41")
                ocell239.CharFontName = "Calibri"
                ocell239.CharHeight = 9
                ocell240 = oSheet.getCellrangeByname("R42:W42")
                ocell240.CharFontName = "Calibri"
                ocell240.CharHeight = 9
                ocell241 = oSheet.getCellrangeByname("R43:W43")
                ocell241.CharFontName = "Calibri"
                ocell241.CharHeight = 9
                ocell242 = oSheet.getCellrangeByname("R44:W44")
                ocell242.CharFontName = "Calibri"
                ocell242.CharHeight = 9
                ocell243 = oSheet.getCellrangeByname("X42:AE42")
                ocell243.CharFontName = "Calibri"
                ocell243.CharHeight = 9
                ocell244 = oSheet.getCellrangeByname("X43:AE43")
                ocell244.CharFontName = "Calibri"
                ocell244.CharHeight = 9
                ocell245 = oSheet.getCellrangeByname("X44:AE44")
                ocell245.CharFontName = "Calibri"
                ocell245.CharHeight = 9
                'AirSet'
                ocell246 = oSheet.getCellrangeByname("R45:AE45")
                ocell246.CharFontName = "Calibri"
                ocell246.CharHeight = 9
                ocell247 = oSheet.getCellrangeByname("R46:W46")
                ocell247.CharFontName = "Calibri"
                ocell247.CharHeight = 9
                ocell248 = oSheet.getCellrangeByname("R47:W47")
                ocell248.CharFontName = "Calibri"
                ocell248.CharHeight = 9
                ocell249 = oSheet.getCellrangeByname("R48:W48")
                ocell249.CharFontName = "Calibri"
                ocell249.CharHeight = 9
                ocell250 = oSheet.getCellrangeByname("X46:AE46")
                ocell250.CharFontName = "Calibri"
                ocell250.CharHeight = 9
                ocell251 = oSheet.getCellrangeByname("X47:AE47")
                ocell251.CharFontName = "Calibri"
                ocell251.CharHeight = 9
                ocell252 = oSheet.getCellrangeByname("X48:AE48")
                ocell252.CharFontName = "Calibri"
                ocell252.CharHeight = 9
                'Switches'
                ocell253 = oSheet.getCellrangeByname("R49:AE49")
                ocell253.CharFontName = "Calibri"
                ocell253.CharHeight = 9
                ocell254 = oSheet.getCellrangeByname("R50:W50")
                ocell254.CharFontName = "Calibri"
                ocell254.CharHeight = 9
                ocell255 = oSheet.getCellrangeByname("R51:W51")
                ocell255.CharFontName = "Calibri"
                ocell255.CharHeight = 9
                ocell256 = oSheet.getCellrangeByname("X50:AE50")
                ocell256.CharFontName = "Calibri"
                ocell256.CharHeight = 9
                ocell257 = oSheet.getCellrangeByname("X51:AE51")
                ocell257.CharFontName = "Calibri"
                ocell257.CharHeight = 9
                'SOV'
                ocell258 = oSheet.getCellrangeByname("R52:AE52")
                ocell258.CharFontName = "Calibri"
                ocell258.CharHeight = 9
                ocell259 = oSheet.getCellrangeByname("R53:W53")
                ocell259.CharFontName = "Calibri"
                ocell259.CharHeight = 9
                ocell260 = oSheet.getCellrangeByname("R54:W54")
                ocell260.CharFontName = "Calibri"
                ocell260.CharHeight = 9
                ocell261 = oSheet.getCellrangeByname("X53:AE53")
                ocell261.CharFontName = "Calibri"
                ocell261.CharHeight = 9
                ocell262 = oSheet.getCellrangeByname("X54:AE54")
                ocell262.CharFontName = "Calibri"
                ocell262.CharHeight = 9
                'Accessories'
                ocell263 = oSheet.getCellrangeByname("R55:AE55")
                ocell263.CharFontName = "Calibri"
                ocell263.CharHeight = 9
                ocell264 = oSheet.getCellrangeByname("R56:W56")
                ocell264.CharFontName = "Calibri"
                ocell264.CharHeight = 9
                ocell265 = oSheet.getCellrangeByname("R57:W57")
                ocell265.CharFontName = "Calibri"
                ocell265.CharHeight = 9
                ocell266 = oSheet.getCellrangeByname("X56:AE56")
                ocell266.CharFontName = "Calibri"
                ocell266.CharHeight = 9
                ocell267 = oSheet.getCellrangeByname("X57:AE57")
                ocell267.CharFontName = "Calibri"
                ocell267.CharHeight = 9
                'Notes'
                'oWraptext = oSm.Bridge_GetStruct("com.sun.star.text.WrapTextMode")
                ocell268 = oSheet.getCellrangeByname("B59:AE59")
                ocell268.CharFontName = "Calibri"
                ocell268.CharHeight = 9
                ocell269 = oSheet.getCellrangeByname("B60:AE61")
                ocell269.CharFontName = "Calibri"
                ocell269.CharHeight = 9
                ocell270 = oSheet.getCellrangeByname("B62:AE63")
                ocell270.CharFontName = "Calibri"
                ocell270.CharHeight = 9
                ocell271 = oSheet.getCellrangeByname("B64:AE65")
                ocell271.CharFontName = "Calibri"
                ocell271.CharHeight = 9
                'oWraptext = oSheet.createInstance("com.star.text.WrapTextMode.DYNAMIC")
                'ocell268.oWraptext.isTextWrapped = True




                'merging cells'
                ocell.merge(True)
                ocell1.merge(True)
                ocell2.merge(True)
                ocell3.merge(True)
                ocell4.merge(True)
                ocell5.merge(True)
                ocell6.merge(True)
                ocell7.merge(True)
                ocell8.merge(True)
                ocell9.merge(True)
                ocell10.merge(True)
                ocell11.merge(True)
                ocell12.merge(True)
                ocell13.merge(True)
                ocell14.merge(True)
                ocell15.merge(True)
                ocell16.merge(True)
                ocell17.merge(True)
                ocell18.merge(True)
                ocell19.merge(True)
                ocell20.merge(True)
                ocell21.merge(True)
                ocell22.merge(True)
                ocell23.merge(True)
                ocell24.merge(True)
                ocell25.merge(True)
                ocell26.merge(True)
                ocell27.merge(True)
                ocell28.merge(True)
                ocell29.merge(True)
                ocell30.merge(True)
                ocell31.merge(True)
                ocell32.merge(True)
                ocell33.merge(True)
                ocell34.merge(True)
                ocell35.merge(True)
                ocell36.merge(True)
                ocell37.merge(True)
                ocell38.merge(True)
                ocell39.merge(True)
                ocell40.merge(True)
                ocell41.merge(True)
                ocell42.merge(True)
                ocell43.merge(True)
                ocell44.merge(True)
                ocell45.merge(True)
                ocell46.merge(True)
                ocell47.merge(True)
                ocell48.merge(True)
                ocell49.merge(True)
                ocell50.merge(True)
                ocell51.merge(True)
                ocell52.merge(True)
                ocell53.merge(True)
                ocell54.merge(True)
                ocell55.merge(True)
                ocell56.merge(True)
                ocell57.merge(True)
                ocell58.merge(True)
                ocell59.merge(True)
                ocell60.merge(True)
                ocell61.merge(True)
                ocell62.merge(True)
                ocell63.merge(True)
                ocell64.merge(True)
                ocell65.merge(True)
                ocell66.merge(True)
                ocell67.merge(True)
                ocell68.merge(True)
                ocell69.merge(True)
                ocell70.merge(True)
                ocell71.merge(True)
                ocell72.merge(True)
                ocell73.merge(True)
                ocell74.merge(True)
                ocell75.merge(True)
                ocell76.merge(True)
                ocell77.merge(True)
                ocell78.merge(True)
                ocell79.merge(True)
                ocell80.merge(True)
                ocell81.merge(True)
                ocell82.merge(True)
                ocell84.merge(True)
                ocell85.merge(True)
                ocell86.merge(True)
                ocell90.merge(True)
                ocell89.merge(True)
                ocell93.merge(True)
                ocell94.merge(True)
                ocell95.merge(True)
                ocell96.merge(True)
                ocell99.merge(True)
                ocell101.merge(True)
                ocell102.merge(True)
                ocell106.merge(True)
                ocell107.merge(True)
                ocell108.merge(True)
                ocell109.merge(True)
                ocell110.merge(True)
                ocell111.merge(True)
                ocell112.merge(True)
                ocell113.merge(True)
                ocell114.merge(True)
                ocell115.merge(True)
                ocell116.merge(True)
                ocell117.merge(True)
                ocell118.merge(True)
                ocell119.merge(True)
                ocell120.merge(True)
                ocell121.merge(True)
                ocell122.merge(True)
                ocell123.merge(True)
                ocell124.merge(True)
                ocell125.merge(True)
                ocell126.merge(True)
                ocell127.merge(True)
                ocell128.merge(True)
                'ocell129.merge(True)
                ocell130.merge(True)
                ocell131.merge(True)
                ocell132.merge(True)
                ocell133.merge(True)
                ocell134.merge(True)
                ocell135.merge(True)
                ocell136.merge(True)
                ocell137.merge(True)
                ocell138.merge(True)
                ocell139.merge(True)
                ocell140.merge(True)
                ocell141.merge(True)
                ocell142.merge(True)
                ocell143.merge(True)
                ocell144.merge(True)
                ocell145.merge(True)
                ocell146.merge(True)

                ocell148.merge(True)
                ocell149.merge(True)
                ocell150.merge(True)
                ocell151.merge(True)
                ocell152.merge(True)
                ocell153.merge(True)
                ocell154.merge(True)
                ocell155.merge(True)
                ocell156.merge(True)
                ocell157.merge(True)
                ocell158.merge(True)
                ocell159.merge(True)
                ocell160.merge(True)
                ocell161.merge(True)
                ocell162.merge(True)
                ocell163.merge(True)
                ocell164.merge(True)
                ocell165.merge(True)
                ocell166.merge(True)
                ocell167.merge(True)
                ocell168.merge(True)
                ocell169.merge(True)
                ocell170.merge(True)
                ocell171.merge(True)
                ocell172.merge(True)
                ocell173.merge(True)
                ocell174.merge(True)
                ocell175.merge(True)
                ocell176.merge(True)
                ocell177.merge(True)
                ocell178.merge(True)
                ocell179.merge(True)
                ocell210.merge(True)
                ocell211.merge(True)
                ocell212.merge(True)
                ocell213.merge(True)
                ocell214.merge(True)
                ocell215.merge(True)
                ocell216.merge(True)
                ocell217.merge(True)
                ocell199.merge(True)
                ocell200.merge(True)
                ocell201.merge(True)
                ocell203.merge(True)
                ocell204.merge(True)
                ocell205.merge(True)
                ocell206.merge(True)
                ocell207.merge(True)
                ocell208.merge(True)
                ocell209.merge(True)
                ocell196.merge(True)
                ocell197.merge(True)
                ocell195.merge(True)
                ocell198.merge(True)
                ocell183.merge(True)
                ocell184.merge(True)
                ocell185.merge(True)
                ocell186.merge(True)
                ocell187.merge(True)
                ocell188.merge(True)
                ocell189.merge(True)
                ocell190.merge(True)
                ocell191.merge(True)
                ocell192.merge(True)
                ocell193.merge(True)
                ocell194.merge(True)
                ocell147.merge(True)
                ocell83.merge(True)
                ocell87.merge(True)
                ocell88.merge(True)
                ocell91.merge(True)
                ocell92.merge(True)
                ocell180.merge(True)
                ocell181.merge(True)
                ocell97.merge(True)
                ocell98.merge(True)
                ocell100.merge(True)
                ocell103.merge(True)
                ocell104.merge(True)
                ocell105.merge(True)
                ocell182.merge(True)
                ocell202.merge(True)
                ocell218.merge(True)
                ocell219.merge(True)
                ocell220.merge(True)
                ocell221.merge(True)
                ocell222.merge(True)
                ocell223.merge(True)
                ocell224.merge(True)
                ocell225.merge(True)
                ocell226.merge(True)
                ocell227.merge(True)
                ocell228.merge(True)
                ocell229.merge(True)
                ocell230.merge(True)
                ocell231.merge(True)
                ocell232.merge(True)
                ocell233.merge(True)
                ocell234.merge(True)
                ocell235.merge(True)
                ocell236.merge(True)
                ocell237.merge(True)
                ocell238.merge(True)
                ocell239.merge(True)
                ocell240.merge(True)
                ocell241.merge(True)
                ocell242.merge(True)
                ocell243.merge(True)
                ocell244.merge(True)
                ocell245.merge(True)
                ocell246.merge(True)
                ocell247.merge(True)
                ocell248.merge(True)
                ocell249.merge(True)
                ocell250.merge(True)
                ocell251.merge(True)
                ocell252.merge(True)
                ocell253.merge(True)
                ocell254.merge(True)
                ocell255.merge(True)
                ocell256.merge(True)
                ocell257.merge(True)
                ocell258.merge(True)
                ocell259.merge(True)
                ocell260.merge(True)
                ocell261.merge(True)
                ocell262.merge(True)
                ocell263.merge(True)
                ocell264.merge(True)
                ocell265.merge(True)
                ocell266.merge(True)
                ocell267.merge(True)
                ocell268.merge(True)
                ocell269.merge(True)
                ocell270.merge(True)
                ocell271.merge(True)
                ocell272.merge(True)
                ocell273.merge(True)
                ocell274.merge(True)
                ocell129.merge(True)
                ocell275.merge(True)
                ocell276.merge(True)


                'Center alignment'
                ocell1 = oSheet.getCellrangeByname("I1:W1")
                ocell1.HoriJustify = 2
                ocell2 = oSheet.getCellrangeByname("I2:W2")
                ocell2.HoriJustify = 2
                ocell128 = oSheet.getCellrangeByname("B30:O30")
                ocell128.HoriJustify = 2
                ocell130 = oSheet.getCellrangeByname("B31:D32")
                ocell130.HoriJustify = 2
                ocell189 = oSheet.getCellrangeByname("B34:O34")
                ocell189.HoriJustify = 2
                ocell190 = oSheet.getCellrangeByname("B44:O44")
                ocell190.HoriJustify = 2
                ocell218 = oSheet.getCellrangeByname("R30:AE30")
                ocell218.HoriJustify = 2
                ocell239 = oSheet.getCellrangeByname("R41:AE41")
                ocell239.HoriJustify = 2
                ocell246 = oSheet.getCellrangeByname("R45:AE45")
                ocell246.HoriJustify = 2
                ocell253 = oSheet.getCellrangeByname("R49:AE49")
                ocell253.HoriJustify = 2
                ocell258 = oSheet.getCellrangeByname("R52:AE52")
                ocell258.HoriJustify = 2
                ocell263 = oSheet.getCellrangeByname("R55:AE55")
                ocell263.HoriJustify = 2
                ocell268 = oSheet.getCellrangeByname("B59:AE59")
                ocell268.HoriJustify = 2




                'for setting height and weight of text'

                ocell1 = oSheet.getCellrangeByname("I1")
                ocell2 = oSheet.getCellrangeByname("I2")
                ocell27 = oSheet.getCellrangeByname("E9")
                ocell272 = oSheet.getCellrangeByname("I9")
                ocell132 = oSheet.getCellrangeByname("M9")
                ocell29 = oSheet.getCellrangeByname("V9")
                ocell28 = oSheet.getCellrangeByname("S9")
                ocell30 = oSheet.getCellrangeByname("Y9")
                ocell128 = oSheet.getCellrangeByname("B30")
                ocell189 = oSheet.getCellrangeByname("B34")
                ocell190 = oSheet.getCellrangeByname("B44")
                ocell218 = oSheet.getCellRangeByname("R30")
                ocell239 = oSheet.getCellRangeByname("R41")
                ocell246 = oSheet.getCellRangeByname("R45")
                ocell253 = oSheet.getCellRangeByname("R49")
                ocell258 = oSheet.getCellRangeByname("R52")
                ocell263 = oSheet.getCellRangeByname("R55")
                ocell268 = oSheet.getCellRangeByname("B59")
                ocell131 = oSheet.getCellRangeByname("B9")
                ocell31 = oSheet.getCellRangeByname("B10")
                'ocell199 = oSheet.getCellRangeByname("J50")
                'ocell171 = oSheet.getCellRangeByname("J53")
                'ocell174 = oSheet.getCellRangeByname("J60")
                'ocell177 = oSheet.getCellRangeByname("J64")


                'setting BOLD '

                ocell1.CharWeight = 150
                ocell2.CharWeight = 150
                ocell27.CharWeight = 150
                ocell272.CharWeight = 150
                ocell132.CharWeight = 150
                ocell29.CharWeight = 150
                ocell28.CharWeight = 150
                ocell30.CharWeight = 150
                ocell128.CharWeight = 150
                ocell189.CharWeight = 150
                ocell190.CharWeight = 150
                ocell218.CharWeight = 150
                ocell239.CharWeight = 150
                ocell246.CharWeight = 150
                ocell253.CharWeight = 150
                ocell258.CharWeight = 150
                ocell263.CharWeight = 150
                ocell268.CharWeight = 150
                ocell131.CharWeight = 150
                ocell31.CharWeight = 150



                'setting font'
                ocell1.CharFontName = "Calibri"
                ocell2.CharFontName = "Calibri"
                ocell27.CharFontName = "Calibri"
                ocell272.CharFontName = "Calibri"
                ocell132.CharFontName = "Calibri"
                ocell29.CharFontName = "Calibri"
                ocell28.CharFontName = "Calibri"
                ocell30.CharFontName = "Calibri"
                ocell128.CharFontName = "Calibri"
                ocell189.CharFontName = "Calibri"
                ocell190.CharFontName = "Calibri"
                ocell218.CharFontName = "Calibri"
                ocell239.CharFontName = "Calibri"
                ocell246.CharFontName = "Calibri"
                ocell253.CharFontName = "Calibri"
                ocell258.CharFontName = "Calibri"
                ocell263.CharFontName = "Calibri"
                ocell268.CharFontName = "Calibri"
                ocell131.CharFontName = "Calibri"
                ocell31.CharFontName = "Calibri"
                'setting size'



                ocell1.CharHeight = 9
                ocell2.CharHeight = 9
                ocell27.CharHeight = 9
                ocell272.CharHeight = 9
                ocell132.CharHeight = 9
                ocell29.CharHeight = 9
                ocell28.CharHeight = 9
                ocell30.CharHeight = 9
                ocell128.CharHeight = 9
                ocell189.CharHeight = 9
                ocell190.CharHeight = 9
                ocell218.CharHeight = 9
                ocell239.CharHeight = 9
                ocell246.CharHeight = 9
                ocell253.CharHeight = 9
                ocell258.CharHeight = 9
                ocell263.CharHeight = 9
                ocell268.CharHeight = 9
                ocell131.CharHeight = 9
                ocell31.CharHeight = 9


                'set Font Blue'
                ocell8.CharColor = RGB(139, 0, 0)
                ocell9.CharColor = RGB(139, 0, 0)
                ocell10.CharColor = RGB(139, 0, 0)
                ocell19.CharColor = RGB(139, 0, 0)
                ocell20.CharColor = RGB(139, 0, 0)
                ocell21.CharColor = RGB(139, 0, 0)
                ocell22.CharColor = RGB(139, 0, 0)
                ocell23.CharColor = RGB(139, 0, 0)
                ocell24.CharColor = RGB(139, 0, 0)
                ocell25.CharColor = RGB(139, 0, 0)
                ocell26.CharColor = RGB(139, 0, 0)
                ocell75.CharColor = RGB(139, 0, 0)
                ocell76.CharColor = RGB(139, 0, 0)
                ocell77.CharColor = RGB(139, 0, 0)
                ocell78.CharColor = RGB(139, 0, 0)
                ocell79.CharColor = RGB(139, 0, 0)
                ocell80.CharColor = RGB(139, 0, 0)
                ocell81.CharColor = RGB(139, 0, 0)
                ocell82.CharColor = RGB(139, 0, 0)
                ocell83.CharColor = RGB(139, 0, 0)
                ocell84.CharColor = RGB(139, 0, 0)
                ocell85.CharColor = RGB(139, 0, 0)
                ocell86.CharColor = RGB(139, 0, 0)
                ocell87.CharColor = RGB(139, 0, 0)
                ocell88.CharColor = RGB(139, 0, 0)
                ocell89.CharColor = RGB(139, 0, 0)
                ocell90.CharColor = RGB(139, 0, 0)
                ocell91.CharColor = RGB(139, 0, 0)
                ocell92.CharColor = RGB(139, 0, 0)
                ocell93.CharColor = RGB(139, 0, 0)
                ocell180.CharColor = RGB(139, 0, 0)
                ocell181.CharColor = RGB(139, 0, 0)
                ocell133.CharColor = RGB(139, 0, 0)
                ocell94.CharColor = RGB(139, 0, 0)
                ocell95.CharColor = RGB(139, 0, 0)
                ocell96.CharColor = RGB(139, 0, 0)
                ocell97.CharColor = RGB(139, 0, 0)
                ocell98.CharColor = RGB(139, 0, 0)
                ocell99.CharColor = RGB(139, 0, 0)
                ocell100.CharColor = RGB(139, 0, 0)
                ocell101.CharColor = RGB(139, 0, 0)
                ocell102.CharColor = RGB(139, 0, 0)
                ocell134.CharColor = RGB(139, 0, 0)
                ocell135.CharColor = RGB(139, 0, 0)
                ocell136.CharColor = RGB(139, 0, 0)
                ocell137.CharColor = RGB(139, 0, 0)
                ocell138.CharColor = RGB(139, 0, 0)
                ocell139.CharColor = RGB(139, 0, 0)
                ocell103.CharColor = RGB(139, 0, 0)
                ocell104.CharColor = RGB(139, 0, 0)
                ocell105.CharColor = RGB(139, 0, 0)
                ocell182.CharColor = RGB(139, 0, 0)
                ocell202.CharColor = RGB(139, 0, 0)
                ocell150.CharColor = RGB(139, 0, 0)
                ocell151.CharColor = RGB(139, 0, 0)
                ocell152.CharColor = RGB(139, 0, 0)
                ocell153.CharColor = RGB(139, 0, 0)
                ocell192.CharColor = RGB(139, 0, 0)
                ocell193.CharColor = RGB(139, 0, 0)
                ocell194.CharColor = RGB(139, 0, 0)
                ocell116.CharColor = RGB(139, 0, 0)
                ocell117.CharColor = RGB(139, 0, 0)
                ocell118.CharColor = RGB(139, 0, 0)
                ocell119.CharColor = RGB(139, 0, 0)
                ocell120.CharColor = RGB(139, 0, 0)
                ocell121.CharColor = RGB(139, 0, 0)
                ocell122.CharColor = RGB(139, 0, 0)
                ocell123.CharColor = RGB(139, 0, 0)
                ocell124.CharColor = RGB(139, 0, 0)
                ocell125.CharColor = RGB(139, 0, 0)
                ocell196.CharColor = RGB(139, 0, 0)
                ocell197.CharColor = RGB(139, 0, 0)
                ocell126.CharColor = RGB(139, 0, 0)
                ocell127.CharColor = RGB(139, 0, 0)
                ocell143.CharColor = RGB(139, 0, 0)
                ocell144.CharColor = RGB(139, 0, 0)
                ocell145.CharColor = RGB(139, 0, 0)
                ocell146.CharColor = RGB(139, 0, 0)
                ocell161.CharColor = RGB(139, 0, 0)
                ocell162.CharColor = RGB(139, 0, 0)
                ocell163.CharColor = RGB(139, 0, 0)
                ocell199.CharColor = RGB(139, 0, 0)
                ocell200.CharColor = RGB(139, 0, 0)
                ocell201.CharColor = RGB(139, 0, 0)
                ocell203.CharColor = RGB(139, 0, 0)
                ocell204.CharColor = RGB(139, 0, 0)
                ocell164.CharColor = RGB(139, 0, 0)
                ocell165.CharColor = RGB(139, 0, 0)
                ocell166.CharColor = RGB(139, 0, 0)
                ocell167.CharColor = RGB(139, 0, 0)
                ocell168.CharColor = RGB(139, 0, 0)
                ocell206.CharColor = RGB(139, 0, 0)
                ocell207.CharColor = RGB(139, 0, 0)
                ocell208.CharColor = RGB(139, 0, 0)
                ocell209.CharColor = RGB(139, 0, 0)
                ocell210.CharColor = RGB(139, 0, 0)
                ocell211.CharColor = RGB(139, 0, 0)
                ocell212.CharColor = RGB(139, 0, 0)
                ocell213.CharColor = RGB(139, 0, 0)
                ocell214.CharColor = RGB(139, 0, 0)
                ocell215.CharColor = RGB(139, 0, 0)
                ocell216.CharColor = RGB(139, 0, 0)
                ocell217.CharColor = RGB(139, 0, 0)
                ocell229.CharColor = RGB(139, 0, 0)
                ocell230.CharColor = RGB(139, 0, 0)
                ocell231.CharColor = RGB(139, 0, 0)
                ocell232.CharColor = RGB(139, 0, 0)
                ocell233.CharColor = RGB(139, 0, 0)
                ocell234.CharColor = RGB(139, 0, 0)
                ocell235.CharColor = RGB(139, 0, 0)
                ocell236.CharColor = RGB(139, 0, 0)
                ocell237.CharColor = RGB(139, 0, 0)
                ocell238.CharColor = RGB(139, 0, 0)
                ocell243.CharColor = RGB(139, 0, 0)
                ocell244.CharColor = RGB(139, 0, 0)
                ocell245.CharColor = RGB(139, 0, 0)
                ocell250.CharColor = RGB(139, 0, 0)
                ocell251.CharColor = RGB(139, 0, 0)
                ocell252.CharColor = RGB(139, 0, 0)
                ocell256.CharColor = RGB(139, 0, 0)
                ocell257.CharColor = RGB(139, 0, 0)
                ocell261.CharColor = RGB(139, 0, 0)
                ocell262.CharColor = RGB(139, 0, 0)
                ocell268.CharColor = RGB(139, 0, 0)
                ocell269.CharColor = RGB(139, 0, 0)
                ocell270.CharColor = RGB(139, 0, 0)
                ocell271.CharColor = RGB(139, 0, 0)
                ocell274.CharColor = RGB(139, 0, 0)
                ocell129.CharColor = RGB(139, 0, 0)
                ocell276.charcolor = RGB(139, 0, 0)



                ORange.TableBorder = aBorder
                ORange1.TableBorder = aBorder1
                ORange2.TableBorder = aBorder2
                ORange3.TableBorder = aBorder3
                ORange4.TableBorder = aBorder4
                ORange5.TableBorder = aBorder5



            Next i
        Catch ex As Exception

            MsgBox("DrawDatasheet", ex.Message)

        End Try
        oDoc.storeAsURL("file:///" & PrintName.Replace("\", "/"), arg)
        oDoc.close(True)
    End Function



    Private Sub txtMedium_Click(sender As Object, e As EventArgs) Handles txtMedium.Click
        txtMedium.BackColor = Color.White
    End Sub


    Private Sub btnChart_Click(sender As Object, e As EventArgs) Handles btnChart.Click
        frmChart.ShowDialog()
    End Sub


    Private Sub KvCvChartToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles KvCvChartToolStripMenuItem.Click
        frmDocument.Show()
    End Sub


    '///////////////////////////////////Customer Details//////////////////////////////////
    Private Sub txtCustomerMain_Validated(sender As Object, e As EventArgs) Handles txtCustomerMain.Validated
        CustomerName = txtCustomerMain.Text
    End Sub

    Private Sub txtProjectMain_TextChanged(sender As Object, e As EventArgs) Handles txtProjectMain.TextChanged
        ProjectName = txtProjectMain.Text
    End Sub

    Private Sub txtTagNoMain_TextChanged(sender As Object, e As EventArgs) Handles txtTagNoMain.TextChanged
        TagNo = txtTagNoMain.Text
    End Sub


    Private Sub txtOfferNoMain_Validated(sender As Object, e As EventArgs) Handles txtOfferNoMain.Validated
        If IsNumeric(txtOfferNoMain.Text) Then
            OfferNo = txtOfferNoMain.Text
        Else
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2)
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2000)
            txtOfferNoMain.Focus()
        End If

    End Sub

    Private Sub txtQTYMain_Validated(sender As Object, e As EventArgs) Handles txtQTYMain.Validated
        If IsNumeric(txtQTYMain.Text) Then
            QTY = txtQTYMain.Text
        Else
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2)
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2000)
            txtQTYMain.Focus()
        End If
    End Sub

    Private Sub txtItemNoMain_Validated(sender As Object, e As EventArgs) Handles txtItemNoMain.Validated
        If IsNumeric(txtItemNoMain.Text) Then
            ItemNo = txtItemNoMain.Text
        Else
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2)
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2000)
            txtItemNoMain.Focus()
        End If
    End Sub

    Private Sub txtSheetNo_Validated(sender As Object, e As EventArgs) Handles txtSheetNo.Validated
        If IsNumeric(txtSheetNo.Text) Then
            SheetNo = txtSheetNo.Text
        Else
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2)
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2000)
            txtSheetNo.Focus()
        End If
    End Sub

    Private Sub txtEnggNameMain_Validated(sender As Object, e As EventArgs) Handles txtEnggNameMain.Validated
        SalesEnggName = txtEnggNameMain.Text
    End Sub

    Private Sub txtCustomerRefMain_Validated(sender As Object, e As EventArgs) Handles txtCustomerRefMain.Validated
        CustomerRef = txtCustomerRefMain.Text
    End Sub

    Private Sub txtRevisionNoMain_Validated(sender As Object, e As EventArgs) Handles txtRevisionNoMain.Validated
        If IsNumeric(txtRevisionNoMain.Text) Then
            Revision = txtRevisionNoMain.Text
        Else
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2)
            ToolTip1.Show("Only Numeric allowed", txtOfferNoMain, 2000)
            txtRevisionNoMain.Focus()
        End If
    End Sub

    'PRDS - -----------------------------------------------------------------------------
    Public Function CalcWaterFlowrate()
        Try
            Dim hs, hd, hcw As Single
            If Not InletWaterTemperature = 0 And Not InletWaterPressure = 0 Then

                If Not ToutPressureCase1 = 0 Then
                    hcw = FindEnthalpyLiquid(InletWaterTemperature + 273.15, InletWaterPressure)
                    'Case 1  
                    hs = h_pT(FinalInletPressureCase1, FinalInletTemperatureCase1)
                    hd = h_pT(FinalOutletPressureCase1, ToutPressureCase1)
                    '  W( hs-hd )/( hd – hcw )
                    WaterFlowRateCase1 = TempFlowrateCase1 * (hs - hd) / (hd - hcw)
                    txtWaterFlowCase1.Text = Math.Round(WaterFlowRateCase1, 2)
                Else
                    txtWaterFlowCase1.Text = ""
                End If

                'Case 2  
                If Not ToutPressureCase2 = 0 Then
                    hs = h_pT(FinalInletPressureCase2, FinalInletTemperatureCase2)
                    hd = h_pT(FinalOutletPressureCase2, ToutPressureCase2)
                    WaterFlowRateCase2 = TempFlowrateCase2 * (hs - hd) / (hd - hcw)
                    txtWaterFlowCase2.Text = Math.Round(WaterFlowRateCase2, 2)
                Else
                    txtWaterFlowCase2.Text = ""
                End If

                'Case 3  
                If Not ToutPressureCase3 = 0 Then
                    hs = h_pT(FinalInletPressureCase3, FinalInletTemperatureCase3)
                    hd = h_pT(FinaloutletPressureCase3, ToutPressureCase3)
                    WaterFlowRateCase3 = TempFlowrateCase3 * (hs - hd) / (hd - hcw)
                    txtWaterFlowCase3.Text = Math.Round(WaterFlowRateCase3, 2)
                Else
                    txtWaterFlowCase3.Text = ""
                End If
            End If

            '   Call AllCalculations()

        Catch ex As Exception
            MsgBox("CalcWaterFlowrate: ", ex.Message)
        End Try
    End Function



    Private Sub txtWaterTemperature_Validated(sender As Object, e As EventArgs) Handles txtWaterTemperature.Validated
        Try
            If Not txtWaterTemperature.Text = "" Then
                Call converttemperature(txtWaterTemperature, InletWaterTemperature, cmbTemperatureUnits)
                If Not txtWaterPressure.Text = "" Then
                    Call AllCalculations()
                End If
            End If

        Catch ex As Exception
            MsgBox("txtWaterTemperature_Validated: ", ex.Message)
        End Try
    End Sub

    Public Sub ToutPressureConversion(sender As Object)
        Try
            If (Not (txtTOutPressureCase1.Text) = "") And (sender Is txtTOutPressureCase1 Or sender Is cmbTemperatureUnits) Then
                Call converttemperature(txtTOutPressureCase1, ToutPressureCase1, cmbTemperatureUnits)
                PRDS_OutletTemperatureCase1 = ToutPressureCase1
            End If
            If (Not (txtTOutPressureCase2.Text) = "") And (sender Is txtTOutPressureCase2 Or sender Is cmbTemperatureUnits) Then
                Call converttemperature(txtTOutPressureCase2, ToutPressureCase2, cmbTemperatureUnits)
                PRDS_OutletTemperatureCase1 = ToutPressureCase2
            End If
            If (Not (txtTOutPressureCase3.Text) = "") And (sender Is txtTOutPressureCase3 Or sender Is cmbTemperatureUnits) Then
                Call converttemperature(txtTOutPressureCase3, ToutPressureCase3, cmbTemperatureUnits)
                PRDS_OutletTemperatureCase1 = ToutPressureCase3
            End If
        Catch ex As Exception
            MsgBox("ToutPressureConversion: ", ex.Message)
        End Try
    End Sub
    Private Sub txtTOutPressureCase1_Validated(sender As Object, e As EventArgs) Handles txtTOutPressureCase1.Validated, txtTOutPressureCase2.Validated, txtTOutPressureCase3.Validated
        Try
            Call ToutPressureConversion(sender)
            Call AllCalculations()
        Catch ex As Exception
            MsgBox("txtTOutPressureCase1: ", ex.Message)
        End Try
    End Sub


    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        My.Forms.frmActuatorTable.ShowDialog()
    End Sub



    Private Sub AboutToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles AboutToolStripMenuItem1.Click
        Try
            frmAbout.ShowDialog()
        Catch ex As Exception
            MsgBox("About Menu :", ex.Message)
        End Try
    End Sub

    Private Sub CRMToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CRMToolStripMenuItem.Click
        Try
            Call ConvertToCRM()
        Catch ex As Exception
            MsgBox("CRMToolStripMenuItem_Click: " & ex.Message)
        End Try

    End Sub

    Private Sub CSVToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CSVToolStripMenuItem.Click
        Call ConvertToCSV()         '  For CRM
    End Sub


    Private Sub NewTagToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewTagToolStripMenuItem.Click
        Try
            Database_LastRow = dt_OpenOffice.Rows.Count - 1
            HScrollBar_Records.Maximum = Database_LastRow
            If MsgBox("DO you want to create a new record?", MsgBoxStyle.YesNoCancel, "Alert!") = MsgBoxResult.Yes Then
                If Not XMLFilename = "" Then
                    Call SaveXLS(XMLFilename)


                    'NewxlWorkbook = APP.Workbooks.Open(XMLFilename)
                    'NewxlWorksheet = NewxlWorkbook.Worksheets("Records")
                    'With NewxlWorksheet
                    '    Database_LastRow = .Cells(.Rows.Count, 1).End(excel.XlDirection.xlUp).Row
                    'End With
                Else
                    Database_Rowno = 0
                    Database_LastRow = 0
                    HScrollBar_Records.Minimum = 0
                    HScrollBar_Records.Maximum = 0
                    ds_OpenOffice = New DataSet
                    dt_OpenOffice = New DataTable

                    dt_OpenOffice = ds_OpenOffice.Tables.Add("Records")
                    Call DatabaseFileHeader(XMLFilename)

                    'dttemp = New DataTable
                    'dttemp = ds_OpenOffice.Tables.Add(Database_Rowno)
                    'With dttemp

                    '    For x = 0 To 30 Step 1
                    '        .Columns.Add()
                    '    Next

                    '    For x = 0 To 64 Step 1
                    '        .Rows.Add(dttemp.NewRow())
                    '    Next
                    'End With
                End If

                Database_Rowno = Database_Rowno + 1
                'Database_LastRow = Database_LastRow + 1

                lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
                txtJumpToRecord.Text = Database_LastRow
                Resetall = True
                cmbFluidType.SelectedIndex = -1
                cmbFluidType.Text = "--Select--"
                Call Reset_All()
                Resetall = False
            End If
        Catch ex As Exception
            MsgBox("btnNewRecord:  " & ex.Message)
        End Try
    End Sub

    Private Sub CopyTagToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CopyTagToolStripMenuItem.Click
        Try
            If XMLFilename = "" Then
                MsgBox("Please Load Project File")
                Exit Sub
            End If


            Call SaveXLS(XMLFilename)
            frmCopyRecord.ShowDialog()
            Call Reset_All()
            Database_Rowno = DestinationRecord
            lblDatabaseRowNo.Text = Database_Rowno & "/" & Database_LastRow
            txtJumpToRecord.Text = Database_Rowno
            Call ReadXLS(XMLFilename)
        Catch ex As Exception
            MsgBox(" CopyToolStripMenuItem_Click : " & ex.Message)
        End Try
    End Sub

    Public Sub New()

        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.

    End Sub


    Private Sub txtWaterPressure_Validated(sender As Object, e As EventArgs) Handles txtWaterPressure.Validated
        Try
            If Not txtWaterPressure.Text = "" Then
                convertPressure(txtWaterPressure, InletWaterPressure, cmbPressureUnits)
                If Not txtWaterTemperature.Text = "" Then
                    Call AllCalculations()
                End If
            End If

        Catch ex As Exception
            MsgBox("txtWaterPressure_Validated: ", ex.Message)
        End Try
    End Sub


 
    Private Sub btnStop_Click(sender As Object, e As EventArgs) Handles btnStop.Click
        StopBaffleCalc = True
    End Sub

    
End Class
